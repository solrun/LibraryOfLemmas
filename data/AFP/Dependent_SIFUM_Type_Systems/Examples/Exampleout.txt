Loading theory "Draft.Preliminaries" (required by "Draft.ExampleMoreTemplates" via "Draft.Example" via "Draft.Compositionality" via "Draft.Security")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.567s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.897s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.364s elapsed time, 1.463s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
instantiation
  Sec :: complete_lattice
  Inf_Sec == Inf :: Sec set => Sec
  Sup_Sec == Sup :: Sec set => Sec
  bot_Sec == bot :: Sec
  sup_Sec == sup :: Sec => Sec => Sec
  top_Sec == top :: Sec
  inf_Sec == inf :: Sec => Sec => Sec
  less_eq_Sec == less_eq :: Sec => Sec => bool
  less_Sec == less :: Sec => Sec => bool
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_security
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes "sifum_security dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
### theory "Draft.Preliminaries"
### 0.830s elapsed time, 3.300s cpu time, 0.365s GC time
Loading theory "Draft.Language" (required by "Draft.ExampleMoreTemplates" via "Draft.Example")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.903s elapsed time, 3.435s cpu time, 0.757s GC time
Loading theory "Draft.Security" (required by "Draft.ExampleMoreTemplates" via "Draft.Example" via "Draft.Compositionality")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "mevalp"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.963s elapsed time, 3.671s cpu time, 0.761s GC time
Proofs for inductive predicate(s) "neval"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 106 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.Ex_binder" ("_position" c'') ("_position" c))
###         ("_position" n) ("_position" c''))
###       ("_applC" ("_position" meval_sched)
###         ("_cargs" ("_position" ns)
###           ("_cargs" ("_position" c'') ("_position" c')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.Ex_binder" ("_position" c'')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_abv" ("_position" c) ("_position" n)
###           ("_position" c''))
###         ("_applC" ("_position" meval_sched)
###           ("_cargs" ("_position" ns)
###             ("_cargs" ("_position" c'') ("_position" c'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.Ex_binder" ("_position" c'') ("_position" c))
###       ("_position" n)
###       ("\<^const>HOL.conj" ("_position" c'')
###         ("_applC" ("_position" meval_sched)
###           ("_cargs" ("_position" ns)
###             ("_cargs" ("_position" c'') ("_position" c'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.Ex_binder" ("_position" c'')
###       ("\<^const>local.meval_abv" ("_position" c) ("_position" n)
###         ("\<^const>HOL.conj" ("_position" c'')
###           ("_applC" ("_position" meval_sched)
###             ("_cargs" ("_position" ns)
###               ("_cargs" ("_position" c'') ("_position" c')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "mm_equivp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 217 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 48 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.Ex_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.implies"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" sched)
###                 ("_idts" ("_position" cms\<^sub>1')
###                   ("_position" mem\<^sub>1')))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.conj"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>local.meval_sched_abv"
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2)))
###                       ("_position" sched)
###                       ("\<^const>HOL.conj"
###                         ("_tuple" ("_position" cms\<^sub>2')
###                           ("_tuple_arg" ("_position" mem\<^sub>2')))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" map)
###                               ("_cargs" ("_position" snd)
###                                 ("_position" cms\<^sub>1')))
###                             ("_applC" ("_position" map)
###                               ("_cargs" ("_position" snd)
###                                 ("_position" cms\<^sub>2'))))
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>2')))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1')))
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" dma)
###                             ("_cargs" ("_position" mem\<^sub>1')
###                               ("_position" x)))
###                           ("_position" Low))
###                         ("\<^const>HOL.disj"
###                           ("\<^const>Set.member" ("_position" x)
###                             ("_position" \<C>))
###                           ("_All_less" ("_position" i)
###                             ("_applC" ("_position" length)
###                               ("_position" cms\<^sub>1'))
###                             ("\<^const>Set.not_member" ("_position" x)
###                               ("_applC" ("_position" snd)
###                                 ("_cargs"
###                                   ("\<^const>List.nth"
###                                     ("_position" cms\<^sub>1')
###                                     ("_position" i))
###                                   ("_position" AsmNoReadOrWrite)))))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" mem\<^sub>1')
###                           ("_position" x))
###                         ("_applC" ("_position" mem\<^sub>2')
###                           ("_position" x))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2)))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.implies"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2)))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" sched)
###                 ("_idts" ("_position" cms\<^sub>1')
###                   ("_position" mem\<^sub>1')))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>2') ("_position" mem\<^sub>2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2'))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))))))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.conj"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2'))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))))))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 1.921s elapsed time, 6.825s cpu time, 1.103s GC time
Loading theory "Draft.Templates" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.264s cpu time, 0.075s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExampleMoreTemplates")
### Ambiguous input (line 230 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 144 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2'))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("\<^const>HOL.implies"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>1')))
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>2'))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>2')))))
###             ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>Set.member" ("_position" x) ("_position" \<C>))
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1'))
###                     ("\<^const>Set.not_member" ("_position" x)
###                       ("_applC" ("_position" snd)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                             ("_position" i))
###                           ("_position" AsmNoReadOrWrite)))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                 ("_applC" ("_position" mem\<^sub>2')
###                   ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2'))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.implies"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" sched)
###         ("\<^const>HOL.implies"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.implies"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>local.meval_sched_abv"
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2)))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("\<^const>HOL.implies"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>1')))
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>2'))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>2')))))
###             ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>Set.member" ("_position" x) ("_position" \<C>))
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1'))
###                     ("\<^const>Set.not_member" ("_position" x)
###                       ("_applC" ("_position" snd)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                             ("_position" i))
###                           ("_position" AsmNoReadOrWrite)))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                 ("_applC" ("_position" mem\<^sub>2')
###                   ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.implies"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" sched)
###         ("\<^const>HOL.implies"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>local.meval_sched_abv"
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2)))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "loc_reachp"
  Proving monotonicity ...
### Ambiguous input (line 389 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 6 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>local.meval_sched_abv" ("_position" gc) ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms')))
###             ("_position" mdss)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms')
###           ("_idts" ("_position" mem') ("_position" sched)))
###         ("_position" gc))
###       ("_position" sched)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))
###           ("_position" mdss))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv" ("_position" gc)
###           ("_position" sched)
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem'))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))
###           ("_position" mdss))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms')
###             ("_idts" ("_position" mem') ("_position" sched)))
###           ("_position" gc))
###         ("_position" sched)
###         ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem'))))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms')))
###         ("_position" mdss)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>HOL.eq"
###         ("\<^const>local.meval_sched_abv" ("_position" gc)
###           ("_position" sched)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms')))))
###         ("_position" mdss)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.eq"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms')
###             ("_idts" ("_position" mem') ("_position" sched)))
###           ("_position" gc))
###         ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))))
###       ("_position" mdss))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sound_mode_use ::
    "('Com * (Mode => 'Var set)) list * ('Var => 'Val) => bool"
### theory "Draft.Security"
### 1.833s elapsed time, 5.929s cpu time, 1.286s GC time
Loading theory "Draft.Compositionality" (required by "Draft.ExampleMoreTemplates" via "Draft.Example")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.924s elapsed time, 2.962s cpu time, 0.931s GC time
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
Found termination order: "{}"
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
consts
  update_modes :: "'Var ModeUpd => (Mode => 'Var set) => Mode => 'Var set"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "eval\<^sub>w_simplep"
  Proving monotonicity ...
### Ambiguous input (line 538 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" globally_consistent)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>2) ("_position" x))
###                   ("_position" v')))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds) ("_position" x))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" dma)
###               ("_cargs"
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_position" mem\<^sub>1) ("_position" A))
###                 ("_position" x)))
###             ("_applC" ("_position" dma)
###               ("_cargs" ("_position" mem\<^sub>1) ("_position" x))))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" var_asm_not_written)
###               ("_cargs" ("_position" mds) ("_position" x))))))
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem\<^sub>1) ("_position" A))
###                   ("_position" x)))
###               ("_position" Low))
###             ("\<^const>HOL.disj"
###               ("\<^const>Set.not_member" ("_position" x)
###                 ("_applC" ("_position" mds) ("_position" AsmNoReadOrWrite)))
###               ("\<^const>Set.member" ("_position" x) ("_position" \<C>))))
###           ("\<^const>HOL.eq"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_position" mem\<^sub>1) ("_position" A))
###               ("_position" x))
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>2"
###                 ("_position" mem\<^sub>2) ("_position" A))
###               ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" globally_consistent)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>2) ("_position" x))
###                   ("_position" v')))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds) ("_position" x))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_applC" ("_position" dma) ("_position" mem\<^sub>1))
###                 ("_position" A))
###               ("_position" x))
###             ("_applC" ("_position" dma)
###               ("_cargs" ("_position" mem\<^sub>1) ("_position" x))))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" var_asm_not_written)
###               ("_cargs" ("_position" mds) ("_position" x))))))
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem\<^sub>1) ("_position" A))
###                   ("_position" x)))
###               ("_position" Low))
###             ("\<^const>HOL.disj"
###               ("\<^const>Set.not_member" ("_position" x)
###                 ("_applC" ("_position" mds) ("_position" AsmNoReadOrWrite)))
###               ("\<^const>Set.member" ("_position" x) ("_position" \<C>))))
###           ("\<^const>HOL.eq"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_position" mem\<^sub>1) ("_position" A))
###               ("_position" x))
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>2"
###                 ("_position" mem\<^sub>2) ("_position" A))
###               ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 573 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2))))
###       ("_position" k)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>local.meval_abv"
###       ("_tuple" ("_position" cms\<^sub>2)
###         ("_tuple_arg" ("_position" mem\<^sub>2)))
###       ("_position" k)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_abv"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###       ("_tuple" ("_position" cms\<^sub>2)
###         ("_tuple_arg" ("_position" mem\<^sub>2))))
###     ("_position" k)
###     ("\<^const>HOL.conj"
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2')))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###           ("_tuple" ("_position" cms\<^sub>2)
###             ("_tuple_arg" ("_position" mem\<^sub>2))))
###         ("_position" k)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2)))
###         ("_position" k)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2))))
###       ("_position" k)
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2'))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cxt_to_stmt ::
    "('Var, 'AExp, 'BExp) Stmt list
     => ('Var, 'AExp, 'BExp) Stmt => ('Var, 'AExp, 'BExp) Stmt"
Proofs for inductive predicate(s) "no_await"
  Proving monotonicity ...
Proofs for inductive predicate(s) "is_final"
  Proving monotonicity ...
### Ambiguous input (line 1910 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>1'')
###                 ("_position" mem\<^sub>1''))
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" ms)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" ns)
###               ("_tuple" ("_position" cms\<^sub>1'')
###                 ("_tuple_arg" ("_position" mem\<^sub>1''))))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" ms)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" ns)
###               ("_tuple" ("_position" cms\<^sub>1'')
###                 ("_tuple_arg" ("_position" mem\<^sub>1''))))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_position" ms)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval\<^sub>wp"
  Proving monotonicity ...
### Ambiguous input (line 1921 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1))))
###       ("_position" ns)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("\<^const>local.meval_abv"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_position" n)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1))))
###       ("_position" ns)
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>local.meval_abv"
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_abv"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1927 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("_position" ns)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("_position" ns)
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1937 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))
###             ("_position" sched)
###             ("\<^const>HOL.conj"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_applC" ("_position" makes_compatible)
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>1')
###                     ("_tuple_arg" ("_position" mem\<^sub>1')))
###                   ("_cargs"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("_position" mems')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))
###             ("_position" sched)
###             ("\<^const>HOL.conj"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_applC" ("_position" makes_compatible)
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>1')
###                     ("_tuple_arg" ("_position" mem\<^sub>1')))
###                   ("_cargs"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("_position" mems')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>2')
###         ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))))))
###     ("_position" sched)
###     ("\<^const>HOL.conj"
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2')))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2))))))
###       ("_position" sched)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))))
###         ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_applC" ("_position" makes_compatible)
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("_position" mems')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2))))
###           ("_position" sched)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_applC" ("_position" makes_compatible)
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>1')
###                   ("_tuple_arg" ("_position" mem\<^sub>1')))
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("_position" mems'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###                 ("_tuple" ("_position" cms\<^sub>2)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))))
###           ("_applC" ("_position" makes_compatible)
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("_position" mems')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("_applC" ("_position" makes_compatible)
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>1')
###                   ("_tuple_arg" ("_position" mem\<^sub>1')))
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("_position" mems'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>2')
###           ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sound_mode_use)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2)))))))
###       ("_position" sched)
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2'))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sound_mode_use)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))))
###         ("_position" sched)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Compositionality"
### 0.919s elapsed time, 1.989s cpu time, 0.184s GC time
### Ambiguous input (line 200 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.eval\<^sub>w_plus"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" eval\<^sub>B)
###           ("_cargs" ("_position" mem) ("_position" b)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))))
###       ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###         ("_position" mds') ("_position" mem')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj" ("_applC" ("_position" mem) ("_position" b))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("_cargs" ("_position" mem)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###                 ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                   ("_position" mds) ("_position" mem)))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("_applC" ("_position" no_await)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" c\<^sub>1)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("_applC" ("_position" is_final)
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>HOL.conj" ("_position" c\<^sub>2)
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Language"
### 3.502s elapsed time, 9.517s cpu time, 1.944s GC time
Loading theory "Draft.Example" (required by "Draft.ExampleMoreTemplates")
Found termination order: "{}"
### Missing patterns in function definition:
### !!a v va. ev\<^sub>B a (Neq v va) = undefined
Found termination order: "{}"
locale sifum_example
  fixes aexp_vars :: "aexp => addr set"
    and bexp_vars :: "bexp => addr set"
  assumes "sifum_example aexp_vars bexp_vars"
locale sifum_example
  fixes aexp_vars :: "aexp => addr set"
    and bexp_vars :: "bexp => addr set"
  assumes "sifum_example aexp_vars bexp_vars"
Proofs for inductive predicate(s) "inv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_invp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Rp"
  Proving monotonicity ...
### Ambiguous input (line 215 of "$AFP/Dependent_SIFUM_Type_Systems/Examples/Example.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" mem) ("_position" x))
###                       ("_position" v))
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" var_asm_not_written)
###                         ("_cargs" ("_position" mds') ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC"
###                           ("\<^const>Security.apply_adaptation\<^sub>1"
###                             ("_applC" ("_position" dma) ("_position" mem))
###                             ("_position" A))
###                           ("_position" x))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds')
###                             ("_position" x)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" inv)
###         ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###           ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2" ("_case1" ("_position" None) ("_position" True))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" mem) ("_position" x))
###                     ("_position" v))
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" var_asm_not_written)
###                       ("_cargs" ("_position" mds') ("_position" x))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC"
###                           ("\<^const>Security.apply_adaptation\<^sub>1"
###                             ("_applC" ("_position" dma) ("_position" mem))
###                             ("_position" A))
###                           ("_position" x))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds') ("_position" x)))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" inv)
###                     ("\<^const>local.conf_abv" ("_position" c')
###                       ("_position" mds')
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_position" mem) ("_position" A)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" var_asm_not_written)
###                     ("_cargs" ("_position" mds') ("_position" x))))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC"
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_applC" ("_position" dma) ("_position" mem))
###                   ("_position" A))
###                 ("_position" x))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inv)
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###               ("_position" A))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" mem) ("_position" x))
###                       ("_position" v))
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" var_asm_not_written)
###                         ("_cargs" ("_position" mds') ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC" ("_position" dma)
###                           ("_cargs"
###                             ("\<^const>Security.apply_adaptation\<^sub>1"
###                               ("_position" mem) ("_position" A))
###                             ("_position" x)))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds')
###                             ("_position" x)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" inv)
###         ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###           ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2" ("_case1" ("_position" None) ("_position" True))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" mem) ("_position" x))
###                     ("_position" v))
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" var_asm_not_written)
###                       ("_cargs" ("_position" mds') ("_position" x))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC" ("_position" dma)
###                           ("_cargs"
###                             ("\<^const>Security.apply_adaptation\<^sub>1"
###                               ("_position" mem) ("_position" A))
###                             ("_position" x)))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds') ("_position" x)))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" inv)
###                     ("\<^const>local.conf_abv" ("_position" c')
###                       ("_position" mds')
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_position" mem) ("_position" A)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" var_asm_not_written)
###                     ("_cargs" ("_position" mds') ("_position" x))))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x)))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inv)
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/Dependent_SIFUM_Type_Systems/Examples/Example.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal"
###           ("_applC"
###             ("\<^const>Security.apply_adaptation\<^sub>1"
###               ("_applC" ("_position" dma) ("_position" mem))
###               ("_position" A))
###             ("_position" x))
###           ("_applC" ("_position" dma)
###             ("_cargs" ("_position" mem) ("_position" x))))
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" var_asm_not_written)
###             ("_cargs" ("_position" mds') ("_position" x)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" buffer)
###         ("_applC" ("_position" mds') ("_position" AsmNoWrite))))
###     ("\<^const>HOL.Trueprop"
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" control_var))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("\<^const>HOL.eq"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem) ("_position" control_var))
###                 ("\<^const>Groups.zero_class.zero"))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" dma)
###             ("_cargs"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_position" mem) ("_position" A))
###               ("_position" x)))
###           ("_applC" ("_position" dma)
###             ("_cargs" ("_position" mem) ("_position" x))))
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" var_asm_not_written)
###             ("_cargs" ("_position" mds') ("_position" x)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" buffer)
###         ("_applC" ("_position" mds') ("_position" AsmNoWrite))))
###     ("\<^const>HOL.Trueprop"
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" control_var))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("\<^const>HOL.eq"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("\<^const>Groups.zero_class.zero"))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem) ("_position" control_var))
###                 ("\<^const>Groups.zero_class.zero"))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 249 of "$AFP/Dependent_SIFUM_Type_Systems/Examples/Example.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem))
###           ("_tuple_arg"
###             ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###               ("_position" mem'))))
###         ("_position" rel_inv)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" a) ("_position" b)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" a))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem') ("_position" x))
###                   ("_position" b)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x))))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.not_equal"
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_applC" ("_position" dma) ("_position" mem))
###                     ("_position" A))
###                   ("_position" x))
###                 ("_applC" ("_position" dma)
###                   ("_cargs" ("_position" mem) ("_position" x))))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x)))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC"
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_applC" ("_position" dma) ("_position" mem))
###                         ("_position" A))
###                       ("_position" x))
###                     ("_position" Low))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_applC" ("_position" mds')
###                         ("_position" AsmNoReadOrWrite)))
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))))
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_position" mem) ("_position" A))
###                     ("_position" x))
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A))
###                     ("_position" x))))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A)))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c')
###                     ("_position" mds')
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A)))))
###               ("_position" rel_inv))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem))
###           ("_tuple_arg"
###             ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###               ("_position" mem'))))
###         ("_position" rel_inv)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" a) ("_position" b)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" a))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem') ("_position" x))
###                   ("_position" b)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x))))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" dma)
###                   ("_cargs"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_position" mem) ("_position" A))
###                     ("_position" x)))
###                 ("_applC" ("_position" dma)
###                   ("_cargs" ("_position" mem) ("_position" x))))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x)))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC"
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_applC" ("_position" dma) ("_position" mem))
###                         ("_position" A))
###                       ("_position" x))
###                     ("_position" Low))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_applC" ("_position" mds')
###                         ("_position" AsmNoReadOrWrite)))
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))))
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_position" mem) ("_position" A))
###                     ("_position" x))
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A))
###                     ("_position" x))))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A)))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c')
###                     ("_position" mds')
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A)))))
###               ("_position" rel_inv))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem))
###           ("_tuple_arg"
###             ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###               ("_position" mem'))))
###         ("_position" rel_inv)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" a) ("_position" b)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" a))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem') ("_position" x))
###                   ("_position" b)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x))))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.not_equal"
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_applC" ("_position" dma) ("_position" mem))
###                     ("_position" A))
###                   ("_position" x))
###                 ("_applC" ("_position" dma)
###                   ("_cargs" ("_position" mem) ("_position" x))))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x)))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs"
###                         ("\<^const>Security.apply_adaptation\<^sub>1"
###                           ("_position" mem) ("_position" A))
###                         ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_applC" ("_position" mds')
###                         ("_position" AsmNoReadOrWrite)))
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))))
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_position" mem) ("_position" A))
###                     ("_position" x))
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A))
###                     ("_position" x))))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A)))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c')
###                     ("_position" mds')
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A)))))
###               ("_position" rel_inv))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem))
###           ("_tuple_arg"
###             ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###               ("_position" mem'))))
###         ("_position" rel_inv)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" a) ("_position" b)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" a))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem') ("_position" x))
###                   ("_position" b)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x))))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" dma)
###                   ("_cargs"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_position" mem) ("_position" A))
###                     ("_position" x)))
###                 ("_applC" ("_position" dma)
###                   ("_cargs" ("_position" mem) ("_position" x))))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds') ("_position" x)))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs"
###                         ("\<^const>Security.apply_adaptation\<^sub>1"
###                           ("_position" mem) ("_position" A))
###                         ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_applC" ("_position" mds')
###                         ("_position" AsmNoReadOrWrite)))
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))))
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_position" mem) ("_position" A))
###                     ("_position" x))
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A))
###                     ("_position" x))))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A)))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c')
###                     ("_position" mds')
###                     ("\<^const>Security.apply_adaptation\<^sub>2"
###                       ("_position" mem') ("_position" A)))))
###               ("_position" rel_inv))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Example"
### 2.626s elapsed time, 3.470s cpu time, 1.178s GC time
Loading theory "Draft.ExampleMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ExampleMoreTemplates"
### 0.468s elapsed time, 0.662s cpu time, 0.060s GC time
val it = (): unit
