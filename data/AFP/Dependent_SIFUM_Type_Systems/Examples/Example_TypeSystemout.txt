Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem" via "Draft.TypeSystemTactics" via "HOL-Eisbach.Eisbach_Tools")
Loading theory "Draft.Preliminaries" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem" via "Draft.TypeSystem" via "Draft.Compositionality" via "Draft.Security")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.478s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
structure Eisbach_Rule_Insts: sig end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.786s cpu time, 0.067s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.374s elapsed time, 1.460s cpu time, 0.103s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.480s elapsed time, 1.880s cpu time, 0.158s GC time
Loading theory "HOL-Eisbach.Eisbach_Tools" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem" via "Draft.TypeSystemTactics")
val try_map = fn: 'a Seq.seq -> 'a Seq.seq -> 'a Seq.seq
val uncurry_rule = fn: thm -> thm
val curry_rule = fn: thm -> thm
### theory "HOL-Eisbach.Eisbach_Tools"
### 0.028s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.ExtrEqs")
instantiation
  Sec :: complete_lattice
  Inf_Sec == Inf :: Sec set => Sec
  Sup_Sec == Sup :: Sec set => Sec
  bot_Sec == bot :: Sec
  sup_Sec == sup :: Sec => Sec => Sec
  top_Sec == top :: Sec
  inf_Sec == inf :: Sec => Sec => Sec
  less_eq_Sec == less_eq :: Sec => Sec => bool
  less_Sec == less :: Sec => Sec => bool
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_security
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes "sifum_security dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Preliminaries"
### 0.816s elapsed time, 3.240s cpu time, 0.285s GC time
Loading theory "Draft.Language" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem" via "Draft.TypeSystem")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.054s elapsed time, 4.031s cpu time, 0.758s GC time
Loading theory "Draft.Security" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem" via "Draft.TypeSystem" via "Draft.Compositionality")
Found termination order: "size <*mlex*> {}"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
Proofs for inductive predicate(s) "mevalp"
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.902s cpu time, 0.769s GC time
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "neval"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 106 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.Ex_binder" ("_position" c'') ("_position" c))
###         ("_position" n) ("_position" c''))
###       ("_applC" ("_position" meval_sched)
###         ("_cargs" ("_position" ns)
###           ("_cargs" ("_position" c'') ("_position" c')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.Ex_binder" ("_position" c'')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_abv" ("_position" c) ("_position" n)
###           ("_position" c''))
###         ("_applC" ("_position" meval_sched)
###           ("_cargs" ("_position" ns)
###             ("_cargs" ("_position" c'') ("_position" c'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.Ex_binder" ("_position" c'') ("_position" c))
###       ("_position" n)
###       ("\<^const>HOL.conj" ("_position" c'')
###         ("_applC" ("_position" meval_sched)
###           ("_cargs" ("_position" ns)
###             ("_cargs" ("_position" c'') ("_position" c'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.Ex_binder" ("_position" c'')
###       ("\<^const>local.meval_abv" ("_position" c) ("_position" n)
###         ("\<^const>HOL.conj" ("_position" c'')
###           ("_applC" ("_position" meval_sched)
###             ("_cargs" ("_position" ns)
###               ("_cargs" ("_position" c'') ("_position" c')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "mm_equivp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 217 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 48 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.Ex_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.implies"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" sched)
###                 ("_idts" ("_position" cms\<^sub>1')
###                   ("_position" mem\<^sub>1')))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.conj"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>local.meval_sched_abv"
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2)))
###                       ("_position" sched)
###                       ("\<^const>HOL.conj"
###                         ("_tuple" ("_position" cms\<^sub>2')
###                           ("_tuple_arg" ("_position" mem\<^sub>2')))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" map)
###                               ("_cargs" ("_position" snd)
###                                 ("_position" cms\<^sub>1')))
###                             ("_applC" ("_position" map)
###                               ("_cargs" ("_position" snd)
###                                 ("_position" cms\<^sub>2'))))
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>2')))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1')))
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" dma)
###                             ("_cargs" ("_position" mem\<^sub>1')
###                               ("_position" x)))
###                           ("_position" Low))
###                         ("\<^const>HOL.disj"
###                           ("\<^const>Set.member" ("_position" x)
###                             ("_position" \<C>))
###                           ("_All_less" ("_position" i)
###                             ("_applC" ("_position" length)
###                               ("_position" cms\<^sub>1'))
###                             ("\<^const>Set.not_member" ("_position" x)
###                               ("_applC" ("_position" snd)
###                                 ("_cargs"
###                                   ("\<^const>List.nth"
###                                     ("_position" cms\<^sub>1')
###                                     ("_position" i))
###                                   ("_position" AsmNoReadOrWrite)))))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" mem\<^sub>1')
###                           ("_position" x))
###                         ("_applC" ("_position" mem\<^sub>2')
###                           ("_position" x))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2)))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.implies"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2)))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" sched)
###                 ("_idts" ("_position" cms\<^sub>1')
###                   ("_position" mem\<^sub>1')))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>2') ("_position" mem\<^sub>2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2'))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))))))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.conj"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2'))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))))))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.342s elapsed time, 8.178s cpu time, 1.824s GC time
Loading theory "Draft.Templates" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.271s cpu time, 0.066s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Example_TypeSystemMoreTemplates")
### Ambiguous input (line 230 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 144 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2'))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("\<^const>HOL.implies"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>1')))
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>2'))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>2')))))
###             ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>Set.member" ("_position" x) ("_position" \<C>))
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1'))
###                     ("\<^const>Set.not_member" ("_position" x)
###                       ("_applC" ("_position" snd)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                             ("_position" i))
###                           ("_position" AsmNoReadOrWrite)))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                 ("_applC" ("_position" mem\<^sub>2')
###                   ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2'))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.implies"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" sched)
###         ("\<^const>HOL.implies"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.implies"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>local.meval_sched_abv"
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2)))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("\<^const>HOL.implies"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>1')))
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>2'))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>2')))))
###             ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>Set.member" ("_position" x) ("_position" \<C>))
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1'))
###                     ("\<^const>Set.not_member" ("_position" x)
###                       ("_applC" ("_position" snd)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                             ("_position" i))
###                           ("_position" AsmNoReadOrWrite)))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                 ("_applC" ("_position" mem\<^sub>2')
###                   ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.implies"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" sched)
###         ("\<^const>HOL.implies"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>local.meval_sched_abv"
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2)))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "loc_reachp"
  Proving monotonicity ...
### Ambiguous input (line 389 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 6 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>local.meval_sched_abv" ("_position" gc) ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms')))
###             ("_position" mdss)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms')
###           ("_idts" ("_position" mem') ("_position" sched)))
###         ("_position" gc))
###       ("_position" sched)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))
###           ("_position" mdss))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv" ("_position" gc)
###           ("_position" sched)
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem'))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))
###           ("_position" mdss))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms')
###             ("_idts" ("_position" mem') ("_position" sched)))
###           ("_position" gc))
###         ("_position" sched)
###         ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem'))))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms')))
###         ("_position" mdss)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>HOL.eq"
###         ("\<^const>local.meval_sched_abv" ("_position" gc)
###           ("_position" sched)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms')))))
###         ("_position" mdss)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.eq"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms')
###             ("_idts" ("_position" mem') ("_position" sched)))
###           ("_position" gc))
###         ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))))
###       ("_position" mdss))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sound_mode_use ::
    "('Com * (Mode => 'Var set)) list * ('Var => 'Val) => bool"
### theory "Draft.Security"
### 1.853s elapsed time, 5.927s cpu time, 1.310s GC time
Loading theory "Draft.Compositionality" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem" via "Draft.TypeSystem")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.656s elapsed time, 2.107s cpu time, 0.241s GC time
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
consts
  update_modes :: "'Var ModeUpd => (Mode => 'Var set) => Mode => 'Var set"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "eval\<^sub>w_simplep"
  Proving monotonicity ...
Found termination order: "{}"
consts
  cxt_to_stmt ::
    "('Var, 'AExp, 'BExp) Stmt list
     => ('Var, 'AExp, 'BExp) Stmt => ('Var, 'AExp, 'BExp) Stmt"
Proofs for inductive predicate(s) "no_await"
  Proving monotonicity ...
Proofs for inductive predicate(s) "is_final"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eval\<^sub>wp"
  Proving monotonicity ...
### Ambiguous input (line 538 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" globally_consistent)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>2) ("_position" x))
###                   ("_position" v')))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds) ("_position" x))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" dma)
###               ("_cargs"
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_position" mem\<^sub>1) ("_position" A))
###                 ("_position" x)))
###             ("_applC" ("_position" dma)
###               ("_cargs" ("_position" mem\<^sub>1) ("_position" x))))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" var_asm_not_written)
###               ("_cargs" ("_position" mds) ("_position" x))))))
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem\<^sub>1) ("_position" A))
###                   ("_position" x)))
###               ("_position" Low))
###             ("\<^const>HOL.disj"
###               ("\<^const>Set.not_member" ("_position" x)
###                 ("_applC" ("_position" mds) ("_position" AsmNoReadOrWrite)))
###               ("\<^const>Set.member" ("_position" x) ("_position" \<C>))))
###           ("\<^const>HOL.eq"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_position" mem\<^sub>1) ("_position" A))
###               ("_position" x))
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>2"
###                 ("_position" mem\<^sub>2) ("_position" A))
###               ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" globally_consistent)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>2) ("_position" x))
###                   ("_position" v')))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds) ("_position" x))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_applC" ("_position" dma) ("_position" mem\<^sub>1))
###                 ("_position" A))
###               ("_position" x))
###             ("_applC" ("_position" dma)
###               ("_cargs" ("_position" mem\<^sub>1) ("_position" x))))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" var_asm_not_written)
###               ("_cargs" ("_position" mds) ("_position" x))))))
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem\<^sub>1) ("_position" A))
###                   ("_position" x)))
###               ("_position" Low))
###             ("\<^const>HOL.disj"
###               ("\<^const>Set.not_member" ("_position" x)
###                 ("_applC" ("_position" mds) ("_position" AsmNoReadOrWrite)))
###               ("\<^const>Set.member" ("_position" x) ("_position" \<C>))))
###           ("\<^const>HOL.eq"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_position" mem\<^sub>1) ("_position" A))
###               ("_position" x))
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>2"
###                 ("_position" mem\<^sub>2) ("_position" A))
###               ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 573 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2))))
###       ("_position" k)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>local.meval_abv"
###       ("_tuple" ("_position" cms\<^sub>2)
###         ("_tuple_arg" ("_position" mem\<^sub>2)))
###       ("_position" k)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_abv"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###       ("_tuple" ("_position" cms\<^sub>2)
###         ("_tuple_arg" ("_position" mem\<^sub>2))))
###     ("_position" k)
###     ("\<^const>HOL.conj"
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2')))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###           ("_tuple" ("_position" cms\<^sub>2)
###             ("_tuple_arg" ("_position" mem\<^sub>2))))
###         ("_position" k)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2)))
###         ("_position" k)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2))))
###       ("_position" k)
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2'))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1910 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>1'')
###                 ("_position" mem\<^sub>1''))
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" ms)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" ns)
###               ("_tuple" ("_position" cms\<^sub>1'')
###                 ("_tuple_arg" ("_position" mem\<^sub>1''))))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" ms)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" ns)
###               ("_tuple" ("_position" cms\<^sub>1'')
###                 ("_tuple_arg" ("_position" mem\<^sub>1''))))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_position" ms)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1921 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1))))
###       ("_position" ns)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("\<^const>local.meval_abv"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_position" n)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1))))
###       ("_position" ns)
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>local.meval_abv"
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_abv"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1927 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("_position" ns)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("_position" ns)
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1937 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))
###             ("_position" sched)
###             ("\<^const>HOL.conj"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_applC" ("_position" makes_compatible)
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>1')
###                     ("_tuple_arg" ("_position" mem\<^sub>1')))
###                   ("_cargs"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("_position" mems')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))
###             ("_position" sched)
###             ("\<^const>HOL.conj"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_applC" ("_position" makes_compatible)
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>1')
###                     ("_tuple_arg" ("_position" mem\<^sub>1')))
###                   ("_cargs"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("_position" mems')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>2')
###         ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))))))
###     ("_position" sched)
###     ("\<^const>HOL.conj"
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2')))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2))))))
###       ("_position" sched)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))))
###         ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_applC" ("_position" makes_compatible)
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("_position" mems')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2))))
###           ("_position" sched)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_applC" ("_position" makes_compatible)
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>1')
###                   ("_tuple_arg" ("_position" mem\<^sub>1')))
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("_position" mems'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###                 ("_tuple" ("_position" cms\<^sub>2)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))))
###           ("_applC" ("_position" makes_compatible)
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("_position" mems')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("_applC" ("_position" makes_compatible)
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>1')
###                   ("_tuple_arg" ("_position" mem\<^sub>1')))
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("_position" mems'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>2')
###           ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sound_mode_use)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2)))))))
###       ("_position" sched)
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2'))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sound_mode_use)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))))
###         ("_position" sched)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Compositionality"
### 1.235s elapsed time, 3.019s cpu time, 1.143s GC time
### Ambiguous input (line 200 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.eval\<^sub>w_plus"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" eval\<^sub>B)
###           ("_cargs" ("_position" mem) ("_position" b)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))))
###       ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###         ("_position" mds') ("_position" mem')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj" ("_applC" ("_position" mem) ("_position" b))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("_cargs" ("_position" mem)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###                 ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                   ("_position" mds) ("_position" mem)))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("_applC" ("_position" no_await)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" c\<^sub>1)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("_applC" ("_position" is_final)
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>HOL.conj" ("_position" c\<^sub>2)
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Language"
### 4.030s elapsed time, 11.652s cpu time, 3.092s GC time
Loading theory "Draft.TypeSystem" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem")
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_types
  fixes ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and bexp_neg :: "'BExp => 'BExp"
    and assign_post :: "'BExp set => 'Var => 'AExp => 'BExp set"
    and dma_type :: "'Var => 'BExp set"
    and pred_False :: "'BExp"
  assumes
    "sifum_types ev\<^sub>A ev\<^sub>B aexp_vars bexp_vars dma \<C>_vars
      bexp_neg assign_post dma_type pred_False"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_types_assign
  fixes ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and bexp_neg :: "'BExp => 'BExp"
    and dma_type :: "'Var => 'BExp set"
    and pred_False :: "'BExp"
    and bexp_assign :: "'Var => 'AExp => 'BExp"
  assumes
    "sifum_types_assign ev\<^sub>A ev\<^sub>B aexp_vars bexp_vars dma
      \<C>_vars bexp_neg dma_type pred_False bexp_assign"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
### Ambiguous input (line 163 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Map.restrict_map" ("_position" P) ("_position" V))
###   ("_Coll" ("_position" e)
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member" ("_position" e) ("_position" P))
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" bexp_vars) ("_position" e))
###         ("_position" V)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>restrict_preds_to_vars" ("_position" P) ("_position" V))
###   ("_Coll" ("_position" e)
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member" ("_position" e) ("_position" P))
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" bexp_vars) ("_position" e))
###         ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale sifum_types_assign
  fixes ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and bexp_neg :: "'BExp => 'BExp"
    and dma_type :: "'Var => 'BExp set"
    and pred_False :: "'BExp"
    and bexp_assign :: "'Var => 'AExp => 'BExp"
  assumes
    "sifum_types_assign ev\<^sub>A ev\<^sub>B aexp_vars bexp_vars dma
      \<C>_vars bexp_neg dma_type pred_False bexp_assign"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_types
  fixes ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and bexp_neg :: "'BExp => 'BExp"
    and assign_post :: "'BExp set => 'Var => 'AExp => 'BExp set"
    and dma_type :: "'Var => 'BExp set"
    and pred_False :: "'BExp"
  assumes
    "sifum_types ev\<^sub>A ev\<^sub>B aexp_vars bexp_vars dma \<C>_vars
      bexp_neg assign_post dma_type pred_False"
  defines "\<C> == \<Union> (range \<C>_vars)"
### Ambiguous input (line 274 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_aexpr" ("_position" \<Gamma>) ("_position" e)
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("_applC" ("_position" image)
###         ("_cargs"
###           ("_lambda" ("_position" x)
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###           ("_applC" ("_position" aexp_vars) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>type_aexpr" ("_position" \<Gamma>) ("_position" e)
###       ("\<^const>Complete_Lattices.Union"))
###     ("_applC" ("_position" image)
###       ("_cargs"
###         ("_lambda" ("_position" x)
###           ("_applC" ("_position" to_total)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###         ("_applC" ("_position" aexp_vars) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_aexpr"
  Proving monotonicity ...
### Ambiguous input (line 295 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_bexpr" ("_position" \<Gamma>) ("_position" e)
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("_applC" ("_position" image)
###         ("_cargs"
###           ("_lambda" ("_position" x)
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###           ("_applC" ("_position" bexp_vars) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>type_bexpr" ("_position" \<Gamma>) ("_position" e)
###       ("\<^const>Complete_Lattices.Union"))
###     ("_applC" ("_position" image)
###       ("_cargs"
###         ("_lambda" ("_position" x)
###           ("_applC" ("_position" to_total)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###         ("_applC" ("_position" bexp_vars) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_bexpr"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 589 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>local.type_equiv" ("_position" \<Gamma>) ("_position" P)
###     ("_position" \<Gamma>'))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" dom) ("_position" \<Gamma>')))
###     ("_Ball" ("_position" x)
###       ("_applC" ("_position" dom) ("_position" \<Gamma>'))
###       ("_applC" ("_position" type_equiv)
###         ("_cargs"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" \<Gamma>) ("_position" x)))
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" \<Gamma>') ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>context_equiv" ("_position" \<Gamma>) ("_position" P)
###     ("_position" \<Gamma>'))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" dom) ("_position" \<Gamma>')))
###     ("_Ball" ("_position" x)
###       ("_applC" ("_position" dom) ("_position" \<Gamma>'))
###       ("_applC" ("_position" type_equiv)
###         ("_cargs"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" \<Gamma>) ("_position" x)))
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" \<Gamma>') ("_position" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "has_type"
  Proving monotonicity ...
### Ambiguous input (line 797 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_position" Low))
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 800 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_applC" ("_position" dma_type) ("_position" x))
###         ("_position" mem)))
###     ("_indexdefault")
###     ("_applC" ("_position" dma)
###       ("_cargs" ("_position" mem) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_applC" ("_position" dma_type) ("_position" x))
###         ("_position" mem)))
###     ("_applC" ("_position" dma)
###       ("_cargs" ("_position" mem) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 810 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" dom) ("_position" \<Gamma>))
###         ("_position" \<C>))
###       ("_indexdefault") ("\<^const>Set.empty")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" types_wellformed) ("_position" \<Gamma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" mem\<^sub>1)
###           ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" mem\<^sub>2)
###           ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>1))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" dom) ("_position" \<Gamma>))
###         ("_position" \<C>))
###       ("\<^const>Set.empty")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" types_wellformed) ("_position" \<Gamma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" mem\<^sub>1)
###           ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" mem\<^sub>2)
###           ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "\<R>\<^sub>1p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "\<R>\<^sub>3_aux"
  Proving monotonicity ...
Proofs for inductive predicate(s) "\<R>p"
  Proving monotonicity ...
### Ambiguous input (line 960 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>\<^sub>1_abv"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_position" \<Gamma>') ("_position" \<S>') ("_position" P')
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds)
###         ("_position" mem\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed"
###       ("_applC" ("_position" dma) ("_position" mem\<^sub>1))
###       ("_indexdefault")
###       ("_applC" ("_position" dma) ("_position" mem\<^sub>2)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>\<^sub>1_abv"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_position" \<Gamma>') ("_position" \<S>') ("_position" P')
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds)
###         ("_position" mem\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" dma) ("_position" mem\<^sub>1))
###       ("_applC" ("_position" dma) ("_position" mem\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 969 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>\<^sub>1_abv"
###       ("\<^const>local.conf_abv" ("_position" c) ("_position" mds)
###         ("_position" mem))
###       ("_position" \<Gamma>) ("_position" \<S>) ("_position" P)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" c) ("_position" c'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>\<^sub>1_abv"
###       ("\<^const>local.conf_abv" ("_position" c) ("_position" mds)
###         ("_position" mem))
###       ("_position" \<Gamma>) ("_position" \<S>) ("_position" P)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed" ("_position" c) ("_indexdefault")
###       ("_position" c'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 974 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>\<^sub>3_aux" ("_position" lc)
###       ("_position" \<Gamma>) ("_position" \<S>) ("_position" P)
###       ("_position" lc')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc)))
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>\<^sub>3_aux" ("_position" lc)
###       ("_position" \<Gamma>) ("_position" \<S>) ("_position" P)
###       ("_position" lc')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed"
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc)))
###       ("_indexdefault")
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 981 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>_abv" ("_position" lc) ("_position" \<Gamma>)
###       ("_position" \<S>) ("_position" P) ("_position" lc')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc)))
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>_abv" ("_position" lc) ("_position" \<Gamma>)
###       ("_position" \<S>) ("_position" P) ("_position" lc')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed"
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc)))
###       ("_indexdefault")
###       ("_applC" ("_position" fst)
###         ("_applC" ("_position" fst) ("_position" lc'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 995 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" x) ("_position" \<C>)
###     ("\<^const>local.tyenv_eq_indexed"
###       ("_applC" ("_position" mem\<^sub>1) ("_position" x)) ("_indexdefault")
###       ("_applC" ("_position" mem\<^sub>2) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" x) ("_position" \<C>)
###     ("\<^const>HOL.eq" ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###       ("_applC" ("_position" mem\<^sub>2) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 996 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>1)))
###     ("_indexdefault")
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>1)))
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1005 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" x)
###     ("_applC" ("_position" vars_of_type) ("_position" t))
###     ("\<^const>local.tyenv_eq_indexed"
###       ("_applC" ("_position" mem\<^sub>1) ("_position" x)) ("_indexdefault")
###       ("_applC" ("_position" mem\<^sub>2) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" x)
###     ("_applC" ("_position" vars_of_type) ("_position" t))
###     ("\<^const>HOL.eq" ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###       ("_applC" ("_position" mem\<^sub>2) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1006 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>1)))
###     ("_indexdefault")
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>1)))
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_position" t) ("_position" mem\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1065 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>_abv"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_position" \<Gamma>) ("_position" \<S>) ("_position" P)
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds')
###         ("_position" mem\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" mds) ("_position" mds'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>_abv"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_position" \<Gamma>) ("_position" \<S>) ("_position" P)
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds')
###         ("_position" mem\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed" ("_position" mds) ("_indexdefault")
###       ("_position" mds'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1264 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mds_consistent)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" \<S>) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mds_consistent)
###       ("_cargs"
###         ("_applC" ("_position" update_modes)
###           ("_cargs" ("_position" upd) ("_position" mds)))
###         ("_cargs"
###           ("\<^const>local.add_anno" ("_position" \<Gamma>)
###             ("_position" \<S>) ("_position" upd))
###           ("_cargs"
###             ("_applC" ("_position" add_anno_stable)
###               ("_cargs" ("_position" \<S>) ("_position" upd)))
###             ("\<^const>local.restrict_preds_to_vars" ("_position" P)
###               ("_Coll" ("_position" v)
###                 ("_applC" ("_position" stable)
###                   ("_cargs"
###                     ("_applC" ("_position" add_anno_stable)
###                       ("_cargs" ("_position" \<S>) ("_position" upd)))
###                     ("_position" v)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mds_consistent)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" \<S>) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mds_consistent)
###       ("_cargs"
###         ("_applC" ("_position" update_modes)
###           ("_cargs" ("_position" upd) ("_position" mds)))
###         ("_cargs"
###           ("\<^const>local.add_anno" ("_position" \<Gamma>)
###             ("_position" \<S>) ("_position" upd))
###           ("_cargs"
###             ("_applC" ("_position" add_anno_stable)
###               ("_cargs" ("_position" \<S>) ("_position" upd)))
###             ("\<^const>Map.restrict_map" ("_position" P)
###               ("_Coll" ("_position" v)
###                 ("_applC" ("_position" stable)
###                   ("_cargs"
###                     ("_applC" ("_position" add_anno_stable)
###                       ("_cargs" ("_position" \<S>) ("_position" upd)))
###                     ("_position" v)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1279 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Acq" ("_position" v)
###         ("_position" GuarNoReadOrWrite)))
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Acq" ("_position" v)
###         ("_position" GuarNoReadOrWrite)))
###     ("_indexdefault") ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1286 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Rel" ("_position" v)
###         ("_position" GuarNoReadOrWrite)))
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Rel" ("_position" v)
###         ("_position" GuarNoReadOrWrite)))
###     ("_indexdefault") ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1293 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Acq" ("_position" v)
###         ("_position" GuarNoWrite)))
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Acq" ("_position" v)
###         ("_position" GuarNoWrite)))
###     ("_indexdefault") ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1300 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Rel" ("_position" v)
###         ("_position" GuarNoWrite)))
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###       ("\<^const>Language.ModeUpd.Rel" ("_position" v)
###         ("_position" GuarNoWrite)))
###     ("_indexdefault") ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1307 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" x)
###     ("_applC" ("_position" dom)
###       ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###         ("\<^const>Language.ModeUpd.Rel" ("_position" v) ("_position" m))))
###     ("\<^const>local.tyenv_eq_indexed"
###       ("_applC"
###         ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###           ("\<^const>Language.ModeUpd.Rel" ("_position" v) ("_position" m)))
###         ("_position" x))
###       ("_indexdefault") ("_applC" ("_position" \<Gamma>) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" x)
###     ("_applC" ("_position" dom)
###       ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###         ("\<^const>Language.ModeUpd.Rel" ("_position" v) ("_position" m))))
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>local.add_anno" ("_position" \<Gamma>) ("_position" \<S>)
###           ("\<^const>Language.ModeUpd.Rel" ("_position" v) ("_position" m)))
###         ("_position" x))
###       ("_applC" ("_position" \<Gamma>) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1391 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" tyenv_wellformed)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" \<S>) ("_position" P))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" anno_type_stable)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" \<S>) ("_position" upd)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs"
###           ("_applC" ("_position" update_modes)
###             ("_cargs" ("_position" upd) ("_position" mds)))
###           ("_cargs"
###             ("\<^const>local.add_anno" ("_position" \<Gamma>)
###               ("_position" \<S>) ("_position" upd))
###             ("_cargs"
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))
###               ("\<^const>local.restrict_preds_to_vars" ("_position" P)
###                 ("_Coll" ("_position" v)
###                   ("_applC" ("_position" stable)
###                     ("_cargs"
###                       ("_applC" ("_position" add_anno_stable)
###                         ("_cargs" ("_position" \<S>) ("_position" upd)))
###                       ("_position" v))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" tyenv_wellformed)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" \<S>) ("_position" P))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" anno_type_stable)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" \<S>) ("_position" upd)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs"
###           ("_applC" ("_position" update_modes)
###             ("_cargs" ("_position" upd) ("_position" mds)))
###           ("_cargs"
###             ("\<^const>local.add_anno" ("_position" \<Gamma>)
###               ("_position" \<S>) ("_position" upd))
###             ("_cargs"
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))
###               ("\<^const>Map.restrict_map" ("_position" P)
###                 ("_Coll" ("_position" v)
###                   ("_applC" ("_position" stable)
###                     ("_cargs"
###                       ("_applC" ("_position" add_anno_stable)
###                         ("_cargs" ("_position" \<S>) ("_position" upd)))
###                       ("_position" v))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1406 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.has_type" ("_position" \<Gamma>) ("_position" \<S>)
###         ("_position" P) ("_position" c) ("_position" \<Gamma>')
###         ("_position" \<S>') ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" c) ("_indexdefault")
###           ("_position" Stop)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" context_equiv)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" P) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>')
###           ("_indexdefault") ("_position" \<S>))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.pred_entailment" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.All_binder" ("_position" mds)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_cargs" ("_position" \<S>) ("_position" P)))))
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>')
###                     ("_cargs" ("_position" \<S>) ("_position" P'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.has_type" ("_position" \<Gamma>) ("_position" \<S>)
###         ("_position" P) ("_position" c) ("_position" \<Gamma>')
###         ("_position" \<S>') ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" Stop)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" context_equiv)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" P) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>')
###           ("_indexdefault") ("_position" \<S>))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.pred_entailment" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.All_binder" ("_position" mds)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_cargs" ("_position" \<S>) ("_position" P)))))
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>')
###                     ("_cargs" ("_position" \<S>) ("_position" P'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.has_type" ("_position" \<Gamma>) ("_position" \<S>)
###         ("_position" P) ("_position" c) ("_position" \<Gamma>')
###         ("_position" \<S>') ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" c) ("_indexdefault")
###           ("_position" Stop)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" context_equiv)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" P) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" \<S>') ("_position" \<S>))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.pred_entailment" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.All_binder" ("_position" mds)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_cargs" ("_position" \<S>) ("_position" P)))))
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>')
###                     ("_cargs" ("_position" \<S>) ("_position" P'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.has_type" ("_position" \<Gamma>) ("_position" \<S>)
###         ("_position" P) ("_position" c) ("_position" \<Gamma>')
###         ("_position" \<S>') ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" Stop)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" context_equiv)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" P) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" \<S>') ("_position" \<S>))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.pred_entailment" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.All_binder" ("_position" mds)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_cargs" ("_position" \<S>) ("_position" P)))))
###               ("_applC" ("_position" tyenv_wellformed)
###                 ("_cargs" ("_position" mds)
###                   ("_cargs" ("_position" \<Gamma>')
###                     ("_cargs" ("_position" \<S>) ("_position" P'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1413 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed" ("_position" P') ("_indexdefault")
###       ("\<^const>Map.restrict_map" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed" ("_position" P') ("_indexdefault")
###       ("\<^const>local.restrict_preds_to_vars" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P')
###       ("\<^const>Map.restrict_map" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P')
###       ("\<^const>local.restrict_preds_to_vars" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" tyenv_wellformed)
###         ("_cargs" ("_position" mds)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" \<S>) ("_position" P'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1422 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed" ("_position" P') ("_indexdefault")
###       ("\<^const>Map.restrict_map" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" dom) ("_position" \<Gamma>))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>) ("_position" P))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs"
###               ("_MapUpd" ("_position" \<Gamma>)
###                 ("_maplet" ("_position" v) ("_position" t)))
###               ("_cargs" ("_position" \<S>) ("_position" P')))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed" ("_position" P') ("_indexdefault")
###       ("\<^const>local.restrict_preds_to_vars" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" dom) ("_position" \<Gamma>))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>) ("_position" P))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs"
###               ("_MapUpd" ("_position" \<Gamma>)
###                 ("_maplet" ("_position" v) ("_position" t)))
###               ("_cargs" ("_position" \<S>) ("_position" P')))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P')
###       ("\<^const>Map.restrict_map" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" dom) ("_position" \<Gamma>))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>) ("_position" P))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs"
###               ("_MapUpd" ("_position" \<Gamma>)
###                 ("_maplet" ("_position" v) ("_position" t)))
###               ("_cargs" ("_position" \<S>) ("_position" P')))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P')
###       ("\<^const>local.restrict_preds_to_vars" ("_position" P'')
###         ("_Coll" ("_position" v)
###           ("_applC" ("_position" stable)
###             ("_cargs" ("_position" \<S>) ("_position" v)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" dom) ("_position" \<Gamma>))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>) ("_position" P))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mds_consistent)
###           ("_cargs" ("_position" mds)
###             ("_cargs"
###               ("_MapUpd" ("_position" \<Gamma>)
###                 ("_maplet" ("_position" v) ("_position" t)))
###               ("_cargs" ("_position" \<S>) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1430 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" mem')
###     ("_Update" ("_position" mem)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" ev\<^sub>A)
###           ("_cargs" ("_position" mem) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed" ("_position" mem') ("_indexdefault")
###     ("_Update" ("_position" mem)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" ev\<^sub>A)
###           ("_cargs" ("_position" mem) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1431 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed" ("_position" P') ("_indexdefault")
###     ("\<^const>Map.restrict_map"
###       ("_applC" ("_position" assign_post)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" x) ("_position" e))))
###       ("_Coll" ("_position" v)
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" \<S>) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed" ("_position" P') ("_indexdefault")
###     ("\<^const>local.restrict_preds_to_vars"
###       ("_applC" ("_position" assign_post)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" x) ("_position" e))))
###       ("_Coll" ("_position" v)
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" \<S>) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" P')
###     ("\<^const>Map.restrict_map"
###       ("_applC" ("_position" assign_post)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" x) ("_position" e))))
###       ("_Coll" ("_position" v)
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" \<S>) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" P')
###     ("\<^const>local.restrict_preds_to_vars"
###       ("_applC" ("_position" assign_post)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" x) ("_position" e))))
###       ("_Coll" ("_position" v)
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" \<S>) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1452 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" P\<^sub>1)
###         ("_position" P\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<Gamma>\<^sub>2)
###           ("_indexdefault") ("_position" \<Gamma>\<^sub>1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" tyenv_wellformed)
###             ("_cargs" ("_position" mds)
###               ("_cargs" ("_position" \<Gamma>\<^sub>2)
###                 ("_cargs" ("_position" \<S>) ("_position" P\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" tyenv_wellformed)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" \<Gamma>\<^sub>1)
###           ("_cargs" ("_position" \<S>) ("_position" P\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" P\<^sub>1)
###         ("_position" P\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" \<Gamma>\<^sub>2)
###           ("_position" \<Gamma>\<^sub>1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" tyenv_wellformed)
###             ("_cargs" ("_position" mds)
###               ("_cargs" ("_position" \<Gamma>\<^sub>2)
###                 ("_cargs" ("_position" \<S>) ("_position" P\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" tyenv_wellformed)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" \<Gamma>\<^sub>1)
###           ("_cargs" ("_position" \<S>) ("_position" P\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1465 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>)
###           ("_indexdefault")
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>'')
###               ("_indexdefault")
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>Map.restrict_map" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" \<S>)
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>'')
###               ("_indexdefault")
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>Map.restrict_map" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>)
###           ("_indexdefault")
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" \<S>'')
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>Map.restrict_map" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" \<S>)
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" \<S>'')
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>Map.restrict_map" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>)
###           ("_indexdefault")
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>'')
###               ("_indexdefault")
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>local.restrict_preds_to_vars" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" \<S>)
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>'')
###               ("_indexdefault")
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>local.restrict_preds_to_vars" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>)
###           ("_indexdefault")
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" \<S>'')
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>local.restrict_preds_to_vars" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" \<S>)
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" \<S>'')
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.tyenv_eq_indexed" ("_position" P'')
###                   ("_indexdefault")
###                   ("\<^const>local.restrict_preds_to_vars" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>)
###           ("_indexdefault")
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>'')
###               ("_indexdefault")
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" P'')
###                   ("\<^const>Map.restrict_map" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>local.subtype"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" P'')
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>'') ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_position" P'') ("_position" mem))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" \<S>)
###           ("_tuple" ("_applC" ("_position" mds) ("_position" AsmNoWrite))
###             ("_tuple_arg"
###               ("_applC" ("_position" mds)
###                 ("_position" AsmNoReadOrWrite))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" anno_type_sec)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" \<S>)
###                 ("_cargs" ("_position" P) ("_position" upd))))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.tyenv_eq_indexed" ("_position" \<S>'')
###               ("_indexdefault")
###               ("_applC" ("_position" add_anno_stable)
###                 ("_cargs" ("_position" \<S>) ("_position" upd)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" p) ("_position" P)
###                 ("_Ball" ("_position" v)
###                   ("_applC" ("_position" bexp_vars) ("_position" p))
###                   ("_applC" ("_position" stable)
###                     ("_cargs" ("_position" \<S>) ("_position" v))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" P'')
###                   ("\<^const>Map.restrict_map" ("_position" P)
###                     ("_Coll" ("_position" v)
###                       ("_applC" ("_position" stable)
###                         ("_cargs" ("_position" \<S>'') ("_position" v)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" \<Gamma>'')
###                     ("\<^const>local.add_anno" ("_position" \<Gamma>)
###                       ("_position" \<S>) ("_position" upd))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs" ("_position" mds)
###                         ("_cargs" ("_position" \<Gamma>)
###                           ("_position" mem)))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" tyenv_sec)
###                       ("_cargs"
###                         ("_applC" ("_position" update_modes)
###                           ("_cargs" ("_position" upd) ("_position" mds)))
###                         ("_cargs" ("_position" \<Gamma>'')
###                           ("_position" mem))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1480 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" x) ("_position" \<C>)
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem) ("_position" x)) ("_indexdefault")
###         ("_applC" ("_position" mem') ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" types_wellformed) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem))))
###         ("_indexdefault")
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" x) ("_position" \<C>)
###       ("\<^const>HOL.eq" ("_applC" ("_position" mem) ("_position" x))
###         ("_applC" ("_position" mem') ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" types_wellformed) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem))))
###         ("_indexdefault")
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" x) ("_position" \<C>)
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem) ("_position" x)) ("_indexdefault")
###         ("_applC" ("_position" mem') ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" types_wellformed) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem))))
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" x) ("_position" \<C>)
###       ("\<^const>HOL.eq" ("_applC" ("_position" mem) ("_position" x))
###         ("_applC" ("_position" mem') ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" types_wellformed) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem))))
###         ("_applC" ("_position" tyenv_sec)
###           ("_cargs" ("_position" mds)
###             ("_cargs" ("_position" \<Gamma>) ("_position" mem'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2192 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" bisim_helper)
###       ("_cargs"
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###           ("_position" mem\<^sub>1))
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###           ("_position" mds\<^sub>2) ("_position" mem\<^sub>2))))
###     ("_indexdefault")
###     ("\<^const>local.low_mds_eq_indexed" ("_position" mem\<^sub>1)
###       ("_index" ("_position" mds)) ("_position" mem\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" bisim_helper)
###       ("_cargs"
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###           ("_position" mem\<^sub>1))
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###           ("_position" mds\<^sub>2) ("_position" mem\<^sub>2))))
###     ("\<^const>local.low_mds_eq_indexed" ("_position" mem\<^sub>1)
###       ("_index" ("_position" mds)) ("_position" mem\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 2206 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" dma)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" v)))
###     ("_position" Low)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" dma)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" v)))
###     ("_indexdefault") ("_position" Low)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2207 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" e)))
###     ("_indexdefault")
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>2) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" e)))
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>2) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2230 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" e)))
###     ("_indexdefault")
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>2) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" e)))
###     ("_applC" ("_position" ev\<^sub>A)
###       ("_cargs" ("_position" mem\<^sub>2) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2253 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" ev\<^sub>B)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" e)))
###     ("_indexdefault")
###     ("_applC" ("_position" ev\<^sub>B)
###       ("_cargs" ("_position" mem\<^sub>2) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ev\<^sub>B)
###       ("_cargs" ("_position" mem\<^sub>1) ("_position" e)))
###     ("_applC" ("_position" ev\<^sub>B)
###       ("_cargs" ("_position" mem\<^sub>2) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2941 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pred)
###       ("_cargs" ("_position" P) ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ev\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" e))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("\<^const>local.add_pred" ("_position" P)
###           ("_applC" ("_position" S) ("_position" e)) ("_position" mem))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pred)
###       ("_cargs" ("_position" P) ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ev\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" e))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.add_pred"
###         ("_applC" ("_position" pred) ("_position" P))
###         ("_applC" ("_position" S) ("_position" e)) ("_position" mem)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pred)
###       ("_cargs" ("_position" P) ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ev\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" e))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("\<^const>local.add_pred" ("_position" P) ("_position" S)
###           ("_applC" ("_position" e) ("_position" mem)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pred)
###       ("_cargs" ("_position" P) ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ev\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" e))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.add_pred"
###         ("_applC" ("_position" pred) ("_position" P)) ("_position" S)
###         ("_applC" ("_position" e) ("_position" mem))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pred)
###       ("_cargs" ("_position" P) ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ev\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" e))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>local.add_pred"
###           ("_applC" ("_position" pred) ("_position" P)) ("_position" S)
###           ("_position" e))
###         ("_position" mem)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pred)
###       ("_cargs" ("_position" P) ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ev\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" e))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs"
###           ("\<^const>local.add_pred" ("_position" P) ("_position" S)
###             ("_position" e))
###           ("_position" mem))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3825 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3843 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" type_max)
###           ("_cargs"
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###             ("_position" mem\<^sub>1)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3877 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_pattern" ("_position" c) ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" \<Gamma>')
###                   ("_idts" ("_position" \<S>') ("_position" P')))
###                 ("\<^const>local.has_type"
###                   ("_applC" ("_position" \<Gamma>_of_mds) ("_position" m))
###                   ("_applC" ("_position" \<S>_of_mds) ("_position" m))
###                   ("\<^const>Set.empty") ("_position" c)
###                   ("_position" \<Gamma>') ("_position" \<S>')
###                   ("_position" P')))
###               ("_applC" ("_position" mds_yields_stable_types)
###                 ("_position" m))))
###           ("_position" cs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" mem)
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cs)
###               ("_tuple_arg" ("_position" mem))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_global) ("_position" cs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_pattern" ("_position" c) ("_position" m))
###             ("\<^const>HOL.conj"
###               ("_tuple"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" \<Gamma>')
###                     ("_idts" ("_position" \<S>') ("_position" P')))
###                   ("\<^fixed>type_global"
###                     ("_applC" ("_position" \<Gamma>_of_mds)
###                       ("_position" m))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" \<S>_of_mds) ("_position" m))
###                   ("_tuple_args"
###                     ("_applC" ("\<^const>Set.empty")
###                       ("_cargs" ("_Finset" ("_position" c))
###                         ("_position" \<Gamma>')))
###                     ("_tuple_args" ("_position" \<S>')
###                       ("_tuple_arg" ("_position" P'))))))
###               ("_applC" ("_position" mds_yields_stable_types)
###                 ("_position" m))))
###           ("_position" cs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" mem)
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cs)
###               ("_tuple_arg" ("_position" mem))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_global) ("_position" cs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_global"
  Proving monotonicity ...
### Ambiguous input (line 3898 of "$AFP/Dependent_SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_Finset" ("_position" pred_False)) ("_position" mem)))
###     ("_position" High)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" type_max)
###       ("_cargs" ("_Finset" ("_position" pred_False)) ("_position" mem)))
###     ("_indexdefault") ("_position" High)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.TypeSystem"
### 3.785s elapsed time, 4.105s cpu time, 0.357s GC time
Loading theory "Draft.TypeSystemTactics" (required by "Draft.Example_TypeSystemMoreTemplates" via "Draft.Example_TypeSystem")
structure Data: PROOF_DATA
locale sifum_types_assign
  fixes ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and bexp_neg :: "'BExp => 'BExp"
    and dma_type :: "'Var => 'BExp set"
    and pred_False :: "'BExp"
    and bexp_assign :: "'Var => 'AExp => 'BExp"
  assumes
    "sifum_types_assign ev\<^sub>A ev\<^sub>B aexp_vars bexp_vars dma
      \<C>_vars bexp_neg dma_type pred_False bexp_assign"
  defines "\<C> == \<Union> (range \<C>_vars)"
### theory "Draft.TypeSystemTactics"
### 1.007s elapsed time, 1.046s cpu time, 0.046s GC time
Loading theory "Draft.Example_TypeSystem" (required by "Draft.Example_TypeSystemMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale sifum_example
  assumes "sifum_example"
Found termination order: "{}"
locale sifum_example
  assumes "sifum_example"
### theory "Draft.Example_TypeSystem"
### 3.136s elapsed time, 3.422s cpu time, 0.368s GC time
Loading theory "Draft.Example_TypeSystemMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Example_TypeSystemMoreTemplates"
### 0.402s elapsed time, 0.535s cpu time, 0.000s GC time
val it = (): unit
