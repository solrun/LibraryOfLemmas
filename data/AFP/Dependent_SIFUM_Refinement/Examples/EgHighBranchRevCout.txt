Loading theory "Dependent_SIFUM_Type_Systems.Preliminaries" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.EgHighBranchRevC" via "Dependent_SIFUM_Type_Systems.Compositionality" via "Dependent_SIFUM_Type_Systems.Security")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.EgHighBranchRevC" via "HOL-Eisbach.Eisbach_Tools")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.483s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
structure Eisbach_Rule_Insts: sig end
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.281s cpu time, 0.106s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.793s cpu time, 0.063s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.430s elapsed time, 1.677s cpu time, 0.152s GC time
Loading theory "HOL-Eisbach.Eisbach_Tools" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.EgHighBranchRevC")
val try_map = fn: 'a Seq.seq -> 'a Seq.seq -> 'a Seq.seq
val uncurry_rule = fn: thm -> thm
val curry_rule = fn: thm -> thm
### theory "HOL-Eisbach.Eisbach_Tools"
### 0.037s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.ExtrEqs")
instantiation
  Sec :: complete_lattice
  Inf_Sec == Inf :: Sec set => Sec
  Sup_Sec == Sup :: Sec set => Sec
  bot_Sec == bot :: Sec
  sup_Sec == sup :: Sec => Sec => Sec
  top_Sec == top :: Sec
  inf_Sec == inf :: Sec => Sec => Sec
  less_eq_Sec == less_eq :: Sec => Sec => bool
  less_Sec == less :: Sec => Sec => bool
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_security
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes "sifum_security dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
consts
  snth :: "'a stream => nat => 'a"
### theory "Dependent_SIFUM_Type_Systems.Preliminaries"
### 0.854s elapsed time, 3.392s cpu time, 0.283s GC time
Loading theory "Dependent_SIFUM_Type_Systems.Language" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.EgHighBranchRevC")
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.138s elapsed time, 4.329s cpu time, 1.032s GC time
Loading theory "Dependent_SIFUM_Type_Systems.Security" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.EgHighBranchRevC" via "Dependent_SIFUM_Type_Systems.Compositionality")
Found termination order: "size <*mlex*> {}"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
Proofs for inductive predicate(s) "mevalp"
### theory "HOL-Library.BigO"
### 1.099s elapsed time, 4.168s cpu time, 1.028s GC time
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "neval"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 106 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.Ex_binder" ("_position" c'') ("_position" c))
###         ("_position" n) ("_position" c''))
###       ("_applC" ("_position" meval_sched)
###         ("_cargs" ("_position" ns)
###           ("_cargs" ("_position" c'') ("_position" c')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.Ex_binder" ("_position" c'')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_abv" ("_position" c) ("_position" n)
###           ("_position" c''))
###         ("_applC" ("_position" meval_sched)
###           ("_cargs" ("_position" ns)
###             ("_cargs" ("_position" c'') ("_position" c'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.Ex_binder" ("_position" c'') ("_position" c))
###       ("_position" n)
###       ("\<^const>HOL.conj" ("_position" c'')
###         ("_applC" ("_position" meval_sched)
###           ("_cargs" ("_position" ns)
###             ("_cargs" ("_position" c'') ("_position" c'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" meval_sched)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" n) ("_position" ns))
###         ("_cargs" ("_position" c) ("_position" c'))))
###     ("\<^const>HOL.Ex_binder" ("_position" c'')
###       ("\<^const>local.meval_abv" ("_position" c) ("_position" n)
###         ("\<^const>HOL.conj" ("_position" c'')
###           ("_applC" ("_position" meval_sched)
###             ("_cargs" ("_position" ns)
###               ("_cargs" ("_position" c'') ("_position" c')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "mm_equivp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 217 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 48 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.Ex_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.implies"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" sched)
###                 ("_idts" ("_position" cms\<^sub>1')
###                   ("_position" mem\<^sub>1')))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.conj"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>local.meval_sched_abv"
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2)))
###                       ("_position" sched)
###                       ("\<^const>HOL.conj"
###                         ("_tuple" ("_position" cms\<^sub>2')
###                           ("_tuple_arg" ("_position" mem\<^sub>2')))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" map)
###                               ("_cargs" ("_position" snd)
###                                 ("_position" cms\<^sub>1')))
###                             ("_applC" ("_position" map)
###                               ("_cargs" ("_position" snd)
###                                 ("_position" cms\<^sub>2'))))
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>2')))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1')))
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" dma)
###                             ("_cargs" ("_position" mem\<^sub>1')
###                               ("_position" x)))
###                           ("_position" Low))
###                         ("\<^const>HOL.disj"
###                           ("\<^const>Set.member" ("_position" x)
###                             ("_position" \<C>))
###                           ("_All_less" ("_position" i)
###                             ("_applC" ("_position" length)
###                               ("_position" cms\<^sub>1'))
###                             ("\<^const>Set.not_member" ("_position" x)
###                               ("_applC" ("_position" snd)
###                                 ("_cargs"
###                                   ("\<^const>List.nth"
###                                     ("_position" cms\<^sub>1')
###                                     ("_position" i))
###                                   ("_position" AsmNoReadOrWrite)))))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" mem\<^sub>1')
###                           ("_position" x))
###                         ("_applC" ("_position" mem\<^sub>2')
###                           ("_position" x))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2)))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.implies"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2)))
###                     ("_position" sched)
###                     ("\<^const>HOL.conj"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" sched)
###                 ("_idts" ("_position" cms\<^sub>1')
###                   ("_position" mem\<^sub>1')))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>2') ("_position" mem\<^sub>2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.conj"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2'))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))))))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###             ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###               ("_position" mem\<^sub>2))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.conj"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2'))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))))))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.207s elapsed time, 7.723s cpu time, 1.434s GC time
Loading theory "Draft.Templates" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.083s elapsed time, 0.291s cpu time, 0.076s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EgHighBranchRevCMoreTemplates")
### Ambiguous input (line 230 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 144 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2'))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("\<^const>HOL.implies"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>1')))
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>2'))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>2')))))
###             ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>Set.member" ("_position" x) ("_position" \<C>))
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1'))
###                     ("\<^const>Set.not_member" ("_position" x)
###                       ("_applC" ("_position" snd)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                             ("_position" i))
###                           ("_position" AsmNoReadOrWrite)))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                 ("_applC" ("_position" mem\<^sub>2')
###                   ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2'))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.implies"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" sched)
###         ("\<^const>HOL.implies"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.implies"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("_tuple" ("_position" cmds)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))
###             ("_position" sched)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" sched)
###             ("\<^const>HOL.implies"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.meval_sched_abv"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" cms\<^sub>2')
###                     ("_position" mem\<^sub>2'))
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2))))
###                 ("_position" sched)
###                 ("\<^const>HOL.implies"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>1')))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" snd)
###                           ("_position" cms\<^sub>2'))))
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>2')))))
###               ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" dma)
###                       ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                     ("_position" Low))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>Set.member" ("_position" x)
###                       ("_position" \<C>))
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>1'))
###                       ("\<^const>Set.not_member" ("_position" x)
###                         ("_applC" ("_position" snd)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                               ("_position" i))
###                             ("_position" AsmNoReadOrWrite)))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                   ("_applC" ("_position" mem\<^sub>2')
###                     ("_position" x)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" sched)
###               ("_idts" ("_position" cms\<^sub>1')
###                 ("_position" mem\<^sub>1')))
###             ("_tuple" ("_position" cmds)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>local.meval_sched_abv"
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2)))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("\<^const>HOL.implies"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>1')))
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" snd)
###                         ("_position" cms\<^sub>2'))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>2')))))
###             ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs" ("_position" mem\<^sub>1') ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.disj"
###                   ("\<^const>Set.member" ("_position" x) ("_position" \<C>))
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length)
###                       ("_position" cms\<^sub>1'))
###                     ("\<^const>Set.not_member" ("_position" x)
###                       ("_applC" ("_position" snd)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" cms\<^sub>1')
###                             ("_position" i))
###                           ("_position" AsmNoReadOrWrite)))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                 ("_applC" ("_position" mem\<^sub>2')
###                   ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" sched)
###           ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" sched)
###           ("\<^const>HOL.implies"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" cms\<^sub>2')
###                   ("_position" mem\<^sub>2'))
###                 ("\<^const>local.meval_sched_abv"
###                   ("_tuple" ("_position" cmds)
###                     ("_tuple_arg" ("_position" mem\<^sub>2)))
###                   ("_position" sched)
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>local.meval_sched_abv"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" cms\<^sub>2')
###                         ("_position" mem\<^sub>2'))
###                       ("_tuple" ("_position" cmds)
###                         ("_tuple_arg" ("_position" mem\<^sub>2))))
###                     ("_position" sched)
###                     ("\<^const>HOL.implies"
###                       ("_tuple" ("_position" cms\<^sub>2')
###                         ("_tuple_arg" ("_position" mem\<^sub>2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>1')))
###                           ("_applC" ("_position" map)
###                             ("_cargs" ("_position" snd)
###                               ("_position" cms\<^sub>2'))))
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>2')))))
###                   ("_applC" ("_position" length)
###                     ("_position" cms\<^sub>1')))
###                 ("\<^const>HOL.All_binder" ("_position" x)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem\<^sub>1')
###                             ("_position" x)))
###                         ("_position" Low))
###                       ("\<^const>HOL.disj"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" \<C>))
###                         ("_All_less" ("_position" i)
###                           ("_applC" ("_position" length)
###                             ("_position" cms\<^sub>1'))
###                           ("\<^const>Set.not_member" ("_position" x)
###                             ("_applC" ("_position" snd)
###                               ("_cargs"
###                                 ("\<^const>List.nth"
###                                   ("_position" cms\<^sub>1')
###                                   ("_position" i))
###                                 ("_position" AsmNoReadOrWrite)))))))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                       ("_applC" ("_position" mem\<^sub>2')
###                         ("_position" x)))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prog_sifum_secure_cont) ("_position" cmds))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" INIT) ("_position" mem\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" INIT) ("_position" mem\<^sub>2))
###           ("\<^const>local.low_eq" ("_position" mem\<^sub>1)
###             ("_position" mem\<^sub>2))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" sched)
###             ("_idts" ("_position" cms\<^sub>1') ("_position" mem\<^sub>1')))
###           ("_tuple" ("_position" cmds)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" sched)
###         ("\<^const>HOL.implies"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>2')
###                 ("_position" mem\<^sub>2'))
###               ("\<^const>local.meval_sched_abv"
###                 ("_tuple" ("_position" cmds)
###                   ("_tuple_arg" ("_position" mem\<^sub>2)))
###                 ("_position" sched)
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>local.meval_sched_abv"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" cms\<^sub>2')
###                       ("_position" mem\<^sub>2'))
###                     ("_tuple" ("_position" cmds)
###                       ("_tuple_arg" ("_position" mem\<^sub>2))))
###                   ("_position" sched)
###                   ("\<^const>HOL.implies"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>1')))
###                         ("_applC" ("_position" map)
###                           ("_cargs" ("_position" snd)
###                             ("_position" cms\<^sub>2'))))
###                       ("_applC" ("_position" length)
###                         ("_position" cms\<^sub>2')))))
###                 ("_applC" ("_position" length) ("_position" cms\<^sub>1')))
###               ("\<^const>HOL.All_binder" ("_position" x)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" dma)
###                         ("_cargs" ("_position" mem\<^sub>1')
###                           ("_position" x)))
###                       ("_position" Low))
###                     ("\<^const>HOL.disj"
###                       ("\<^const>Set.member" ("_position" x)
###                         ("_position" \<C>))
###                       ("_All_less" ("_position" i)
###                         ("_applC" ("_position" length)
###                           ("_position" cms\<^sub>1'))
###                         ("\<^const>Set.not_member" ("_position" x)
###                           ("_applC" ("_position" snd)
###                             ("_cargs"
###                               ("\<^const>List.nth"
###                                 ("_position" cms\<^sub>1') ("_position" i))
###                               ("_position" AsmNoReadOrWrite)))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" mem\<^sub>1') ("_position" x))
###                     ("_applC" ("_position" mem\<^sub>2')
###                       ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "loc_reachp"
  Proving monotonicity ...
### Ambiguous input (line 389 of "$AFP/Dependent_SIFUM_Type_Systems/Security.thy") produces 6 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>local.meval_sched_abv" ("_position" gc) ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms')))
###             ("_position" mdss)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms')
###           ("_idts" ("_position" mem') ("_position" sched)))
###         ("_position" gc))
###       ("_position" sched)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))
###           ("_position" mdss))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv" ("_position" gc)
###           ("_position" sched)
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem'))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))
###           ("_position" mdss))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms')
###             ("_idts" ("_position" mem') ("_position" sched)))
###           ("_position" gc))
###         ("_position" sched)
###         ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem'))))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms')))
###         ("_position" mdss)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms')
###         ("_idts" ("_position" mem') ("_position" sched)))
###       ("\<^const>HOL.eq"
###         ("\<^const>local.meval_sched_abv" ("_position" gc)
###           ("_position" sched)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms')))))
###         ("_position" mdss)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" reachable_mode_states) ("_position" gc))
###   ("_Coll" ("_position" mdss)
###     ("\<^const>HOL.eq"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms')
###             ("_idts" ("_position" mem') ("_position" sched)))
###           ("_position" gc))
###         ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms')))))
###       ("_position" mdss))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sound_mode_use ::
    "('Com * (Mode => 'Var set)) list * ('Var => 'Val) => bool"
### theory "Dependent_SIFUM_Type_Systems.Security"
### 1.878s elapsed time, 5.995s cpu time, 1.353s GC time
Loading theory "Dependent_SIFUM_Type_Systems.Compositionality" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.EgHighBranchRevC")
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.884s elapsed time, 2.807s cpu time, 0.925s GC time
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
Found termination order: "{}"
consts
  update_modes :: "'Var ModeUpd => (Mode => 'Var set) => Mode => 'Var set"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "eval\<^sub>w_simplep"
  Proving monotonicity ...
Found termination order: "{}"
consts
  cxt_to_stmt ::
    "('Var, 'AExp, 'BExp) Stmt list
     => ('Var, 'AExp, 'BExp) Stmt => ('Var, 'AExp, 'BExp) Stmt"
Proofs for inductive predicate(s) "no_await"
  Proving monotonicity ...
Proofs for inductive predicate(s) "is_final"
  Proving monotonicity ...
### Ambiguous input (line 538 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" globally_consistent)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>2) ("_position" x))
###                   ("_position" v')))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds) ("_position" x))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" dma)
###               ("_cargs"
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_position" mem\<^sub>1) ("_position" A))
###                 ("_position" x)))
###             ("_applC" ("_position" dma)
###               ("_cargs" ("_position" mem\<^sub>1) ("_position" x))))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" var_asm_not_written)
###               ("_cargs" ("_position" mds) ("_position" x))))))
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem\<^sub>1) ("_position" A))
###                   ("_position" x)))
###               ("_position" Low))
###             ("\<^const>HOL.disj"
###               ("\<^const>Set.not_member" ("_position" x)
###                 ("_applC" ("_position" mds) ("_position" AsmNoReadOrWrite)))
###               ("\<^const>Set.member" ("_position" x) ("_position" \<C>))))
###           ("\<^const>HOL.eq"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_position" mem\<^sub>1) ("_position" A))
###               ("_position" x))
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>2"
###                 ("_position" mem\<^sub>2) ("_position" A))
###               ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" globally_consistent)
###     ("_cargs" ("_position" A)
###       ("_cargs" ("_position" mds)
###         ("_cargs" ("_position" mem\<^sub>1) ("_position" mem\<^sub>2)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem\<^sub>2) ("_position" x))
###                   ("_position" v')))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" var_asm_not_written)
###                   ("_cargs" ("_position" mds) ("_position" x))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" True)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_applC" ("_position" dma) ("_position" mem\<^sub>1))
###                 ("_position" A))
###               ("_position" x))
###             ("_applC" ("_position" dma)
###               ("_cargs" ("_position" mem\<^sub>1) ("_position" x))))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" var_asm_not_written)
###               ("_cargs" ("_position" mds) ("_position" x))))))
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem\<^sub>1) ("_position" A))
###                   ("_position" x)))
###               ("_position" Low))
###             ("\<^const>HOL.disj"
###               ("\<^const>Set.not_member" ("_position" x)
###                 ("_applC" ("_position" mds) ("_position" AsmNoReadOrWrite)))
###               ("\<^const>Set.member" ("_position" x) ("_position" \<C>))))
###           ("\<^const>HOL.eq"
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>1"
###                 ("_position" mem\<^sub>1) ("_position" A))
###               ("_position" x))
###             ("_applC"
###               ("\<^const>Security.apply_adaptation\<^sub>2"
###                 ("_position" mem\<^sub>2) ("_position" A))
###               ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval\<^sub>wp"
  Proving monotonicity ...
### Ambiguous input (line 573 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2))))
###       ("_position" k)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>local.meval_abv"
###       ("_tuple" ("_position" cms\<^sub>2)
###         ("_tuple_arg" ("_position" mem\<^sub>2)))
###       ("_position" k)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_abv"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###       ("_tuple" ("_position" cms\<^sub>2)
###         ("_tuple_arg" ("_position" mem\<^sub>2))))
###     ("_position" k)
###     ("\<^const>HOL.conj"
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2')))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###           ("_tuple" ("_position" cms\<^sub>2)
###             ("_tuple_arg" ("_position" mem\<^sub>2))))
###         ("_position" k)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2)))
###         ("_position" k)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2))))
###       ("_position" k)
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2'))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1910 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" cms\<^sub>1'')
###                 ("_position" mem\<^sub>1''))
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1))))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" ms)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" ns)
###               ("_tuple" ("_position" cms\<^sub>1'')
###                 ("_tuple_arg" ("_position" mem\<^sub>1''))))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" ms)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>1)
###                 ("_tuple_arg" ("_position" mem\<^sub>1)))
###               ("_position" ns)
###               ("_tuple" ("_position" cms\<^sub>1'')
###                 ("_tuple_arg" ("_position" mem\<^sub>1''))))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" ms)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("\<^const>List.append" ("_position" ns) ("_position" ms))
###     ("\<^const>HOL.eq"
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1)))
###             ("_position" ns)
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_position" ms)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_position" ms))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" ms)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1921 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" cms\<^sub>1'')
###               ("_position" mem\<^sub>1''))
###             ("_tuple" ("_position" cms\<^sub>1)
###               ("_tuple_arg" ("_position" mem\<^sub>1))))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1))))
###       ("_position" ns)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("\<^const>local.meval_abv"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_position" n)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1))))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1))))
###       ("_position" ns)
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>local.meval_abv"
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1''))))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>1'') ("_position" mem\<^sub>1''))
###       ("\<^const>local.meval_abv"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))
###             ("_tuple" ("_position" cms\<^sub>1'')
###               ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1927 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.meval_sched_abv"
###           ("_tuple" ("_position" cms\<^sub>1)
###             ("_tuple_arg" ("_position" mem\<^sub>1)))
###           ("_position" ns)
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1''))))
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("_position" ns)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>1'')
###           ("_tuple_arg" ("_position" mem\<^sub>1'')))
###         ("\<^const>local.meval_abv"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_position" n)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_abv"
###       ("\<^const>local.meval_sched_abv"
###         ("_tuple" ("_position" cms\<^sub>1)
###           ("_tuple_arg" ("_position" mem\<^sub>1)))
###         ("_position" ns)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))))
###       ("_position" n)
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("_position" ns)
###       ("\<^const>local.meval_abv"
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1'')))
###           ("_tuple" ("_position" cms\<^sub>1'')
###             ("_tuple_arg" ("_position" mem\<^sub>1''))))
###         ("_position" n)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.meval_sched_abv"
###       ("_tuple" ("_position" cms\<^sub>1)
###         ("_tuple_arg" ("_position" mem\<^sub>1)))
###       ("\<^const>List.append" ("_position" ns) ("_list" ("_position" n)))
###       ("_tuple" ("_position" cms\<^sub>1')
###         ("_tuple_arg" ("_position" mem\<^sub>1'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1937 of "$AFP/Dependent_SIFUM_Type_Systems/Compositionality.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###           ("\<^const>local.meval_sched_abv"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))
###             ("_position" sched)
###             ("\<^const>HOL.conj"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_applC" ("_position" makes_compatible)
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>1')
###                     ("_tuple_arg" ("_position" mem\<^sub>1')))
###                   ("_cargs"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("_position" mems')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###           ("\<^const>local.meval_sched_abv"
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))
###             ("_position" sched)
###             ("\<^const>HOL.conj"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_applC" ("_position" makes_compatible)
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>1')
###                     ("_tuple_arg" ("_position" mem\<^sub>1')))
###                   ("_cargs"
###                     ("_tuple" ("_position" cms\<^sub>2')
###                       ("_tuple_arg" ("_position" mem\<^sub>2')))
###                     ("_position" mems')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_sched_abv"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" cms\<^sub>2')
###         ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))))))
###     ("_position" sched)
###     ("\<^const>HOL.conj"
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2')))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2))))))
###       ("_position" sched)
###       ("\<^const>HOL.conj"
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2')))
###         ("_applC" ("_position" makes_compatible)
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1')))
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))
###               ("_position" mems'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2)))))
###         ("_position" sched)
###         ("\<^const>HOL.conj"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_applC" ("_position" makes_compatible)
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("_position" mems')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>local.meval_sched_abv"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###             ("_tuple" ("_position" cms\<^sub>2)
###               ("_tuple_arg" ("_position" mem\<^sub>2))))
###           ("_position" sched)
###           ("\<^const>HOL.conj"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_applC" ("_position" makes_compatible)
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>1')
###                   ("_tuple_arg" ("_position" mem\<^sub>1')))
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("_position" mems'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("\<^const>local.meval_sched_abv"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2')))
###                 ("_tuple" ("_position" cms\<^sub>2)
###                   ("_tuple_arg" ("_position" mem\<^sub>2))))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2')))))
###           ("_applC" ("_position" makes_compatible)
###             ("_cargs"
###               ("_tuple" ("_position" cms\<^sub>1')
###                 ("_tuple_arg" ("_position" mem\<^sub>1')))
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>2')
###                   ("_tuple_arg" ("_position" mem\<^sub>2')))
###                 ("_position" mems')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" sound_mode_use)
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" sound_mode_use)
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.meval_sched_abv"
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2)))
###               ("_position" sched)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("_applC" ("_position" makes_compatible)
###               ("_cargs"
###                 ("_tuple" ("_position" cms\<^sub>1')
###                   ("_tuple_arg" ("_position" mem\<^sub>1')))
###                 ("_cargs"
###                   ("_tuple" ("_position" cms\<^sub>2')
###                     ("_tuple_arg" ("_position" mem\<^sub>2')))
###                   ("_position" mems'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.meval_sched_abv"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" cms\<^sub>2')
###           ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sound_mode_use)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2)))))))
###       ("_position" sched)
###       ("_tuple" ("_position" cms\<^sub>2')
###         ("_tuple_arg" ("_position" mem\<^sub>2'))))
###     ("_applC" ("_position" makes_compatible)
###       ("_cargs"
###         ("_tuple" ("_position" cms\<^sub>1')
###           ("_tuple_arg" ("_position" mem\<^sub>1')))
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>2')
###             ("_tuple_arg" ("_position" mem\<^sub>2')))
###           ("_position" mems'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" cms\<^sub>2')
###       ("_idts" ("_position" mem\<^sub>2') ("_position" mems')))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_sched_abv"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple" ("_position" cms\<^sub>1')
###               ("_tuple_arg" ("_position" mem\<^sub>1'))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sound_mode_use)
###               ("_tuple" ("_position" cms\<^sub>2')
###                 ("_tuple_arg" ("_position" mem\<^sub>2'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###               ("_tuple" ("_position" cms\<^sub>2)
###                 ("_tuple_arg" ("_position" mem\<^sub>2))))))
###         ("_position" sched)
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Dependent_SIFUM_Type_Systems.Compositionality"
### 0.917s elapsed time, 2.041s cpu time, 0.173s GC time
Loading theory "Draft.CompositionalRefinement" (required by "Draft.EgHighBranchRevCMoreTemplates" via "Draft.EgHighBranchRevC")
### Ambiguous input (line 200 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.eval\<^sub>w_plus"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" eval\<^sub>B)
###           ("_cargs" ("_position" mem) ("_position" b)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))))
###       ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###         ("_position" mds') ("_position" mem')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj" ("_applC" ("_position" mem) ("_position" b))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("_cargs" ("_position" mem)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###                 ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                   ("_position" mds) ("_position" mem)))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("_applC" ("_position" no_await)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" c\<^sub>1)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("_applC" ("_position" is_final)
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>HOL.conj" ("_position" c\<^sub>2)
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Dependent_SIFUM_Type_Systems.Language"
### 3.772s elapsed time, 11.050s cpu time, 2.432s GC time
locale sifum_refinement
  fixes dma\<^sub>A :: "('Var\<^sub>A => 'Val) => 'Var\<^sub>A => Sec"
    and dma\<^sub>C :: "('Var\<^sub>C => 'Val) => 'Var\<^sub>C => Sec"
    and \<C>_vars\<^sub>A :: "'Var\<^sub>A => 'Var\<^sub>A set"
    and \<C>_vars\<^sub>C :: "'Var\<^sub>C => 'Var\<^sub>C set"
    and \<C>\<^sub>A :: "'Var\<^sub>A set"
    and \<C>\<^sub>C :: "'Var\<^sub>C set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
         ('Var\<^sub>A => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
        ('Var\<^sub>A => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
         ('Var\<^sub>C => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
        ('Var\<^sub>C => 'Val)) set"
    and some_val :: "'Val"
    and var\<^sub>C_of :: "'Var\<^sub>A => 'Var\<^sub>C"
  assumes
    "sifum_refinement dma\<^sub>A dma\<^sub>C \<C>_vars\<^sub>A
      \<C>_vars\<^sub>C eval\<^sub>A eval\<^sub>C var\<^sub>C_of"
  defines "\<C>\<^sub>A == \<Union> (range \<C>_vars\<^sub>A)"
    and "\<C>\<^sub>C == \<Union> (range \<C>_vars\<^sub>C)"
locale sifum_refinement
  fixes dma\<^sub>A :: "('Var\<^sub>A => 'Val) => 'Var\<^sub>A => Sec"
    and dma\<^sub>C :: "('Var\<^sub>C => 'Val) => 'Var\<^sub>C => Sec"
    and \<C>_vars\<^sub>A :: "'Var\<^sub>A => 'Var\<^sub>A set"
    and \<C>_vars\<^sub>C :: "'Var\<^sub>C => 'Var\<^sub>C set"
    and \<C>\<^sub>A :: "'Var\<^sub>A set"
    and \<C>\<^sub>C :: "'Var\<^sub>C set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
         ('Var\<^sub>A => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
        ('Var\<^sub>A => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
         ('Var\<^sub>C => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
        ('Var\<^sub>C => 'Val)) set"
    and some_val :: "'Val"
    and var\<^sub>C_of :: "'Var\<^sub>A => 'Var\<^sub>C"
  assumes
    "sifum_refinement dma\<^sub>A dma\<^sub>C \<C>_vars\<^sub>A
      \<C>_vars\<^sub>C eval\<^sub>A eval\<^sub>C var\<^sub>C_of"
  defines "\<C>\<^sub>A == \<Union> (range \<C>_vars\<^sub>A)"
    and "\<C>\<^sub>C == \<Union> (range \<C>_vars\<^sub>C)"
locale sifum_refinement_same_mem
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes
    "sifum_refinement_same_mem dma \<C>_vars eval\<^sub>A eval\<^sub>C"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_refinement_same_mem
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes
    "sifum_refinement_same_mem dma \<C>_vars eval\<^sub>A eval\<^sub>C"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_refinement
  fixes dma\<^sub>A :: "('Var\<^sub>A => 'Val) => 'Var\<^sub>A => Sec"
    and dma\<^sub>C :: "('Var\<^sub>C => 'Val) => 'Var\<^sub>C => Sec"
    and \<C>_vars\<^sub>A :: "'Var\<^sub>A => 'Var\<^sub>A set"
    and \<C>_vars\<^sub>C :: "'Var\<^sub>C => 'Var\<^sub>C set"
    and \<C>\<^sub>A :: "'Var\<^sub>A set"
    and \<C>\<^sub>C :: "'Var\<^sub>C set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
         ('Var\<^sub>A => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
        ('Var\<^sub>A => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
         ('Var\<^sub>C => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
        ('Var\<^sub>C => 'Val)) set"
    and some_val :: "'Val"
    and var\<^sub>C_of :: "'Var\<^sub>A => 'Var\<^sub>C"
  assumes
    "sifum_refinement dma\<^sub>A dma\<^sub>C \<C>_vars\<^sub>A
      \<C>_vars\<^sub>C eval\<^sub>A eval\<^sub>C var\<^sub>C_of"
  defines "\<C>\<^sub>A == \<Union> (range \<C>_vars\<^sub>A)"
    and "\<C>\<^sub>C == \<Union> (range \<C>_vars\<^sub>C)"
### Additional type variable(s) in locale specification "sifum_refinement_sys": 'a, 'b
locale sifum_refinement_sys
  fixes dma\<^sub>A :: "('Var\<^sub>A => 'Val) => 'Var\<^sub>A => Sec"
    and dma\<^sub>C :: "('Var\<^sub>C => 'Val) => 'Var\<^sub>C => Sec"
    and \<C>_vars\<^sub>A :: "'Var\<^sub>A => 'Var\<^sub>A set"
    and \<C>_vars\<^sub>C :: "'Var\<^sub>C => 'Var\<^sub>C set"
    and \<C>\<^sub>A :: "'Var\<^sub>A set"
    and \<C>\<^sub>C :: "'Var\<^sub>C set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
         ('Var\<^sub>A => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
        ('Var\<^sub>A => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
         ('Var\<^sub>C => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
        ('Var\<^sub>C => 'Val)) set"
    and some_val :: "'Val"
    and var\<^sub>C_of :: "'Var\<^sub>A => 'Var\<^sub>C"
    and
    cms ::
      "(?'a, 'Val, 'Var\<^sub>C, 'Com\<^sub>C, 'Var\<^sub>A,
        'Com\<^sub>A) componentwise_refinement list"
    and priv_mem\<^sub>C :: "'Var\<^sub>C set list"
  assumes
    "sifum_refinement_sys TYPE('a) TYPE('b) dma\<^sub>A dma\<^sub>C
      \<C>_vars\<^sub>A \<C>_vars\<^sub>C eval\<^sub>A eval\<^sub>C
      var\<^sub>C_of cms"
  defines "\<C>\<^sub>A == \<Union> (range \<C>_vars\<^sub>A)"
    and "\<C>\<^sub>C == \<Union> (range \<C>_vars\<^sub>C)"
    and "priv_mem\<^sub>C == map priv_mem cms"
locale sifum_security
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes "sifum_security dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_refinement_sys
  fixes dma\<^sub>A :: "('Var\<^sub>A => 'Val) => 'Var\<^sub>A => Sec"
    and dma\<^sub>C :: "('Var\<^sub>C => 'Val) => 'Var\<^sub>C => Sec"
    and \<C>_vars\<^sub>A :: "'Var\<^sub>A => 'Var\<^sub>A set"
    and \<C>_vars\<^sub>C :: "'Var\<^sub>C => 'Var\<^sub>C set"
    and \<C>\<^sub>A :: "'Var\<^sub>A set"
    and \<C>\<^sub>C :: "'Var\<^sub>C set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
         ('Var\<^sub>A => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
        ('Var\<^sub>A => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
         ('Var\<^sub>C => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
        ('Var\<^sub>C => 'Val)) set"
    and some_val :: "'Val"
    and var\<^sub>C_of :: "'Var\<^sub>A => 'Var\<^sub>C"
    and
    cms ::
      "(?'a, 'Val, 'Var\<^sub>C, 'Com\<^sub>C, 'Var\<^sub>A,
        'Com\<^sub>A) componentwise_refinement list"
    and priv_mem\<^sub>C :: "'Var\<^sub>C set list"
  assumes
    "sifum_refinement_sys TYPE('a) TYPE('b) dma\<^sub>A dma\<^sub>C
      \<C>_vars\<^sub>A \<C>_vars\<^sub>C eval\<^sub>A eval\<^sub>C
      var\<^sub>C_of cms"
  defines "\<C>\<^sub>A == \<Union> (range \<C>_vars\<^sub>A)"
    and "\<C>\<^sub>C == \<Union> (range \<C>_vars\<^sub>C)"
    and "priv_mem\<^sub>C == map priv_mem cms"
locale sifum_security
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes "sifum_security dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_refinement_sys
  fixes dma\<^sub>A :: "('Var\<^sub>A => 'Val) => 'Var\<^sub>A => Sec"
    and dma\<^sub>C :: "('Var\<^sub>C => 'Val) => 'Var\<^sub>C => Sec"
    and \<C>_vars\<^sub>A :: "'Var\<^sub>A => 'Var\<^sub>A set"
    and \<C>_vars\<^sub>C :: "'Var\<^sub>C => 'Var\<^sub>C set"
    and \<C>\<^sub>A :: "'Var\<^sub>A set"
    and \<C>\<^sub>C :: "'Var\<^sub>C set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
         ('Var\<^sub>A => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
        ('Var\<^sub>A => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
         ('Var\<^sub>C => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
        ('Var\<^sub>C => 'Val)) set"
    and some_val :: "'Val"
    and var\<^sub>C_of :: "'Var\<^sub>A => 'Var\<^sub>C"
    and
    cms ::
      "(?'a, 'Val, 'Var\<^sub>C, 'Com\<^sub>C, 'Var\<^sub>A,
        'Com\<^sub>A) componentwise_refinement list"
    and priv_mem\<^sub>C :: "'Var\<^sub>C set list"
  assumes
    "sifum_refinement_sys TYPE('a) TYPE('b) dma\<^sub>A dma\<^sub>C
      \<C>_vars\<^sub>A \<C>_vars\<^sub>C eval\<^sub>A eval\<^sub>C
      var\<^sub>C_of cms"
  defines "\<C>\<^sub>A == \<Union> (range \<C>_vars\<^sub>A)"
    and "\<C>\<^sub>C == \<Union> (range \<C>_vars\<^sub>C)"
    and "priv_mem\<^sub>C == map priv_mem cms"
locale sifum_security
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes "sifum_security dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_refinement_sys
  fixes dma\<^sub>A :: "('Var\<^sub>A => 'Val) => 'Var\<^sub>A => Sec"
    and dma\<^sub>C :: "('Var\<^sub>C => 'Val) => 'Var\<^sub>C => Sec"
    and \<C>_vars\<^sub>A :: "'Var\<^sub>A => 'Var\<^sub>A set"
    and \<C>_vars\<^sub>C :: "'Var\<^sub>C => 'Var\<^sub>C set"
    and \<C>\<^sub>A :: "'Var\<^sub>A set"
    and \<C>\<^sub>C :: "'Var\<^sub>C set"
    and
    eval\<^sub>A ::
      "((('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
         ('Var\<^sub>A => 'Val)) *
        ('Com\<^sub>A * (Mode => 'Var\<^sub>A set)) *
        ('Var\<^sub>A => 'Val)) set"
    and
    eval\<^sub>C ::
      "((('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
         ('Var\<^sub>C => 'Val)) *
        ('Com\<^sub>C * (Mode => 'Var\<^sub>C set)) *
        ('Var\<^sub>C => 'Val)) set"
    and some_val :: "'Val"
    and var\<^sub>C_of :: "'Var\<^sub>A => 'Var\<^sub>C"
    and
    cms ::
      "(?'a, 'Val, 'Var\<^sub>C, 'Com\<^sub>C, 'Var\<^sub>A,
        'Com\<^sub>A) componentwise_refinement list"
    and priv_mem\<^sub>C :: "'Var\<^sub>C set list"
  assumes
    "sifum_refinement_sys TYPE('a) TYPE('b) dma\<^sub>A dma\<^sub>C
      \<C>_vars\<^sub>A \<C>_vars\<^sub>C eval\<^sub>A eval\<^sub>C
      var\<^sub>C_of cms"
  defines "\<C>\<^sub>A == \<Union> (range \<C>_vars\<^sub>A)"
    and "\<C>\<^sub>C == \<Union> (range \<C>_vars\<^sub>C)"
    and "priv_mem\<^sub>C == map priv_mem cms"
### theory "Draft.CompositionalRefinement"
### 6.544s elapsed time, 8.125s cpu time, 1.777s GC time
Loading theory "Draft.EgHighBranchRevC" (required by "Draft.EgHighBranchRevCMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
consts
  aexp_vars :: "'var aexp => 'var set"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale sifum_example
  assumes "sifum_example"
locale sifum_example
  assumes "sifum_example"
locale sifum_example\<^sub>C
  assumes "sifum_example\<^sub>C"
locale sifum_example\<^sub>C
  assumes "sifum_example\<^sub>C"
locale sifum_example
  assumes "sifum_example"
Proofs for inductive predicate(s) "inv"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_invp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Rp"
  Proving monotonicity ...
### Ambiguous input (line 461 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" mem) ("_position" x))
###                       ("_position" v))
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" var_asm_not_written)
###                         ("_cargs" ("_position" mds') ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC"
###                           ("\<^const>Security.apply_adaptation\<^sub>1"
###                             ("_applC" ("_position" dma) ("_position" mem))
###                             ("_position" A))
###                           ("_position" x))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds')
###                             ("_position" x)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" inv)
###         ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###           ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2" ("_case1" ("_position" None) ("_position" True))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" mem) ("_position" x))
###                     ("_position" v))
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" var_asm_not_written)
###                       ("_cargs" ("_position" mds') ("_position" x))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC"
###                           ("\<^const>Security.apply_adaptation\<^sub>1"
###                             ("_applC" ("_position" dma) ("_position" mem))
###                             ("_position" A))
###                           ("_position" x))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds') ("_position" x)))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" inv)
###                     ("\<^const>local.conf_abv" ("_position" c')
###                       ("_position" mds')
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_position" mem) ("_position" A)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" var_asm_not_written)
###                     ("_cargs" ("_position" mds') ("_position" x))))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC"
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_applC" ("_position" dma) ("_position" mem))
###                   ("_position" A))
###                 ("_position" x))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inv)
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###               ("_position" A))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" mem) ("_position" x))
###                       ("_position" v))
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" var_asm_not_written)
###                         ("_cargs" ("_position" mds') ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC" ("_position" dma)
###                           ("_cargs"
###                             ("\<^const>Security.apply_adaptation\<^sub>1"
###                               ("_position" mem) ("_position" A))
###                             ("_position" x)))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds')
###                             ("_position" x)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" inv)
###         ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###           ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2" ("_case1" ("_position" None) ("_position" True))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" mem) ("_position" x))
###                     ("_position" v))
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" var_asm_not_written)
###                       ("_cargs" ("_position" mds') ("_position" x))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC" ("_position" dma)
###                           ("_cargs"
###                             ("\<^const>Security.apply_adaptation\<^sub>1"
###                               ("_position" mem) ("_position" A))
###                             ("_position" x)))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds') ("_position" x)))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" inv)
###                     ("\<^const>local.conf_abv" ("_position" c')
###                       ("_position" mds')
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_position" mem) ("_position" A)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" v))
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" var_asm_not_written)
###                     ("_cargs" ("_position" mds') ("_position" x))))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x)))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inv)
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("\<^const>Security.apply_adaptation\<^sub>1" ("_position" mem)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 508 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" mem) ("_position" x))
###                       ("_position" v'))
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" var_asm_not_written)
###                         ("_cargs" ("_position" mds') ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC"
###                           ("\<^const>Security.apply_adaptation\<^sub>2"
###                             ("_applC" ("_position" dma) ("_position" mem))
###                             ("_position" A))
###                           ("_position" x))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds')
###                             ("_position" x)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" inv)
###         ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###           ("\<^const>Security.apply_adaptation\<^sub>2" ("_position" mem)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2" ("_case1" ("_position" None) ("_position" True))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" mem) ("_position" x))
###                     ("_position" v'))
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" var_asm_not_written)
###                       ("_cargs" ("_position" mds') ("_position" x))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC"
###                           ("\<^const>Security.apply_adaptation\<^sub>2"
###                             ("_applC" ("_position" dma) ("_position" mem))
###                             ("_position" A))
###                           ("_position" x))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds') ("_position" x)))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" inv)
###                     ("\<^const>local.conf_abv" ("_position" c')
###                       ("_position" mds')
###                       ("\<^const>Security.apply_adaptation\<^sub>2"
###                         ("_position" mem) ("_position" A)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" v'))
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" var_asm_not_written)
###                     ("_cargs" ("_position" mds') ("_position" x))))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC"
###                 ("\<^const>Security.apply_adaptation\<^sub>2"
###                   ("_applC" ("_position" dma) ("_position" mem))
###                   ("_position" A))
###                 ("_position" x))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inv)
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("\<^const>Security.apply_adaptation\<^sub>2" ("_position" mem)
###               ("_position" A))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" mem) ("_position" x))
###                       ("_position" v'))
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" var_asm_not_written)
###                         ("_cargs" ("_position" mds') ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC" ("_position" dma)
###                           ("_cargs"
###                             ("\<^const>Security.apply_adaptation\<^sub>2"
###                               ("_position" mem) ("_position" A))
###                             ("_position" x)))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds')
###                             ("_position" x)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" inv)
###         ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###           ("\<^const>Security.apply_adaptation\<^sub>2" ("_position" mem)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###         ("_case2" ("_case1" ("_position" None) ("_position" True))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" mem) ("_position" x))
###                     ("_position" v'))
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" var_asm_not_written)
###                       ("_cargs" ("_position" mds') ("_position" x))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder" ("_position" x)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal"
###                         ("_applC" ("_position" dma)
###                           ("_cargs"
###                             ("\<^const>Security.apply_adaptation\<^sub>2"
###                               ("_position" mem) ("_position" A))
###                             ("_position" x)))
###                         ("_applC" ("_position" dma)
###                           ("_cargs" ("_position" mem) ("_position" x))))
###                       ("\<^const>HOL.Not"
###                         ("_applC" ("_position" var_asm_not_written)
###                           ("_cargs" ("_position" mds') ("_position" x)))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" inv)
###                     ("\<^const>local.conf_abv" ("_position" c')
###                       ("_position" mds')
###                       ("\<^const>Security.apply_adaptation\<^sub>2"
###                         ("_position" mem) ("_position" A)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inv)
###       ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###         ("_position" mem))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" x)
###         ("_case_syntax" ("_applC" ("_position" A) ("_position" x))
###           ("_case2" ("_case1" ("_position" None) ("_position" True))
###             ("_case1"
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" v'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" mem) ("_position" x))
###                   ("_position" v'))
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" var_asm_not_written)
###                     ("_cargs" ("_position" mds') ("_position" x))))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x)))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inv)
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("\<^const>Security.apply_adaptation\<^sub>2" ("_position" mem)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 554 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" a) ("_position" b)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem) ("_position" x))
###                 ("_position" a))
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" mem') ("_position" x))
###                 ("_position" b)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC"
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_applC" ("_position" dma) ("_position" mem))
###                   ("_position" A))
###                 ("_position" x))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_applC" ("_position" dma) ("_position" mem))
###                       ("_position" A))
###                     ("_position" x))
###                   ("_position" Low))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_applC" ("_position" mds')
###                       ("_position" AsmNoReadOrWrite)))
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_position" \<C>))))
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x))
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A))
###                   ("_position" x))))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_position" mem) ("_position" A)))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A)))))
###             ("_position" rel_inv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" a) ("_position" b)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem) ("_position" x))
###                 ("_position" a))
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" mem') ("_position" x))
###                 ("_position" b)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x)))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>Security.apply_adaptation\<^sub>1"
###                       ("_applC" ("_position" dma) ("_position" mem))
###                       ("_position" A))
###                     ("_position" x))
###                   ("_position" Low))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_applC" ("_position" mds')
###                       ("_position" AsmNoReadOrWrite)))
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_position" \<C>))))
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x))
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A))
###                   ("_position" x))))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_position" mem) ("_position" A)))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A)))))
###             ("_position" rel_inv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" a) ("_position" b)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem) ("_position" x))
###                 ("_position" a))
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" mem') ("_position" x))
###                 ("_position" b)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC"
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_applC" ("_position" dma) ("_position" mem))
###                   ("_position" A))
###                 ("_position" x))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs"
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_position" mem) ("_position" A))
###                       ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_applC" ("_position" mds')
###                       ("_position" AsmNoReadOrWrite)))
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_position" \<C>))))
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x))
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A))
###                   ("_position" x))))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_position" mem) ("_position" A)))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A)))))
###             ("_position" rel_inv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" a) ("_position" b)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" A) ("_position" x))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" mem) ("_position" x))
###                 ("_position" a))
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" mem') ("_position" x))
###                 ("_position" b)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x))))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" x)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("_position" dma)
###                 ("_cargs"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x)))
###               ("_applC" ("_position" dma)
###                 ("_cargs" ("_position" mem) ("_position" x))))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" var_asm_not_written)
###                 ("_cargs" ("_position" mds') ("_position" x)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" dma)
###                     ("_cargs"
###                       ("\<^const>Security.apply_adaptation\<^sub>1"
###                         ("_position" mem) ("_position" A))
###                       ("_position" x)))
###                   ("_position" Low))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_applC" ("_position" mds')
###                       ("_position" AsmNoReadOrWrite)))
###                   ("\<^const>Set.member" ("_position" x)
###                     ("_position" \<C>))))
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>1"
###                     ("_position" mem) ("_position" A))
###                   ("_position" x))
###                 ("_applC"
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A))
###                   ("_position" x))))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c) ("_position" mds')
###                 ("\<^const>Security.apply_adaptation\<^sub>1"
###                   ("_position" mem) ("_position" A)))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c')
###                   ("_position" mds')
###                   ("\<^const>Security.apply_adaptation\<^sub>2"
###                     ("_position" mem') ("_position" A)))))
###             ("_position" rel_inv)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale sifum_refinement_high_branch
  assumes "sifum_refinement_high_branch"
consts
  var\<^sub>C_of :: "EgHighBranchRevC.var => var\<^sub>C"
locale sifum_refinement_high_branch
  assumes "sifum_refinement_high_branch"
### Ambiguous input (line 866 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" A.eval\<^sub>w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" A.eval\<^sub>w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" A.eval\<^sub>w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" A.eval\<^sub>w)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 870 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" C.eval\<^sub>w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" C.eval\<^sub>w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" C.eval\<^sub>w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Assign" ("_position" x)
###           ("_applC" ("_position" Const) ("_position" c)))
###         ("_position" mds) ("_position" mem))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv" ("_position" Stop) ("_position" mds)
###           ("_Update" ("_position" mem)
###             ("_updbind" ("_position" x) ("_position" c))))))
###     ("_position" C.eval\<^sub>w)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 918 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>A"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" A.eval\<^sub>w))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 927 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" T) ("_position" E))))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("_position" T) ("_position" E))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" B)
###                 ("_cargs" ("_position" T) ("_position" E))))
###             ("_position" TAIL))
###           ("_position" mds) ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.conf_abv\<^sub>C"
###             ("\<^const>HOL.If"
###               ("_applC" ("_position" ev\<^sub>B\<^sub>C)
###                 ("_cargs" ("_position" mem) ("_position" B)))
###               ("\<^const>Language.Stmt.Seq" ("_position" T)
###                 ("_position" TAIL))
###               ("\<^const>Language.Stmt.Seq" ("_position" E)
###                 ("_position" TAIL)))
###             ("_position" mds) ("_position" mem))))
###       ("_position" C.eval\<^sub>w))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 1065 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c) ("_position" c'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c) ("_position" c'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c) ("_position" c'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c) ("_position" c'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 961 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 973 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg1)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 985 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 997 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Load) ("_position" y_mem))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0)))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg2)
###                   ("_applC" ("_position" Load) ("_position" z_mem))))
###               ("\<^const>Language.Stmt.Seq"
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" reg0)
###                     ("_applC" ("_position" Add)
###                       ("_cargs"
###                         ("_applC" ("_position" Load) ("_position" reg1))
###                         ("_applC" ("_position" Load) ("_position" reg2))))))
###                 ("_applC" ("_position" Assign)
###                   ("_cargs" ("_position" x_mem)
###                     ("_applC" ("_position" Load)
###                       ("_position" reg0)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1009 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1019 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg2)
###                 ("_applC" ("_position" Load) ("_position" z_mem))))
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1029 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1039 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Load) ("_position" y_mem))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("\<^const>Language.Stmt.Seq"
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" reg0)
###                   ("_applC" ("_position" Add)
###                     ("_cargs"
###                       ("_applC" ("_position" Load) ("_position" reg1))
###                       ("_applC" ("_position" Load) ("_position" reg2))))))
###               ("_applC" ("_position" Assign)
###                 ("_cargs" ("_position" x_mem)
###                   ("_applC" ("_position" Load) ("_position" reg0))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1049 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c')
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1057 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.C.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.C.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" c')
###         ("\<^const>Language.Stmt.Seq"
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" reg0)
###               ("_applC" ("_position" Load) ("_position" y_mem))))
###           ("_applC" ("_position" Assign)
###             ("_cargs" ("_position" x_mem)
###               ("_applC" ("_position" Load) ("_position" reg0)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Language.Stmt.Seq"
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" reg0)
###                 ("_applC" ("_position" Add)
###                   ("_cargs" ("_applC" ("_position" Load) ("_position" reg1))
###                     ("_applC" ("_position" Load) ("_position" reg2))))))
###             ("_applC" ("_position" Assign)
###               ("_cargs" ("_position" x_mem)
###                 ("_applC" ("_position" Load) ("_position" reg0)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>local.A.conf_abv" ("_position" c) ("_position" mds)
###           ("_position" mem))
###         ("_tuple_arg"
###           ("\<^const>local.A.conf_abv" ("_position" c') ("_position" mds')
###             ("_position" mem'))))
###       ("_position" rel_inv\<^sub>C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "rel_inv\<^sub>Cp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "RefRel_HighBranchp"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 2304 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Skip)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
(\<langle>Skip ;;
          ?c\<^sub>A_tail, ?mds\<^sub>A, ?mem\<^sub>A\<rangle>\<^sub>A,
 \<langle>Skip ;;
          ?c\<^sub>C_tail, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
: RefRel_HighBranch ==>
?P
### Ambiguous input (line 2307 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.C.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.C.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>local.A.conf_abv"
###         ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###           ("_position" c\<^sub>A_tail))
###         ("_position" mds\<^sub>A) ("_position" mem\<^sub>A))
###       ("_tuple_arg"
###         ("\<^const>local.A.conf_abv"
###           ("\<^const>Language.Stmt.Seq" ("_position" Stop)
###             ("_position" c\<^sub>C_tail))
###           ("_position" mds\<^sub>C) ("_position" mem\<^sub>C))))
###     ("_position" RefRel_HighBranch)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| (\<langle>Stop ;;
             ?c\<^sub>A_tail, ?mds\<^sub>A, ?mem\<^sub>A\<rangle>\<^sub>A,
    \<langle>Stop ;;
             ?c\<^sub>C_tail, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
   : RefRel_HighBranch;
   [| ?mds\<^sub>A = mds\<^sub>A_of ?mds\<^sub>C;
      ?mem\<^sub>A = mem\<^sub>A_of ?mem\<^sub>C;
      (\<langle>?c\<^sub>A_tail, mds\<^sub>A_of
                                  ?mds\<^sub>C, mem\<^sub>A_of
           ?mem\<^sub>C\<rangle>\<^sub>A,
       \<langle>?c\<^sub>C_tail, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
      : RefRel_HighBranch |]
   ==> ?P |]
==> ?P
[| (\<langle>(Skip@[?x +=\<^sub>m ?SomeMode]) ;;
             ?c\<^sub>A_tail, mds\<^sub>A_of
                               ?mds\<^sub>C, mem\<^sub>A_of
        ?mem\<^sub>C\<rangle>\<^sub>A,
    \<langle>(Skip@[var\<^sub>C_of ?x +=\<^sub>m ?SomeMode]) ;;
             ?c\<^sub>C_tail, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
   : RefRel_HighBranch;
   [| ALL v\<^sub>C.
         v\<^sub>C ~: range var\<^sub>C_of -->
         v\<^sub>C : ?mds\<^sub>C AsmNoReadOrWrite;
      ALL mem\<^sub>A'' mds\<^sub>C' mem\<^sub>C'.
         (EX mem\<^sub>C''.
             mem\<^sub>A'' = mem\<^sub>A_of mem\<^sub>C'' &
             eval_abv\<^sub>A
              \<langle>(Skip@[?x +=\<^sub>m ?SomeMode]) ;;
                       ?c\<^sub>A_tail, mds\<^sub>A_of
   ?mds\<^sub>C, mem\<^sub>A''\<rangle>\<^sub>A
              \<langle>Stop ;;
                       ?c\<^sub>A_tail, mds\<^sub>A_of
   mds\<^sub>C', mem\<^sub>A_of mem\<^sub>C'\<rangle>\<^sub>A &
             eval_abv\<^sub>C
              \<langle>(Skip@[var\<^sub>C_of ?x +=\<^sub>m ?SomeMode]) ;;
                       ?c\<^sub>C_tail, ?mds\<^sub>C, mem\<^sub>C''\<rangle>\<^sub>C
              \<langle>Stop ;;
                       ?c\<^sub>C_tail, mds\<^sub>C', mem\<^sub>C'\<rangle>\<^sub>C) -->
         (\<langle>Stop ;;
                   ?c\<^sub>A_tail, mds\<^sub>A_of
                                     mds\<^sub>C', mem\<^sub>A_of
              mem\<^sub>C'\<rangle>\<^sub>A,
          \<langle>Stop ;;
                   ?c\<^sub>C_tail, mds\<^sub>C', mem\<^sub>C'\<rangle>\<^sub>C)
         : RefRel_HighBranch |]
   ==> ?P |]
==> ?P
[| (\<langle>(?x \<leftarrow> Load ?y) ;;
             ?c\<^sub>A_tail, mds\<^sub>A_of
                               ?mds\<^sub>C, mem\<^sub>A_of
        ?mem\<^sub>C\<rangle>\<^sub>A,
    \<langle>(var\<^sub>C_of ?x \<leftarrow> Load (var\<^sub>C_of ?y)) ;;
             ?c\<^sub>C_tail, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
   : RefRel_HighBranch;
   [| ALL v\<^sub>C.
         v\<^sub>C ~: range var\<^sub>C_of -->
         v\<^sub>C : ?mds\<^sub>C AsmNoReadOrWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C GuarNoReadOrWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C GuarNoWrite;
      ?y ~: mds\<^sub>A_of ?mds\<^sub>C GuarNoReadOrWrite;
      ALL mem\<^sub>A'' mds\<^sub>C' mem\<^sub>C'.
         (EX mem\<^sub>C''.
             mem\<^sub>A'' = mem\<^sub>A_of mem\<^sub>C'' &
             eval_abv\<^sub>A
              \<langle>(?x \<leftarrow> Load ?y) ;;
                       ?c\<^sub>A_tail, mds\<^sub>A_of
   ?mds\<^sub>C, mem\<^sub>A''\<rangle>\<^sub>A
              \<langle>Stop ;;
                       ?c\<^sub>A_tail, mds\<^sub>A_of
   mds\<^sub>C', mem\<^sub>A_of mem\<^sub>C'\<rangle>\<^sub>A &
             eval_abv\<^sub>C
              \<langle>(var\<^sub>C_of ?x \<leftarrow>
                        Load (var\<^sub>C_of ?y)) ;;
                       ?c\<^sub>C_tail, ?mds\<^sub>C, mem\<^sub>C''\<rangle>\<^sub>C
              \<langle>Stop ;;
                       ?c\<^sub>C_tail, mds\<^sub>C', mem\<^sub>C'\<rangle>\<^sub>C) -->
         (\<langle>Stop ;;
                   ?c\<^sub>A_tail, mds\<^sub>A_of
                                     mds\<^sub>C', mem\<^sub>A_of
              mem\<^sub>C'\<rangle>\<^sub>A,
          \<langle>Stop ;;
                   ?c\<^sub>C_tail, mds\<^sub>C', mem\<^sub>C'\<rangle>\<^sub>C)
         : RefRel_HighBranch |]
   ==> ?P |]
==> ?P
[| (\<langle>(?x \<leftarrow> Const ?z) ;;
             ?c\<^sub>A_tail, mds\<^sub>A_of
                               ?mds\<^sub>C, mem\<^sub>A_of
        ?mem\<^sub>C\<rangle>\<^sub>A,
    \<langle>(var\<^sub>C_of ?x \<leftarrow> Const ?z) ;;
             ?c\<^sub>C_tail, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
   : RefRel_HighBranch;
   [| ALL v\<^sub>C.
         v\<^sub>C ~: range var\<^sub>C_of -->
         v\<^sub>C : ?mds\<^sub>C AsmNoReadOrWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C GuarNoReadOrWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C GuarNoWrite;
      ALL mem\<^sub>A'' mds\<^sub>C' mem\<^sub>C'.
         (EX mem\<^sub>C''.
             mem\<^sub>A'' = mem\<^sub>A_of mem\<^sub>C'' &
             eval_abv\<^sub>A
              \<langle>(?x \<leftarrow> Const ?z) ;;
                       ?c\<^sub>A_tail, mds\<^sub>A_of
   ?mds\<^sub>C, mem\<^sub>A''\<rangle>\<^sub>A
              \<langle>Stop ;;
                       ?c\<^sub>A_tail, mds\<^sub>A_of
   mds\<^sub>C', mem\<^sub>A_of mem\<^sub>C'\<rangle>\<^sub>A &
             eval_abv\<^sub>C
              \<langle>(var\<^sub>C_of ?x \<leftarrow> Const ?z) ;;
                       ?c\<^sub>C_tail, ?mds\<^sub>C, mem\<^sub>C''\<rangle>\<^sub>C
              \<langle>Stop ;;
                       ?c\<^sub>C_tail, mds\<^sub>C', mem\<^sub>C'\<rangle>\<^sub>C) -->
         (\<langle>Stop ;;
                   ?c\<^sub>A_tail, mds\<^sub>A_of
                                     mds\<^sub>C', mem\<^sub>A_of
              mem\<^sub>C'\<rangle>\<^sub>A,
          \<langle>Stop ;;
                   ?c\<^sub>C_tail, mds\<^sub>C', mem\<^sub>C'\<rangle>\<^sub>C)
         : RefRel_HighBranch |]
   ==> ?P |]
==> ?P
[| (\<langle>Stmt.If (Neq (Load ?x) (Const 0)) ?c\<^sub>A_then
              ?c\<^sub>A_else, mds\<^sub>A_of
                                ?mds\<^sub>C, mem\<^sub>A_of
         ?mem\<^sub>C\<rangle>\<^sub>A,
    \<langle>(reg3 \<leftarrow> Load (var\<^sub>C_of ?y)) ;;
             Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
              ?c\<^sub>C_else, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
   : RefRel_HighBranch;
   [| var\<^sub>C_of ?y = var\<^sub>C_of ?x;
      ALL v\<^sub>C.
         v\<^sub>C ~: range var\<^sub>C_of -->
         v\<^sub>C : ?mds\<^sub>C AsmNoReadOrWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C GuarNoReadOrWrite;
      ALL mem\<^sub>C'.
         (EX mem\<^sub>C''.
             mem\<^sub>A_of mem\<^sub>C'' = mem\<^sub>A_of mem\<^sub>C' &
             (0 < mem\<^sub>C' reg3) =
             (0 < mem\<^sub>A_of mem\<^sub>C' ?x) &
             eval_abv\<^sub>C
              \<langle>(reg3 \<leftarrow> Load (var\<^sub>C_of ?x)) ;;
                       Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
                        ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C''\<rangle>\<^sub>C
              \<langle>Stop ;;
                       Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
                        ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C'\<rangle>\<^sub>C) -->
         (\<langle>Stmt.If (Neq (Load ?x) (Const 0)) ?c\<^sub>A_then
                    ?c\<^sub>A_else, mds\<^sub>A_of
?mds\<^sub>C, mem\<^sub>A_of mem\<^sub>C'\<rangle>\<^sub>A,
          \<langle>Stop ;;
                   Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
                    ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C'\<rangle>\<^sub>C)
         : RefRel_HighBranch;
      ?x : mds\<^sub>A_of ?mds\<^sub>C AsmNoWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C AsmNoReadOrWrite;
      reg3 ~: ?mds\<^sub>C GuarNoReadOrWrite;
      reg3 ~: ?mds\<^sub>C GuarNoWrite |]
   ==> ?P |]
==> ?P
[| (\<langle>Stmt.If (Neq (Load ?x) (Const 0)) ?c\<^sub>A_then
              ?c\<^sub>A_else, mds\<^sub>A_of
                                ?mds\<^sub>C, mem\<^sub>A_of
         ?mem\<^sub>C\<rangle>\<^sub>A,
    \<langle>Stop ;;
             Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
              ?c\<^sub>C_else, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
   : RefRel_HighBranch;
   [| ALL v\<^sub>C.
         v\<^sub>C ~: range var\<^sub>C_of -->
         v\<^sub>C : ?mds\<^sub>C AsmNoReadOrWrite;
      (0 < ?mem\<^sub>C reg3) = (0 < mem\<^sub>A_of ?mem\<^sub>C ?x);
      ALL mem\<^sub>C'.
         (EX mem\<^sub>C''.
             mem\<^sub>A_of mem\<^sub>C'' = mem\<^sub>A_of mem\<^sub>C' &
             (0 < mem\<^sub>C' reg3) =
             (0 < mem\<^sub>A_of mem\<^sub>C' ?x) &
             (0 < mem\<^sub>C'' reg3) =
             (0 < mem\<^sub>A_of mem\<^sub>C'' ?x) &
             eval_abv\<^sub>C
              \<langle>Stop ;;
                       Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
                        ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C''\<rangle>\<^sub>C
              \<langle>Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
                        ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C'\<rangle>\<^sub>C) -->
         (\<langle>Stmt.If (Neq (Load ?x) (Const 0)) ?c\<^sub>A_then
                    ?c\<^sub>A_else, mds\<^sub>A_of
?mds\<^sub>C, mem\<^sub>A_of mem\<^sub>C'\<rangle>\<^sub>A,
          \<langle>Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
                    ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C'\<rangle>\<^sub>C)
         : RefRel_HighBranch;
      ?x : mds\<^sub>A_of ?mds\<^sub>C AsmNoWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C AsmNoReadOrWrite |]
   ==> ?P |]
==> ?P
[| (\<langle>Stmt.If (Neq (Load ?x) (Const 0)) ?c\<^sub>A_then
              ?c\<^sub>A_else, mds\<^sub>A_of
                                ?mds\<^sub>C, mem\<^sub>A_of
         ?mem\<^sub>C\<rangle>\<^sub>A,
    \<langle>Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
              ?c\<^sub>C_else, ?mds\<^sub>C, ?mem\<^sub>C\<rangle>\<^sub>C)
   : RefRel_HighBranch;
   [| ALL v\<^sub>C.
         v\<^sub>C ~: range var\<^sub>C_of -->
         v\<^sub>C : ?mds\<^sub>C AsmNoReadOrWrite;
      (0 < ?mem\<^sub>C reg3) = (0 < mem\<^sub>A_of ?mem\<^sub>C ?x);
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C GuarNoReadOrWrite;
      ALL mem\<^sub>C' mem\<^sub>C''.
         (\<langle>?c\<^sub>C_then, ?mds\<^sub>C, mem\<^sub>C'\<rangle>\<^sub>C,
          \<langle>?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C''\<rangle>\<^sub>C)
         : rel_inv\<^sub>C;
      ALL mem\<^sub>C' mem\<^sub>C''.
         (0 < mem\<^sub>C'' reg3) = (0 < mem\<^sub>A_of mem\<^sub>C'' ?x) &
         (0 < mem\<^sub>C' reg3) = (0 < mem\<^sub>A_of mem\<^sub>C' ?x) &
         eval_abv\<^sub>A
          \<langle>Stmt.If (Neq (Load ?x) (Const 0)) ?c\<^sub>A_then
                    ?c\<^sub>A_else, mds\<^sub>A_of
?mds\<^sub>C, mem\<^sub>A_of mem\<^sub>C''\<rangle>\<^sub>A
          \<langle>if 0 < mem\<^sub>A_of mem\<^sub>C'' ?x
                   then ?c\<^sub>A_then
                   else ?c\<^sub>A_else, mds\<^sub>A_of
    ?mds\<^sub>C, mem\<^sub>A_of mem\<^sub>C'\<rangle>\<^sub>A &
         eval_abv\<^sub>C
          \<langle>Stmt.If (Neq (Load reg3) (Const 0)) ?c\<^sub>C_then
                    ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C''\<rangle>\<^sub>C
          \<langle>if 0 < mem\<^sub>C'' reg3 then ?c\<^sub>C_then
                   else ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C'\<rangle>\<^sub>C -->
         (\<langle>if 0 < mem\<^sub>A_of mem\<^sub>C'' ?x
                   then ?c\<^sub>A_then
                   else ?c\<^sub>A_else, mds\<^sub>A_of
    ?mds\<^sub>C, mem\<^sub>A_of mem\<^sub>C'\<rangle>\<^sub>A,
          \<langle>if 0 < mem\<^sub>A_of mem\<^sub>C'' ?x
                   then ?c\<^sub>C_then
                   else ?c\<^sub>C_else, ?mds\<^sub>C, mem\<^sub>C'\<rangle>\<^sub>C)
         : RefRel_HighBranch;
      ?x : mds\<^sub>A_of ?mds\<^sub>C AsmNoWrite;
      ?x ~: mds\<^sub>A_of ?mds\<^sub>C AsmNoReadOrWrite;
      reg3 ~: ?mds\<^sub>C GuarNoReadOrWrite;
      reg3 ~: ?mds\<^sub>C GuarNoWrite |]
   ==> ?P |]
==> ?P
### Ambiguous input (line 2349 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" A.inv)
###     ("\<^const>local.A.conf_abv"
###       ("_applC" ("_position" Assign)
###         ("_cargs" ("_position" x_var)
###           ("_applC" ("_position" Load) ("_position" y_var))))
###       ("_position" mds) ("_position" mem))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" A.inv)
###     ("\<^const>local.C.conf_abv"
###       ("_applC" ("_position" Assign)
###         ("_cargs" ("_position" x_var)
###           ("_applC" ("_position" Load) ("_position" y_var))))
###       ("_position" mds) ("_position" mem))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2352 of "$AFP/Dependent_SIFUM_Refinement/Examples/EgHighBranchRevC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" A.inv)
###     ("\<^const>local.A.conf_abv"
###       ("_applC" ("_position" Assign)
###         ("_cargs" ("_position" x_var)
###           ("_applC" ("_position" Add)
###             ("_cargs" ("_applC" ("_position" Load) ("_position" y_var))
###               ("_applC" ("_position" Load) ("_position" z_var))))))
###       ("_position" mds) ("_position" mem))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" A.inv)
###     ("\<^const>local.C.conf_abv"
###       ("_applC" ("_position" Assign)
###         ("_cargs" ("_position" x_var)
###           ("_applC" ("_position" Add)
###             ("_cargs" ("_applC" ("_position" Load) ("_position" y_var))
###               ("_applC" ("_position" Load) ("_position" z_var))))))
###       ("_position" mds) ("_position" mem))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.EgHighBranchRevC"
### 17.094s elapsed time, 19.568s cpu time, 3.302s GC time
Loading theory "Draft.EgHighBranchRevCMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.EgHighBranchRevCMoreTemplates"
### 0.417s elapsed time, 0.597s cpu time, 0.050s GC time
val it = (): unit
