Loading theory "Draft.Contrib" (required by "Draft.ContribMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ContribMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ContribMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ContribMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.584s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ContribMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Contrib"
### 0.191s elapsed time, 0.786s cpu time, 0.039s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.244s elapsed time, 0.942s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ContribMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.213s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ContribMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.713s elapsed time, 2.179s cpu time, 0.267s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.748s elapsed time, 2.161s cpu time, 0.189s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.811s elapsed time, 4.024s cpu time, 0.777s GC time
Loading theory "Draft.Templates" (required by "Draft.ContribMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ContribMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.462s cpu time, 0.000s GC time
Loading theory "Draft.ContribMoreTemplates"
val templateLemmas =
   [("Contrib.basic_monos", "?P --> ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Contrib.basic_monos", "?A <= ?A",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Contrib.Part_subset", "Part ?A ?h <= ?A",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("Contrib.Part_id", "Part ?A (%x. x) = ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), t_empty),
       template_var 0)),
    ("Contrib.map_some_list", "map the (map Some ?L) = ?L",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Contrib.PartD1", "?a : Part ?A ?h ==> ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Contrib.insert_union", "?A Un insert ?a ?B = insert ?a ?A Un ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Contrib.dom_map_upd", "dom (?m(?a |-> ?b)) = insert ?a (dom ?m)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 2)))),
    ("Contrib.Ex1_one_point", "(EX! x. ?P x & x = ?a) = ?P ?a",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 1, template_var 0))),
    ("Contrib.dom_None", "?S ~: dom ?F ==> ?F ?S = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_hole 0))),
    ("Contrib.dom_override_the",
     "?x : dom ?G2.0 --> (?G1.0 ++ ?G2.0) ?x = ?G2.0 ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)),
             template_app (template_var 1, template_var 2)))
         )),
    ("Contrib.basic_monos", "?A <= ?B ==> ?x : ?A --> ?x : ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Contrib.Part_mono", "?A <= ?B ==> Part ?A ?h <= Part ?B ?h",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Contrib.basic_monos", "?A <= ?B ==> ?f -` ?A <= ?f -` ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Contrib.chg_map_new", "?m ?a = None ==> chg_map ?f ?a ?m = ?m",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_var 2))),
    ("Contrib.PartI", "?h ?b : ?A ==> ?h ?b : Part ?A ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_var 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Contrib.Part_Int", "Part (?A Int ?B) ?h = Part ?A ?h Int Part ?B ?h",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Contrib.basic_monos",
     "(if ?P then ?Q else ?R) = ((?P --> ?Q) & (~ ?P --> ?R))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Contrib.Some_one_point", "?P ?a ==> (SOME x. ?P x & x = ?a) = ?a",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_equation
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Contrib.basic_monos",
     "(!!x. ?P x --> ?Q x) ==> Collect ?P <= Collect ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Contrib.insert_or", "{s. s = ?t1.0 | ?P s} = insert ?t1.0 {s. ?P s}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, t_empty)))),
    ("Contrib.trancl_Int_subset", "(Restr ?R ?A)^+ <= Restr (?R^+) ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0), t_empty))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("Contrib.trancl_subseteq", "[| ?R <= ?Q; ?S : ?R^* |] ==> ?S : ?Q^*",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Contrib.subset_lemma", "[| ?A Int ?B = {}; ?A <= ?B |] ==> ?A = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation (template_var 1, template_hole 1))),
    ("Contrib.rtrancl_Int1", "(?a, ?b) : (?A Int ?B)^* ==> (?a, ?b) : ?A^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Contrib.rtrancl_Int2", "(?a, ?b) : (?A Int ?B)^* ==> (?a, ?b) : ?B^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Contrib.Part_eqI", "[| ?a : ?A; ?a = ?h ?b |] ==> ?a : Part ?A ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 3, template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Contrib.Part_Collect",
     "Part (?A Int {x. ?P x}) ?h = Part ?A ?h Int {x. ?P x}",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app (template_hole 0, t_empty)))),
    ("Contrib.Ex1_one_point2",
     "(EX! x. ?P x & ?Q x & x = ?a) = (?P ?a & ?Q ?a)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Contrib.basic_monos",
     "[| ?P1.0 --> ?Q1.0; ?P2.0 --> ?Q2.0 |]
      ==> ?P1.0 & ?P2.0 --> ?Q1.0 & ?Q2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Contrib.basic_monos",
     "[| ?P1.0 --> ?Q1.0; ?P2.0 --> ?Q2.0 |]
      ==> ?P1.0 | ?P2.0 --> ?Q1.0 | ?Q2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Contrib.subset_lemma2",
     "[| ?B Int ?A = {}; ?C <= ?A |] ==> ?C Int ?B = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 2),
         template_hole 1))),
    ("Contrib.Collect_subset", "{x. x <= ?A & ?P x} = {x: Pow ?A. ?P x}",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Contrib.chg_map_upd",
     "?m ?a = Some ?b ==> chg_map ?f ?a ?m = ?m(?a |-> ?f ?b)",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_hole 3,
             template_app (template_var 0, template_var 1)))))),
    ("Contrib.basic_monos",
     "(!!x. ?P x --> ?Q x) ==> (ALL x. ?P x) --> (ALL x. ?Q x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Contrib.basic_monos",
     "(!!x. ?P x --> ?Q x) ==> (EX x. ?P x) --> (EX x. ?Q x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Contrib.insert_notmem",
     "[| ?a ~= ?b; ?a ~: ?B |] ==> ?a ~: insert ?b ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Contrib.help_rtrancl_Range",
     "[| ?a ~= ?b; (?a, ?b) : ?R^* |] ==> ?b : Range ?R",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Contrib.Part_UNIV_Inl_comp",
     "(Part UNIV (Inl o ?f) = Part UNIV (Inl o ?g)) =
      (Part UNIV ?f = Part UNIV ?g)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_hole 8),
           template_app
            (template_app (template_hole 4, template_hole 6),
             template_var 0))),
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)))),
    ("Contrib.ran_override",
     "dom ?A Int dom ?B = {} ==> ran (?A ++ ?B) = ran ?A Un ran ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Contrib.dom_ran_the",
     "[| ran ?G = {?y}; ?x : dom ?G |] ==> the (?G ?x) = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_var 1))),
    ("Contrib.finite_conj2",
     "[| finite ?A; finite ?B |] ==> finite {(S, S'). S : ?A & S' : ?B}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty)))
           ))),
    ("Contrib.rtrancl_mem_Sigma",
     "[| ?a ~= ?b; (?a, ?b) : (?A \<times> ?A)^* |] ==> ?b : ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0), t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Contrib.insert_inter",
     "[| ?a ~: ?A; ?A Int ?B = {} |] ==> ?A Int insert ?a ?B = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_hole 1))),
    ("Contrib.dom_override_the3",
     "[| ?x ~: dom ?G2.0; ?x : dom ?G1.0 |]
      ==> (?G1.0 ++ ?G2.0) ?x = ?G1.0 ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("Contrib.ran_dom_the",
     "[| ?y ~: \<Union> (ran ?G); ?x : dom ?G |] ==> ?y ~: the (?G ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 0)))
               )
           ))),
    ("Contrib.finite_conj",
     "finite {(S, S'). ?P S S'} --> finite {(S, S'). ?P S S' & ?Q S S'}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, t_empty)))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty))))
         )),
    ("Contrib.Some_one_point2",
     "[| ?Q ?a; ?P ?a |] ==> (SOME x. ?P x & ?Q x & x = ?a) = ?a",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_equation
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Contrib.OneElement_Card",
     "[| finite ?M; card ?M <= Suc 0; ?t : ?M |] ==> ?M = {?t}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Contrib.ran_override_chg_map",
     "?A : dom ?G ==>
      ran (?G ++ [?A |-> ?B]) = ran (chg_map (%x. ?B) ?A ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 3, t_empty), template_var 2),
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 2),
             template_var 1))))),
    ("Contrib.rtrancl_Int",
     "[| (?a, ?b) : ?A; (?a, ?b) : ?B |] ==> (?a, ?b) : (?A Int ?B)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Contrib.dom_override_the2",
     "[| dom ?G1.0 Int dom ?G2.0 = {}; ?x : dom ?G1.0 |]
      ==> (?G1.0 ++ ?G2.0) ?x = ?G1.0 ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Contrib.Union_ran_override2",
     "?S : dom ?G ==>
      \<Union> (ran (?G(?S |-> insert ?SA (the (?G ?S))))) =
      insert ?SA (\<Union> (ran ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 2))))))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)))))),
    ("Contrib.rtrancl_Int_help",
     "(?a, ?b) : (?A Int ?B)^* ==> (?a, ?b) : ?A^* & (?a, ?b) : ?B^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2)),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Contrib.trancl_Int_mem",
     "(?S, ?T) : (Restr ?R ?A)^+ ==> (?S, ?T) : Restr (?R^+) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app
                   (template_app (template_hole 0, template_var 0),
                    t_empty))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0), t_empty)))
           ))),
    ("Contrib.PartE",
     "[| ?a : Part ?A ?h; !!z. [| ?a : ?A; ?a = ?h z |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Contrib.Union_ran_override",
     "?S : dom ?G ==>
      \<Union> (ran (?G ++ [?S |-> insert ?SA (the (?G ?S))])) =
      insert ?SA (\<Union> (ran ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 4, t_empty), template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_hole 0,
                       template_app (template_var 1, template_var 2)))))))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)))))),
    ("Contrib.Int_expand",
     "{(S, S'). ?P S S' & ?Q S S'} =
      {(S, S'). ?P S S'} Int {(S, S'). ?Q S S'}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, t_empty)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Contrib.tranclD3",
     "[| (?S, ?T) : ?R^+; (?S, ?T) ~: ?R |]
      ==> EX U. (?S, U) : ?R & (U, ?T) : ?R^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Contrib.tranclD4",
     "[| (?S, ?T) : ?R^+; (?S, ?T) ~: ?R |]
      ==> EX U. (?S, U) : ?R^+ & (U, ?T) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Contrib.trancl_collect",
     "[| (?x, ?y) : ?R^*; ?S ~: Domain ?R; ?y ~= ?S |]
      ==> (?x, ?y) : {p. fst p ~= ?S & snd p ~= ?S & p : ?R}^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app (template_hole 8, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2)),
             template_app
              (template_hole 8, template_app (template_hole 3, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.ContribMoreTemplates"
### 0.325s elapsed time, 0.456s cpu time, 0.048s GC time
val it = (): unit
