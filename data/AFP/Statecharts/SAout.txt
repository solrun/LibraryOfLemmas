Loading theory "Draft.Contrib" (required by "Draft.SAMoreTemplates" via "Draft.SA" via "Draft.Expr" via "Draft.Update" via "Draft.Data" via "Draft.DataSpace")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.515s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Contrib"
### 0.177s elapsed time, 0.731s cpu time, 0.039s GC time
Loading theory "Draft.DataSpace" (required by "Draft.SAMoreTemplates" via "Draft.SA" via "Draft.Expr" via "Draft.Update" via "Draft.Data")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.865s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SAMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.DataSpace"
### 0.116s elapsed time, 0.450s cpu time, 0.078s GC time
Loading theory "Draft.Data" (required by "Draft.SAMoreTemplates" via "Draft.SA" via "Draft.Expr" via "Draft.Update")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.307s cpu time, 0.117s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SAMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Data"
### 0.212s elapsed time, 0.834s cpu time, 0.081s GC time
Loading theory "Draft.Update" (required by "Draft.SAMoreTemplates" via "Draft.SA" via "Draft.Expr")
Proofs for inductive predicate(s) "FoldSet"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Update"
### 0.177s elapsed time, 0.697s cpu time, 0.065s GC time
Loading theory "Draft.Expr" (required by "Draft.SAMoreTemplates" via "Draft.SA")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.012s elapsed time, 3.805s cpu time, 0.886s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 3.909s cpu time, 0.808s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  eval_expr :: "'s set * 'e set => ('s, 'e) expr => bool"
consts
  ExprEvents :: "('s, 'e) expr => 'e set"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.982s elapsed time, 6.220s cpu time, 1.085s GC time
Loading theory "Draft.Templates" (required by "Draft.SAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.187s cpu time, 0.078s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SAMoreTemplates")
### theory "Draft.Expr"
### 2.040s elapsed time, 5.560s cpu time, 1.681s GC time
Loading theory "Draft.SA" (required by "Draft.SAMoreTemplates")
### theory "Draft.SA"
### 0.169s elapsed time, 0.365s cpu time, 0.045s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.766s elapsed time, 1.818s cpu time, 0.787s GC time
Loading theory "Draft.SAMoreTemplates"
val templateLemmas =
   [("SA.finite_States", "finite (States ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SA.finite_Delta", "finite (Delta ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SA.neq_States", "States ?SA ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("SA.InitState_States", "InitState ?A : States ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SA.EX_State_SA", "EX S. S : States ?SA",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("SA.Label_Delta_subset", "Label (Delta ?SA) <= Labels ?SA",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("SA.SeqAuto_select",
     "SeqAuto (States ?SA) (InitState ?SA) (Labels ?SA) (Delta ?SA)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SA.Delta_source_States", "?T : Delta ?A ==> source ?T : States ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SA.Delta_target_States", "?T : Delta ?A ==> target ?T : States ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SA.Target_SAs_Delta_States",
     "Target (\<Union> (Delta ` ?SAs ?HA)) <= \<Union> (States ` ?SAs ?HA)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_var 1, template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_var 1, template_var 0))))),
    ("SA.Rep_seqauto_select",
     "(States ?SA, InitState ?SA, Labels ?SA, Delta ?SA) : seqauto",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 1, template_var 0))))),
           template_hole 0)
         )),
    ("SA.SA_States_disjunct", "States ?A Int States ?A' = {} ==> ?A' ~= ?A",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_negation
        (template_equation (template_var 0, template_var 1)))),
    ("SA.Rep_seqauto_tuple",
     "Rep_seqauto ?SA = (States ?SA, InitState ?SA, Labels ?SA, Delta ?SA)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)))))),
    ("SA.States_Int_not_mem",
     "\<Union> (States ` ?F) Int States ?SA = {} ==> ?SA ~: ?F",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1))),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("SA.SA_States_disjunct2",
     "[| States ?A Int ?C = {}; States ?B <= ?C |] ==> ?B ~= ?A",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_var 1),
          template_hole 3),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_var 1)],
       template_negation
        (template_equation (template_var 0, template_var 2)))),
    ("SA.SA_States_disjunct3",
     "[| ?C Int States ?A = {}; States ?B <= ?C |]
      ==> States ?A Int States ?B = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_app (template_hole 3, template_var 1)),
          template_hole 2),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 0),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_hole 2)))]:
   (string * thm * template) list
### theory "Draft.SAMoreTemplates"
### 0.391s elapsed time, 0.530s cpu time, 0.066s GC time
val it = (): unit
