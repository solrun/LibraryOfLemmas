Loading theory "Draft.Basis" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute" via "Draft.POPLmarkRecord")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute" via "HOL-Library.Code_Target_Numeral")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
consts
  nth_el :: "'a list => nat => 'a option"
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### theory "HOL-Library.Code_Abstract_Nat"
### 0.080s elapsed time, 0.345s cpu time, 0.000s GC time
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
consts
  assoc :: "('a * 'b) list => 'a => 'b option"
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
consts
  unique :: "('a * 'b) list => bool"
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### theory "HOL-Library.Function_Algebras"
### 0.158s elapsed time, 0.640s cpu time, 0.041s GC time
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Code_Target_Int"
### 0.171s elapsed time, 0.691s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "Draft.Basis"
### 0.193s elapsed time, 0.781s cpu time, 0.041s GC time
Loading theory "Draft.POPLmarkRecord" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Code_Target_Nat"
### 0.151s elapsed time, 0.588s cpu time, 0.041s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Code_Target_Numeral"
### 0.159s elapsed time, 0.617s cpu time, 0.084s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.244s elapsed time, 0.968s cpu time, 0.084s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.253s cpu time, 0.166s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
consts
  is_TVarB :: "binding => bool"
consts
  type_ofB :: "binding => POPLmarkRecord.type"
consts
  mapB ::
    "(POPLmarkRecord.type => POPLmarkRecord.type) => binding => binding"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.031s elapsed time, 3.910s cpu time, 0.929s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.067s elapsed time, 3.970s cpu time, 0.848s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  psize :: "pat => nat"
  rsize :: "(char list * pat) list => nat"
  fsize :: "char list * pat => nat"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.951s elapsed time, 6.001s cpu time, 1.113s GC time
Loading theory "Draft.Templates" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.167s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExecuteMoreTemplates")
consts
  liftT :: "nat => nat => POPLmarkRecord.type => POPLmarkRecord.type"
  liftrT ::
    "nat
     => nat
        => (char list * POPLmarkRecord.type) list
           => (char list * POPLmarkRecord.type) list"
  liftfT ::
    "nat
     => nat
        => char list * POPLmarkRecord.type
           => char list * POPLmarkRecord.type"
consts
  liftp :: "nat => nat => pat => pat"
  liftrp :: "nat => nat => (char list * pat) list => (char list * pat) list"
  liftfp :: "nat => nat => char list * pat => char list * pat"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.123s cpu time, 0.118s GC time
consts
  lift :: "nat => nat => trm => trm"
  liftr :: "nat => nat => (char list * trm) list => (char list * trm) list"
  liftf :: "nat => nat => char list * trm => char list * trm"
consts
  substTT ::
    "POPLmarkRecord.type
     => nat => POPLmarkRecord.type => POPLmarkRecord.type"
  substrTT ::
    "(char list * POPLmarkRecord.type) list
     => nat
        => POPLmarkRecord.type => (char list * POPLmarkRecord.type) list"
  substfTT ::
    "char list * POPLmarkRecord.type
     => nat => POPLmarkRecord.type => char list * POPLmarkRecord.type"
consts
  substpT :: "pat => nat => POPLmarkRecord.type => pat"
  substrpT ::
    "(char list * pat) list
     => nat => POPLmarkRecord.type => (char list * pat) list"
  substfpT ::
    "char list * pat => nat => POPLmarkRecord.type => char list * pat"
consts
  decp :: "nat => nat => pat => pat"
consts
  subst :: "trm => nat => trm => trm"
  substr :: "(char list * trm) list => nat => trm => (char list * trm) list"
  substf :: "char list * trm => nat => trm => char list * trm"
consts
  substT :: "trm => nat => POPLmarkRecord.type => trm"
  substrT ::
    "(char list * trm) list
     => nat => POPLmarkRecord.type => (char list * trm) list"
  substfT ::
    "char list * trm => nat => POPLmarkRecord.type => char list * trm"
consts
  liftE :: "nat => nat => binding list => binding list"
consts
  substE :: "binding list => nat => POPLmarkRecord.type => binding list"
consts
  substs :: "trm => nat => trm list => trm"
consts
  decT :: "nat => nat => POPLmarkRecord.type => POPLmarkRecord.type"
consts
  decE :: "nat => nat => binding list => binding list"
consts
  decrT ::
    "nat
     => nat
        => (char list * POPLmarkRecord.type) list
           => (char list * POPLmarkRecord.type) list"
Proofs for inductive predicate(s) "well_formed"
  Proving monotonicity ...
Proofs for inductive predicate(s) "well_formedE"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subtyping"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ptyping", "ptypings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "typing", "typings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valuep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "match", "matchs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 2027 of "$AFP/POPLmark-deBruijn/POPLmarkRecord.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptyping" ("_position" p)
###       ("_position" T\<^sub>1) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typing" ("_position" \<Gamma>\<^sub>2)
###         ("_position" t\<^sub>1) ("_position" T\<^sub>1)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.match" ("_position" p)
###             ("_position" t\<^sub>1) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("_applC" ("\<^const>POPLmarkRecord.decT")
###                           ("\<^const>List.length" ("_position" \<Delta>)))))
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" T\<^sub>2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptyping" ("_position" p)
###       ("_position" T\<^sub>1) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typing" ("_position" \<Gamma>\<^sub>2)
###         ("_position" t\<^sub>1) ("_position" T\<^sub>1)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.match" ("_position" p)
###             ("_position" t\<^sub>1) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.typing"
###             ("\<^const>List.append"
###               ("_applC" ("\<^const>POPLmarkRecord.decE")
###                 ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                   ("_cargs" ("\<^const>Groups.zero_class.zero")
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" \<Gamma>\<^sub>2))
###             ("\<^const>POPLmarkRecord.substs" ("_position" t\<^sub>2)
###               ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###               ("_position" ts))
###             ("_applC" ("\<^const>POPLmarkRecord.decT")
###               ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                 ("_cargs"
###                   ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                   ("_position" T\<^sub>2))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptyping" ("_position" p)
###       ("_position" T\<^sub>1) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typing" ("_position" \<Gamma>\<^sub>2)
###         ("_position" t\<^sub>1) ("_position" T\<^sub>1)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.match" ("_position" p)
###             ("_position" t\<^sub>1) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("\<^const>POPLmarkRecord.decT")))
###                     ("_position" \<Delta>))))
###               ("_cargs"
###                 ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                 ("_position" T\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2030 of "$AFP/POPLmark-deBruijn/POPLmarkRecord.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptypings" ("_position" fps) ("_position" fTs)
###       ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typings" ("_position" \<Gamma>\<^sub>2)
###         ("_position" fs) ("_position" fTs)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.matchs" ("_position" fps)
###             ("_position" fs) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("_applC" ("\<^const>POPLmarkRecord.decT")
###                           ("\<^const>List.length" ("_position" \<Delta>)))))
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" T\<^sub>2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptypings" ("_position" fps) ("_position" fTs)
###       ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typings" ("_position" \<Gamma>\<^sub>2)
###         ("_position" fs) ("_position" fTs)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.matchs" ("_position" fps)
###             ("_position" fs) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.typing"
###             ("\<^const>List.append"
###               ("_applC" ("\<^const>POPLmarkRecord.decE")
###                 ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                   ("_cargs" ("\<^const>Groups.zero_class.zero")
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" \<Gamma>\<^sub>2))
###             ("\<^const>POPLmarkRecord.substs" ("_position" t\<^sub>2)
###               ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###               ("_position" ts))
###             ("_applC" ("\<^const>POPLmarkRecord.decT")
###               ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                 ("_cargs"
###                   ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                   ("_position" T\<^sub>2))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptypings" ("_position" fps) ("_position" fTs)
###       ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typings" ("_position" \<Gamma>\<^sub>2)
###         ("_position" fs) ("_position" fTs)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.matchs" ("_position" fps)
###             ("_position" fs) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("\<^const>POPLmarkRecord.decT")))
###                     ("_position" \<Delta>))))
###               ("_cargs"
###                 ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                 ("_position" T\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.POPLmarkRecord"
### 4.151s elapsed time, 10.082s cpu time, 2.345s GC time
Loading theory "Draft.Execute" (required by "Draft.ExecuteMoreTemplates")
Proofs for inductive predicate(s) "norm"
  Proving monotonicity ...
valuep_i ?x =
sup (Predicate.bind (Predicate.single ?x)
      (%x. case x of Rcd [] => Predicate.single ()
           | Rcd (a \<Colon> lista) => bot | _ => bot))
 (sup (Predicate.bind (Predicate.single ?x)
        (%x. case x of Rcd [] => bot
             | Rcd ((l_, t_) \<Colon> fs_) =>
                 Predicate.bind (valuep_i t_)
                  (%x. case x of
                       () =>
                         Predicate.bind (valuep_i (Rcd fs_))
                          (%x. case x of () => Predicate.single ()))
             | _ => bot))
   (sup (Predicate.bind (Predicate.single ?x)
          (%x. case x of \<lambda>:T_. t_ => Predicate.single ()
               | _ => bot))
     (Predicate.bind (Predicate.single ?x)
       (%x. case x of \<lambda><:T_. t_ => Predicate.single ()
            | _ => bot))))
valuep ?x1.0 = Predicate.holds (valuep_i ?x1.0)
norm_i_i ?x ?xa =
sup (Predicate.bind (Predicate.single (?x, ?xa))
      (%x. case x of
           (t_, ta_) =>
             if t_ = ta_
             then Predicate.bind (Predicate.if_pred (t_ : value))
                   (%x. case x of () => Predicate.single ())
             else bot))
 (Predicate.bind (Predicate.single (?x, ?xa))
   (%x. case x of
        (t_, u_) =>
          Predicate.bind (eval_i_o t_)
           (%x. Predicate.bind (norm_i_i x u_)
                 (%x. case x of () => Predicate.single ()))))
Execute.normalize ?x =
sup (Predicate.bind (Predicate.single ?x)
      (%x. Predicate.bind (Predicate.if_pred (x : value))
            (%xa. case xa of () => Predicate.single x)))
 (Predicate.bind (Predicate.single ?x)
   (%x. Predicate.bind (eval_i_o x)
         (%x. Predicate.bind (Execute.normalize x) Predicate.single)))
(?x1.0 \<Down> ?x2.0) = Predicate.holds (norm_i_i ?x1.0 ?x2.0)
### theory "Draft.Execute"
### 0.641s elapsed time, 0.680s cpu time, 0.033s GC time
Loading theory "Draft.ExecuteMoreTemplates"
val templateLemmas =
   [("Execute.valuep_iI", "valuep ?x ==> pred.eval (valuep_i ?x) ()",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Execute.normalizeI",
     "?x \<Down> ?xa ==> pred.eval (Execute.normalize ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eval_i_oI",
     "?x \<longmapsto> ?xa ==> pred.eval (eval_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.evals_i_oI",
     "?x [\<longmapsto>] ?xa ==> pred.eval (evals_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_i_oI", "Predicate.eq ?x ?xa ==> pred.eval (eq_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_o_iI", "Predicate.eq ?x ?xa ==> pred.eval (eq_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Execute.norm_i_iI",
     "?x \<Down> ?xa ==> pred.eval (norm_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.eval_i_iI",
     "?x \<longmapsto> ?xa ==> pred.eval (eval_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.evals_i_iI",
     "?x [\<longmapsto>] ?xa ==> pred.eval (evals_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.eq_i_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.match_i_i_oI",
     "\<turnstile> ?x \<rhd> ?xa \<Rightarrow> ?xb ==>
      pred.eval (match_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.matchs_i_i_oI",
     "\<turnstile> ?x [\<rhd>] ?xa \<Rightarrow> ?xb ==>
      pred.eval (matchs_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.match_i_i_iI",
     "\<turnstile> ?x \<rhd> ?xa \<Rightarrow> ?xb ==>
      pred.eval (match_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.matchs_i_i_iI",
     "\<turnstile> ?x [\<rhd>] ?xa \<Rightarrow> ?xb ==>
      pred.eval (matchs_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.valuep_iE",
     "[| pred.eval (valuep_i ?x) ?y; valuep ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 0, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_i_oE",
     "[| pred.eval (eq_i_o ?x) ?xa; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_o_iE",
     "[| pred.eval (eq_o_i ?xa) ?x; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.evals_i_oE",
     "[| pred.eval (evals_i_o ?x) ?xa; ?x [\<longmapsto>] ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eval_i_oE",
     "[| pred.eval (eval_i_o ?x) ?xa; ?x \<longmapsto> ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.normalizeE",
     "[| pred.eval (Execute.normalize ?x) ?xa; ?x \<Down> ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_i_iE",
     "[| pred.eval (eq_i_i ?x ?xa) ?y; Predicate.eq ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eval_i_iE",
     "[| pred.eval (eval_i_i ?x ?xa) ?y; ?x \<longmapsto> ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.evals_i_iE",
     "[| pred.eval (evals_i_i ?x ?xa) ?y; ?x [\<longmapsto>] ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.norm_i_iE",
     "[| pred.eval (norm_i_i ?x ?xa) ?y; ?x \<Down> ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.match_i_i_oE",
     "[| pred.eval (match_i_i_o ?x ?xa) ?xb;
         \<turnstile> ?x \<rhd> ?xa \<Rightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.matchs_i_i_oE",
     "[| pred.eval (matchs_i_i_o ?x ?xa) ?xb;
         \<turnstile> ?x [\<rhd>] ?xa \<Rightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.match_i_i_iE",
     "[| pred.eval (match_i_i_i ?x ?xa ?xb) ?y;
         \<turnstile> ?x \<rhd> ?xa \<Rightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.matchs_i_i_iE",
     "[| pred.eval (matchs_i_i_i ?x ?xa ?xb) ?y;
         \<turnstile> ?x [\<rhd>] ?xa \<Rightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ExecuteMoreTemplates"
### 0.462s elapsed time, 1.475s cpu time, 0.095s GC time
"{\<lambda><:Top.
     \<lambda><:TVar 0.
        \<lambda><:TVar 1.
           \<lambda>:TVar 2 \<rightarrow> TVar 1.
              (\<lambda><:Top.
                  \<lambda><:TVar 0.
                     \<lambda><:TVar 1.
                        \<lambda>:TVar 2 \<rightarrow> TVar 1.
                           \<lambda>:TVar 1.
                              (\<lambda><:Top.
                                  \<lambda><:TVar 0.
                                     \<lambda><:TVar 1.
  \<lambda>:TVar 2 \<rightarrow> TVar 1.
     \<lambda>:TVar 1. Var 1 \<bullet> Var 0) \<bullet>\<^sub>\<tau>
                              TVar 4 \<bullet>\<^sub>\<tau>
                              TVar 3 \<bullet>\<^sub>\<tau>
                              TVar 3 \<bullet>
                              Var 1 \<bullet>
                              ((\<lambda><:Top.
                                   \<lambda><:TVar 0.
\<lambda><:TVar 1.
   \<lambda>:TVar 2 \<rightarrow> TVar 1.
      \<lambda>:TVar 1. Var 1 \<bullet> Var 0) \<bullet>\<^sub>\<tau>
                               TVar 4 \<bullet>\<^sub>\<tau>
                               TVar 3 \<bullet>\<^sub>\<tau>
                               TVar 2 \<bullet>
                               Var 1 \<bullet>
                               Var 0)) \<bullet>\<^sub>\<tau>
              TVar 3 \<bullet>\<^sub>\<tau>
              TVar 2 \<bullet>\<^sub>\<tau>
              TVar 1 \<bullet>
              ((\<lambda><:Top.
                   \<lambda><:TVar 0.
                      \<lambda><:TVar 1.
                         \<lambda>:TVar 2 \<rightarrow> TVar 1.
                            \<lambda>:TVar 1.
                               Var 1 \<bullet> Var 0) \<bullet>\<^sub>\<tau>
               TVar 3 \<bullet>\<^sub>\<tau>
               TVar 2 \<bullet>\<^sub>\<tau>
               TVar 1) \<bullet>
              Var 0}"
  :: "trm set"
"{\<lambda><:Top.
     \<lambda><:TVar 0.
        \<lambda><:TVar 1.
           \<lambda>:TVar 2 \<rightarrow> TVar 1.
              (\<lambda><:Top.
                  \<lambda><:TVar 0.
                     \<lambda><:TVar 1.
                        \<lambda>:TVar 2 \<rightarrow> TVar 1.
                           \<lambda>:TVar 1.
                              (\<lambda><:Top.
                                  \<lambda><:TVar 0.
                                     \<lambda><:TVar 1.
  \<lambda>:TVar 2 \<rightarrow> TVar 1.
     \<lambda>:TVar 1. Var 1 \<bullet> Var 0) \<bullet>\<^sub>\<tau>
                              TVar 4 \<bullet>\<^sub>\<tau>
                              TVar 3 \<bullet>\<^sub>\<tau>
                              TVar 3 \<bullet>
                              Var 1 \<bullet>
                              ((\<lambda><:Top.
                                   \<lambda><:TVar 0.
\<lambda><:TVar 1.
   \<lambda>:TVar 2 \<rightarrow> TVar 1.
      \<lambda>:TVar 1. Var 1 \<bullet> Var 0) \<bullet>\<^sub>\<tau>
                               TVar 4 \<bullet>\<^sub>\<tau>
                               TVar 3 \<bullet>\<^sub>\<tau>
                               TVar 2 \<bullet>
                               Var 1 \<bullet>
                               Var 0)) \<bullet>\<^sub>\<tau>
              TVar 3 \<bullet>\<^sub>\<tau>
              TVar 2 \<bullet>\<^sub>\<tau>
              TVar 1 \<bullet>
              ((\<lambda><:Top.
                   \<lambda><:TVar 0.
                      \<lambda><:TVar 1.
                         \<lambda>:TVar 2 \<rightarrow> TVar 1.
                            \<lambda>:TVar 1.
                               Var 1 \<bullet> Var 0) \<bullet>\<^sub>\<tau>
               TVar 3 \<bullet>\<^sub>\<tau>
               TVar 2 \<bullet>\<^sub>\<tau>
               TVar 1) \<bullet>
              Var 0}"
  :: "trm set"
val it = (): unit
