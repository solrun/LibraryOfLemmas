Loading theory "Draft.Basis" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.POPLmarkRecordCtxt" via "Draft.POPLmarkRecord")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  nth_el :: "'a list => nat => 'a option"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  assoc :: "('a * 'b) list => 'a => 'b option"
consts
  unique :: "('a * 'b) list => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.568s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Basis"
### 0.196s elapsed time, 0.805s cpu time, 0.050s GC time
Loading theory "Draft.POPLmarkRecord" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.POPLmarkRecordCtxt")
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.949s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.404s elapsed time, 1.618s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  is_TVarB :: "binding => bool"
consts
  type_ofB :: "binding => POPLmarkRecord.type"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  mapB ::
    "(POPLmarkRecord.type => POPLmarkRecord.type) => binding => binding"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.972s elapsed time, 3.670s cpu time, 0.824s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.084s elapsed time, 3.868s cpu time, 0.849s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.957s elapsed time, 6.205s cpu time, 1.069s GC time
Loading theory "Draft.Templates" (required by "Draft.POPLmarkRecordCtxtMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.167s cpu time, 0.057s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.POPLmarkRecordCtxtMoreTemplates")
consts
  psize :: "pat => nat"
  rsize :: "(char list * pat) list => nat"
  fsize :: "char list * pat => nat"
consts
  liftT :: "nat => nat => POPLmarkRecord.type => POPLmarkRecord.type"
  liftrT ::
    "nat
     => nat
        => (char list * POPLmarkRecord.type) list
           => (char list * POPLmarkRecord.type) list"
  liftfT ::
    "nat
     => nat
        => char list * POPLmarkRecord.type
           => char list * POPLmarkRecord.type"
consts
  liftp :: "nat => nat => pat => pat"
  liftrp :: "nat => nat => (char list * pat) list => (char list * pat) list"
  liftfp :: "nat => nat => char list * pat => char list * pat"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.097s cpu time, 0.078s GC time
consts
  lift :: "nat => nat => trm => trm"
  liftr :: "nat => nat => (char list * trm) list => (char list * trm) list"
  liftf :: "nat => nat => char list * trm => char list * trm"
consts
  substTT ::
    "POPLmarkRecord.type
     => nat => POPLmarkRecord.type => POPLmarkRecord.type"
  substrTT ::
    "(char list * POPLmarkRecord.type) list
     => nat
        => POPLmarkRecord.type => (char list * POPLmarkRecord.type) list"
  substfTT ::
    "char list * POPLmarkRecord.type
     => nat => POPLmarkRecord.type => char list * POPLmarkRecord.type"
consts
  substpT :: "pat => nat => POPLmarkRecord.type => pat"
  substrpT ::
    "(char list * pat) list
     => nat => POPLmarkRecord.type => (char list * pat) list"
  substfpT ::
    "char list * pat => nat => POPLmarkRecord.type => char list * pat"
consts
  decp :: "nat => nat => pat => pat"
consts
  subst :: "trm => nat => trm => trm"
  substr :: "(char list * trm) list => nat => trm => (char list * trm) list"
  substf :: "char list * trm => nat => trm => char list * trm"
consts
  substT :: "trm => nat => POPLmarkRecord.type => trm"
  substrT ::
    "(char list * trm) list
     => nat => POPLmarkRecord.type => (char list * trm) list"
  substfT ::
    "char list * trm => nat => POPLmarkRecord.type => char list * trm"
consts
  liftE :: "nat => nat => binding list => binding list"
consts
  substE :: "binding list => nat => POPLmarkRecord.type => binding list"
consts
  substs :: "trm => nat => trm list => trm"
consts
  decT :: "nat => nat => POPLmarkRecord.type => POPLmarkRecord.type"
consts
  decE :: "nat => nat => binding list => binding list"
consts
  decrT ::
    "nat
     => nat
        => (char list * POPLmarkRecord.type) list
           => (char list * POPLmarkRecord.type) list"
Proofs for inductive predicate(s) "well_formed"
  Proving monotonicity ...
Proofs for inductive predicate(s) "well_formedE"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subtyping"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ptyping", "ptypings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "typing", "typings"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valuep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "match", "matchs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 2027 of "$AFP/POPLmark-deBruijn/POPLmarkRecord.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptyping" ("_position" p)
###       ("_position" T\<^sub>1) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typing" ("_position" \<Gamma>\<^sub>2)
###         ("_position" t\<^sub>1) ("_position" T\<^sub>1)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.match" ("_position" p)
###             ("_position" t\<^sub>1) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("_applC" ("\<^const>POPLmarkRecord.decT")
###                           ("\<^const>List.length" ("_position" \<Delta>)))))
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" T\<^sub>2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptyping" ("_position" p)
###       ("_position" T\<^sub>1) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typing" ("_position" \<Gamma>\<^sub>2)
###         ("_position" t\<^sub>1) ("_position" T\<^sub>1)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.match" ("_position" p)
###             ("_position" t\<^sub>1) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.typing"
###             ("\<^const>List.append"
###               ("_applC" ("\<^const>POPLmarkRecord.decE")
###                 ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                   ("_cargs" ("\<^const>Groups.zero_class.zero")
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" \<Gamma>\<^sub>2))
###             ("\<^const>POPLmarkRecord.substs" ("_position" t\<^sub>2)
###               ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###               ("_position" ts))
###             ("_applC" ("\<^const>POPLmarkRecord.decT")
###               ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                 ("_cargs"
###                   ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                   ("_position" T\<^sub>2))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptyping" ("_position" p)
###       ("_position" T\<^sub>1) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typing" ("_position" \<Gamma>\<^sub>2)
###         ("_position" t\<^sub>1) ("_position" T\<^sub>1)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.match" ("_position" p)
###             ("_position" t\<^sub>1) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("\<^const>POPLmarkRecord.decT")))
###                     ("_position" \<Delta>))))
###               ("_cargs"
###                 ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                 ("_position" T\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2030 of "$AFP/POPLmark-deBruijn/POPLmarkRecord.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptypings" ("_position" fps) ("_position" fTs)
###       ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typings" ("_position" \<Gamma>\<^sub>2)
###         ("_position" fs) ("_position" fTs)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.matchs" ("_position" fps)
###             ("_position" fs) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("_applC" ("\<^const>POPLmarkRecord.decT")
###                           ("\<^const>List.length" ("_position" \<Delta>)))))
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" T\<^sub>2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptypings" ("_position" fps) ("_position" fTs)
###       ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typings" ("_position" \<Gamma>\<^sub>2)
###         ("_position" fs) ("_position" fTs)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.matchs" ("_position" fps)
###             ("_position" fs) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.typing"
###             ("\<^const>List.append"
###               ("_applC" ("\<^const>POPLmarkRecord.decE")
###                 ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                   ("_cargs" ("\<^const>Groups.zero_class.zero")
###                     ("_position" \<Gamma>\<^sub>1))))
###               ("_position" \<Gamma>\<^sub>2))
###             ("\<^const>POPLmarkRecord.substs" ("_position" t\<^sub>2)
###               ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###               ("_position" ts))
###             ("_applC" ("\<^const>POPLmarkRecord.decT")
###               ("_cargs" ("\<^const>List.length" ("_position" \<Delta>))
###                 ("_cargs"
###                   ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                   ("_position" T\<^sub>2))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>POPLmarkRecord.ptypings" ("_position" fps) ("_position" fTs)
###       ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>POPLmarkRecord.typings" ("_position" \<Gamma>\<^sub>2)
###         ("_position" fs) ("_position" fTs)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>POPLmarkRecord.typing"
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("\<^const>List.append" ("_position" \<Delta>)
###               ("_position" \<Gamma>\<^sub>2)))
###           ("_position" t\<^sub>2) ("_position" T\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>POPLmarkRecord.matchs" ("_position" fps)
###             ("_position" fs) ("_position" ts)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("\<^const>POPLmarkRecord.decE")
###             ("_cargs"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" \<Delta>)
###                   ("_cargs"
###                     ("\<^const>List.length"
###                       ("\<^const>POPLmarkRecord.typing"
###                         ("\<^const>List.append"
###                           ("_applC" ("\<^const>Groups.zero_class.zero")
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" \<Gamma>\<^sub>2))
###                         ("\<^const>POPLmarkRecord.substs"
###                           ("_position" t\<^sub>2)
###                           ("\<^const>List.length"
###                             ("_position" \<Gamma>\<^sub>1))
###                           ("_position" ts))
###                         ("\<^const>POPLmarkRecord.decT")))
###                     ("_position" \<Delta>))))
###               ("_cargs"
###                 ("\<^const>List.length" ("_position" \<Gamma>\<^sub>1))
###                 ("_position" T\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.POPLmarkRecord"
### 4.100s elapsed time, 9.412s cpu time, 2.157s GC time
Loading theory "Draft.POPLmarkRecordCtxt" (required by "Draft.POPLmarkRecordCtxtMoreTemplates")
Proofs for inductive predicate(s) "ctxtp", "rctxtp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eval"
  Proving monotonicity ...
### theory "Draft.POPLmarkRecordCtxt"
### 0.234s elapsed time, 0.273s cpu time, 0.047s GC time
Loading theory "Draft.POPLmarkRecordCtxtMoreTemplates"
val templateLemmas =
   [("POPLmarkRecordCtxt.eval_evalc_eq",
     "(?t \<longmapsto> ?t') = (?t \<longmapsto>\<^sub>c ?t')",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("POPLmarkRecordCtxt.progress",
     "[] \<turnstile> ?t : ?T ==>
      ?t : POPLmarkRecord.value | (EX t'. ?t \<longmapsto>\<^sub>c t')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("POPLmarkRecordCtxt.preservation",
     "[| ?t \<longmapsto>\<^sub>c ?t'; ?\<Gamma> \<turnstile> ?t : ?T |]
      ==> ?\<Gamma> \<turnstile> ?t' : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("POPLmarkRecordCtxt.ctxt_imp_eval",
     "[| ?E\<^sub>r : rctxt; ?t \<longmapsto> ?t' |]
      ==> ?E\<^sub>r ?t [\<longmapsto>] ?E\<^sub>r ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("POPLmarkRecordCtxt.ctxt_imp_eval",
     "[| ?E : ctxt; ?t \<longmapsto> ?t' |] ==> ?E ?t \<longmapsto> ?E ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("POPLmarkRecordCtxt.Abs_preservation",
     "?\<Gamma> \<turnstile> (\<lambda>:?T\<^sub>1\<^sub>1.
                                 ?t\<^sub>1\<^sub>2) \<bullet>
                             ?t\<^sub>2 : ?T ==>
      ?\<Gamma> \<turnstile> ?t\<^sub>1\<^sub>2[0 \<mapsto> ?t\<^sub>2] : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("POPLmarkRecordCtxt.TAbs_preservation",
     "?\<Gamma> \<turnstile> (\<lambda><:?T\<^sub>1\<^sub>1.
                                 ?t\<^sub>1\<^sub>2) \<bullet>\<^sub>\<tau>
                             ?T\<^sub>2 : ?T ==>
      ?\<Gamma> \<turnstile> ?t\<^sub>1\<^sub>2[0 \<mapsto>\<^sub>\<tau> ?T\<^sub>2] : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("POPLmarkRecordCtxt.rctxt_labels",
     "[| ?E : rctxt; ?E ?t\<langle>?l\<rangle>\<^sub>? = \<bottom> |]
      ==> ?E ?t'\<langle>?l\<rangle>\<^sub>? = \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app (template_var 3, template_var 2)),
            template_var 1),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 3, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("POPLmarkRecordCtxt.Proj_preservation",
     "[| ?\<Gamma> \<turnstile> Rcd ?fs..?l : ?T;
         ?fs\<langle>?l\<rangle>\<^sub>? = \<lfloor>?v\<rfloor> |]
      ==> ?\<Gamma> \<turnstile> ?v : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 0),
             template_var 1)
           ))),
    ("POPLmarkRecordCtxt.Let_preservation",
     "[| ?\<Gamma> \<turnstile> (LET ?p = ?t\<^sub>1 IN ?t\<^sub>2) : ?T;
         \<turnstile> ?p \<rhd> ?t\<^sub>1 \<Rightarrow> ?ts |]
      ==> ?\<Gamma> \<turnstile> ?t\<^sub>2[0 \<mapsto>\<^sub>s ?ts] : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 0)),
             template_var 1)
           ))),
    ("POPLmarkRecordCtxt.context_decomp",
     "[] \<turnstile> ?t : ?T ==>
      ?t : POPLmarkRecord.value |
      (EX E t\<^sub>0 t\<^sub>0'.
          E : ctxt &
          ?t = E t\<^sub>0 & t\<^sub>0 \<longmapsto>\<^sub>c t\<^sub>0')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 7)),
             template_app (template_hole 6, t_empty))
           ))),
    ("POPLmarkRecordCtxt.context_decomp",
     "[] \<turnstile> ?fs [:] ?fTs ==>
      (ALL (l, t):set ?fs. t : POPLmarkRecord.value) |
      (EX E t\<^sub>0 t\<^sub>0'.
          E : rctxt &
          ?fs = E t\<^sub>0 & t\<^sub>0 \<longmapsto>\<^sub>c t\<^sub>0')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_hole 13),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 1)),
                 template_app (template_hole 9, t_empty))),
             template_app (template_hole 6, t_empty))
           ))),
    ("POPLmarkRecordCtxt.context_typing",
     "[| ?\<Gamma> \<turnstile> ?u : ?T; ?E : ctxt; ?u = ?E ?t;
         !!T\<^sub>0.
            ?\<Gamma> \<turnstile> ?t : T\<^sub>0 ==>
            ?\<Gamma> \<turnstile> ?t' : T\<^sub>0 |]
      ==> ?\<Gamma> \<turnstile> ?E ?t' : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_equation
         (template_var 4, template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_app (template_var 2, template_var 0)),
             template_var 3)
           ))),
    ("POPLmarkRecordCtxt.context_typing",
     "[| ?\<Gamma> \<turnstile> ?fs [:] ?fTs; ?E\<^sub>r : rctxt;
         ?fs = ?E\<^sub>r ?t;
         !!T\<^sub>0.
            ?\<Gamma> \<turnstile> ?t : T\<^sub>0 ==>
            ?\<Gamma> \<turnstile> ?t' : T\<^sub>0 |]
      ==> ?\<Gamma> \<turnstile> ?E\<^sub>r ?t' [:] ?fTs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_equation
         (template_var 4, template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_app (template_var 2, template_var 0)),
             template_var 3)
           ))),
    ("POPLmarkRecordCtxt.rctxt_induct",
     "[| ?x2.0 : rctxt;
         !!E l fs. E : ctxt ==> ?P2.0 (%t. (l, E t) \<Colon> fs);
         !!v E l.
            [| v : POPLmarkRecord.value; E : rctxt; ?P2.0 E |]
            ==> ?P2.0 (%t. (l, v) \<Colon> E t) |]
      ==> ?P2.0 ?x2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_hole 11)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_var 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.POPLmarkRecordCtxtMoreTemplates"
### 0.405s elapsed time, 0.555s cpu time, 0.068s GC time
val it = (): unit
