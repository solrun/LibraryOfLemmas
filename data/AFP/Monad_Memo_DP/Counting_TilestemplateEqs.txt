   [("Counting_Tiles.F_base_0", "F ?m 0 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Counting_Tiles.valid_eq_valid'", "valid' ?m ?l = valid ?m ?l",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Counting_Tiles.F_base_0_aux", "{l. l = [] & valid ?m l} = {[]}",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 3),
         template_hole 0))),
    ("Counting_Tiles.F_base_aux_2",
     "{l. length l = ?m & valid ?m l} = {replicate ?m R, replicate ?m B}",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1)),
           template_hole 0)))),
    ("Counting_Tiles.replicate_iff",
     "(ALL i<length ?l. ?l ! i = R) = (EX n. ?l = replicate n R)",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Counting_Tiles.replicate_Cons_eq",
     "(replicate ?n ?x = ?y # ?ys) =
      (EX n'. ?n = Suc n' & ?x = ?y & replicate n' ?x = ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Counting_Tiles.valid_split",
     "valid ?m ?l =
      (?l = [] |
       ?l ! 0 = B & valid ?m (tl ?l) |
       ?m <= length ?l & (ALL i<length ?l. ?l ! i = R) |
       (EX j<length ?l.
           ?m <= j &
           (ALL i<j. ?l ! i = R) &
           ?l ! j = B & valid ?m (drop (j + 1) ?l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 1),
              template_var 0)
            )],
       template_dunno))]
