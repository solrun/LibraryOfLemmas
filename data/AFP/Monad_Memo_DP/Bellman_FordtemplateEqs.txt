   [("Bellman_Ford.is_path_eq",
     "is_path ?W ?t ?xs = ??.Bellman_Ford.is_path2 ?W (?xs @ [?t])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Bellman_Ford.OPT_0",
     "OPT ?n ?W ?t 0 ?v = (if ?t = ?v then 0 else \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_dunno)),
    ("Bellman_Ford.bf_simps",
     "bf ?n ?W ?t 0 ?v = (if ?t = ?v then 0 else \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_dunno)),
    ("Bellman_Ford.get_return",
     "run_state (State_Monad.get >>= (%m. State_Monad.return (?f m))) ?m =
      (?f ?m, ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2), t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_var 0)),
         template_var 0))),
    ("Bellman_Ford.bf_impl_correct",
     "bf ?n ?w ?t ?i ?j = result_of (bf_impl ?n ?w ?t ?i ?j) Heap.empty",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0))))),
    ("Bellman_Ford.finite_setcompr_eq_image",
     "finite {?f x |x. ?P x} = finite (?f ` {x. ?P x})",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, t_empty)),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, t_empty))))),
    ("Bellman_Ford.weight_append",
     "weight ?W (?xs @ ?a # ?ys) =
      weight ?W (?xs @ [?a]) + weight ?W (?a # ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Bellman_Ford.bf_memoized",
     "(case ?x of (a, b) => bf ?n ?W ?t a b) =
      fst (run_state (case ?x of (a, b) => bf\<^sub>m' ?n ?W ?t a b)
            Mapping.empty)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0)),
           template_hole 0)))),
    ("Bellman_Ford.bottom_up_alt",
     "bf ?n ?W ?t ?i ?j =
      fst (run_state
            (iter_bf ?n ?W ?t (0, 0) >>= (%_. bf\<^sub>m' ?n ?W ?t ?i ?j))
            Mapping.empty)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 2))),
               t_empty)),
           template_hole 0)))),
    ("Bellman_Ford.bf_bottom_up",
     "(case ?x of (x, y) => bf ?n ?W ?t x y) =
      fst (run_state
            (iter_bf ?n ?W ?t ?y >>=
             (%_. case ?x of (a, b) => bf\<^sub>m' ?n ?W ?t a b))
            Mapping.empty)",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty), template_var 1),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 0)),
               t_empty)),
           template_hole 0)))),
    ("Bellman_Ford.bf_simps",
     "bf ?n ?W ?t (Suc ?i) ?v =
      fold min (map (%w. ?W ?v w + bf ?n ?W ?t ?i w) [0..<Suc ?n])
       (bf ?n ?W ?t ?i ?v)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2),
           template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app (template_hole 6, template_var 4)))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Bellman_Ford.iter_bf_unfold",
     "iter_bf ?n ?W ?t =
      (%(i, j).
          if i <= ?n & j <= ?n
          then bf\<^sub>m' ?n ?W ?t i j >>=
               (%_. iter_bf ?n ?W ?t
                     (if j < ?n then (i, j + 1) else (i + 1, 0)))
          else State_Monad.return ())",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 14, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 13, t_empty))),
    ("Bellman_Ford.iter_bf_heap_unfold",
     "iter_bf_heap ?n ?w ?t ?mem =
      (%(i, j).
          if i <= ?n & j <= ?n
          then bf\<^sub>h'_impl ?n ?w ?t ?mem i j >>=
               (%_. iter_bf_heap ?n ?w ?t ?mem
                     (if j < ?n then (i, j + 1) else (i + 1, 0)))
          else return ())",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 14, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 13, t_empty)))]
