   [("Counting_Tiles.valid_m_Rs", "valid ?m (replicate ?m R)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Counting_Tiles.valid_line_just_B", "valid ?m (replicate ?n B)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Counting_Tiles.F_base_0", "F ?m 0 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Counting_Tiles.valid_eq_valid'", "valid' ?m ?l = valid ?m ?l",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Counting_Tiles.valid_valid'", "valid ?m ?l ==> valid' ?m ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Counting_Tiles.valid'_valid", "valid' ?m ?l ==> valid ?m ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Counting_Tiles.valid_red", "?m <= ?n ==> valid ?m (replicate ?n R)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Counting_Tiles.finite_valid_length",
     "finite {l. length l = ?n & valid ?m l}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Counting_Tiles.F_base_2", "0 < ?m ==> F ?m ?m = 2",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Counting_Tiles.lcount_correct", "0 < ?m ==> lcount ?m ?n = F ?m ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Counting_Tiles.valid_line_aux",
     "{l. length l = ?n & valid ?m l} ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("Counting_Tiles.F_base_0_aux", "{l. l = [] & valid ?m l} = {[]}",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 3),
         template_hole 0))),
    ("Counting_Tiles.lists_of_len_fin1",
     "finite ?A ==> finite (lists ?A Int {l. length l = ?n})",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app (template_hole 2, t_empty)))
           ))),
    ("Counting_Tiles.valid_prepend_B_iff",
     "0 < ?m ==> valid ?m (B # ?xs) = valid ?m ?xs",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Counting_Tiles.F_base_1", "[| 0 < ?n; ?n < ?m |] ==> F ?m ?n = 1",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Counting_Tiles.F_base_aux_2",
     "{l. length l = ?m & valid ?m l} = {replicate ?m R, replicate ?m B}",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1)),
           template_hole 0)))),
    ("Counting_Tiles.replicate_iff",
     "(ALL i<length ?l. ?l ! i = R) = (EX n. ?l = replicate n R)",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Counting_Tiles.replicate_unequal_aux",
     "?x < ?y ==> replicate ?x R @ B # ?l ~= replicate ?y R @ B # ?l'",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Counting_Tiles.disjE1",
     "[| ?A | ?B; ?A ==> ?P; [| ~ ?A; ?B |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_implication
           ([template_predicate (template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Counting_Tiles.replicate_Cons_eq",
     "(replicate ?n ?x = ?y # ?ys) =
      (EX n'. ?n = Suc n' & ?x = ?y & replicate n' ?x = ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Counting_Tiles.F_base_aux",
     "[| 0 < ?n; ?n < ?m |]
      ==> {l. length l = ?n & valid ?m l} = {replicate ?n B}",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_hole 0)))),
    ("Counting_Tiles.replicate_iff2",
     "?n < length ?l ==>
      (ALL i<?n. ?l ! i = R) = (EX l'. ?l = replicate ?n R @ l')",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 3, t_empty)))),
    ("Counting_Tiles.F_rec",
     "[| ?m < ?n; 0 < ?m |]
      ==> F ?m ?n =
          F ?m (?n - 1) + 1 + (SUM i = ?m..<?n. F ?m (?n - i - 1))",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Counting_Tiles.valid_split",
     "valid ?m ?l =
      (?l = [] |
       ?l ! 0 = B & valid ?m (tl ?l) |
       ?m <= length ?l & (ALL i<length ?l. ?l ! i = R) |
       (EX j<length ?l.
           ?m <= j &
           (ALL i<j. ?l ! i = R) &
           ?l ! j = B & valid ?m (drop (j + 1) ?l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app (template_hole 17, template_var 0),
                 template_hole 16)),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app
                          (template_app (template_hole 13, template_var 0),
                           template_hole 12)),
                       template_hole 11)),
                   template_app
                    (template_app (template_hole 19, template_var 1),
                     template_app (template_hole 10, template_var 0)))),
               template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_app (template_hole 8, template_var 0))),
                     template_app (template_hole 7, t_empty))),
                 template_app (template_hole 3, t_empty))))
           )))]
