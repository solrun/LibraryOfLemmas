   [("OptBST.cost'_Leaf", "cost' ?p \<langle>\<rangle> = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("OptBST.depth_not_neg_inf", "(depth ?x ?t = -\<infinity>) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("OptBST.W_fun_correct", "W_fun ?p ?i ?j = OptBST.W ?p ?i ?j",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("OptBST.opt_bst_correct", "inorder (opt_bst ?W ?i ?j) = [?i..?j]",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OptBST.min_wpl'_correct",
     "min_wpl' ?p ?i ?j = min_wpl (OptBST.W ?p) ?i ?j",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("OptBST.opt_bst'_correct",
     "opt_bst' ?p ?i ?j = opt_bst (OptBST.W ?p) ?i ?j",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("OptBST.depth_inf_iff",
     "(depth ?x ?t = \<infinity>) = (?x ~: set_tree ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("OptBST.weight_correct",
     "distinct (inorder ?t) ==> cost' ?p ?t = cost ?p ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OptBST.set_tree_depth",
     "?x ~: set_tree ?t ==> depth ?x ?t = \<infinity>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("OptBST.min_wpl_tree",
     "cost ?p (opt_bst (OptBST.W ?p) ?i ?j) = min_wpl (OptBST.W ?p) ?i ?j",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0))),
    ("OptBST.wpl_opt_bst",
     "wpl ?W ?i ?j (opt_bst ?W ?i ?j) = min_wpl ?W ?i ?j",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("OptBST.min_wpl_heap",
     "min_wpl ?W ?i ?j =
      result_of (min_wpl\<^sub>h ?W ?n ?i ?j) Heap.empty",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_var 1),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0),
                   template_var 2),
                 template_var 1)),
             template_hole 0))))),
    ("OptBST.atLeastAtMost_split_insert",
     "?i <= ?k ==> {?i..?k} = insert ?k {?i..?k - 1}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("OptBST.argmin_Min",
     "?xs ~= [] ==> ?f (argmin ?f ?xs) = Min (?f ` set ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_var 0,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("OptBST.min_wpl_minimal_cost",
     "inorder ?t = [?i..?j] ==> min_wpl (OptBST.W ?p) ?i ?j <= cost ?p ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("OptBST.inorder_wpl_correct",
     "inorder ?t = [?i..?j] ==> wpl (OptBST.W ?p) ?i ?j ?t = cost ?p ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 2),
             template_var 1),
           template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("OptBST.min_wpl_minimal",
     "inorder ?t = [?i..?j] ==> min_wpl ?W ?i ?j <= wpl ?W ?i ?j ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1),
           template_var 3)))),
    ("OptBST.compute_W_correct",
     "Mapping.lookup (compute_W ?p ?n) (?i, ?j) = Some ?x ==>
      OptBST.W ?p ?i ?j = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3)),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("OptBST.W_rec",
     "OptBST.W ?p ?i ?j =
      (if ?i <= ?j then OptBST.W ?p ?i (?j - 1) + ?p ?j else 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_var 2, template_var 0))),
         template_hole 0))),
    ("OptBST.W_compute",
     "OptBST.W ?p ?i ?j =
      (case Mapping.lookup (compute_W ?p ?n) (?i, ?j) of
       None => OptBST.W ?p ?i ?j | Some x => x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1)),
           t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("OptBST.opt_bst_has_optimal_cost",
     "inorder ?t = [?i..?j] ==>
      cost ?p (opt_bst (OptBST.W ?p) ?i ?j) <= cost ?p ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 3)))),
    ("OptBST.depth_FinD",
     "[| ?x : set_tree ?t; !!d. depth ?x ?t = Fin d ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OptBST.opt_bst_is_optimal",
     "inorder ?t = [?i..?j] ==>
      wpl ?W ?i ?j (opt_bst ?W ?i ?j) <= wpl ?W ?i ?j ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1),
           template_var 3)))),
    ("OptBST.argmin_forall",
     "[| ?xs ~= []; !!x. x : set ?xs ==> ?P x |] ==> ?P (argmin ?f ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("OptBST.atLeastAtMost_split",
     "[| ?i <= ?k; ?k <= ?j |] ==> {?i..?j} = {?i..?k} Un {?k + 1..?j}",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_var 0))))),
    ("OptBST.upto_join",
     "[| ?i <= ?j; ?j <= ?k |]
      ==> [?i..?j - 1] @ ?j # [?j + 1..?k] = [?i..?k]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 2)),
               template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("OptBST.cost'_Node",
     "distinct (inorder \<langle>?l, ?x, ?r\<rangle>) ==>
      cost' ?p \<langle>?l, ?x, ?r\<rangle> =
      sum ?p (set_tree ?l) + cost' ?p ?l + ?p ?x + cost' ?p ?r +
      sum ?p (set_tree ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 0),
                           template_app (template_hole 0, template_var 3))),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 3))),
                   template_app (template_var 0, template_var 2))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("OptBST.W\<^sub>m_crel",
     "(?m, ?x) = (?m, ?y) ==>
      dp_consistency.crel_vs
       (%k. State_Monad.get >>=
            (%m. State_Monad.return (Mapping.lookup m k)))
       (%_. True) (%(a, b). W_fun ?p a b) (=) (W_fun ?p ?m ?x)
       (W\<^sub>m' ?p ?m ?y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, t_empty), t_empty),
                   template_app (template_hole 3, t_empty)),
                 template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 1))
           ))),
    ("OptBST.memoized_empty",
     "[| dp_heap.consistentDP
          (%heap.
              Array.length heap ?mem =
              bounded_index.size (Bound (0, 0) (int ?n, int ?n)))
          (%heap.
              Array.length heap ?mem =
              bounded_index.size (Bound (0, 0) (int ?n, int ?n)))
          (%(a, b). min_wpl ?W a b)
          (heap_mem_defs.lookup'
            (mem_lookup (bounded_index.size (Bound (0, 0) (int ?n, int ?n)))
              (bounded_index.checked_idx (Bound (0, 0) (int ?n, int ?n)))
              ?mem))
          (?dp\<^sub>T ?mem);
         ?mem =
         result_of
          (mem_empty (bounded_index.size (Bound (0, 0) (int ?n, int ?n))))
          Heap.empty |]
      ==> (case ?x of (a, b) => min_wpl ?W a b) =
          result_of
           (mem_empty
             (bounded_index.size (Bound (0, 0) (int ?n, int ?n))) >>=
            (%mem. ?dp\<^sub>T mem ?x))
           Heap.empty",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 22, t_empty), t_empty),
                  template_app (template_hole 14, t_empty)),
                template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 19,
                          template_app
                           (template_app
                             (template_hole 18,
                              template_app
                               (template_app
                                 (template_hole 17, template_hole 16),
                                template_hole 16)),
                            template_app
                             (template_app
                               (template_hole 17,
                                template_app
                                 (template_hole 15, template_var 3)),
                              template_app
                               (template_hole 15, template_var 3))))),
                      template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_hole 18,
                            template_app
                             (template_app
                               (template_hole 17, template_hole 16),
                              template_hole 16)),
                          template_app
                           (template_app
                             (template_hole 17,
                              template_app
                               (template_hole 15, template_var 3)),
                            template_app
                             (template_hole 15, template_var 3))))),
                    template_var 4))),
              template_app (template_var 1, template_var 4))
            ),
        template_equation
         (template_var 4,
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 19,
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_app
                             (template_hole 17, template_hole 16),
                            template_hole 16)),
                        template_app
                         (template_app
                           (template_hole 17,
                            template_app
                             (template_hole 15, template_var 3)),
                          template_app
                           (template_hole 15, template_var 3)))))),
                template_hole 4))))],
       template_equation
        (template_app
          (template_app (template_hole 14, t_empty), template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 19,
                         template_app
                          (template_app
                            (template_hole 18,
                             template_app
                              (template_app
                                (template_hole 17, template_hole 16),
                               template_hole 16)),
                           template_app
                            (template_app
                              (template_hole 17,
                               template_app
                                (template_hole 15, template_var 3)),
                             template_app
                              (template_hole 15, template_var 3)))))),
                   t_empty)),
               template_hole 4))))))]
