   [("Bellman_Ford.OPT_sink_le_0", "OPT ?n ?W ?t ?i ?t <= 0",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 1),
       template_hole 0)),
    ("Bellman_Ford.is_path_eq",
     "is_path ?W ?t ?xs = ??.Bellman_Ford.is_path2 ?W (?xs @ [?t])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Bellman_Ford.OPT_0",
     "OPT ?n ?W ?t 0 ?v = (if ?t = ?v then 0 else \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Bellman_Ford.bf_simps",
     "bf ?n ?W ?t 0 ?v = (if ?t = ?v then 0 else \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Bellman_Ford.get_return",
     "run_state (State_Monad.get >>= (%m. State_Monad.return (?f m))) ?m =
      (?f ?m, ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2), t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_var 0)),
         template_var 0))),
    ("Bellman_Ford.sum_list_not_infI",
     "ALL x:set ?xs. x < \<infinity> ==> sum_list ?xs < \<infinity>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_hole 1))),
    ("Bellman_Ford.sum_list_not_minfI",
     "ALL x:set ?xs. -\<infinity> < x ==> -\<infinity> < sum_list ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Bellman_Ford.finite_lists_length_le1",
     "finite {xs. length xs <= ?i & set xs <= {0..?n}}",
     template_predicate
      (
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))
         )),
    ("Bellman_Ford.is_path_remove_cycle2",
     "is_path ?W ?t (?as @ ?t # ?cs) ==> is_path ?W ?t ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Bellman_Ford.Inf_int_in",
     "[| ?S ~= {}; bdd_below ?S |] ==> Inf ?S : ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Bellman_Ford.Sup_int_in",
     "[| ?X ~= {}; bdd_above ?X |] ==> Sup ?X : ?X",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Bellman_Ford.add_gt_minfI",
     "[| -\<infinity> < ?a; -\<infinity> < ?b |]
      ==> -\<infinity> < ?a + ?b",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bellman_Ford.add_lt_infI",
     "[| ?a < \<infinity>; ?b < \<infinity> |] ==> ?a + ?b < \<infinity>",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 1),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Bellman_Ford.finite_lists_length_le2",
     "finite {xs. length xs + 1 <= ?i & set xs <= {0..?n}}",
     template_predicate
      (
         template_app
          (template_hole 10, template_app (template_hole 9, t_empty))
         )),
    ("Bellman_Ford.is_path_appendD",
     "is_path ?W ?t (?as @ ?a # ?bs) ==> is_path ?W ?t (?a # ?bs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bellman_Ford.bf_impl_correct",
     "bf ?n ?w ?t ?i ?j = result_of (bf_impl ?n ?w ?t ?i ?j) Heap.empty",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0))))),
    ("Bellman_Ford.shortest_le_OPT",
     "?v <= ?n ==> shortest ?n ?W ?t ?v <= OPT ?n ?W ?t ?i ?v",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_var 4)))),
    ("Bellman_Ford.bf_correct",
     "?t <= ?n ==> OPT ?n ?W ?t ?i ?j = bf ?n ?W ?t ?i ?j",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0)))),
    ("Bellman_Ford.le_add_same_cancel1",
     "[| ?a < \<infinity>; -\<infinity> < ?a |]
      ==> (?a <= ?a + ?b) = (0 <= ?b)",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 5),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 0),
           template_var 0)))),
    ("Bellman_Ford.finite_setcompr_eq_image",
     "finite {?f x |x. ?P x} = finite (?f ` {x. ?P x})",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, t_empty)),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, t_empty))))),
    ("Bellman_Ford.is_path2_remove_cycle",
     "??.Bellman_Ford.is_path2 ?W (?as @ ?a # ?bs @ ?a # ?cs) ==>
      ??.Bellman_Ford.is_path2 ?W (?as @ ?a # ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Bellman_Ford.weight_append",
     "weight ?W (?xs @ ?a # ?ys) =
      weight ?W (?xs @ [?a]) + weight ?W (?a # ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Bellman_Ford.is_path_remove_cycle",
     "is_path ?W ?t (?as @ ?a # ?bs @ ?a # ?cs) ==>
      is_path ?W ?t (?as @ ?a # ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Bellman_Ford.Sup_int",
     "[| ?X ~= {}; bdd_above ?X |]
      ==> Sup ?X : ?X & (ALL y:?X. y <= Sup ?X)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0), t_empty))
           ))),
    ("Bellman_Ford.nat_le_cases",
     "[| ?i <= ?n; ?i < ?n ==> ?thesis; ?i = ?n ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_implication
         ([template_inequation (less_than, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Bellman_Ford.bf_memoized",
     "(case ?x of (a, b) => bf ?n ?W ?t a b) =
      fst (run_state (case ?x of (a, b) => bf\<^sub>m' ?n ?W ?t a b)
            Mapping.empty)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0)),
           template_hole 0)))),
    ("Bellman_Ford.bottom_up_alt",
     "bf ?n ?W ?t ?i ?j =
      fst (run_state
            (iter_bf ?n ?W ?t (0, 0) >>= (%_. bf\<^sub>m' ?n ?W ?t ?i ?j))
            Mapping.empty)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 2))),
               t_empty)),
           template_hole 0)))),
    ("Bellman_Ford.reaches_non_inf_path",
     "[| reaches ?n ?W ?t ?i; ?i <= ?n; ?t <= ?n |]
      ==> OPT ?n ?W ?t ?n ?i < \<infinity>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 0, template_var 3),
        template_inequation (less_equals, template_var 1, template_var 3)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 3),
           template_var 0),
         template_hole 0))),
    ("Bellman_Ford.bf_bottom_up",
     "(case ?x of (x, y) => bf ?n ?W ?t x y) =
      fst (run_state
            (iter_bf ?n ?W ?t ?y >>=
             (%_. case ?x of (a, b) => bf\<^sub>m' ?n ?W ?t a b))
            Mapping.empty)",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty), template_var 1),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 0)),
               t_empty)),
           template_hole 0)))),
    ("Bellman_Ford.bf_simps",
     "bf ?n ?W ?t (Suc ?i) ?v =
      fold min (map (%w. ?W ?v w + bf ?n ?W ?t ?i w) [0..<Suc ?n])
       (bf ?n ?W ?t ?i ?v)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2),
           template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app (template_hole 6, template_var 4)))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Bellman_Ford.has_negative_cycleI",
     "[| set (?a # ?xs @ ?ys) <= {0..?n}; weight ?W (?a # ?xs @ [?a]) < 0;
         is_path ?W ?t (?a # ?ys) |]
      ==> has_negative_cycle ?n ?W ?t",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3))),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_var 2)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_hole 3)))),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 9, template_var 5),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Bellman_Ford.OPT_not_minfI",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n; ?i <= ?n |]
      ==> -\<infinity> < OPT ?n ?W ?t ?n ?i",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 3),
           template_var 0)))),
    ("Bellman_Ford.OPT_Suc",
     "?t <= ?n ==>
      OPT ?n ?W ?t (Suc ?i) ?v =
      min (OPT ?n ?W ?t ?i ?v)
       (Min {OPT ?n ?W ?t ?i w + ?W ?v w |w. w <= ?n})",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 4),
             template_app (template_hole 6, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 2),
                   template_var 4),
                 template_var 1),
               template_var 0)),
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty)))))),
    ("Bellman_Ford.list_pidgeonhole",
     "[| set ?xs <= ?S; card ?S < length ?xs; finite ?S;
         !!as a bs cs. ?xs = as @ a # bs @ a # cs ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Bellman_Ford.weight_not_minfI",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         set ?xs <= {0..?n}; ?xs ~= [] |]
      ==> -\<infinity> < weight ?W ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_var 3)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_inequation
        (less_than, template_hole 8,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bellman_Ford.iter_bf_unfold",
     "iter_bf ?n ?W ?t =
      (%(i, j).
          if i <= ?n & j <= ?n
          then bf\<^sub>m' ?n ?W ?t i j >>=
               (%_. iter_bf ?n ?W ?t
                     (if j < ?n then (i, j + 1) else (i + 1, 0)))
          else State_Monad.return ())",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 14, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 13, t_empty))),
    ("Bellman_Ford.iter_bf_heap_unfold",
     "iter_bf_heap ?n ?w ?t ?mem =
      (%(i, j).
          if i <= ?n & j <= ?n
          then bf\<^sub>h'_impl ?n ?w ?t ?mem i j >>=
               (%_. iter_bf_heap ?n ?w ?t ?mem
                     (if j < ?n then (i, j + 1) else (i + 1, 0)))
          else return ())",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 14, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 13, t_empty))),
    ("Bellman_Ford.OPT_mono",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n; ?v <= ?n;
         ?n <= ?m |]
      ==> OPT ?n ?W ?t ?m ?v <= OPT ?n ?W ?t ?n ?v",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_inequation (less_equals, template_var 2, template_var 4),
        template_inequation (less_equals, template_var 1, template_var 4),
        template_inequation (less_equals, template_var 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 4),
           template_var 1)))),
    ("Bellman_Ford.shorter_than_OPT_n_has_negative_cycle",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         shortest ?n ?W ?t ?v < OPT ?n ?W ?t ?n ?v; ?v <= ?n |]
      ==> has_negative_cycle ?n ?W ?t",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 3),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Bellman_Ford.bellman_ford_correct",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n |]
      ==> fst (run_state (bellman_ford ?n ?W ?t) Mapping.empty) =
          (if has_negative_cycle ?n ?W ?t then None
           else Some (map (shortest ?n ?W ?t) [0..<?n + 1]))",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_app (template_hole 11, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 10)),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 7),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)))))))),
    ("Bellman_Ford.bellman_ford_shortest_paths",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         ~ has_negative_cycle ?n ?W ?t |]
      ==> ALL v<=?n. bf ?n ?W ?t ?n v = shortest ?n ?W ?t v",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Bellman_Ford.fold_sum_aux'",
     "ALL u:set (?a # ?xs).
         ALL v:set (?xs @ [?b]). ?f u <= ?f v + ?W u v ==>
      sum_list (map ?f (?a # ?xs))
      <= sum_list (map ?f (?xs @ [?b])) + weight ?W (?a # ?xs @ [?b])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3))),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_hole 5))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 5)))))))),
    ("Bellman_Ford.bellman_ford_detects_cycle",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n |]
      ==> has_negative_cycle ?n ?W ?t =
          (EX v<=?n. OPT ?n ?W ?t (?n + 1) v < OPT ?n ?W ?t ?n v)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("Bellman_Ford.detects_cycle_has_negative_cycle",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         OPT ?n ?W ?t (?n + 1) ?v < OPT ?n ?W ?t ?n ?v; ?v <= ?n |]
      ==> has_negative_cycle ?n ?W ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_hole 1)),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 3),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Bellman_Ford.detects_cycle",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         has_negative_cycle ?n ?W ?t |]
      ==> EX i<=?n. OPT ?n ?W ?t (?n + 1) i < OPT ?n ?W ?t ?n i",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Bellman_Ford.bf_detects_cycle",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         has_negative_cycle ?n ?W ?t |]
      ==> EX i<=?n. bf ?n ?W ?t (?n + 1) i < bf ?n ?W ?t ?n i",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Bellman_Ford.fold_sum_aux",
     "ALL u:set (?a # ?xs). ALL v:set (?a # ?xs). ?f u <= ?f v + ?W u v ==>
      sum_list (map ?f (?a # ?xs @ [?a]))
      <= sum_list (map ?f (?a # ?xs @ [?a])) + weight ?W (?a # ?xs @ [?a])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2))),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_hole 1))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_hole 1)))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 7, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_hole 1)))))))),
    ("Bellman_Ford.bf_fix",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         ~ has_negative_cycle ?n ?W ?t; ?n <= ?m |]
      ==> ALL v<=?n. bf ?n ?W ?t ?m v = bf ?n ?W ?t ?n v",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)
                )
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Bellman_Ford.is_path_shorten",
     "[| is_path ?W ?t (?i # ?xs); ?i <= ?n; set ?xs <= {0..?n}; ?t <= ?n;
         ?t ~= ?i;
         !!xs. [| is_path ?W ?t (?i # xs); ?i <= ?n; set xs <= {0..?n};
                  length xs < ?n |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2))
            ),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_var 1)),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Bellman_Ford.bellman_ford_correct'",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n |]
      ==> dp_consistency.crel_vs
           (%k. State_Monad.get >>=
                (%m. State_Monad.return (Mapping.lookup m k)))
           (%_. True) (%(a, b). bf ?n ?W ?t a b) (=)
           (if has_negative_cycle ?n ?W ?t then None
            else Some (map (shortest ?n ?W ?t) [0..<?n + 1]))
           (bellman_ford ?n ?W ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 24, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 19, t_empty), t_empty),
                   template_app (template_hole 13, t_empty)),
                 template_hole 11),
               template_app
                (template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_app (template_hole 9, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 8),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_hole 1)))))),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Bellman_Ford.OPT_cases",
     "[| !!xs. [| OPT ?n ?W ?t ?i ?v = weight ?W (?v # xs @ [?t]);
                  length xs + 1 <= ?i; set xs <= {0..?n} |]
               ==> ?thesis;
         [| ?v = ?t; OPT ?n ?W ?t ?i ?v = 0 |] ==> ?thesis;
         [| ?v ~= ?t; OPT ?n ?W ?t ?i ?v = \<infinity> |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_implication
           ([template_equation
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 16, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_hole 2)],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (template_equation (template_var 1, template_var 3))],
          template_implication
           ([template_equation
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 16, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Bellman_Ford.OPT_cases2",
     "[| !!xs. [| ?v ~= ?t; OPT ?n ?W ?t ?i ?v ~= \<infinity>;
                  OPT ?n ?W ?t ?i ?v = weight ?W (?v # xs @ [?t]);
                  length xs + 1 <= ?i; set xs <= {0..?n} |]
               ==> ?thesis;
         [| ?v ~= ?t; OPT ?n ?W ?t ?i ?v = \<infinity> |] ==> ?thesis;
         [| ?v = ?t; OPT ?n ?W ?t ?i ?v <= 0 |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_implication
         ([template_negation
            (template_equation (template_var 5, template_var 4))],
          template_implication
           ([template_equation
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 15, template_var 3),
                       template_var 2),
                     template_var 4),
                   template_var 1),
                 template_var 5),
               template_hole 14)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 5, template_var 4)],
          template_implication
           ([template_inequation
              (less_equals,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 15, template_var 3),
                       template_var 2),
                     template_var 4),
                   template_var 1),
                 template_var 5),
               template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Bellman_Ford.memoized_empty",
     "?mem = result_of (init_state (?n + 1) 1 0) Heap.empty ==>
      (case ?x of (a, b) => bf ?n ?W ?t a b) =
      result_of
       (init_state (?n + 1) 1 0 >>=
        (%mem. iterator_defs.iter_heap
                (%a. case a of (x, y) => x <= ?n & y <= ?n)
                (%a. case a of
                     (x, y) => if y < ?n then (x, y + 1) else (x + 1, 0))
                (%a. case a of (a, b) => bf\<^sub>h' ?n ?W ?t ?mem a b)
                (?y mem) >>=
               (%_. case ?x of (a, b) => bf\<^sub>h' ?n ?W ?t ?mem a b)))
       Heap.empty",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_hole 25,
            template_app
             (template_hole 24,
              template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 22,
                        template_app
                         (template_app (template_hole 21, template_var 4),
                          template_hole 20)),
                      template_hole 20),
                    template_hole 19)),
                template_hole 18))))],
       template_equation
        (template_app
          (template_app (template_hole 16, t_empty), template_var 1),
         template_app
          (template_hole 14,
           template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 22,
                           template_app
                            (template_app
                              (template_hole 21, template_var 4),
                             template_hole 20)),
                         template_hole 20),
                       template_hole 19)),
                   t_empty)),
               template_hole 18)))))),
    ("Bellman_Ford.simple_paths",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n;
         ~ has_negative_cycle ?n ?W ?t;
         weight ?W (?v # ?xs @ [?t]) < \<infinity>; set ?xs <= {0..?n};
         ?v <= ?n;
         !!ys. [| weight ?W (?v # ys @ [?t]) <= weight ?W (?v # ?xs @ [?t]);
                  set ys <= {0..?n}; length ys < ?n |]
               ==> ?thesis;
         ?v = ?t ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 5),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 14, template_var 5),
                    template_var 4),
                  template_var 3)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_hole 10)))),
          template_hole 9),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_var 5)),
        template_inequation (less_equals, template_var 2, template_var 5),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_var 3)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Bellman_Ford.iter_heap_unfold",
     "?mem = result_of (init_state (?n + 1) 1 0) Heap.empty ==>
      iterator_defs.iter_heap (%(x, y). x <= ?n & y <= ?n)
       (%(x, y). if y < ?n then (x, y + 1) else (x + 1, 0)) ?f ?x =
      (if case ?x of (x, y) => x <= ?n & y <= ?n
       then ?f ?x >>=
            (%_. iterator_defs.iter_heap (%(x, y). x <= ?n & y <= ?n)
                  (%(x, y). if y < ?n then (x, y + 1) else (x + 1, 0)) ?f
                  (case ?x of
                   (x, y) => if y < ?n then (x, y + 1) else (x + 1, 0)))
       else return ())",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_hole 20,
            template_app
             (template_hole 19,
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app (template_hole 16, template_var 2),
                          template_hole 15)),
                      template_hole 15),
                    template_hole 14)),
                template_hole 13))))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, t_empty)),
               template_app (template_hole 7, t_empty)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 10, t_empty), template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_var 1, template_var 0)),
               t_empty)),
           template_app (template_hole 1, template_hole 0))))),
    ("Bellman_Ford.shortest_cases",
     "[| ALL i<=?n. ALL j<=?n. -\<infinity> < ?W i j; ?t <= ?n; ?v <= ?n;
         !!xs. [| shortest ?n ?W ?t ?v = weight ?W (?v # xs @ [?t]);
                  set xs <= {0..?n} |]
               ==> ?thesis;
         [| ?v = ?t; shortest ?n ?W ?t ?v = 0 |] ==> ?thesis;
         [| ?v ~= ?t; shortest ?n ?W ?t ?v = \<infinity> |] ==> ?thesis;
         [| shortest ?n ?W ?t ?v = -\<infinity>;
            ALL x.
               EX xs.
                  set xs <= {0..?n} & weight ?W (?v # xs @ [?t]) < Fin x |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_inequation (less_equals, template_var 2, template_var 4),
        template_inequation (less_equals, template_var 1, template_var 4),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_implication
           ([template_equation
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 16, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_hole 6)],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (template_equation (template_var 1, template_var 2))],
          template_implication
           ([template_equation
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 16, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_hole 4)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 16, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_hole 19)],
          template_implication
           ([template_predicate (template_app (template_hole 3, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Bellman_Ford.path_eq_cycleE",
     "[| ?v # ?ys @ [?t] = ?as @ ?a # ?bs @ ?a # ?cs;
         [| ?as = []; ?cs = []; ?v = ?a; ?a = ?t; ?ys = ?bs |] ==> ?thesis;
         !!cs'.
            [| ?as = []; ?v = ?a; ?ys = ?bs @ ?a # cs'; ?cs = cs' @ [?t] |]
            ==> ?thesis;
         !!as'.
            [| ?as = ?v # as'; ?cs = []; ?a = ?t; ?ys = as' @ ?a # ?bs |]
            ==> ?thesis;
         !!as' cs'.
            [| ?as = ?v # as'; ?cs = cs' @ [?t];
               ?ys = as' @ ?a # ?bs @ ?a # cs' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 7),
            template_app
             (template_app (template_hole 3, template_var 6),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_hole 2))),
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1))))),
        template_implication
         ([template_equation (template_var 4, template_hole 2)],
          template_implication
           ([template_equation (template_var 1, template_hole 2)],
            template_implication
             ([template_equation (template_var 7, template_var 3)],
              template_implication
               ([template_equation (template_var 3, template_var 5)],
                template_implication
                 ([template_equation (template_var 6, template_var 2)],
                  template_predicate (template_var 0)))))),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0)))]
