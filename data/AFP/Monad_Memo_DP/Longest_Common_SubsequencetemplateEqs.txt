   [("Longest_Common_Subsequence.OPT_0_left", "OPT ?A ?B 0 ?j = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("Longest_Common_Subsequence.OPT_0_right", "OPT ?A ?B ?i 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Longest_Common_Subsequence.lcs\<^sub>a_correct",
     "lcs ?xs ?ys (length ?xs) (length ?ys) = lcs\<^sub>a ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Longest_Common_Subsequence.subseq_singleton_right",
     "subseq ?xs [?x] = (?xs = [?x] | ?xs = [])",
     template_bimplication (template_dunno, template_dunno)),
    ("Longest_Common_Subsequence.lcs_correct",
     "Max {length xs |xs. subseq xs ?A & subseq xs ?B} =
      lcs ?A ?B (length ?A) (length ?B)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app (template_hole 3, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Longest_Common_Subsequence.subseq_append_single_right",
     "subseq ?xs (?ys @ [?x]) =
      ((EX xs'. subseq xs' ?ys & ?xs = xs' @ [?x]) | subseq ?xs ?ys)",
     template_bimplication (template_dunno, template_dunno))]
