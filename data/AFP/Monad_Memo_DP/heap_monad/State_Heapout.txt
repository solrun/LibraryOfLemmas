Loading theory "Draft.Pure_Monad" (required by "Draft.State_HeapTemplates" via "Draft.State_Heap" via "Draft.DP_CRelVS")
Loading theory "Draft.State_Heap_Misc" (required by "Draft.State_HeapTemplates" via "Draft.State_Heap")
Loading theory "Draft.State_Monad_Ext" (required by "Draft.State_HeapTemplates" via "Draft.State_Heap" via "Draft.DP_CRelVS")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.State_HeapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
bundle state_monad_syntax
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Pure_Monad"
### 0.040s elapsed time, 0.198s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.State_HeapTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.State_Monad_Ext"
### 0.049s elapsed time, 0.234s cpu time, 0.000s GC time
Loading theory "Draft.DP_CRelVS" (required by "Draft.State_HeapTemplates" via "Draft.State_Heap")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.State_Heap_Misc"
### 0.054s elapsed time, 0.253s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.State_HeapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.514s cpu time, 0.044s GC time
Loading theory "Draft.Templates" (required by "Draft.State_HeapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.213s cpu time, 0.000s GC time
Loading theory "Draft.Heap_Monad_Ext" (required by "Draft.State_HeapTemplates" via "Draft.State_Heap")
locale state_mem_defs
  fixes lookup :: "'param => ('mem, 'result option) state"
    and update :: "'param => 'result => ('mem, unit) state"
bundle heap_monad_syntax
### theory "Draft.Heap_Monad_Ext"
### 0.052s elapsed time, 0.205s cpu time, 0.000s GC time
"0::'a"
  :: "'a"
locale mem_correct
  fixes lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and P :: "'b => bool"
  assumes "mem_correct lookup update P"
locale dp_consistency
  fixes lookup :: "'param => ('mem, 'result option) state"
    and update :: "'param => 'result => ('mem, unit) state"
    and P :: "'mem => bool"
    and dp :: "'param => 'result"
  assumes "dp_consistency lookup update P"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.790s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.State_HeapTemplates" via "Draft.ExtrEqs")
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
### theory "Draft.DP_CRelVS"
### 0.369s elapsed time, 1.276s cpu time, 0.109s GC time
Loading theory "Draft.State_Heap" (required by "Draft.State_HeapTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale heap_mem_defs
  fixes P :: "heap => bool"
    and lookup :: "'k => 'v option Heap"
    and update :: "'k => 'v => unit Heap"
### Ambiguous input (line 63 of "$AFP/Monad_Memo_DP/heap_monad/State_Heap.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rel_state)
###     ("_cargs" ("_position" R) ("_cargs" ("_position" f) ("_position" g))))
###   ("\<^const>HOL.All_binder" ("_position" heap)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" heap))
###       ("_case_syntax"
###         ("_applC" ("_position" State_Monad.run_state)
###           ("_cargs" ("_position" f) ("_position" heap)))
###         ("_case1"
###           ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" heap1)))
###           ("_case_syntax"
###             ("_applC" ("_position" execute)
###               ("_cargs" ("_position" g) ("_position" heap)))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" v2)
###                     ("_tuple_arg" ("_position" heap2))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" R)
###                     ("_cargs" ("_position" v1) ("_position" v2)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" heap1)
###                       ("_position" heap2))
###                     ("_applC" ("_position" P) ("_position" heap2)))))
###               ("_case1" ("_position" None) ("_position" False)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rel_state)
###     ("_cargs" ("_position" R) ("_cargs" ("_position" f) ("_position" g))))
###   ("\<^const>HOL.All_binder" ("_position" heap)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" heap))
###       ("_case_syntax"
###         ("_applC" ("_position" State_Monad.run_state)
###           ("_cargs" ("_position" f) ("_position" heap)))
###         ("_case2"
###           ("_case1"
###             ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" heap1)))
###             ("_case_syntax"
###               ("_applC" ("_position" execute)
###                 ("_cargs" ("_position" g) ("_position" heap)))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" v2)
###                     ("_tuple_arg" ("_position" heap2))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" R)
###                     ("_cargs" ("_position" v1) ("_position" v2)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" heap1)
###                       ("_position" heap2))
###                     ("_applC" ("_position" P) ("_position" heap2)))))))
###           ("_case1" ("_position" None) ("_position" False)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.833s elapsed time, 2.682s cpu time, 0.241s GC time
locale heap_inv
  fixes P :: "heap => bool"
    and update :: "'k => 'v => unit Heap"
    and lookup :: "'k => 'v option Heap"
  assumes "heap_inv P update lookup"
locale heap_correct
  fixes P :: "heap => bool"
    and update :: "'a => 'b => unit Heap"
    and lookup :: "'a => 'b option Heap"
  assumes "heap_correct P update lookup"
locale heap_mem_defs
  fixes P :: "heap => bool"
    and lookup :: "'k => 'v option Heap"
    and update :: "'k => 'v => unit Heap"
### theory "Draft.State_Heap"
### 0.578s elapsed time, 1.638s cpu time, 0.132s GC time
### theory "HOL-Library.BigO"
### 0.738s elapsed time, 2.096s cpu time, 0.198s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.State_HeapTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 0.542s cpu time, 0.061s GC time
Loading theory "Draft.State_HeapTemplates"
val templateLemmas =
   [("State_Heap.lift_p_None",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap; execute ?f ?heap = None |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_predicate (template_hole 0))),
    ("State_Heap.lift_p_P",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap |]
      ==> case the (execute ?f ?heap) of (x, heap) => ?P heap",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("State_Heap_Misc.rel_fun_relcompp",
     "(rel_fun ?R1.0 ?S1.0 OO rel_fun ?R2.0 ?S2.0) ?a ?b ==>
      rel_fun (?R1.0 OO ?R2.0) (?S1.0 OO ?S2.0) ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("State_Heap.execute_cases",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap |]
      ==> case execute ?f ?heap of None => False
          | Some (x, heap) => ?P heap",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2), t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("State_Heap.execute_cases'",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap |]
      ==> case execute ?f ?heap of Some (x, heap) => ?P heap",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2), t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("State_Heap.lift_p_P''",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap;
         execute ?f ?heap = Some (?v, ?heap') |]
      ==> ?P ?heap'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_var 4, template_var 0)))),
    ("State_Heap.lift_p_P'",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap;
         the (execute ?f ?heap) = (?v, ?heap') |]
      ==> ?P ?heap'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_var 4, template_var 0)))),
    ("State_Heap_Misc.rel_fun_comp",
     "[| rel_fun ?R1.0 ?S1.0 ?f ?g; rel_fun ?R2.0 ?S2.0 ?g ?h |]
      ==> rel_fun (?R1.0 OO ?R2.0) (?S1.0 OO ?S2.0) ?f ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1)),
               template_var 4),
             template_var 0)
           ))),
    ("State_Heap.lift_p_the_Some",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap;
         the (execute ?f ?heap) = (?v, ?heap') |]
      ==> execute ?f ?heap = Some (?v, ?heap')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("State_Heap_Misc.rel_fun_comp1",
     "[| rel_fun ?R1.0 ?S1.0 ?f ?g; rel_fun ?R2.0 ?S2.0 ?g ?h;
         ?R' = ?R1.0 OO ?R2.0 |]
      ==> rel_fun ?R' (?S1.0 OO ?S2.0) ?f ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 7),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 2)),
               template_var 5),
             template_var 1)
           ))),
    ("State_Heap_Misc.rel_fun_comp2",
     "[| rel_fun ?R1.0 ?S1.0 ?f ?g; rel_fun ?R2.0 ?S2.0 ?g ?h;
         ?S' = ?S1.0 OO ?S2.0 |]
      ==> rel_fun (?R1.0 OO ?R2.0) ?S' ?f ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 6),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 3)),
                 template_var 0),
               template_var 5),
             template_var 1)
           ))),
    ("State_Heap.lift_p_E",
     "[| State_Heap.lift_p ?P ?f; ?P ?heap;
         !!v heap'.
            [| execute ?f ?heap = Some (v, heap'); ?P heap' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_var 3, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("State_Heap_Misc.rel_fun_comp1'",
     "[| rel_fun ?R1.0 ?S1.0 ?f ?g; rel_fun ?R2.0 ?S2.0 ?g ?h;
         !!a b. ?R' a b ==> (?R1.0 OO ?R2.0) a b |]
      ==> rel_fun ?R' (?S1.0 OO ?S2.0) ?f ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 2)),
               template_var 5),
             template_var 1)
           ))),
    ("State_Heap_Misc.rel_fun_comp2'",
     "[| rel_fun ?R1.0 ?S1.0 ?f ?g; rel_fun ?R2.0 ?S2.0 ?g ?h;
         !!a b. (?S1.0 OO ?S2.0) a b ==> ?S' a b |]
      ==> rel_fun (?R1.0 OO ?R2.0) ?S' ?f ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 3)),
                 template_var 0),
               template_var 5),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.State_HeapTemplates"
### 0.521s elapsed time, 0.956s cpu time, 0.449s GC time
val it = (): unit
