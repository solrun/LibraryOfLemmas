Loading theory "Draft.Pure_Monad" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap" via "Draft.State_Heap" via "Draft.DP_CRelVS")
Loading theory "Draft.Indexing" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap")
Loading theory "Draft.State_Heap_Misc" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap" via "Draft.State_Heap")
Loading theory "Draft.Solve_Cong" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main")
### theory "Draft.Pure_Monad"
### 0.042s elapsed time, 0.202s cpu time, 0.000s GC time
Loading theory "Draft.State_Monad_Ext" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap" via "Draft.State_Heap" via "Draft.DP_CRelVS")
### theory "Draft.State_Heap_Misc"
### 0.062s elapsed time, 0.286s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Heap_MainTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
bundle state_monad_syntax
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.State_Monad_Ext"
### 0.052s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.DP_CRelVS" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap" via "Draft.State_Heap")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale prod_order_def
  fixes less_eq0 :: "'a => 'a => bool"
    and less0 :: "'a => 'a => bool"
    and less_eq1 :: "'b => 'b => bool"
    and less1 :: "'b => 'b => bool"
Found termination order: "{}"
### theory "HOL-Library.Function_Algebras"
### 0.107s elapsed time, 0.408s cpu time, 0.027s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Heap_MainTemplates" via "Draft.ExtrEqs")
locale state_mem_defs
  fixes lookup :: "'param => ('mem, 'result option) state"
    and update :: "'param => 'result => ('mem, unit) state"
### theory "Draft.Solve_Cong"
### 0.234s elapsed time, 0.958s cpu time, 0.027s GC time
Found termination order: "{}"
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Heap_MainTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
locale mem_correct
  fixes lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and P :: "'b => bool"
  assumes "mem_correct lookup update P"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale dp_consistency
  fixes lookup :: "'param => ('mem, 'result option) state"
    and update :: "'param => 'result => ('mem, unit) state"
    and P :: "'mem => bool"
    and dp :: "'param => 'result"
  assumes "dp_consistency lookup update P"
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.778s cpu time, 0.079s GC time
Loading theory "Draft.Templates" (required by "Draft.Heap_MainTemplates" via "Draft.ExtrEqs")
### theory "Draft.DP_CRelVS"
### 0.345s elapsed time, 1.356s cpu time, 0.079s GC time
Loading theory "Draft.Memory" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap" via "Draft.Pair_Memory")
locale prod_order
  fixes less_eq0 :: "'a => 'a => bool"
    and less0 :: "'a => 'a => bool"
    and less_eq1 :: "'b => 'b => bool"
    and less1 :: "'b => 'b => bool"
  assumes "prod_order less_eq0 less0 less_eq1 less1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.288s cpu time, 0.057s GC time
Loading theory "Draft.Heap_Monad_Ext" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap" via "Draft.State_Heap")
bundle heap_monad_syntax
### theory "Draft.Heap_Monad_Ext"
### 0.044s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "Draft.State_Heap" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
locale mem_correct_empty
  fixes lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and P :: "'b => bool"
    and empty :: "'b"
  assumes "mem_correct_empty lookup update P empty"
locale option_order
  fixes less_eq0 :: "'a => 'a => bool"
    and less0 :: "'a => 'a => bool"
  assumes "option_order less_eq0 less0"
  Proving monotonicity ...
locale dp_consistency_empty
  fixes lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and P :: "'b => bool"
    and dp :: "'a => 'c"
    and empty :: "'b"
  assumes "dp_consistency_empty lookup update P empty"
locale dp_consistency_default
  fixes dp :: "'param => 'result"
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale dp_consistency_mapping
  fixes dp :: "'param => 'result"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale state_mem_defs
  fixes lookup :: "'param => ('mem, 'result option) state"
    and update :: "'param => 'result => ('mem, unit) state"
consts
  cycle :: "'a list => 'a stream"
locale mem_correct
  fixes lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and P :: "'b => bool"
  assumes "mem_correct lookup update P"
locale mem_correct_empty
  fixes lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and P :: "'b => bool"
    and empty :: "'b"
  assumes "mem_correct_empty lookup update P empty"
locale dp_consistency_mapping_tracing
  fixes dp :: "'param => 'result"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Memory"
### 0.661s elapsed time, 2.435s cpu time, 0.634s GC time
Loading theory "Draft.Bottom_Up_Computation" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Bottom_Up_Computation_Heap")
locale heap_mem_defs
  fixes P :: "heap => bool"
    and lookup :: "'k => 'v option Heap"
    and update :: "'k => 'v => unit Heap"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 63 of "$AFP/Monad_Memo_DP/heap_monad/State_Heap.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rel_state)
###     ("_cargs" ("_position" R) ("_cargs" ("_position" f) ("_position" g))))
###   ("\<^const>HOL.All_binder" ("_position" heap)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" heap))
###       ("_case_syntax"
###         ("_applC" ("_position" State_Monad.run_state)
###           ("_cargs" ("_position" f) ("_position" heap)))
###         ("_case1"
###           ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" heap1)))
###           ("_case_syntax"
###             ("_applC" ("_position" execute)
###               ("_cargs" ("_position" g) ("_position" heap)))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" v2)
###                     ("_tuple_arg" ("_position" heap2))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" R)
###                     ("_cargs" ("_position" v1) ("_position" v2)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" heap1)
###                       ("_position" heap2))
###                     ("_applC" ("_position" P) ("_position" heap2)))))
###               ("_case1" ("_position" None) ("_position" False)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rel_state)
###     ("_cargs" ("_position" R) ("_cargs" ("_position" f) ("_position" g))))
###   ("\<^const>HOL.All_binder" ("_position" heap)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" heap))
###       ("_case_syntax"
###         ("_applC" ("_position" State_Monad.run_state)
###           ("_cargs" ("_position" f) ("_position" heap)))
###         ("_case2"
###           ("_case1"
###             ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" heap1)))
###             ("_case_syntax"
###               ("_applC" ("_position" execute)
###                 ("_cargs" ("_position" g) ("_position" heap)))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" v2)
###                     ("_tuple_arg" ("_position" heap2))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" R)
###                     ("_cargs" ("_position" v1) ("_position" v2)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" heap1)
###                       ("_position" heap2))
###                     ("_applC" ("_position" P) ("_position" heap2)))))))
###           ("_case1" ("_position" None) ("_position" False)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.018s elapsed time, 3.841s cpu time, 0.713s GC time
Loading theory "Draft.Pair_Memory" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale iterator_defs
  fixes cnt :: "'a => bool"
    and nxt :: "'a => 'a"
locale heap_inv
  fixes P :: "heap => bool"
    and update :: "'k => 'v => unit Heap"
    and lookup :: "'k => 'v option Heap"
  assumes "heap_inv P update lookup"
locale pair_mem_defs
  fixes lookup1 :: "'a => ('mem, 'v option) state"
    and lookup2 :: "'a => ('mem, 'v option) state"
    and update1 :: "'a => 'v => ('mem, unit) state"
    and update2 :: "'a => 'v => ('mem, unit) state"
    and move12 :: "'k1 => ('mem, unit) state"
    and get_k1 :: "('mem, 'k1) state"
    and get_k2 :: "('mem, 'k1) state"
    and P :: "'mem => bool"
    and key1 :: "'k => 'k1"
    and key2 :: "'k => 'a"
locale iterator
  fixes cnt :: "'a => bool"
    and nxt :: "'a => 'a"
    and sizef :: "'a => nat"
  assumes "iterator cnt nxt sizef"
locale heap_correct
  fixes P :: "heap => bool"
    and update :: "'a => 'b => unit Heap"
    and lookup :: "'a => 'b option Heap"
  assumes "heap_correct P update lookup"
locale dp_consistency
  fixes lookup :: "'param => ('mem, 'result option) state"
    and update :: "'param => 'result => ('mem, unit) state"
    and P :: "'mem => bool"
    and dp :: "'param => 'result"
  assumes "dp_consistency lookup update P"
locale heap_mem_defs
  fixes P :: "heap => bool"
    and lookup :: "'k => 'v option Heap"
    and update :: "'k => 'v => unit Heap"
### theory "Draft.State_Heap"
### 0.770s elapsed time, 2.868s cpu time, 0.626s GC time
Loading theory "Draft.DP_CRelVH" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main" via "Draft.Memory_Heap")
locale dp_consistency_iterator
  fixes P :: "'b => bool"
    and dp :: "'a => 'c"
    and lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and cnt :: "'a => bool"
    and nxt :: "'a => 'a"
    and sizef :: "'a => nat"
  assumes "dp_consistency_iterator P lookup update cnt nxt sizef"
locale dp_consistency_iterator_empty
  fixes P :: "'a => bool"
    and dp :: "'b => 'c"
    and lookup :: "'b => ('a, 'c option) state"
    and update :: "'b => 'c => ('a, unit) state"
    and cnt :: "'b => bool"
    and nxt :: "'b => 'b"
    and sizef :: "'b => nat"
    and empty :: "'a"
  assumes
    "dp_consistency_iterator_empty P lookup update cnt nxt sizef empty"
locale dp_heap
  fixes P :: "heap => bool"
    and Q :: "heap => bool"
    and dp :: "'k => 'v"
    and lookup :: "'k => 'v option Heap"
    and lookup_st :: "'k => (heap, 'v option) state"
    and update :: "'k => 'v => unit Heap"
    and update_st :: "'k => 'v => (heap, unit) state"
  assumes "dp_heap P Q lookup lookup_st update update_st"
locale index_locale_def
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and idx :: "'a bound => 'a => nat"
    and size :: "'a bound => nat"
### theory "Draft.Bottom_Up_Computation"
### 0.347s elapsed time, 1.350s cpu time, 0.101s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Heap_MainTemplates" via "Draft.ExtrEqs")
locale pair_mem
  fixes lookup1 :: "'a => ('b, 'c option) state"
    and lookup2 :: "'a => ('b, 'c option) state"
    and update1 :: "'a => 'c => ('b, unit) state"
    and update2 :: "'a => 'c => ('b, unit) state"
    and move12 :: "'d => ('b, unit) state"
    and get_k1 :: "('b, 'd) state"
    and get_k2 :: "('b, 'd) state"
    and P :: "'b => bool"
    and key1 :: "'e => 'd"
    and key2 :: "'e => 'a"
  assumes "pair_mem lookup1 lookup2 update1 update2 move12 get_k1 get_k2 P"
locale index_locale
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and idx :: "'a bound => 'a => nat"
    and size :: "'a bound => nat"
  assumes "index_locale less_eq less idx size"
locale dp_consistency_heap
  fixes P :: "heap => bool"
    and update :: "'a => 'b => unit Heap"
    and lookup :: "'a => 'b option Heap"
    and dp :: "'a => 'b"
  assumes "dp_consistency_heap P update lookup"
locale prod_index_def
  fixes less_eq0 :: "'a => 'a => bool"
    and less0 :: "'a => 'a => bool"
    and idx0 :: "'a bound => 'a => nat"
    and size0 :: "'a bound => nat"
    and less_eq1 :: "'b => 'b => bool"
    and less1 :: "'b => 'b => bool"
    and idx1 :: "'b bound => 'b => nat"
    and size1 :: "'b bound => nat"
Found termination order: "{}"
locale heap_correct_empty
  fixes P :: "heap => bool"
    and update :: "'a => 'b => unit Heap"
    and lookup :: "'a => 'b option Heap"
    and empty :: "heap"
  assumes "heap_correct_empty P update lookup empty"
Found termination order: "{}"
locale dp_consistency_heap_empty
  fixes P :: "heap => bool"
    and update :: "'a => 'b => unit Heap"
    and lookup :: "'a => 'b option Heap"
    and dp :: "'a => 'b"
    and empty :: "heap"
  assumes "dp_consistency_heap_empty P update lookup empty"
### theory "Draft.DP_CRelVH"
### 0.460s elapsed time, 1.785s cpu time, 0.171s GC time
Loading theory "Draft.Bottom_Up_Computation_Heap" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main")
locale prod_index
  fixes less_eq0 :: "'a => 'a => bool"
    and less0 :: "'a => 'a => bool"
    and idx0 :: "'a bound => 'a => nat"
    and size0 :: "'a bound => nat"
    and less_eq1 :: "'b => 'b => bool"
    and less1 :: "'b => 'b => bool"
    and idx1 :: "'b bound => 'b => nat"
    and size1 :: "'b bound => nat"
  assumes "prod_index less_eq0 less0 idx0 size0 less_eq1 less1 idx1 size1"
locale option_index
  fixes less_eq0 :: "'a => 'a => bool"
    and less0 :: "'a => 'a => bool"
    and idx0 :: "'a bound => 'a => nat"
    and size0 :: "'a bound => nat"
  assumes "option_index less_eq0 less0 idx0 size0"
locale dp_consistency_iterator_heap
  fixes lookup :: "'a => 'c option Heap"
    and update :: "'a => 'c => unit Heap"
    and P :: "heap => bool"
    and dp :: "'a => 'c"
    and cnt :: "'a => bool"
    and nxt :: "'a => 'a"
    and sizef :: "'a => nat"
  assumes "dp_consistency_iterator_heap lookup update P cnt nxt sizef"
### theory "Draft.Bottom_Up_Computation_Heap"
### 0.455s elapsed time, 1.790s cpu time, 0.170s GC time
Loading theory "Draft.Transform_Cmd" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main")
locale mem_correct_empty
  fixes lookup :: "'a => ('b, 'c option) state"
    and update :: "'a => 'c => ('b, unit) state"
    and P :: "'b => bool"
    and empty :: "'b"
  assumes "mem_correct_empty lookup update P empty"
### ML warning (line 17 of "$AFP/Monad_Memo_DP/transform/Transform_Misc.ML"):
### Value identifier (import_function_info) has not been referenced.
### ML warning (line 27 of "$AFP/Monad_Memo_DP/transform/Transform_Misc.ML"):
### Pattern is not exhaustive.
### ML warning (line 30 of "$AFP/Monad_Memo_DP/transform/Transform_Misc.ML"):
### Value identifier (head_of) has not been referenced.
### ML warning (line 31 of "$AFP/Monad_Memo_DP/transform/Transform_Misc.ML"):
### Value identifier (bind_of) has not been referenced.
signature TRANSFORM_MISC =
  sig
    val add_function:
       binding -> term list -> local_theory -> Function.info * local_theory
    val behead: term -> term -> term * term list
    val get_const_pat: Proof.context -> string -> term
    val locale_term: Proof.context -> string -> string -> term
    val locale_thms: Proof.context -> string -> string -> thm list
    val rel_of: Function.info -> Proof.context -> thm
    val term_name: term -> string
    val the_element: int list -> int
    val totality_of: Function.info -> thm
    val uncurry: term -> term
  end
structure Transform_Misc: TRANSFORM_MISC
Found termination order: "{}"
### ML warning (line 18 of "$AFP/Monad_Memo_DP/transform/Transform_Const.ML"):
### Value identifier (pureapp) has not been referenced.
### ML warning (line 32 of "$AFP/Monad_Memo_DP/transform/Transform_Const.ML"):
### Value identifier (memT) has not been referenced.
### ML warning (line 45 of "$AFP/Monad_Memo_DP/transform/Transform_Const.ML"):
### Value identifier (checkmem') has not been referenced.
### ML warning (line 48 of "$AFP/Monad_Memo_DP/transform/Transform_Const.ML"):
### Value identifier (checkmemC) has not been referenced.
### ML warning (line 80 of "$AFP/Monad_Memo_DP/transform/Transform_Const.ML"):
### Value identifier (checkmem') has not been referenced.
### ML warning (line 83 of "$AFP/Monad_Memo_DP/transform/Transform_Const.ML"):
### Value identifier (checkmemC) has not been referenced.
signature TRANSFORM_CONST =
  sig
    type MONAD_CONSTS =
       {app: term * term -> term,
        checkmemVN: string,
        if_termN: string,
        mk_stateT: typ -> typ,
        monad_name: string,
        return: term -> term, rewrite_app_beta_conv: conv}
    val get_monad_const: string -> MONAD_CONSTS
  end
structure Transform_Const: TRANSFORM_CONST
locale nat_index_def
### theory "HOL-Library.BigO"
### 1.089s elapsed time, 4.114s cpu time, 1.010s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Heap_MainTemplates")
### ML warning (line 104 of "$AFP/Monad_Memo_DP/transform/Transform_Data.ML"):
### Value identifier (put_monadified_terms_generic) has not been referenced.
signature TRANSFORM_DATA =
  sig
    val add_tmp_cmd_info:
       binding * term * string option -> local_theory -> local_theory
    type cmd_info =
       {dp_info: dp_info option,
        head: term, locale: string option, scope: binding}
    val commit_dp_info: string -> dp_info -> local_theory -> local_theory
    type dp_info =
       {new_def': thm list,
        new_defT: thm,
        new_head': term,
        new_headT: term, old_defs: thm list, old_head: term}
    val get_dp_info: string -> Proof.context -> term -> dp_info option
    val get_last_cmd_info: Proof.context -> cmd_info
    val get_or_last_cmd_info:
       Proof.context -> (string * term) option -> cmd_info
  end
structure Transform_Data: TRANSFORM_DATA
Found termination order: "{}"
### theory "Draft.Pair_Memory"
### 1.438s elapsed time, 5.454s cpu time, 1.148s GC time
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"0::'a"
  :: "'a"
"iter_heap"
  :: "('a => 'b Heap) => 'a => unit Heap"
"crel_vs"
  :: "('b => 'd => bool) => 'b => 'd Heap => bool"
### ML warning (line 28 of "$AFP/Monad_Memo_DP/transform/Transform_Tactic.ML"):
### Value identifier (msg) has not been referenced.
signature TRANSFORM_TACTIC =
  sig
    val dp_unfold_defs_tac:
       Proof.context -> Transform_Data.cmd_info -> int -> tactic
    val my_print_tac: string -> tactic
    val prepare_case_tac:
       Proof.context -> Transform_Data.cmd_info -> int -> tactic
    val prepare_combinator_tac:
       Proof.context -> Transform_Data.cmd_info -> int -> tactic
    val prepare_consistentDP_tac:
       Proof.context -> Transform_Data.cmd_info -> int -> tactic
    val solve_consistentDP_tac:
       Proof.context -> Transform_Data.cmd_info -> int -> tactic
    val solve_relator_tac: Proof.context -> int -> tactic
    val step_tac: Proof.context -> Transform_Data.cmd_info -> int -> tactic
    val totality_replay_tac:
       Function.info -> Function.info -> Proof.context -> tactic
    val totality_resolve_tac: thm -> thm -> thm -> Proof.context -> tactic
    val transfer_raw_tac: Proof.context -> int -> tactic
  end
structure Transform_Tactic: TRANSFORM_TACTIC
Found termination order: "{}"
### ML warning (line 22 of "$AFP/Monad_Memo_DP/transform/Transform_Term.ML"):
### Value identifier (eta_conv_n) has not been referenced.
### ML warning (line 33 of "$AFP/Monad_Memo_DP/transform/Transform_Term.ML"):
### Value identifier (app_unmark_conv) has not been referenced.
### ML warning (line 36 of "$AFP/Monad_Memo_DP/transform/Transform_Term.ML"):
### Value identifier (eta_expand) has not been referenced.
### ML warning (line 282 of "$AFP/Monad_Memo_DP/transform/Transform_Term.ML"):
### Value identifier (monadify) has not been referenced.
signature TRANSFORM_TERM =
  sig
    val lift_equation:
       Transform_Const.MONAD_CONSTS ->
         Proof.context ->
           term * term ->
             term option -> (Proof.context -> conv) * term * int
    val repeat_sweep_conv: (Proof.context -> conv) -> Proof.context -> conv
    val rewrite_pureapp_beta_conv: conv
    val wrap_head: Transform_Const.MONAD_CONSTS -> term -> int -> term
  end
structure Transform_Term: TRANSFORM_TERM
locale nat_index
  assumes "nat_index"
locale int_index_def
### ML warning (line 140 of "$AFP/Monad_Memo_DP/transform/Transform.ML"):
### Value identifier (prep_term) has not been referenced.
### ML warning (line 154 of "$AFP/Monad_Memo_DP/transform/Transform.ML"):
### Value identifier (dp_monadify_cmd) has not been referenced.
### ML warning (line 217 of "$AFP/Monad_Memo_DP/transform/Transform.ML"):
### Pattern is not exhaustive.
signature TRANSFORM_DP =
  sig
    val dp_correct_cmd: local_theory -> Proof.state
    val dp_fun_part1_cmd:
       (binding * string) *
       ((bool * (xstring * Position.T)) * (string * string) list) option
         -> local_theory -> local_theory
    val dp_fun_part2_cmd:
       string * (Facts.ref * Token.src list) list ->
         local_theory -> local_theory
  end
structure Transform_DP: TRANSFORM_DP
### ML warning (line 11 of "$AFP/Monad_Memo_DP/transform/Transform_Parser.ML"):
### Value identifier (dp_fun_parser) has not been referenced.
### ML warning (line 19 of "$AFP/Monad_Memo_DP/transform/Transform_Parser.ML"):
### Value identifier (memoizes_parser) has not been referenced.
### ML warning (line 22 of "$AFP/Monad_Memo_DP/transform/Transform_Parser.ML"):
### Value identifier (monadifies_parser) has not been referenced.
### ML warning (line 29 of "$AFP/Monad_Memo_DP/transform/Transform_Parser.ML"):
### Value identifier (dp_monadify_cmd_parser) has not been referenced.
signature TRANSFORM_PARSER =
  sig
    val dp_fun_part1_parser:
       ((binding * string) *
        ((bool * (string * Position.T)) * (string * string) list) option
       )
       parser
    val dp_fun_part2_parser:
       (string * (Facts.ref * Token.src list) list) parser
  end
structure Transform_Parser: TRANSFORM_PARSER
Found termination order: "{}"
### theory "Draft.Transform_Cmd"
### 0.597s elapsed time, 1.988s cpu time, 0.796s GC time
Found termination order: "{}"
locale int_index
  assumes "int_index"
class index = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and idx :: "'a bound => 'a => nat"
    and size :: "'a bound => nat"
  assumes
    "is_locale":
      "index_locale index_class.less_eq index_class.less idx
        index_class.size"
locale bounded_index
  fixes bound :: "'k bound"
instantiation
  nat :: index
  less_eq_nat == index_class.less_eq :: nat => nat => bool
  less_nat == index_class.less :: nat => nat => bool
  idx_nat == idx :: nat bound => nat => nat
  size_nat == index_class.size :: nat bound => nat
index_locale (<=) (<) local.idx local.size
instantiation
  int :: index
  less_eq_int == index_class.less_eq :: int => int => bool
  less_int == index_class.less :: int => int => bool
  idx_int == idx :: int bound => int => nat
  size_int == index_class.size :: int bound => nat
index_locale (<=) (<) local.idx local.size
instantiation
  prod :: (index, index) index
  less_eq_prod == index_class.less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == index_class.less :: 'a * 'b => 'a * 'b => bool
  idx_prod == idx :: ('a * 'b) bound => 'a * 'b => nat
  size_prod == index_class.size :: ('a * 'b) bound => nat
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.648s elapsed time, 1.670s cpu time, 0.125s GC time
index_locale local.less_eq local.less local.idx local.size
### Type
### (int * int) bound => nat
### of constant "Indexing.bounded_index.size"
### is too specific compared to declared type
### ?'k::{} bound => nat, in theorem:
### bounded_index.size (Bound (?l1.0, ?l2.0) (?u1.0, ?u2.0)) ==
### nat (?u1.0 - ?l1.0) * nat (?u2.0 - ?l2.0)
### theory "Draft.Indexing"
### 3.513s elapsed time, 11.733s cpu time, 1.977s GC time
Loading theory "Draft.Memory_Heap" (required by "Draft.Heap_MainTemplates" via "Draft.Heap_Main")
### theory "Draft.Memory_Heap"
### 1.146s elapsed time, 1.232s cpu time, 0.110s GC time
Loading theory "Draft.Heap_Main" (required by "Draft.Heap_MainTemplates")
[| ?b = ?c; ?c ==> ?x = ?u; ~ ?c ==> ?y = ?v |]
==> (if ?b then ?x else ?y) = (if ?c then ?u else ?v)
Found termination order: "{}"
termination by default prover
consts
  comp\<^sub>T' ::
    "('c => 'b Heap) => ('a => 'c Heap) => ('a => 'b Heap) Heap"
  comp\<^sub>T ::
    "(('c => 'b Heap)
      => (('a => 'c Heap) => ('a => 'b Heap) Heap) Heap) Heap"
comp\<^sub>T' ?f ?g =
return
 (%x. Heap_Monad_Ext.fun_app_lifted (return ?f)
       (Heap_Monad_Ext.fun_app_lifted (return ?g) (return x)))
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
termination by default prover
consts
  map\<^sub>T' :: "('b => 'a Heap) => 'b list => 'a list Heap"
  map\<^sub>T :: "(('b => 'a Heap) => ('b list => 'a list Heap) Heap) Heap"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
termination by default prover
consts
  fold\<^sub>T' ::
    "('b => ('a => 'a Heap) Heap) => 'b list => ('a => 'a Heap) Heap"
  fold\<^sub>T ::
    "(('b => ('a => 'a Heap) Heap)
      => ('b list => ('a => 'a Heap) Heap) Heap) Heap"
[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
==> map ?f ?xs = map ?g ?ys
[| ?a = ?b; ?xs = ?ys; !!x. x : set ?xs ==> ?f x = ?g x |]
==> fold ?f ?xs ?a = fold ?g ?ys ?b
locale dp_consistency_heap
  fixes P :: "heap => bool"
    and update :: "'a => 'b => unit Heap"
    and lookup :: "'a => 'b option Heap"
    and dp :: "'a => 'b"
  assumes "dp_consistency_heap P update lookup"
[| ?b = ?c; ?c ==> ?x = ?u; ~ ?c ==> ?y = ?v |]
==> (if ?b then ?x else ?y) = (if ?c then ?u else ?v)
[| option = option'; option' = None ==> f1 = g1;
   !!x2. option' = Some x2 ==> f2 x2 = g2 x2 |]
==> (case option of None => f1 | Some x2 => f2 x2) =
    (case option' of None => g1 | Some x2 => g2 x2)
[| prod = prod'; !!x1 x2. prod' = (x1, x2) ==> f x1 x2 = g x1 x2 |]
==> (case prod of (x1, x2) => f x1 x2) = (case prod' of (x1, x2) => g x1 x2)
locale heap_correct_init_defs
  fixes P :: "'m => heap => bool"
    and lookup :: "'m => 'k => 'v option Heap"
    and update :: "'m => 'k => 'v => unit Heap"
locale heap_correct_init_inv
  fixes P :: "'a => heap => bool"
    and lookup :: "'a => 'b => 'c option Heap"
    and update :: "'a => 'b => 'c => unit Heap"
  assumes "heap_correct_init_inv P lookup update"
locale heap_correct_init
  fixes P :: "'a => heap => bool"
    and lookup :: "'a => 'b => 'c option Heap"
    and update :: "'a => 'b => 'c => unit Heap"
  assumes "heap_correct_init P lookup update"
locale dp_consistency_heap_init
  fixes P :: "'m => heap => bool"
    and update :: "'m => 'k => 'v => unit Heap"
    and lookup :: "'m => 'k => 'v option Heap"
    and dp :: "'k => 'v"
    and init :: "'m Heap"
  assumes "dp_consistency_heap_init P update lookup init"
locale dp_consistency_heap_init'
  fixes P :: "'m => heap => bool"
    and update :: "'m => 'k => 'v => unit Heap"
    and lookup :: "'m => 'k => 'v option Heap"
    and dp :: "'k => 'v"
    and init :: "'m Heap"
  assumes "dp_consistency_heap_init' P update lookup init"
locale dp_consistency_new
  fixes dp :: "'k => 'v"
    and P :: "'m => heap => bool"
    and lookup :: "'m => 'k => 'v option Heap"
    and update :: "'m => 'k => 'v => unit Heap"
    and init :: "'m Heap"
  assumes "dp_consistency_new P lookup update init"
locale dp_consistency_new'
  fixes dp :: "'k => 'v"
    and P :: "'m => heap => bool"
    and lookup :: "'m => 'k => 'v option Heap"
    and update :: "'m => 'k => 'v => unit Heap"
    and init :: "'m Heap"
    and mem :: "'m"
  assumes "dp_consistency_new' P lookup update init mem"
locale dp_consistency_heap_array_new'
  fixes size :: "nat"
    and to_index :: "'k => nat"
    and mem :: "'v option array"
    and dp :: "'k => 'v"
  assumes "dp_consistency_heap_array_new' size to_index mem"
consistentDP (?dp\<^sub>T (result_of (mem_empty size) Heap.empty)) ==>
dp ?x = result_of (mem_empty size >>= (%mem. ?dp\<^sub>T mem ?x)) Heap.empty
locale dp_consistency_heap_array_new
  fixes size :: "nat"
    and to_index :: "'k => nat"
    and dp :: "'k => 'v"
  assumes "dp_consistency_heap_array_new size to_index"
consistentDP (?dp\<^sub>T (result_of (mem_empty size) Heap.empty)) ==>
dp ?x = result_of (mem_empty size >>= (%mem. ?dp\<^sub>T mem ?x)) Heap.empty
locale dp_consistency_heap_array
  fixes size :: "nat"
    and to_index :: "'k => nat"
    and dp :: "'k => 'v"
  assumes "dp_consistency_heap_array size to_index"
locale dp_consistency_heap_array_pair'
  fixes size :: "nat"
    and key1 :: "'k => 'k1"
    and key2 :: "'k => 'k2"
    and to_index :: "'k2 => nat"
    and dp :: "'k => 'v"
    and k1 :: "'k1"
    and k2 :: "'k1"
    and
    mem :: "'k1 ref * 'k1 ref * 'v option array ref * 'v option array ref"
  assumes
    "dp_consistency_heap_array_pair' size key1 key2 to_index k1 k2 mem"
locale dp_consistency_heap_array_pair_iterator
  fixes size :: "nat"
    and key1 :: "'k => 'a"
    and key2 :: "'k => 'b"
    and to_index :: "'b => nat"
    and k1 :: "'a"
    and k2 :: "'a"
    and mem :: "'a ref * 'a ref * 'v option array ref * 'v option array ref"
    and nxt :: "'k => 'k"
    and sizef :: "'k => nat"
    and dp :: "'k => 'v"
    and cnt :: "'k => bool"
  assumes
    "dp_consistency_heap_array_pair_iterator size key1 key2 to_index k1 k2
      mem nxt sizef cnt"
locale dp_consistency_heap_array_pair
  fixes size :: "nat"
    and key1 :: "'k => 'k1"
    and key2 :: "'k => 'k2"
    and to_index :: "'k2 => nat"
    and dp :: "'k => 'v"
    and k1 :: "'k1"
    and k2 :: "'k1"
  assumes "dp_consistency_heap_array_pair size key1 key2 to_index k1 k2"
### theory "Draft.Heap_Main"
### 2.642s elapsed time, 2.730s cpu time, 0.121s GC time
Loading theory "Draft.Heap_MainTemplates"
val templateLemmas =
   [("Heap_Main.abs_unit_cong", "?x = ?y ==> (%_. ?x) = (%_. ?y)",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_equation (t_empty, t_empty))),
    ("Heap_Main.execute_result_ofD",
     "execute ?c ?h = Some (?v, ?h') ==> result_of ?c ?h = ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2))),
         template_var 1))),
    ("Heap_Main.execute_heap_ofD",
     "execute ?c ?h = Some (?v, ?h') ==> heap_of ?c ?h = ?h'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2))),
         template_var 0))),
    ("Heap_Main.return_app_return_cong",
     "?f ?x = ?g ?y ==>
      Heap_Monad_Ext.fun_app_lifted (return ?f) (return ?x) =
      Heap_Monad_Ext.fun_app_lifted (return ?g) (return ?y)",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 3)),
           template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Heap_Main.arg_cong4",
     "[| ?a = ?a'; ?b = ?b'; ?c = ?c'; ?d = ?d' |]
      ==> ?f ?a ?b ?c ?d = ?f ?a' ?b' ?c' ?d'",
     template_implication
      ([template_equation (template_var 8, template_var 7),
        template_equation (template_var 6, template_var 5),
        template_equation (template_var 4, template_var 3),
        template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_var 0, template_var 8),
               template_var 6),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_var 0, template_var 7),
               template_var 5),
             template_var 3),
           template_var 1)))),
    ("Heap_Main.ifT_cong",
     "[| ?b = ?c; ?c ==> ?x = ?u; ~ ?c ==> ?y = ?v |]
      ==> Heap_Monad_Ext.if\<^sub>T (return ?b) ?x ?y =
          Heap_Monad_Ext.if\<^sub>T (return ?c) ?u ?v",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_implication
         ([template_predicate (template_var 4)],
          template_equation (template_var 3, template_var 2)),
        template_implication
         ([template_negation (template_predicate (template_var 4))],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 5)),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 2),
           template_var 0)))),
    ("Heap_Main.mapT_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> Heap_Monad_Ext.fun_app_lifted
           (Heap_Monad_Ext.fun_app_lifted map\<^sub>T (return ?f))
           (return ?xs) =
          Heap_Monad_Ext.fun_app_lifted
           (Heap_Monad_Ext.fun_app_lifted map\<^sub>T (return ?g))
           (return ?ys)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 0, template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 2))))),
    ("Heap_Main.foldT_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> Heap_Monad_Ext.fun_app_lifted
           (Heap_Monad_Ext.fun_app_lifted fold\<^sub>T (return ?f))
           (return ?xs) =
          Heap_Monad_Ext.fun_app_lifted
           (Heap_Monad_Ext.fun_app_lifted fold\<^sub>T (return ?g))
           (return ?ys)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 0, template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.Heap_MainTemplates"
### 0.400s elapsed time, 0.530s cpu time, 0.051s GC time
val it = (): unit
