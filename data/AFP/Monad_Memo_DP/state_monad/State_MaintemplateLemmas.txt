   [("State_Main.abs_unit_cong", "?x = ?y ==> (%_. ?x) = (%_. ?y)",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_equation (t_empty, t_empty))),
    ("State_Main.return_app_return_cong",
     "?f ?x = ?g ?y ==>
      State_Monad_Ext.fun_app_lifted (State_Monad.return ?f)
       (State_Monad.return ?x) =
      State_Monad_Ext.fun_app_lifted (State_Monad.return ?g)
       (State_Monad.return ?y)",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 3)),
           template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("State_Main.ifT_cong",
     "[| ?b = ?c; ?c ==> ?x = ?u; ~ ?c ==> ?y = ?v |]
      ==> State_Monad_Ext.if\<^sub>T (State_Monad.return ?b) ?x ?y =
          State_Monad_Ext.if\<^sub>T (State_Monad.return ?c) ?u ?v",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_implication
         ([template_predicate (template_var 4)],
          template_equation (template_var 3, template_var 2)),
        template_implication
         ([template_negation (template_predicate (template_var 4))],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 5)),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 2),
           template_var 0)))),
    ("State_Main.mapT_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> State_Monad_Ext.fun_app_lifted
           (State_Monad_Ext.fun_app_lifted map\<^sub>T
             (State_Monad.return ?f))
           (State_Monad.return ?xs) =
          State_Monad_Ext.fun_app_lifted
           (State_Monad_Ext.fun_app_lifted map\<^sub>T
             (State_Monad.return ?g))
           (State_Monad.return ?ys)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 0, template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 2))))),
    ("State_Main.foldT_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> State_Monad_Ext.fun_app_lifted
           (State_Monad_Ext.fun_app_lifted fold\<^sub>T
             (State_Monad.return ?f))
           (State_Monad.return ?xs) =
          State_Monad_Ext.fun_app_lifted
           (State_Monad_Ext.fun_app_lifted fold\<^sub>T
             (State_Monad.return ?g))
           (State_Monad.return ?ys)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 0, template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 2)))))]
