Loading theory "HOL-Library.Infinite_Set" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.467s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.291s elapsed time, 1.161s cpu time, 0.111s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.774s cpu time, 0.070s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.285s cpu time, 0.111s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.411s elapsed time, 1.626s cpu time, 0.192s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.801s elapsed time, 3.156s cpu time, 0.304s GC time
Loading theory "List-Infinite.Util_MinMax" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "List-Infinite.Util_MinMax"
### 0.226s elapsed time, 0.757s cpu time, 0.560s GC time
Loading theory "List-Infinite.Util_Nat" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_Div")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 4.117s cpu time, 0.910s GC time
Found termination order: "size <*mlex*> {}"
Loading theory "List-Infinite.Util_Set" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
### theory "List-Infinite.Util_Set"
### 0.091s elapsed time, 0.364s cpu time, 0.000s GC time
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
### theory "List-Infinite.Util_Nat"
### 0.176s elapsed time, 0.681s cpu time, 0.046s GC time
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
Loading theory "List-Infinite.Util_Div" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.359s elapsed time, 5.026s cpu time, 0.983s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
Found termination order: "size <*mlex*> {}"
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
### theory "List-Infinite.Util_Div"
### 0.350s elapsed time, 1.079s cpu time, 0.154s GC time
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.413s elapsed time, 1.029s cpu time, 0.154s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.061s elapsed time, 6.882s cpu time, 1.270s GC time
Loading theory "Draft.Templates" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IL_IntervalOperatorsMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.519s elapsed time, 1.078s cpu time, 0.091s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.531s elapsed time, 2.373s cpu time, 0.169s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.396s elapsed time, 0.437s cpu time, 0.033s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.477s elapsed time, 0.521s cpu time, 0.061s GC time
Loading theory "List-Infinite.Util_NatInf" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "List-Infinite.Util_NatInf"
### 0.116s elapsed time, 0.146s cpu time, 0.043s GC time
Loading theory "List-Infinite.SetInterval2" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "List-Infinite.SetInterval2"
### 0.923s elapsed time, 1.019s cpu time, 0.102s GC time
Loading theory "List-Infinite.InfiniteSet2" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval")
Loading theory "List-Infinite.SetIntervalCut" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval" via "List-Infinite.SetIntervalStep")
### theory "List-Infinite.InfiniteSet2"
### 0.140s elapsed time, 0.303s cpu time, 0.053s GC time
### theory "List-Infinite.SetIntervalCut"
### 0.543s elapsed time, 0.730s cpu time, 0.098s GC time
Loading theory "List-Infinite.SetIntervalStep" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators" via "Draft.IL_Interval")
consts
  inext_nth :: "nat set => nat => nat"
consts
  iprev_nth :: "nat set => nat => nat"
### theory "List-Infinite.SetIntervalStep"
### 0.579s elapsed time, 0.666s cpu time, 0.119s GC time
Loading theory "Draft.IL_Interval" (required by "Draft.IL_IntervalOperatorsMoreTemplates" via "Draft.IL_IntervalOperators")
### theory "Draft.IL_Interval"
### 0.784s elapsed time, 0.940s cpu time, 0.214s GC time
Loading theory "Draft.IL_IntervalOperators" (required by "Draft.IL_IntervalOperatorsMoreTemplates")
Proofs for inductive predicate(s) "i_set_indp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "i_set0_indp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "NatMultiplesp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "i_set_contp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "i_set_cont_minp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "i_set_multp"
  Proving monotonicity ...
### theory "Draft.IL_IntervalOperators"
### 1.427s elapsed time, 2.366s cpu time, 1.293s GC time
Loading theory "Draft.IL_IntervalOperatorsMoreTemplates"
val templateLemmas =
   [("IL_IntervalOperators.iT_Div_0_finite", "finite (?I \<oslash> 0)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IL_IntervalOperators.iT_Minus_finite", "finite (?k \<ominus> ?I)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IL_IntervalOperators.iT_Mult_0_finite", "finite (?I \<otimes> 0)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IL_IntervalOperators.i_set0_mult_subset_i_set0",
     "i_set0_mult ?k <= i_set0",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("IL_IntervalOperators.i_set_mult_subset_i_set",
     "i_set_mult ?k <= i_set",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("IL_IntervalOperators.i_set0_mult_empty", "{} : i_set0_mult ?k",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_IntervalOperators.i_set_FROM", "[?n\<dots>] : i_set",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_FROM", "[?n\<dots>] : i_set0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_ind_FROM", "[?n\<dots>] : i_set0_ind",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set_TILL", "[\<dots>?n] : i_set",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_TILL", "[\<dots>?n] : i_set0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_ind_TILL", "[\<dots>?n] : i_set0_ind",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.iT_Div_empty", "{} \<oslash> ?k = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("IL_IntervalOperators.iT_Minus_empty", "?k \<ominus> {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("IL_IntervalOperators.iT_Mult_empty", "{} \<otimes> ?k = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("IL_IntervalOperators.iT_Plus_0", "?I \<oplus> 0 = ?I",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("IL_IntervalOperators.iT_Plus_empty", "{} \<oplus> ?k = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("IL_IntervalOperators.iT_Plus_neg_0", "?I \<oplus>- 0 = ?I",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("IL_IntervalOperators.iT_Plus_neg_empty", "{} \<oplus>- ?k = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("IL_IntervalOperators.i_set_mult_subset_i_set0_mult",
     "i_set_mult ?k <= i_set0_mult ?k",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("IL_IntervalOperators.i_set0_mult_FROM",
     "[?n\<dots>] : i_set0_mult ?k",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_IntervalOperators.i_set0_mult_TILL",
     "[\<dots>?n] : i_set0_mult ?k",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_IntervalOperators.i_set_IN", "[?n\<dots>,?d] : i_set",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_IN", "[?n\<dots>,?d] : i_set0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_ind_IN", "[?n\<dots>,?d] : i_set0_ind",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set_MOD", "[ ?r, mod ?m ] : i_set",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_MOD", "[ ?r, mod ?m ] : i_set0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_ind_MOD", "[ ?r, mod ?m ] : i_set0_ind",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set_singleton", "{?a} : i_set",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_singleton", "{?a} : i_set0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.iFROM_conv", "[?n\<dots>] = UNIV \<oplus> ?n",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("IL_IntervalOperators.iT_Div_1", "?I \<oslash> Suc 0 = ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("IL_IntervalOperators.iT_Mult_1", "?I \<otimes> Suc 0 = ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("IL_IntervalOperators.i_set0_mult_IN",
     "[?n\<dots>,?d] : i_set0_mult ?k",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_IntervalOperators.i_set_MODb", "[ ?r, mod ?m, ?c ] : i_set",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_MODb", "[ ?r, mod ?m, ?c ] : i_set0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.i_set0_ind_MODb",
     "[ ?r, mod ?m, ?c ] : i_set0_ind",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("IL_IntervalOperators.iT_Plus_card", "card (?I \<oplus> ?k) = card ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("IL_IntervalOperators.iTILL_div_Min",
     "iMin ([\<dots>?n] \<oslash> ?k) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("IL_IntervalOperators.iTILL_mult_Min",
     "iMin ([\<dots>?n] \<otimes> ?k) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("IL_IntervalOperators.iTILL_add_Min",
     "iMin ([\<dots>?n] \<oplus> ?k) = ?k",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_var 0)),
    ("IL_IntervalOperators.iFROM_div_0",
     "[?n\<dots>] \<oslash> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.iTILL_div_0",
     "[\<dots>?n] \<oslash> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_hole 0))),
    ("IL_IntervalOperators.iFROM_mult_0",
     "[?n\<dots>] \<otimes> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.iTILL_mult_0",
     "[\<dots>?n] \<otimes> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_hole 0))),
    ("IL_IntervalOperators.iT_Plus_Plus_neg_inverse",
     "?I \<oplus> ?k \<oplus>- ?k = ?I",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("IL_IntervalOperators.iT_Plus_finite_iff",
     "finite (?I \<oplus> ?k) = finite ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_finite_iff",
     "finite (?I \<oplus>- ?k) = finite ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("IL_IntervalOperators.iT_Plus_icard",
     "icard (?I \<oplus> ?k) = icard ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_card_le",
     "card (?I \<oplus>- ?k) <= card ?I",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("IL_IntervalOperators.iT_Minus_icard_le",
     "icard (?k \<ominus> ?I) <= icard ?I",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("IL_IntervalOperators.iT_Plus_neg_icard_le",
     "icard (?I \<oplus>- ?k) <= icard ?I",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("IL_IntervalOperators.i_set_multp_i_set_mult_eq",
     "i_set_multp ?k = (%x. x : i_set_mult ?k)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("IL_IntervalOperators.iIN_conv",
     "[?n\<dots>,?d] = [\<dots>?d] \<oplus> ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iTILL_add",
     "[\<dots>?i] \<oplus> ?k = [?k\<dots>,?i]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_IntervalOperators.iIN_div_0",
     "[?n\<dots>,?d] \<oslash> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.iMOD_div_0",
     "[ ?r, mod ?m ] \<oslash> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.iIN_mult_0",
     "[?n\<dots>,?d] \<otimes> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.iMOD_mult_0",
     "[ ?r, mod ?m ] \<otimes> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.i_set0_mult_MOD",
     "[ ?r, mod ?m * ?k ] : i_set0_mult ?k",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_IntervalOperators.iT_Minus_card",
     "card (?k \<ominus> ?I) = card (?I \<down>\<le> ?k)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Plus_neg_card",
     "card (?I \<oplus>- ?k) = card (?I \<down>\<ge> ?k)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iTILL_div_Max",
     "Max ([\<dots>?n] \<oslash> ?k) = ?n div ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_IntervalOperators.iFROM_div_Min",
     "iMin ([?n\<dots>] \<oslash> ?k) = ?n div ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_IntervalOperators.iFROM_mult_Min",
     "iMin ([?n\<dots>] \<otimes> ?k) = ?n * ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_IntervalOperators.iFROM_add_Min",
     "iMin ([?n\<dots>] \<oplus> ?k) = ?n + ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_IntervalOperators.iTILL_mult",
     "[\<dots>?n] \<otimes> ?k = [ 0, mod ?k, ?n ]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 1))),
    ("IL_IntervalOperators.iFROM_add",
     "[?n\<dots>] \<oplus> ?k = [?n + ?k\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iFROM_add_neg",
     "[?n\<dots>] \<oplus>- ?k = [?n - ?k\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Minus_0", "?k \<ominus> {0} = {?k}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("IL_IntervalOperators.iT_Plus_neg_Plus_inverse",
     "?I \<oplus>- ?k \<oplus> ?k = ?I \<down>\<ge> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_IntervalOperators.iMODb_div_0",
     "[ ?r, mod ?m, ?c ] \<oslash> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.iMODb_mult_0",
     "[ ?r, mod ?m, ?c ] \<otimes> 0 = [\<dots>0]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("IL_IntervalOperators.iT_Div_empty_iff",
     "(?I \<oslash> ?k = {}) = (?I = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 1, template_hole 0))),
    ("IL_IntervalOperators.iT_Mult_empty_iff",
     "(?I \<otimes> ?k = {}) = (?I = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 1, template_hole 0))),
    ("IL_IntervalOperators.iT_Plus_empty_iff",
     "(?I \<oplus> ?k = {}) = (?I = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 1, template_hole 0))),
    ("IL_IntervalOperators.iT_Minus_icard",
     "icard (?k \<ominus> ?I) = icard (?I \<down>\<le> ?k)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Plus_neg_icard",
     "icard (?I \<oplus>- ?k) = icard (?I \<down>\<ge> ?k)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Div_card_ge_div",
     "card ?I div ?d <= card (?I \<oslash> ?d)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.i_set0_mult_MODb",
     "[ ?r, mod ?m * ?k, ?c ] : i_set0_mult ?k",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app (template_hole 0, template_var 1))
         )),
    ("IL_IntervalOperators.i_set_imp_not_empty", "?I : i_set ==> ?I ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("IL_IntervalOperators.iMOD_mult_div_right_inj_on",
     "inj_on (%x. x div ?k) [ ?r, mod ?k * ?m ]",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))
         )),
    ("IL_IntervalOperators.iIN_div_Min",
     "iMin ([?n\<dots>,?d] \<oslash> ?k) = ?n div ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("IL_IntervalOperators.iMOD_div_Min",
     "iMin ([ ?r, mod ?m ] \<oslash> ?k) = ?r div ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("IL_IntervalOperators.iIN_mult_Min",
     "iMin ([?n\<dots>,?d] \<otimes> ?k) = ?n * ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("IL_IntervalOperators.iMOD_mult_Min",
     "iMin ([ ?r, mod ?m ] \<otimes> ?k) = ?r * ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("IL_IntervalOperators.iIN_add_Min",
     "iMin ([?n\<dots>,?d] \<oplus> ?k) = ?n + ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("IL_IntervalOperators.iMOD_add_Min",
     "iMin ([ ?r, mod ?m ] \<oplus> ?k) = ?r + ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("IL_IntervalOperators.iMOD_conv",
     "[ ?r, mod ?m ] = [0\<dots>] \<otimes> ?m \<oplus> ?r",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Div_image_conv",
     "?I \<oslash> ?k = (%n. n div ?k) ` ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("IL_IntervalOperators.iT_Mult_image_conv",
     "?I \<otimes> ?k = (%n. n * ?k) ` ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("IL_IntervalOperators.iT_Plus_image_conv",
     "?I \<oplus> ?k = (%n. n + ?k) ` ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("IL_IntervalOperators.iFROM_mult",
     "[?n\<dots>] \<otimes> ?k = [ ?n * ?k, mod ?k ]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("IL_IntervalOperators.iT_Div_icard_ge_div",
     "icard ?I div enat ?d <= icard (?I \<oslash> ?d)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.i_set_Mult_closed",
     "?I : i_set ==> ?I \<otimes> ?k : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set_Plus_closed",
     "?I : i_set ==> ?I \<oplus> ?k : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_Minus_closed",
     "?I : i_set0 ==> ?k \<ominus> ?I : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_Mult_closed",
     "?I : i_set0 ==> ?I \<otimes> ?k : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_Plus_closed",
     "?I : i_set0 ==> ?I \<oplus> ?k : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_Plus_neg_closed",
     "?I : i_set0 ==> ?I \<oplus>- ?k : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_cut_ge_closed",
     "?I : i_set0 ==> ?I \<down>\<ge> ?t : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_cut_greater_closed",
     "?I : i_set0 ==> ?I \<down>> ?t : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_cut_le_closed",
     "?I : i_set0 ==> ?I \<down>\<le> ?t : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set0_cut_less_closed",
     "?I : i_set0 ==> ?I \<down>< ?t : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.i_set_mult_imp_not_empty",
     "?I : i_set_mult ?k ==> ?I ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("IL_IntervalOperators.iT_Minus_bound",
     "?x : ?k \<ominus> ?I ==> ?x <= ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 2, template_var 1))),
    ("IL_IntervalOperators.iMODb_mult_div_right_inj_on",
     "inj_on (%x. x div ?k) [ ?r, mod ?k * ?m, ?c ]",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0))
         )),
    ("IL_IntervalOperators.NatMultiplesp_NatMultiples_eq",
     "NatMultiplesp (%x. x : ?F) = (%x. x : NatMultiples ?F)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("IL_IntervalOperators.iMODb_div_Min",
     "iMin ([ ?r, mod ?m, ?c ] \<oslash> ?k) = ?r div ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 3), template_var 0))),
    ("IL_IntervalOperators.iMODb_mult_Min",
     "iMin ([ ?r, mod ?m, ?c ] \<otimes> ?k) = ?r * ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 3), template_var 0))),
    ("IL_IntervalOperators.iMODb_add_Min",
     "iMin ([ ?r, mod ?m, ?c ] \<oplus> ?k) = ?r + ?k",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 3), template_var 0))),
    ("IL_IntervalOperators.iT_Div_0_if",
     "?I \<oslash> 0 = (if ?I = {} then {} else [\<dots>0])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_hole 1),
             template_app (template_hole 0, template_hole 3))
           ))),
    ("IL_IntervalOperators.iT_Mult_0_if",
     "?I \<otimes> 0 = (if ?I = {} then {} else [\<dots>0])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_hole 1),
             template_app (template_hole 0, template_hole 3))
           ))),
    ("IL_IntervalOperators.iMODb_conv",
     "[ ?r, mod ?m, ?c ] = [\<dots>?c] \<otimes> ?m \<oplus> ?r",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)),
         template_var 2))),
    ("IL_IntervalOperators.iT_Div_assoc",
     "?I \<oslash> ?a \<oslash> ?b = ?I \<oslash> ?a * ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Div_commute",
     "?I \<oslash> ?a \<oslash> ?b = ?I \<oslash> ?b \<oslash> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Div_singleton",
     "{?a} \<oslash> ?k = {?a div ?k}",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("IL_IntervalOperators.iT_Mult_assoc",
     "?I \<otimes> ?a \<otimes> ?b = ?I \<otimes> ?a * ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_commute",
     "?I \<otimes> ?a \<otimes> ?b = ?I \<otimes> ?b \<otimes> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Mult_singleton",
     "{?a} \<otimes> ?k = {?a * ?k}",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("IL_IntervalOperators.iIN_add",
     "[?n\<dots>,?d] \<oplus> ?k = [?n + ?k\<dots>,?d]",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iMOD_add",
     "[ ?r, mod ?m ] \<oplus> ?k = [ ?r + ?k, mod ?m ]",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_assoc",
     "?I \<oplus> ?a \<oplus> ?b = ?I \<oplus> ?a + ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_commute",
     "?I \<oplus> ?a \<oplus> ?b = ?I \<oplus> ?b \<oplus> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_singleton",
     "{?a} \<oplus> ?k = {?a + ?k}",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("IL_IntervalOperators.iMOD_0_add_neg",
     "[ ?r, mod 0 ] \<oplus>- ?k = {?r} \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("IL_IntervalOperators.iT_Plus_neg_assoc",
     "?I \<oplus>- ?a \<oplus>- ?b = ?I \<oplus>- ?a + ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_commute",
     "?I \<oplus>- ?a \<oplus>- ?b = ?I \<oplus>- ?b \<oplus>- ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Minus_Minus_cut_eq",
     "?k \<ominus> (?k \<ominus> ?I \<down>\<le> ?k) = ?I \<down>\<le> ?k",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_IntervalOperators.i_set0_i_set_mem_conv",
     "(?I : i_set0) = (?I : i_set | ?I = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("IL_IntervalOperators.iT_Plus_neg_mem_iff",
     "(?x : ?I \<oplus>- ?k) = (?x + ?k : ?I)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_mem_iff2",
     "(?x + ?k : ?I \<oplus> ?k) = (?x : ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("IL_IntervalOperators.iT_Minus_card_le",
     "finite ?I ==> card (?k \<ominus> ?I) <= card ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("IL_IntervalOperators.iFROM_sub_empty",
     "?k < ?n ==> ?k \<ominus> [?n\<dots>] = {}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("IL_IntervalOperators.iTILL_add_neg2",
     "?n < ?k ==> [\<dots>?n] \<oplus>- ?k = {}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("IL_IntervalOperators.i_set_self_mult_in_i_set_mult",
     "?I : i_set ==> ?I \<otimes> ?k : i_set_mult ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_IntervalOperators.i_set0_self_mult_in_i_set0_mult",
     "?I : i_set0 ==> ?I \<otimes> ?k : i_set0_mult ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_IntervalOperators.iT_Minus_less_Min_empty",
     "?k < iMin ?I ==> ?k \<ominus> ?I = {}",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("IL_IntervalOperators.i_set0_mult_div_self_i_set0",
     "?I : i_set0_mult ?k ==> ?I \<oslash> ?k : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("IL_IntervalOperators.i_set_mult_div_self_i_set",
     "?I : i_set_mult ?k ==> ?I \<oslash> ?k : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("IL_IntervalOperators.i_set_mult_neq1_subset_i_set",
     "?k ~= Suc 0 ==> i_set_mult ?k < i_set",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 4, template_hole 3))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Div_0_card_if",
     "card (?I \<oslash> 0) = (if ?I = {} then 0 else Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 4),
             template_app (template_hole 0, template_hole 4))
           ))),
    ("IL_IntervalOperators.iIN_div_Max",
     "Max ([?n\<dots>,?d] \<oslash> ?k) = (?n + ?d) div ?k",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("IL_IntervalOperators.iT_Minus_image_conv",
     "?k \<ominus> ?I = (-) ?k ` ?I \<down>\<le> ?k",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Plus_neg_image_conv",
     "?I \<oplus>- ?k = (%n. n - ?k) ` ?I \<down>\<ge> ?k",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iIN_mult",
     "[?n\<dots>,?d] \<otimes> ?k = [ ?n * ?k, mod ?k, ?d ]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 0),
         template_var 1))),
    ("IL_IntervalOperators.iMODb_mod_0_add_neg",
     "[ ?r, mod 0, ?c ] \<oplus>- ?k = {?r} \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_var 0))),
    ("IL_IntervalOperators.i_set_i_set0_mem_conv",
     "(?I : i_set) = (?I : i_set0 & ?I ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 3)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("IL_IntervalOperators.iT_Mult_card",
     "0 < ?k ==> card (?I \<otimes> ?k) = card ?I",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_Div_self",
     "0 < ?k ==> ?I \<otimes> ?k \<oslash> ?k = ?I",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("IL_IntervalOperators.iT_Div_finite_iff",
     "0 < ?k ==> finite (?I \<oslash> ?k) = finite ?I",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_finite_iff",
     "0 < ?k ==> finite (?I \<otimes> ?k) = finite ?I",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_icard",
     "0 < ?k ==> icard (?I \<otimes> ?k) = icard ?I",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Div_card_le",
     "0 < ?k ==> card (?I \<oslash> ?k) <= card ?I",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Div_icard_le",
     "0 < ?k ==> icard (?I \<oslash> ?k) <= icard ?I",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_singleton2",
     "?a < ?k ==> {?a} \<oplus>- ?k = {}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Minus_singleton2",
     "?k < ?a ==> ?k \<ominus> {?a} = {}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_hole 0))),
    ("IL_IntervalOperators.iIN_sub3",
     "?k < ?n ==> ?k \<ominus> [?n\<dots>,?d] = {}",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Minus_Plus_empty",
     "?k < ?n ==> ?k \<ominus> (?I \<oplus> ?n) = {}",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("IL_IntervalOperators.iMOD_sub2",
     "?k < ?r ==> ?k \<ominus> [ ?r, mod ?m ] = {}",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("IL_IntervalOperators.iTILL_sub2",
     "?k <= ?n ==> ?k \<ominus> [\<dots>?n] = [\<dots>?k]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_IntervalOperators.iT_Div_mono",
     "?A <= ?B ==> ?A \<oslash> ?k <= ?B \<oslash> ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Minus_mono",
     "?A <= ?B ==> ?k \<ominus> ?A <= ?k \<ominus> ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Mult_mono",
     "?A <= ?B ==> ?A \<otimes> ?k <= ?B \<otimes> ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_mono",
     "?A <= ?B ==> ?A \<oplus> ?k <= ?B \<oplus> ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_mono",
     "?A <= ?B ==> ?A \<oplus>- ?k <= ?B \<oplus>- ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Div_not_empty",
     "?I ~= {} ==> ?I \<oslash> ?k ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.iT_Mult_not_empty",
     "?I ~= {} ==> ?I \<otimes> ?k ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.iT_Plus_not_empty",
     "?I ~= {} ==> ?I \<oplus> ?k ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("IL_IntervalOperators.iT_Div_0",
     "?I ~= {} ==> ?I \<oslash> 0 = [\<dots>0]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_app (template_hole 0, template_hole 1)))),
    ("IL_IntervalOperators.iT_Mult_0",
     "?I ~= {} ==> ?I \<otimes> 0 = [\<dots>0]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_app (template_hole 0, template_hole 1)))),
    ("IL_IntervalOperators.mod_0_imp_i_set_mult_subset",
     "?a mod ?b = 0 ==> i_set_mult ?a <= i_set_mult ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_inext2",
     "inext ?n (?I \<oplus>- ?k) = inext (?n + ?k) ?I - ?k",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_var 0))),
    ("IL_IntervalOperators.iT_Plus_inext",
     "inext (?n + ?k) (?I \<oplus> ?k) = inext ?n ?I + ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Mult_inext",
     "inext (?n * ?k) (?I \<otimes> ?k) = inext ?n ?I * ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_iprev",
     "iprev (?n + ?k) (?I \<oplus> ?k) = iprev ?n ?I + ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Mult_iprev",
     "iprev (?n * ?k) (?I \<otimes> ?k) = iprev ?n ?I * ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Div_Un",
     "?A Un ?B \<oslash> ?k = (?A \<oslash> ?k) Un (?B \<oslash> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Div_insert",
     "insert ?n ?I \<oslash> ?k = insert (?n div ?k) (?I \<oslash> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Minus_Minus",
     "?a \<ominus> (?b \<ominus> ?I) =
      ?I \<down>\<le> ?b \<oplus> ?a \<oplus>- ?b",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Minus_Int",
     "?k \<ominus> ?A Int ?B = (?k \<ominus> ?A) Int (?k \<ominus> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Minus_Un",
     "?k \<ominus> ?A Un ?B = (?k \<ominus> ?A) Un (?k \<ominus> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("IL_IntervalOperators.iMOD_mult",
     "[ ?r, mod ?m ] \<otimes> ?k = [ ?r * ?k, mod ?m * ?k ]",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_Mult_distrib",
     "?I \<oplus> ?n \<otimes> ?m = ?I \<otimes> ?m \<oplus> ?n * ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_Un",
     "?A Un ?B \<otimes> ?k = (?A \<otimes> ?k) Un (?B \<otimes> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_image",
     "?f ` ?I \<otimes> ?n = (%x. ?f x * ?n) ` ?I",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("IL_IntervalOperators.iT_Minus_Plus_cut_assoc",
     "?k \<ominus> ?I \<oplus> ?n = ?k + ?n \<ominus> ?I \<down>\<le> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Plus_Int",
     "?A Int ?B \<oplus> ?k = (?A \<oplus> ?k) Int (?B \<oplus> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_Un",
     "?A Un ?B \<oplus> ?k = (?A \<oplus> ?k) Un (?B \<oplus> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_image",
     "?f ` ?I \<oplus> ?n = (%x. ?f x + ?n) ` ?I",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_Int",
     "?A Int ?B \<oplus>- ?k = (?A \<oplus>- ?k) Int (?B \<oplus>- ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_Un",
     "?A Un ?B \<oplus>- ?k = (?A \<oplus>- ?k) Un (?B \<oplus>- ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_cut_ge",
     "(?I \<oplus> ?k) \<down>\<ge> ?t =
      ?I \<down>\<ge> (?t - ?k) \<oplus> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_ge",
     "(?I \<oplus>- ?k) \<down>\<ge> ?t =
      ?I \<down>\<ge> (?t + ?k) \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("IL_IntervalOperators.iT_Minus_cut_greater",
     "(?k \<ominus> ?I) \<down>> ?t = ?k \<ominus> ?I \<down>< (?k - ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_greater",
     "(?I \<oplus>- ?k) \<down>> ?t = ?I \<down>> (?t + ?k) \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("IL_IntervalOperators.iT_Minus_cut_le",
     "(?k \<ominus> ?I) \<down>\<le> ?t =
      ?k \<ominus> ?I \<down>\<ge> (?k - ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_le",
     "(?I \<oplus>- ?k) \<down>\<le> ?t =
      ?I \<down>\<le> (?t + ?k) \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_cut_less",
     "(?I \<oplus> ?k) \<down>< ?t = ?I \<down>< (?t - ?k) \<oplus> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_less",
     "(?I \<oplus>- ?k) \<down>< ?t = ?I \<down>< (?t + ?k) \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("IL_IntervalOperators.iMODb_add",
     "[ ?r, mod ?m, ?c ] \<oplus> ?k = [ ?r + ?k, mod ?m, ?c ]",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_var 1))),
    ("IL_IntervalOperators.iT_Minus_cut_ge2",
     "(?k \<ominus> ?I) \<down>\<ge> (?k - ?t) =
      ?k \<ominus> ?I \<down>\<le> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_cut_ge2",
     "(?I \<oplus> ?k) \<down>\<ge> (?t + ?k) =
      ?I \<down>\<ge> ?t \<oplus> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_ge2",
     "(?I \<oplus>- ?k) \<down>\<ge> (?t - ?k) =
      ?I \<down>\<ge> ?t \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_cut_greater2",
     "(?I \<oplus> ?k) \<down>> (?t + ?k) = ?I \<down>> ?t \<oplus> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_cut_le2",
     "(?I \<oplus> ?k) \<down>\<le> (?t + ?k) =
      ?I \<down>\<le> ?t \<oplus> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Minus_cut_less2",
     "(?k \<ominus> ?I) \<down>< (?k - ?t) = ?k \<ominus> ?I \<down>> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_cut_less2",
     "(?I \<oplus> ?k) \<down>< (?t + ?k) = ?I \<down>< ?t \<oplus> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_less2",
     "(?I \<oplus>- ?k) \<down>< (?t - ?k) = ?I \<down>< ?t \<oplus>- ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Plus_neg_not_empty_iff",
     "(?I \<oplus>- ?k ~= {}) = (EX x:?I. ?k <= x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("IL_IntervalOperators.iT_Div_0_icard_if",
     "icard (?I \<oslash> 0) = enat (if ?I = {} then 0 else Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_hole 5),
               template_app (template_hole 0, template_hole 5)))
           ))),
    ("IL_IntervalOperators.iMODb_sub2",
     "?k < ?r ==> ?k \<ominus> [ ?r, mod ?m, ?c ] = {}",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Plus_neg_Plus_le_inverse",
     "?k <= iMin ?I ==> ?I \<oplus>- ?k \<oplus> ?k = ?I",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("IL_IntervalOperators.iT_Minus_Minus_eq2",
     "?I <= [\<dots>?k] ==> ?k \<ominus> (?k \<ominus> ?I) = ?I",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("IL_IntervalOperators.divisor_mod_0_imp_iMOD_in_i_set_mult",
     "?m mod ?k = 0 ==> [ ?r, mod ?m ] : i_set_mult ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_IntervalOperators.iFROM_sub",
     "?k \<ominus> [?n\<dots>] =
      (if ?n <= ?k then [\<dots>?k - ?n] else {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("IL_IntervalOperators.iTILL_add_neg",
     "[\<dots>?n] \<oplus>- ?k =
      (if ?k <= ?n then [\<dots>?n - ?k] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Minus_empty_iff",
     "(?k \<ominus> ?I = {}) = (?I = {} | ?k < iMin ?I)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("IL_IntervalOperators.iT_Div_mem_iff_0",
     "(?x : ?I \<oslash> 0) = (?I ~= {} & ?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 5))
           ))),
    ("IL_IntervalOperators.iT_Mult_mem_iff_0",
     "(?x : ?I \<otimes> 0) = (?I ~= {} & ?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 5))
           ))),
    ("IL_IntervalOperators.iFROM_div",
     "0 < ?k ==> [?n\<dots>] \<oslash> ?k = [?n div ?k\<dots>]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.iTILL_div",
     "0 < ?k ==> [\<dots>?n] \<oslash> ?k = [\<dots>?n div ?k]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.iT_Div_infinite_iff",
     "0 < ?k ==> infinite (?I \<oslash> ?k) = infinite ?I",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("IL_IntervalOperators.iTILL_add_neg1",
     "?k <= ?n ==> [\<dots>?n] \<oplus>- ?k = [\<dots>?n - ?k]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.iT_Minus_cut_eq",
     "?k <= ?t ==> ?k \<ominus> ?I \<down>\<le> ?t = ?k \<ominus> ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("IL_IntervalOperators.iFROM_sub1",
     "?n <= ?k ==> ?k \<ominus> [?n\<dots>] = [\<dots>?k - ?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_eq",
     "?t <= ?k ==> ?I \<down>\<ge> ?t \<oplus>- ?k = ?I \<oplus>- ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Minus_Min_singleton",
     "?I ~= {} ==> iMin ?I \<ominus> ?I = {0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 4)))),
    ("IL_IntervalOperators.NatMultiples_ex_divisor",
     "?m : NatMultiples ?F ==> EX k:?F. ?m mod k = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), t_empty)
           ))),
    ("IL_IntervalOperators.divisor_mod_0_imp_iMODb_in_i_set_mult",
     "?m mod ?k = 0 ==> [ ?r, mod ?m, ?c ] : i_set_mult ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("IL_IntervalOperators.iIN_add_neg3",
     "?n + ?d < ?k ==> [?n\<dots>,?d] \<oplus>- ?k = {}",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Plus_neg_iprev2",
     "iprev ?n (?I \<oplus>- ?k) =
      iprev (?n + ?k) (?I \<down>\<ge> ?k) - ?k",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 0))),
    ("IL_IntervalOperators.iMODb_div_Max",
     "Max ([ ?r, mod ?m, ?c ] \<oslash> ?k) = (?r + ?m * ?c) div ?k",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("IL_IntervalOperators.iT_Plus_neg_iprev",
     "iprev (?n - ?k) (?I \<oplus>- ?k) =
      iprev ?n (?I \<down>\<ge> ?k) - ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("IL_IntervalOperators.iMODb_mult",
     "[ ?r, mod ?m, ?c ] \<otimes> ?k = [ ?r * ?k, mod ?m * ?k, ?c ]",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Minus_mem_iff",
     "(?x : ?k \<ominus> ?I) = (?x <= ?k & ?k - ?x : ?I)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_mem_iff",
     "(?x : ?I \<oplus> ?k) = (?k <= ?x & ?x - ?k : ?I)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iMOD_div_self",
     "0 < ?m ==> [ ?r, mod ?m ] \<oslash> ?m = [?r div ?m\<dots>]",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.iTILL_sub1",
     "?n <= ?k ==> ?k \<ominus> [\<dots>?n] = [?k - ?n\<dots>,?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Div_Min",
     "?I ~= {} ==> iMin (?I \<oslash> ?k) = iMin ?I div ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_Min",
     "?I ~= {} ==> iMin (?I \<otimes> ?k) = iMin ?I * ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_Min",
     "?I ~= {} ==> iMin (?I \<oplus> ?k) = iMin ?I + ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("IL_IntervalOperators.i_set_Div_not_closed",
     "Suc 0 < ?k ==> EX I:i_set. I \<oslash> ?k ~: i_set",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3), t_empty)
           ))),
    ("IL_IntervalOperators.i_set0_Div_not_closed",
     "Suc 0 < ?k ==> EX I:i_set0. I \<oslash> ?k ~: i_set0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3), t_empty)
           ))),
    ("IL_IntervalOperators.iMOD_mult_div_right_inj_on2",
     "?m mod ?k = 0 ==> inj_on (%x. x div ?k) [ ?r, mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_IntervalOperators.iT_Div_card_inj_on",
     "inj_on (%n. n div ?k) ?I ==> card (?I \<oslash> ?k) = card ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Div_icard_inj_on",
     "inj_on (%n. n div ?k) ?I ==> icard (?I \<oslash> ?k) = icard ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_Max_less_empty",
     "[| finite ?I; Max ?I < ?k |] ==> ?I \<oplus>- ?k = {}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("IL_IntervalOperators.i_set_cut_ge_closed",
     "[| ?I : i_set; ?t : ?I |] ==> ?I \<down>\<ge> ?t : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 2)
           ))),
    ("IL_IntervalOperators.i_set_cut_le_closed",
     "[| ?I : i_set; ?t : ?I |] ==> ?I \<down>\<le> ?t : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 2)
           ))),
    ("IL_IntervalOperators.Int_empty_sum",
     "(SUM k<=?n. if {} Int ?I k = {} then 0 else Suc 0) = 0",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_hole 2)),
    ("IL_IntervalOperators.iTILL_sub",
     "?k \<ominus> [\<dots>?n] =
      (if ?n <= ?k then [?k - ?n\<dots>,?n] else [\<dots>?k])",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)),
         template_app (template_hole 4, template_var 1)))),
    ("IL_IntervalOperators.iT_Minus_singleton",
     "?k \<ominus> {?a} = (if ?a <= ?k then {?k - ?a} else {})",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 3)),
         template_hole 3))),
    ("IL_IntervalOperators.iT_Plus_neg_singleton",
     "{?a} \<oplus>- ?k = (if ?k <= ?a then {?a - ?k} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 3)),
         template_hole 3))),
    ("IL_IntervalOperators.iT_Mult_mem_iff2",
     "0 < ?k ==> (?x * ?k : ?I \<otimes> ?k) = (?x : ?I)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_Plus_neg_assoc2",
     "?a <= ?b ==> ?I \<oplus> ?a \<oplus>- ?b = ?I \<oplus>- ?b - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Minus_singleton1",
     "?a <= ?k ==> ?k \<ominus> {?a} = {?k - ?a}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_hole 1)))),
    ("IL_IntervalOperators.iT_Plus_Plus_neg_assoc",
     "?b <= ?a ==> ?I \<oplus> ?a \<oplus>- ?b = ?I \<oplus> ?a - ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Plus_neg_singleton1",
     "?k <= ?a ==> {?a} \<oplus>- ?k = {?a - ?k}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_hole 1)))),
    ("IL_IntervalOperators.iIN_add_neg1",
     "?k <= ?n ==> [?n\<dots>,?d] \<oplus>- ?k = [?n - ?k\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("IL_IntervalOperators.iMOD_add_neg1",
     "?k <= ?r ==> [ ?r, mod ?m ] \<oplus>- ?k = [ ?r - ?k, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_mem_iff2",
     "?k <= ?x ==> (?x - ?k : ?I \<oplus>- ?k) = (?x : ?I)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Minus_Plus_commute",
     "?n <= ?k ==> ?k \<ominus> (?I \<oplus> ?n) = ?k - ?n \<ominus> ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("IL_IntervalOperators.iMODb_mult_div_right_inj_on2",
     "?m mod ?k = 0 ==> inj_on (%x. x div ?k) [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("IL_IntervalOperators.NatMultiples_product_factor",
     "[| ?a : ?F; ?b : ?F |] ==> ?a * ?b : NatMultiples ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_IntervalOperators.i_set_Minus_closed",
     "[| ?I : i_set; iMin ?I <= ?k |] ==> ?k \<ominus> ?I : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 3)
           ))),
    ("IL_IntervalOperators.iT_Plus_neg_empty_iff",
     "(?I \<oplus>- ?k = {}) = (?I = {} | finite ?I & Max ?I < ?k)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))
           ))),
    ("IL_IntervalOperators.iMODb_div_self",
     "0 < ?m ==> [ ?r, mod ?m, ?c ] \<oslash> ?m = [?r div ?m\<dots>,?c]",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_inext_nth",
     "?I ~= {} ==>
      (?I \<otimes> ?k) \<rightarrow> ?n = (?I \<rightarrow> ?n) * ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Plus_inext_nth",
     "?I ~= {} ==>
      (?I \<oplus> ?k) \<rightarrow> ?n = (?I \<rightarrow> ?n) + ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Minus_Plus_assoc2",
     "?I <= [\<dots>?k] ==>
      ?k \<ominus> ?I \<oplus> ?n = ?k + ?n \<ominus> ?I",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iMODb_add_neg3",
     "?r + ?m * ?c < ?k ==> [ ?r, mod ?m, ?c ] \<oplus>- ?k = {}",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Minus_Minus_eq",
     "[| finite ?I; Max ?I <= ?k |]
      ==> ?k \<ominus> (?k \<ominus> ?I) = ?I",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("IL_IntervalOperators.iT_Div_imp_mem",
     "[| 0 < ?k; ?x : ?I |] ==> ?x div ?k : ?I \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_IntervalOperators.NatMultiples_product_factor_multiple",
     "[| ?a : ?F; ?b : NatMultiples ?F |] ==> ?a * ?b : NatMultiples ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("IL_IntervalOperators.NatMultiples_product_multiple_factor",
     "[| ?a : NatMultiples ?F; ?b : ?F |] ==> ?a * ?b : NatMultiples ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("IL_IntervalOperators.iT_Minus_imirror_conv",
     "?k \<ominus> ?I =
      imirror (?I \<down>\<le> ?k) \<oplus> ?k \<oplus>-
      iMin ?I + Max (?I \<down>\<le> ?k)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)))))),
    ("IL_IntervalOperators.iT_Minus_cut_ge",
     "(?k \<ominus> ?I) \<down>\<ge> ?t =
      (if ?t <= ?k then ?k \<ominus> ?I \<down>\<le> (?k - ?t) else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)))),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Plus_cut_le",
     "(?I \<oplus> ?k) \<down>\<le> ?t =
      (if ?t < ?k then {} else ?I \<down>\<le> (?t - ?k) \<oplus> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_hole 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Mult_Int",
     "0 < ?k ==>
      ?A Int ?B \<otimes> ?k = (?A \<otimes> ?k) Int (?B \<otimes> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Div_cut_ge",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>\<ge> ?t =
      ?I \<down>\<ge> (?t * ?k) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Mult_cut_greater",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>> ?t = ?I \<down>> (?t div ?k) \<otimes> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Mult_cut_le",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>\<le> ?t =
      ?I \<down>\<le> (?t div ?k) \<otimes> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Div_cut_less",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>< ?t = ?I \<down>< (?t * ?k) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Mult_cut_ge2",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>\<ge> (?t * ?k) =
      ?I \<down>\<ge> ?t \<otimes> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Mult_cut_greater2",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>> (?t * ?k) = ?I \<down>> ?t \<otimes> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Mult_cut_le2",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>\<le> (?t * ?k) =
      ?I \<down>\<le> ?t \<otimes> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Mult_cut_less2",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>< (?t * ?k) = ?I \<down>< ?t \<otimes> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Plus_neg_Mult_distrib",
     "0 < ?m ==>
      ?I \<oplus>- ?n \<otimes> ?m = ?I \<otimes> ?m \<oplus>- ?n * ?m",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Plus_neg_Plus_le_cut_eq",
     "?a <= ?b ==>
      ?I \<oplus>- ?a \<oplus> ?b = ?I \<down>\<ge> ?a \<oplus> ?b - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Plus_neg_Plus_ge_cut_eq",
     "?b <= ?a ==>
      ?I \<oplus>- ?a \<oplus> ?b = ?I \<down>\<ge> ?a \<oplus>- ?a - ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Plus_inext2",
     "?k <= ?n ==> inext ?n (?I \<oplus> ?k) = inext (?n - ?k) ?I + ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Plus_prev2",
     "?k <= ?n ==> iprev ?n (?I \<oplus> ?k) = iprev (?n - ?k) ?I + ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Plus_neg_inext",
     "?k <= ?n ==> inext (?n - ?k) (?I \<oplus>- ?k) = inext ?n ?I - ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iMODb_add_neg1",
     "?k <= ?r ==>
      [ ?r, mod ?m, ?c ] \<oplus>- ?k = [ ?r - ?k, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_greater2",
     "?k <= ?t ==>
      (?I \<oplus>- ?k) \<down>> (?t - ?k) = ?I \<down>> ?t \<oplus>- ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Plus_neg_cut_le2",
     "?k <= ?t ==>
      (?I \<oplus>- ?k) \<down>\<le> (?t - ?k) =
      ?I \<down>\<le> ?t \<oplus>- ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Minus_cut_greater2",
     "?t <= ?k ==>
      (?k \<ominus> ?I) \<down>> (?k - ?t) = ?k \<ominus> ?I \<down>< ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Minus_cut_le2",
     "?t <= ?k ==>
      (?k \<ominus> ?I) \<down>\<le> (?k - ?t) =
      ?k \<ominus> ?I \<down>\<ge> ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("IL_IntervalOperators.subset_iT_Div_Int",
     "?A <= ?B ==>
      ?A Int ?B \<oslash> ?k = (?A \<oslash> ?k) Int (?B \<oslash> ?k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("IL_IntervalOperators.i_set_mult_subset_conv",
     "?a ~= Suc 0 ==> (i_set_mult ?a <= i_set_mult ?b) = (?a mod ?b = 0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1)),
                template_app (template_hole 1, template_var 0))
              )],
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_hole 4)))),
    ("IL_IntervalOperators.iT_Plus_neg_Max_singleton",
     "[| finite ?I; ?I ~= {} |] ==> ?I \<oplus>- Max ?I = {0}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 4)))),
    ("IL_IntervalOperators.iMOD_div_right_inj_on",
     "[| 0 < ?k; ?k <= ?m |] ==> inj_on (%x. x div ?k) [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_IntervalOperators.iMOD_div_right_strict_mono_on",
     "[| 0 < ?k; ?k <= ?m |]
      ==> SetInterval2.strict_mono_on (%x. x div ?k) [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_IntervalOperators.i_set_mod_0_mult_in_i_set_mult",
     "[| ?I : i_set; ?m mod ?k = 0 |] ==> ?I \<otimes> ?m : i_set_mult ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_IntervalOperators.i_set_Plus_neg_closed",
     "[| ?I : i_set; EX x:?I. ?k <= x |] ==> ?I \<oplus>- ?k : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 3)
           ))),
    ("IL_IntervalOperators.i_set0_mod_0_mult_in_i_set0_mult",
     "[| ?I : i_set0; ?m mod ?k = 0 |]
      ==> ?I \<otimes> ?m : i_set0_mult ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_IntervalOperators.NatMultiples_product_multiple",
     "[| ?a : NatMultiples ?F; ?b : NatMultiples ?F |]
      ==> ?a * ?b : NatMultiples ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("IL_IntervalOperators.i_set0_mult_mod_0_div_i_set0",
     "[| ?I : i_set0_mult ?k; ?k mod ?d = 0 |]
      ==> ?I \<oslash> ?d : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_hole 0)
           ))),
    ("IL_IntervalOperators.i_set_mult_mod_0_div_i_set",
     "[| ?I : i_set_mult ?k; ?k mod ?d = 0 |] ==> ?I \<oslash> ?d : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_hole 0)
           ))),
    ("IL_IntervalOperators.iT_Div_mem_iff",
     "0 < ?k ==> (?x : ?I \<oslash> ?k) = (EX y:?I. y div ?k = ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)))),
    ("IL_IntervalOperators.iMOD_in_i_set_mult__divisor_mod_0_conv",
     "?m ~= Suc 0 ==> ([ ?r, mod ?m ] : i_set_mult ?k) = (?m mod ?k = 0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 6, template_hole 5))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 2)),
                template_app (template_hole 1, template_var 0))
              )],
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_hole 5)))),
    ("IL_IntervalOperators.iT_Plus_neg_Min",
     "?I \<oplus>- ?k ~= {} ==>
      iMin (?I \<oplus>- ?k) = iMin (?I \<down>\<ge> ?k) - ?k",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Div_Max",
     "[| finite ?I; ?I ~= {} |] ==> Max (?I \<oslash> ?k) = Max ?I div ?k",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_Max",
     "[| finite ?I; ?I ~= {} |] ==> Max (?I \<otimes> ?k) = Max ?I * ?k",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Plus_Max",
     "[| finite ?I; ?I ~= {} |] ==> Max (?I \<oplus> ?k) = Max ?I + ?k",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("IL_IntervalOperators.iMODb_div_right_inj_on",
     "[| 0 < ?k; ?k <= ?m |] ==> inj_on (%x. x div ?k) [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_IntervalOperators.iMODb_div_right_strict_mono_on",
     "[| 0 < ?k; ?k <= ?m |]
      ==> SetInterval2.strict_mono_on (%x. x div ?k) [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_IntervalOperators.i_set_infinite_as_iMOD",
     "[| ?I : i_set; infinite ?I |] ==> EX r m. ?I = [ r, mod m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("IL_IntervalOperators.i_set_mult_subset_imp_mod_0",
     "[| ?a ~= Suc 0; i_set_mult ?a <= i_set_mult ?b |] ==> ?a mod ?b = 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 4, template_hole 3))
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 3))),
    ("IL_IntervalOperators.iT_Mult_inext2_if",
     "inext ?n (?I \<otimes> ?k) =
      (if ?n mod ?k = 0 then inext (?n div ?k) ?I * ?k else ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 0)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0)),
                     template_var 1)),
                 template_var 0)),
             template_var 2)
           ))),
    ("IL_IntervalOperators.iT_Mult_iprev2_if",
     "iprev ?n (?I \<otimes> ?k) =
      (if ?n mod ?k = 0 then iprev (?n div ?k) ?I * ?k else ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 0)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0)),
                     template_var 1)),
                 template_var 0)),
             template_var 2)
           ))),
    ("IL_IntervalOperators.iT_Minus_imirror_conv'",
     "?k \<ominus> ?I =
      imirror (?I \<down>\<le> ?k) \<oplus> ?k \<oplus>-
      iMin (?I \<down>\<le> ?k) + Max (?I \<down>\<le> ?k)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)))))),
    ("IL_IntervalOperators.iT_Plus_cut_greater",
     "(?I \<oplus> ?k) \<down>> ?t =
      (if ?t < ?k then ?I \<oplus> ?k
       else ?I \<down>> (?t - ?k) \<oplus> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Minus_cut_less",
     "(?k \<ominus> ?I) \<down>< ?t =
      (if ?t <= ?k then ?k \<ominus> ?I \<down>> (?k - ?t)
       else ?k \<ominus> ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Div_card_ge",
     "card ?I div ?d + (if card ?I mod ?d = 0 then 0 else Suc 0)
      <= card (?I \<oslash> ?d)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 6, template_var 1)),
                     template_var 0)),
                 template_hole 2)),
             template_hole 2),
           template_app (template_hole 1, template_hole 2))),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Mult_inext2",
     "?n mod ?k = 0 ==>
      inext ?n (?I \<otimes> ?k) = inext (?n div ?k) ?I * ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Mult_iprev2",
     "?n mod ?k = 0 ==>
      iprev ?n (?I \<otimes> ?k) = iprev (?n div ?k) ?I * ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Plus_Div_distrib_mod_0",
     "?n mod ?m = 0 ==>
      ?I \<oplus> ?n \<oslash> ?m = ?I \<oslash> ?m \<oplus> ?n div ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_IntervalOperators.iIN_sub1",
     "?n + ?d <= ?k ==>
      ?k \<ominus> [?n\<dots>,?d] = [?k - (?n + ?d)\<dots>,?d]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1))),
           template_var 1)))),
    ("IL_IntervalOperators.iMOD_div_ge",
     "[| 0 < ?m; ?m <= ?k |]
      ==> [ ?r, mod ?m ] \<oslash> ?k = [?r div ?k\<dots>]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.iMOD_in_i_set_mult_imp_divisor_mod_0",
     "[| ?m ~= Suc 0; [ ?r, mod ?m ] : i_set_mult ?k |] ==> ?m mod ?k = 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_hole 4))),
    ("IL_IntervalOperators.iT_Minus_inext_nth",
     "?k \<ominus> ?I ~= {} ==>
      (?k \<ominus> ?I) \<rightarrow> ?n =
      ?k - (?I \<down>\<le> ?k \<leftarrow> ?n)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("IL_IntervalOperators.iT_Minus_iprev_nth",
     "?k \<ominus> ?I ~= {} ==>
      (?k \<ominus> ?I) \<leftarrow> ?n =
      ?k - (?I \<down>\<le> ?k \<rightarrow> ?n)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("IL_IntervalOperators.iT_Plus_neg_inext_nth",
     "?I \<oplus>- ?k ~= {} ==>
      (?I \<oplus>- ?k) \<rightarrow> ?n =
      (?I \<down>\<ge> ?k \<rightarrow> ?n) - ?k",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Mult_iprev_nth",
     "[| finite ?I; ?I ~= {} |]
      ==> (?I \<otimes> ?k) \<leftarrow> ?n = (?I \<leftarrow> ?n) * ?k",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Plus_iprev_nth",
     "[| finite ?I; ?I ~= {} |]
      ==> (?I \<oplus> ?k) \<leftarrow> ?n = (?I \<leftarrow> ?n) + ?k",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Minus_Plus_assoc",
     "[| finite ?I; Max ?I <= ?k |]
      ==> ?k \<ominus> ?I \<oplus> ?n = ?k + ?n \<ominus> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Plus_neg_Max",
     "[| finite ?I; ?I \<oplus>- ?k ~= {} |]
      ==> Max (?I \<oplus>- ?k) = Max ?I - ?k",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("IL_IntervalOperators.i_set_finite_as_iMODb",
     "[| ?I : i_set; finite ?I |] ==> EX r m c. ?I = [ r, mod m, c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("IL_IntervalOperators.iT_Minus_Max",
     "[| ?I ~= {}; iMin ?I <= ?k |]
      ==> Max (?k \<ominus> ?I) = ?k - iMin ?I",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 4, template_var 1))))),
    ("IL_IntervalOperators.i_set0_mult_mod_0_div",
     "[| ?I : i_set0_mult ?k; ?k mod ?d = 0 |]
      ==> ?I \<oslash> ?d : i_set0_mult (?k div ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("IL_IntervalOperators.i_set_mult_mod_0_div",
     "[| ?I : i_set_mult ?k; ?k mod ?d = 0 |]
      ==> ?I \<oslash> ?d : i_set_mult (?k div ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("IL_IntervalOperators.iT_Div_cut_ge2",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>\<ge> (?t div ?k) =
      ?I \<down>\<ge> (?t - ?t mod ?k) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Div_cut_less2",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>< (?t div ?k) =
      ?I \<down>< (?t - ?t mod ?k) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Mult_mem_iff",
     "0 < ?k ==> (?x : ?I \<otimes> ?k) = (?x mod ?k = 0 & ?x div ?k : ?I)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)),
                 template_var 0))
             )))),
    ("IL_IntervalOperators.iT_Plus_neg_Plus_le_Min_eq",
     "[| ?a <= ?b; ?a <= iMin ?I |]
      ==> ?I \<oplus>- ?a \<oplus> ?b = ?I \<oplus> ?b - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Plus_neg_Plus_ge_Min_eq",
     "[| ?b <= ?a; ?a <= iMin ?I |]
      ==> ?I \<oplus>- ?a \<oplus> ?b = ?I \<oplus>- ?a - ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iIN_sub2",
     "[| ?n <= ?k; ?k <= ?n + ?d |]
      ==> ?k \<ominus> [?n\<dots>,?d] = [\<dots>?k - ?n]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iMOD_sub",
     "?k \<ominus> [ ?r, mod ?m ] =
      (if ?r <= ?k then [ (?k - ?r) mod ?m, mod ?m, (?k - ?r) div ?m ]
       else {})",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_hole 0))),
    ("IL_IntervalOperators.iT_Div_icard_ge",
     "icard ?I div enat ?d +
      enat (if icard ?I mod enat ?d = 0 then 0 else Suc 0)
      <= icard (?I \<oslash> ?d)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 1)),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 8, template_var 1)),
                       template_app (template_hole 7, template_var 0))),
                   template_hole 3)),
               template_hole 2),
             template_app (template_hole 1, template_hole 2)))),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Div_Mult_self",
     "0 < ?k ==>
      ?I \<oslash> ?k \<otimes> ?k = {y. EX x:?I. y = x - x mod ?k}",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)),
           template_var 1),
         template_app (template_hole 4, t_empty)))),
    ("IL_IntervalOperators.iT_Div_cut_greater",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>> ?t =
      ?I \<down>> (?t * ?k + (?k - Suc 0)) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 7))))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Div_cut_le",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>\<le> ?t =
      ?I \<down>\<le> (?t * ?k + (?k - Suc 0)) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 7))))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Div_mem_iff2",
     "0 < ?k ==>
      (?x div ?k : ?I \<oslash> ?k) = (EX y:?I. y div ?k = ?x div ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("IL_IntervalOperators.iMOD_sub1",
     "?r <= ?k ==>
      ?k \<ominus> [ ?r, mod ?m ] =
      [ (?k - ?r) mod ?m, mod ?m, (?k - ?r) div ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2)),
                 template_var 0)),
             template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("IL_IntervalOperators.iT_Mult_Div",
     "[| 0 < ?d; ?k mod ?d = 0 |]
      ==> ?I \<otimes> ?k \<oslash> ?d = ?I \<otimes> ?k div ?d",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 2),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Minus_Min",
     "[| ?I ~= {}; iMin ?I <= ?k |]
      ==> iMin (?k \<ominus> ?I) = ?k - Max (?I \<down>\<le> ?k)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("IL_IntervalOperators.iT_Div_conv_count",
     "0 < ?d ==>
      ?I \<oslash> ?d = {k. ?I Int [k * ?d\<dots>,?d - Suc 0] ~= {}}",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0), template_var 1),
         template_app (template_hole 7, t_empty)))),
    ("IL_IntervalOperators.iT_Div_mem_iff_Int",
     "0 < ?k ==>
      (?x : ?I \<oslash> ?k) = (?I Int [?x * ?k\<dots>,?k - Suc 0] ~= {})",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_var 2))
              )],
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 1, template_hole 11)))),
               template_hole 0)
             )))),
    ("IL_IntervalOperators.div_Suc",
     "0 < ?n ==>
      Suc ?m div ?n =
      (if Suc (?m mod ?n) = ?n then Suc (?m div ?n) else ?m div ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0)),
                template_var 1)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 1))),
                     template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))
             )))),
    ("IL_IntervalOperators.mod_Suc'",
     "0 < ?n ==>
      Suc ?m mod ?n =
      (if ?m mod ?n < ?n - Suc 0 then Suc (?m mod ?n) else 0)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 2, template_hole 5)))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))),
           template_hole 5)))),
    ("IL_IntervalOperators.iIN_add_neg2",
     "[| ?n <= ?k; ?k <= ?n + ?d |]
      ==> [?n\<dots>,?d] \<oplus>- ?k = [\<dots>?n + ?d - ?k]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_var 1))))),
    ("IL_IntervalOperators.i_set_cut_le_ge_closed_disj",
     "[| ?I : i_set; ?t : ?I;
         ?cut_op = (\<down>\<le>) | ?cut_op = (\<down>\<ge>) |]
      ==> ?cut_op ?I ?t : i_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_var 0, template_var 2),
                 template_var 1)),
             template_hole 5)
           ))),
    ("IL_IntervalOperators.i_set_cont_iprev",
     "[| ?I : i_set_cont; ?n : ?I; iMin ?I < ?n |]
      ==> iprev ?n ?I = ?n - Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_IntervalOperators.iT_Plus_neg_iprev_nth",
     "[| finite ?I; ?I \<oplus>- ?k ~= {} |]
      ==> (?I \<oplus>- ?k) \<leftarrow> ?n =
          (?I \<down>\<ge> ?k \<leftarrow> ?n) - ?k",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iMOD_div",
     "[| 0 < ?k; ?m mod ?k = 0 |]
      ==> [ ?r, mod ?m ] \<oslash> ?k = [ ?r div ?k, mod ?m div ?k ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 2),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iIN_div_mod_eq_0",
     "[| 0 < ?k; ?n mod ?k = 0 |]
      ==> [?n\<dots>,?d] \<oslash> ?k = [?n div ?k\<dots>,?d div ?k]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 2),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("IL_IntervalOperators.iMOD_div_mod_gr0_not_in_i_set",
     "[| 0 < ?k; ?k < ?m; 0 < ?m mod ?k |]
      ==> [ ?r, mod ?m ] \<oslash> ?k ~: i_set",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 1)),
                     template_var 2)),
                 template_hole 0)
               )
           ))),
    ("IL_IntervalOperators.div_Suc'",
     "0 < ?n ==>
      Suc ?m div ?n =
      (if ?m mod ?n < ?n - Suc 0 then ?m div ?n else Suc (?m div ?n))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 3, template_hole 6)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)))))),
    ("IL_IntervalOperators.iMODb_sub3",
     "?r + ?m * ?c <= ?k ==>
      ?k \<ominus> [ ?r, mod ?m, ?c ] = [ ?k - ?r - ?m * ?c, mod ?m, ?c ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1))),
             template_var 2),
           template_var 1)))),
    ("IL_IntervalOperators.iFROM_iT_Div_Int",
     "[| 0 < ?k; ?n <= iMin ?A |]
      ==> ?A Int [?n\<dots>] \<oslash> ?k =
          (?A \<oslash> ?k) Int ([?n\<dots>] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Minus_inext2",
     "[| ?k \<ominus> ?I ~= {}; ?n <= ?k |]
      ==> inext ?n (?k \<ominus> ?I) = ?k - iprev (?k - ?n) ?I",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_hole 5)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1))))),
    ("IL_IntervalOperators.iT_Minus_inext",
     "[| ?k \<ominus> ?I ~= {}; ?n <= ?k |]
      ==> inext (?k - ?n) (?k \<ominus> ?I) = ?k - iprev ?n ?I",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_hole 5)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.i_set_cont_inext",
     "[| ?I : i_set_cont; ?n : ?I; finite ?I ==> ?n < Max ?I |]
      ==> inext ?n ?I = Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 5, template_var 1))],
          template_inequation
           (less_than, template_var 0,
            template_app (template_hole 3, template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_IntervalOperators.i_set_cont_inext__less",
     "[| ?I : i_set_cont; ?n : ?I; ?n < ?n0.0; ?n0.0 : ?I |]
      ==> inext ?n ?I = Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("IL_IntervalOperators.iT_Div_cut_greater2",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>> (?t div ?k) =
      ?I \<down>> (?t - ?t mod ?k + (?k - Suc 0)) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_hole 8))))),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Div_cut_le2",
     "0 < ?k ==>
      (?I \<oslash> ?k) \<down>\<le> (?t div ?k) =
      ?I \<down>\<le> (?t - ?t mod ?k + (?k - Suc 0)) \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_hole 8))))),
           template_var 2)))),
    ("IL_IntervalOperators.i_set_as_iMOD_iMODb",
     "?I : i_set ==>
      (EX r m. ?I = [ r, mod m ]) | (EX r m c. ?I = [ r, mod m, c ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 3, t_empty))
           ))),
    ("IL_IntervalOperators.iT_Plus_Div_distrib_mod_less",
     "ALL x:?I. x mod ?m + ?n mod ?m < ?m ==>
      ?I \<oplus> ?n \<oslash> ?m = ?I \<oslash> ?m \<oplus> ?n div ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_IntervalOperators.iMODb_div",
     "[| 0 < ?k; ?m mod ?k = 0 |]
      ==> [ ?r, mod ?m, ?c ] \<oslash> ?k =
          [ ?r div ?k, mod ?m div ?k, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 3),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)),
           template_var 0)))),
    ("IL_IntervalOperators.i_set0_cut_closed_disj",
     "[| ?I : i_set0;
         ?cut_op = (\<down>\<le>) |
         ?cut_op = (\<down>\<ge>) |
         ?cut_op = (\<down><) | ?cut_op = (\<down>>) |]
      ==> ?cut_op ?I ?t : i_set0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 2)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_hole 1)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_var 1, template_var 2),
                 template_var 0)),
             template_hole 6)
           ))),
    ("IL_IntervalOperators.i_set0_mult_mod_gr0_div_not_in_i_set0",
     "[| 0 < ?k; 0 < ?d; 0 < ?k mod ?d |]
      ==> EX I:i_set0_mult ?k. I \<oslash> ?d ~: i_set0",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_hole 7, template_var 0),
        template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             t_empty)
           ))),
    ("IL_IntervalOperators.i_set_mult_mod_gr0_div_not_in_i_set",
     "[| 0 < ?k; 0 < ?d; 0 < ?k mod ?d |]
      ==> EX I:i_set_mult ?k. I \<oslash> ?d ~: i_set",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_hole 7, template_var 0),
        template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             t_empty)
           ))),
    ("IL_IntervalOperators.iIN_sub",
     "?k \<ominus> [?n\<dots>,?d] =
      (if ?n + ?d <= ?k then [?k - (?n + ?d)\<dots>,?d]
       else if ?n <= ?k then [\<dots>?k - ?n] else {})",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_hole 0)))),
    ("IL_IntervalOperators.iIN_add_neg",
     "[?n\<dots>,?d] \<oplus>- ?k =
      (if ?k <= ?n then [?n - ?k\<dots>,?d]
       else if ?k <= ?n + ?d then [\<dots>?n + ?d - ?k] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0))),
           template_hole 0)))),
    ("IL_IntervalOperators.iIN_div",
     "0 < ?k ==>
      [?n\<dots>,?d] \<oslash> ?k =
      [?n div ?k\<dots>,?d div ?k + (?n mod ?k + ?d mod ?k) div ?k]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2))),
               template_var 2)))))),
    ("IL_IntervalOperators.iT_Minus_iprev2",
     "[| ?k \<ominus> ?I ~= {}; ?n <= ?k |]
      ==> iprev ?n (?k \<ominus> ?I) =
          ?k - inext (?k - ?n) (?I \<down>\<le> ?k)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_hole 6)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("IL_IntervalOperators.iT_Minus_iprev",
     "[| ?k \<ominus> ?I ~= {}; ?n <= ?k |]
      ==> iprev (?k - ?n) (?k \<ominus> ?I) =
          ?k - inext ?n (?I \<down>\<le> ?k)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_hole 6)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("IL_IntervalOperators.i_set_cont_iprev__greater",
     "[| ?I : i_set_cont; ?n : ?I; ?n0.0 < ?n; ?n0.0 : ?I |]
      ==> iprev ?n ?I = ?n - Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_inequation (less_than, template_var 0, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_IntervalOperators.iIN_div_eq1",
     "[| 0 < ?k; ?n mod ?k + ?d mod ?k < ?k |]
      ==> [?n\<dots>,?d] \<oslash> ?k = [?n div ?k\<dots>,?d div ?k]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2)),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("IL_IntervalOperators.iMOD_add_neg2",
     "[| 0 < ?m; ?r < ?k |]
      ==> [ ?r, mod ?m ] \<oplus>- ?k =
          [ (?m + ?r mod ?m - ?k mod ?m) mod ?m, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2))),
               template_var 2)),
           template_var 2)))),
    ("IL_IntervalOperators.iT_Div_mod_partition_card",
     "card (?I Int [?n * ?d\<dots>,?d - Suc 0] \<oslash> ?d) =
      (if ?I Int [?n * ?d\<dots>,?d - Suc 0] = {} then 0 else Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app (template_hole 6, template_var 1),
                          template_var 0)),
                      template_app
                       (template_app (template_hole 5, template_var 0),
                        template_app (template_hole 4, template_hole 3))))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 1),
                             template_var 0)),
                         template_app
                          (template_app (template_hole 5, template_var 0),
                           template_app
                            (template_hole 4, template_hole 3))))),
                   template_hole 0)),
               template_hole 3),
             template_app (template_hole 4, template_hole 3))
           ))),
    ("IL_IntervalOperators.iT_Mult_cut_ge",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>\<ge> ?t =
      (if ?t mod ?k = 0 then ?I \<down>\<ge> (?t div ?k)
       else ?I \<down>\<ge> Suc (?t div ?k)) \<otimes>
      ?k",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 2)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 0),
                             template_var 2)),
                         template_hole 8)),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2))))),
               template_var 2)
             )))),
    ("IL_IntervalOperators.iT_Mult_cut_less",
     "0 < ?k ==>
      (?I \<otimes> ?k) \<down>< ?t =
      (if ?t mod ?k = 0 then ?I \<down>< (?t div ?k)
       else ?I \<down>< Suc (?t div ?k)) \<otimes>
      ?k",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 2)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 0),
                             template_var 2)),
                         template_hole 8)),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2))))),
               template_var 2)
             )))),
    ("IL_IntervalOperators.iIN_div_eq2",
     "[| 0 < ?k; ?k <= ?n mod ?k + ?d mod ?k |]
      ==> [?n\<dots>,?d] \<oslash> ?k = [?n div ?k\<dots>,Suc (?d div ?k)]",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 2)),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)))))),
    ("IL_IntervalOperators.iT_Div_mod_partition_icard",
     "icard (?I Int [?n * ?d\<dots>,?d - Suc 0] \<oslash> ?d) =
      enat (if ?I Int [?n * ?d\<dots>,?d - Suc 0] = {} then 0 else Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 1),
                          template_var 0)),
                      template_app
                       (template_app (template_hole 6, template_var 0),
                        template_app (template_hole 5, template_hole 4))))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 9, template_var 2),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 7, template_var 1),
                               template_var 0)),
                           template_app
                            (template_app (template_hole 6, template_var 0),
                             template_app
                              (template_hole 5, template_hole 4))))),
                     template_hole 0)),
                 template_hole 4),
               template_app (template_hole 5, template_hole 4)))
           ))),
    ("IL_IntervalOperators.iMOD_div_mod_gr0_not_ex",
     "[| 0 < ?k; ?k < ?m; 0 < ?m mod ?k |]
      ==> \<nexists>r' m'. [ r', mod m' ] = [ ?r, mod ?m ] \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 2))],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("IL_IntervalOperators.iMODb_div_mod_gr0_not_in_i_set",
     "[| 0 < ?k; ?k < ?m; 0 < ?m mod ?k; ?k <= ?c |]
      ==> [ ?r, mod ?m, ?c ] \<oslash> ?k ~: i_set",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3),
        template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 3)),
        template_inequation (less_equals, template_var 3, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 0),
                           template_var 2),
                         template_var 1)),
                     template_var 3)),
                 template_hole 0)
               )
           ))),
    ("IL_IntervalOperators.iIN_div_if",
     "0 < ?k ==>
      [?n\<dots>,?d] \<oslash> ?k =
      [?n div
       ?k\<dots>,?d div ?k +
                 (if ?n mod ?k + ?d mod ?k < ?k then 0 else Suc 0)]",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 2)),
                         template_app
                          (template_app (template_hole 1, template_var 0),
                           template_var 2))),
                     template_var 2)),
                 template_hole 8),
               template_app (template_hole 0, template_hole 8))))))),
    ("IL_IntervalOperators.mod_partition_iT_Div_Int_one_segment",
     "0 < ?k ==>
      ?A Int [?n * ?k\<dots>,?k - Suc 0] \<oslash> ?k =
      (?A \<oslash> ?k) Int ([?n * ?k\<dots>,?k - Suc 0] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 7))))),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 7)))),
             template_var 2))))),
    ("IL_IntervalOperators.iMODb_div_ge",
     "[| 0 < ?m; ?m <= ?k |]
      ==> [ ?r, mod ?m, ?c ] \<oslash> ?k =
          [?r div ?k\<dots>,(?r + ?m * ?c) div ?k - ?r div ?k]",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0))),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)))))),
    ("IL_IntervalOperators.iT_Div_mod_inext_nth",
     "[| ?I ~= {}; ALL x:?I. ALL y:?I. x mod ?k = y mod ?k |]
      ==> (?I \<oslash> ?k) \<rightarrow> ?n =
          (?I \<rightarrow> ?n) div ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iMOD_div_unique",
     "[| 0 < ?k; ?k <= ?m; [ ?r', mod ?m' ] = [ ?r, mod ?m ] \<oslash> ?k |]
      ==> ?r' = ?r div ?k & ?m' = ?m div ?k",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 4),
        template_inequation (less_equals, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 3)),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)))
           ))),
    ("IL_IntervalOperators.iMOD_div_eq_imp_iMODb_div_eq",
     "[| 0 < ?k; ?k <= ?m; [ ?r', mod ?m' ] = [ ?r, mod ?m ] \<oslash> ?k |]
      ==> [ ?r', mod ?m', ?c ] = [ ?r, mod ?m, ?c ] \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 5),
        template_inequation (less_equals, template_var 5, template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 4)),
            template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 0)),
           template_var 5)))),
    ("IL_IntervalOperators.iMOD_add_neg",
     "[ ?r, mod ?m ] \<oplus>- ?k =
      (if ?k <= ?r then [ ?r - ?k, mod ?m ]
       else if 0 < ?m then [ (?m + ?r mod ?m - ?k mod ?m) mod ?m, mod ?m ]
            else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 1, template_var 1),
                           template_app
                            (template_app (template_hole 2, template_var 2),
                             template_var 1))),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1))),
                   template_var 1)),
               template_var 1)),
           template_hole 0)))),
    ("IL_IntervalOperators.iMOD_gr0_add_neg",
     "0 < ?m ==>
      [ ?r, mod ?m ] \<oplus>- ?k =
      (if ?k <= ?r then [ ?r - ?k, mod ?m ]
       else [ (?m + ?r mod ?m - ?k mod ?m) mod ?m, mod ?m ])",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_app
                          (template_app (template_hole 1, template_var 1),
                           template_var 2))),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2))),
                 template_var 2)),
             template_var 2))))),
    ("IL_IntervalOperators.iMODb_sub1",
     "[| ?r <= ?k; ?k <= ?r + ?m * ?c |]
      ==> ?k \<ominus> [ ?r, mod ?m, ?c ] =
          [ (?k - ?r) mod ?m, mod ?m, (?k - ?r) div ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 3)),
                 template_var 1)),
             template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_var 1))))),
    ("IL_IntervalOperators.iT_Div_ge_inext_nth",
     "[| ?I ~= {}; ALL x:?I. ALL y:?I. x < y --> x + ?k <= y |]
      ==> (?I \<oslash> ?k) \<rightarrow> ?n =
          (?I \<rightarrow> ?n) div ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.mod_partition_iT_Div_Int_one_segment2",
     "[| 0 < ?k; ?n mod ?k = 0 |]
      ==> ?A Int [?n\<dots>,?k - Suc 0] \<oslash> ?k =
          (?A \<oslash> ?k) Int ([?n\<dots>,?k - Suc 0] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 2),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 8))))),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 8)))),
             template_var 2))))),
    ("IL_IntervalOperators.iTILL_iT_Div_Int",
     "[| 0 < ?k; ALL x:?A. x div ?k <= ?n div ?k --> x <= ?n |]
      ==> ?A Int [\<dots>?n] \<oslash> ?k =
          (?A \<oslash> ?k) Int ([\<dots>?n] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Div_mod_iprev_nth",
     "[| finite ?I; ?I ~= {}; ALL x:?I. ALL y:?I. x mod ?k = y mod ?k |]
      ==> (?I \<oslash> ?k) \<leftarrow> ?n = (?I \<leftarrow> ?n) div ?k",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iT_Div_Max_card",
     "[| 0 < ?d; finite ?I |]
      ==> card (?I \<oslash> ?d) =
          (SUM k<=Max ?I div ?d.
           if ?I Int [k * ?d\<dots>,?d - Suc 0] = {} then 0 else Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 16, template_var 1),
        template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_equation
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)))))),
    ("IL_IntervalOperators.iT_Div_card_ge_aux",
     "[| 0 < ?d; finite ?I; Max ?I div ?d <= ?n |]
      ==> card ?I div ?d + (if card ?I mod ?d = 0 then 0 else Suc 0)
          <= card (?I \<oslash> ?d)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 2),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_var 2),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 5, template_var 1)),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 5, template_var 1)),
                       template_var 2)),
                   template_hole 11)),
               template_hole 11),
             template_app (template_hole 1, template_hole 11))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_IntervalOperators.iT_Div_Max_icard",
     "0 < ?d ==>
      icard (?I \<oslash> ?d) =
      (if finite ?I
       then enat
             (SUM k<=Max ?I div ?d.
              if ?I Int [k * ?d\<dots>,?d - Suc 0] = {} then 0 else Suc 0)
       else \<infinity>)",
     template_implication
      ([template_inequation (less_than, template_hole 19, template_var 1)],
       template_equation
        (template_app
          (template_hole 17,
           template_app
            (template_app (template_hole 16, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 15,
               template_app (template_hole 14, template_var 0)),
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, t_empty),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_var 1))))),
           template_hole 0)))),
    ("IL_IntervalOperators.iT_Div_ge_iprev_nth",
     "[| finite ?I; ?I ~= {}; ALL x:?I. ALL y:?I. x < y --> x + ?k <= y |]
      ==> (?I \<oslash> ?k) \<leftarrow> ?n = (?I \<leftarrow> ?n) div ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_IntervalOperators.iMODb_div_mod_gr0_not_ex__arith_aux1",
     "[| 0 < ?k; ?k < ?m; 0 < ?x1.0 |]
      ==> ?x1.0 * ?m + ?x2.0 - ?x mod ?k + ?x3.0 + ?x mod ?k =
          ?x1.0 * ?m + ?x2.0 + ?x3.0",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 5),
        template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_hole 5, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 4)),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 5))),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 5)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4)),
               template_var 2)),
           template_var 0)))),
    ("IL_IntervalOperators.iT_Div_conv_count2",
     "[| 0 < ?d; finite ?I; Max ?I div ?d <= ?n |]
      ==> ?I \<oslash> ?d =
          {k. k <= ?n & ?I Int [k * ?d\<dots>,?d - Suc 0] ~= {}}",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 2),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 1)),
            template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 1), template_var 2),
         template_app (template_hole 8, t_empty)))),
    ("IL_IntervalOperators.iMODb_div_mod_gr0_not_ex",
     "[| 0 < ?k; ?k < ?m; 0 < ?m mod ?k; ?k <= ?c |]
      ==> \<nexists>r' m' c'.
             [ r', mod m', c' ] = [ ?r, mod ?m, ?c ] \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3),
        template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 3)),
        template_inequation (less_equals, template_var 3, template_var 1)],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("IL_IntervalOperators.mod_partition_iT_Div_Int",
     "[| 0 < ?k; 0 < ?d |]
      ==> ?A Int [?n * ?k\<dots>,?d * ?k - Suc 0] \<oslash> ?k =
          (?A \<oslash> ?k) Int
          ([?n * ?k\<dots>,?d * ?k - Suc 0] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3),
        template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 3)),
                   template_app (template_hole 0, template_hole 7))))),
           template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 3)),
                   template_app (template_hole 0, template_hole 7)))),
             template_var 3))))),
    ("IL_IntervalOperators.iMODb_sub",
     "?k \<ominus> [ ?r, mod ?m, ?c ] =
      (if ?r + ?m * ?c <= ?k then [ ?k - ?r - ?m * ?c, mod ?m, ?c ]
       else if ?r <= ?k then [ (?k - ?r) mod ?m, mod ?m, (?k - ?r) div ?m ]
            else {})",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0))),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0))),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2)),
                     template_var 1)),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 1))),
           template_hole 0)))),
    ("IL_IntervalOperators.iMODb_div_ge_if",
     "[| 0 < ?m; ?m <= ?k |]
      ==> [ ?r, mod ?m, ?c ] \<oslash> ?k =
          [?r div
           ?k\<dots>,?m * ?c div ?k +
                     (if ?r mod ?k + ?m * ?c mod ?k < ?k then 0
                      else Suc 0)]",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 0)),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 2)),
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 3, template_var 3),
                               template_var 0)),
                           template_var 2))),
                     template_var 2)),
                 template_hole 11),
               template_app (template_hole 0, template_hole 11))))))),
    ("IL_IntervalOperators.iT_Div_card",
     "[| 0 < ?d; finite ?I; Max ?I div ?d <= ?n |]
      ==> card (?I \<oslash> ?d) =
          (SUM k<=?n.
           if ?I Int [k * ?d\<dots>,?d - Suc 0] = {} then 0 else Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 2),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 1)),
            template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 9, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("IL_IntervalOperators.iMODb_add_neg2",
     "[| ?r < ?k; ?k <= ?r + ?m * ?c |]
      ==> [ ?r, mod ?m, ?c ] \<oplus>- ?k =
          [ (?m + ?r mod ?m - ?k mod ?m) mod
            ?m, mod ?m, (?r + ?m * ?c - ?k) div ?m ]",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 7, template_var 1),
                         template_app
                          (template_app (template_hole 2, template_var 3),
                           template_var 1))),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))),
                 template_var 1)),
             template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0))),
                 template_var 2)),
             template_var 1))))),
    ("IL_IntervalOperators.iT_Div_card_Suc",
     "[| 0 < ?d; finite ?I; Max ?I div ?d <= ?n |]
      ==> card (?I \<oslash> ?d) =
          (SUM k<Suc ?n.
           if ?I Int [k * ?d\<dots>,?d - Suc 0] = {} then 0 else Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 2),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 1)),
            template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)))))),
    ("IL_IntervalOperators.iMODb_div_unique",
     "[| 0 < ?k; ?k <= ?m; ?k <= ?c;
         [ ?r', mod ?m', ?c' ] = [ ?r, mod ?m, ?c ] \<oslash> ?k |]
      ==> ?r' = ?r div ?k & ?m' = ?m div ?k & ?c' = ?c",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 6),
        template_inequation (less_equals, template_var 6, template_var 5),
        template_inequation (less_equals, template_var 6, template_var 4),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 5),
                template_var 4)),
            template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 6))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 6))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)))
           ))),
    ("IL_IntervalOperators.iT_Div_icard",
     "[| 0 < ?d; finite ?I ==> Max ?I div ?d <= ?n |]
      ==> icard (?I \<oslash> ?d) =
          (if finite ?I
           then enat
                 (SUM k<=?n.
                  if ?I Int [k * ?d\<dots>,?d - Suc 0] = {} then 0
                  else Suc 0)
           else \<infinity>)",
     template_implication
      ([template_inequation (less_than, template_hole 20, template_var 2),
        template_implication
         ([template_predicate
            (template_app (template_hole 19, template_var 1))],
          template_inequation
           (less_equals,
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 1)),
              template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 19, template_var 1)),
             template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, t_empty),
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)))),
    ("IL_IntervalOperators.mod_partition_iT_Div_Int2",
     "[| 0 < ?k; 0 < ?d; ?n mod ?k = 0; ?d mod ?k = 0 |]
      ==> ?A Int [?n\<dots>,?d - Suc 0] \<oslash> ?k =
          (?A \<oslash> ?k) Int ([?n\<dots>,?d - Suc 0] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3),
        template_inequation (less_than, template_hole 8, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 3),
          template_hole 8),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 3),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 8))))),
           template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 8)))),
             template_var 3))))),
    ("IL_IntervalOperators.iMODb_div_mod_gr0_is_0_not_ex0",
     "[| 0 < ?k; ?k < ?m; 0 < ?m mod ?k; ?k <= ?c; ?r mod ?k = 0 |]
      ==> \<nexists>r' m' c'.
             [ r', mod m', c' ] = [ ?r, mod ?m, ?c ] \<oslash> ?k",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3),
        template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_hole 8,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 3)),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 0), template_var 3),
          template_hole 8)],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("IL_IntervalOperators.iMODb_add_neg",
     "[ ?r, mod ?m, ?c ] \<oplus>- ?k =
      (if ?k <= ?r then [ ?r - ?k, mod ?m, ?c ]
       else if ?k <= ?r + ?m * ?c
            then [ (?m + ?r mod ?m - ?k mod ?m) mod
                   ?m, mod ?m, (?r + ?m * ?c - ?k) div ?m ]
            else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)))),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 2),
                             template_app
                              (template_app
                                (template_hole 2, template_var 3),
                               template_var 2))),
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 2))),
                     template_var 2)),
                 template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_var 1))),
                     template_var 0)),
                 template_var 2))),
           template_hole 0)))),
    ("IL_IntervalOperators.iIN_iT_Div_Int",
     "[| 0 < ?k; ?n <= iMin ?A;
         ALL x:?A. x div ?k <= (?n + ?d) div ?k --> x <= ?n + ?d |]
      ==> ?A Int [?n\<dots>,?d] \<oslash> ?k =
          (?A \<oslash> ?k) Int ([?n\<dots>,?d] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 3))))),
    ("IL_IntervalOperators.iMODb_add_neg2_mod_le",
     "[| ?r < ?k; ?k <= ?r + ?m * ?c; ?k mod ?m <= ?r mod ?m |]
      ==> [ ?r, mod ?m, ?c ] \<oplus>- ?k =
          [ ?r mod ?m - ?k mod ?m, mod ?m, ?c + ?r div ?m - ?k div ?m ]",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1))),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("IL_IntervalOperators.iIN_iT_Div_Int_mod_0",
     "[| 0 < ?k; ?n mod ?k = 0;
         ALL x:?A. x div ?k <= (?n + ?d) div ?k --> x <= ?n + ?d |]
      ==> ?A Int [?n\<dots>,?d] \<oslash> ?k =
          (?A \<oslash> ?k) Int ([?n\<dots>,?d] \<oslash> ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2), template_var 3),
          template_hole 11),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 3))))),
    ("IL_IntervalOperators.iMODb_add_neg2_mod_less",
     "[| ?r < ?k; ?k <= ?r + ?m * ?c; ?r mod ?m < ?k mod ?m |]
      ==> [ ?r, mod ?m, ?c ] \<oplus>- ?k =
          [ ?m + ?r mod ?m -
            ?k mod ?m, mod ?m, ?c + ?r div ?m - Suc (?k div ?m) ]",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 8, template_var 3),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0))),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 6, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))))))),
    ("IL_IntervalOperators.iT_Div_card_ge__is_maximal_lower_bound",
     "ALL I d.
         card I div d + (if card I mod d = 0 then 0 else Suc 0)
         <= ?f (card I) d &
         ?f (card I) d <= card (I \<oslash> d) ==>
      ?f (card ?I) ?d =
      card ?I div ?d + (if card ?I mod ?d = 0 then 0 else Suc 0)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_var 2,
                  template_app (template_hole 6, template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 6, template_var 1)),
                           template_var 0)),
                       template_hole 2)),
                   template_hole 2),
                 template_app (template_hole 1, template_hole 2)))
             )))),
    ("IL_IntervalOperators.mod_partition_count_Suc",
     "{k. k <= Suc ?n & ?I Int [k * ?d\<dots>,?d - Suc 0] ~= {}} =
      {k. k <= ?n & ?I Int [k * ?d\<dots>,?d - Suc 0] ~= {}} Un
      (if ?I Int [Suc ?n * ?d\<dots>,?d - Suc 0] ~= {} then {Suc ?n}
       else {})",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 13, t_empty)),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app
                          (template_app (template_hole 8, template_var 1),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 10, template_var 2)),
                                 template_var 0)),
                             template_app
                              (template_app
                                (template_hole 5, template_var 0),
                               template_app
                                (template_hole 10, template_hole 4))))),
                       template_hole 3))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 10, template_var 2)),
                   template_hole 3)),
               template_hole 3))
           ))),
    ("IL_IntervalOperators.iT_Div_icard_ge__is_maximal_lower_bound",
     "ALL I d.
         icard I div enat d +
         enat (if icard I mod enat d = 0 then 0 else Suc 0)
         <= ?f (icard I) d &
         ?f (icard I) d <= icard (I \<oslash> d) ==>
      ?f (icard ?I) ?d =
      icard ?I div enat ?d +
      enat (if icard ?I mod enat ?d = 0 then 0 else Suc 0)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_var 2,
                  template_app (template_hole 8, template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1)),
                   template_app (template_hole 7, template_var 0))),
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 8, template_var 1)),
                             template_app
                              (template_hole 7, template_var 0))),
                         template_hole 3)),
                     template_hole 2),
                   template_app (template_hole 1, template_hole 2))))
             )))),
    ("IL_IntervalOperators.iMODb_add_neg'",
     "[ ?r, mod ?m, ?c ] \<oplus>- ?k =
      (if ?k <= ?r then [ ?r - ?k, mod ?m, ?c ]
       else if ?k <= ?r + ?m * ?c
            then if ?k mod ?m <= ?r mod ?m
                 then [ ?r mod ?m -
                        ?k mod ?m, mod ?m, ?c + ?r div ?m - ?k div ?m ]
                 else [ ?m + ?r mod ?m -
                        ?k mod
                        ?m, mod ?m, ?c + ?r div ?m - Suc (?k div ?m) ]
            else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1)))),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 3, template_var 3),
                             template_var 2)),
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_var 2))),
                     template_var 2),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app
                          (template_app (template_hole 2, template_var 3),
                           template_var 2))),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 2)))),
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 2),
                           template_app
                            (template_app (template_hole 3, template_var 3),
                             template_var 2))),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 2))),
                   template_var 2),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 2)))))),
           template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.IL_IntervalOperatorsMoreTemplates"
### 0.483s elapsed time, 0.614s cpu time, 0.083s GC time
val it = (): unit
