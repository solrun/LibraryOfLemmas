Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.575s cpu time, 0.044s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.313s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.330s elapsed time, 1.313s cpu time, 0.138s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.859s cpu time, 0.094s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.434s elapsed time, 1.724s cpu time, 0.232s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.010s elapsed time, 3.852s cpu time, 0.911s GC time
Loading theory "List-Infinite.Util_MinMax" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.081s elapsed time, 4.139s cpu time, 0.911s GC time
Loading theory "List-Infinite.Util_Nat" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_Div")
### theory "List-Infinite.Util_MinMax"
### 0.055s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "List-Infinite.Util_Set" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "List-Infinite.Util_Set"
### 0.104s elapsed time, 0.410s cpu time, 0.042s GC time
Found termination order: "size <*mlex*> {}"
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
### theory "List-Infinite.Util_Nat"
### 0.177s elapsed time, 0.656s cpu time, 0.042s GC time
Loading theory "List-Infinite.Util_Div" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.388s elapsed time, 5.138s cpu time, 1.059s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
### theory "List-Infinite.Util_Div"
### 0.333s elapsed time, 1.022s cpu time, 0.099s GC time
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.428s elapsed time, 1.112s cpu time, 0.201s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.356s elapsed time, 7.835s cpu time, 2.120s GC time
Loading theory "Draft.Templates" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IL_IntervalMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.141s cpu time, 0.077s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.822s elapsed time, 3.298s cpu time, 0.907s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.389s elapsed time, 0.405s cpu time, 0.000s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.491s elapsed time, 0.544s cpu time, 0.073s GC time
Loading theory "List-Infinite.Util_NatInf" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "List-Infinite.Util_NatInf"
### 0.102s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "List-Infinite.SetInterval2" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.InfiniteSet2")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "List-Infinite.SetInterval2"
### 0.941s elapsed time, 1.078s cpu time, 0.157s GC time
Loading theory "List-Infinite.InfiniteSet2" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval")
Loading theory "List-Infinite.SetIntervalCut" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval" via "List-Infinite.SetIntervalStep")
### theory "List-Infinite.InfiniteSet2"
### 0.138s elapsed time, 0.310s cpu time, 0.078s GC time
### theory "List-Infinite.SetIntervalCut"
### 0.805s elapsed time, 1.652s cpu time, 1.027s GC time
Loading theory "List-Infinite.SetIntervalStep" (required by "Draft.IL_IntervalMoreTemplates" via "Draft.IL_Interval")
consts
  inext_nth :: "nat set => nat => nat"
consts
  iprev_nth :: "nat set => nat => nat"
### theory "List-Infinite.SetIntervalStep"
### 0.611s elapsed time, 0.729s cpu time, 0.161s GC time
Loading theory "Draft.IL_Interval" (required by "Draft.IL_IntervalMoreTemplates")
### theory "Draft.IL_Interval"
### 0.766s elapsed time, 0.894s cpu time, 0.174s GC time
Loading theory "Draft.IL_IntervalMoreTemplates"
val templateLemmas =
   [("IL_Interval.iTILL_finite", "finite [\<dots>?n]",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("IL_Interval.iIN_finite", "finite [?n\<dots>,?d]",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iMOD_0_finite", "finite [ ?r, mod 0 ]",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IL_Interval.iFROM_infinite", "infinite [?n\<dots>]",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("IL_Interval.iMODb_finite", "finite [ ?r, mod ?m, ?c ]",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iFROM_not_empty", "[?n\<dots>] ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("IL_Interval.iTILL_not_empty", "[\<dots>?n] ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("IL_Interval.iFROM_card", "card [?n\<dots>] = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iTILL_Max", "Max [\<dots>?n] = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("IL_Interval.iFROM_Min", "iMin [?n\<dots>] = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("IL_Interval.iTILL_Min", "iMin [\<dots>?n] = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iFROM_icard", "icard [?n\<dots>] = \<infinity>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iFROM_iMax", "iMax [?n\<dots>] = \<infinity>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iTILL_iFROM_subset", "[\<dots>?n'] <= [0\<dots>]",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iFROM_iTILL_neq", "[?n'\<dots>] ~= [\<dots>?n]",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_Interval.iIN_not_empty", "[?n\<dots>,?d] ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("IL_Interval.iMOD_not_empty", "[ ?r, mod ?m ] ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("IL_Interval.not_iFROM_iTILL_subset", "~ [?n'\<dots>] <= [\<dots>?n]",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_Interval.iTILL_card", "card [\<dots>?n] = Suc ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iMOD_0_Max", "Max [ ?r, mod 0 ] = ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("IL_Interval.iIN_Min", "iMin [?n\<dots>,?d] = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("IL_Interval.iMOD_Min", "iMin [ ?r, mod ?m ] = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("IL_Interval.iIN_0_iTILL_conv", "[0\<dots>,?n] = [\<dots>?n]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_imirror_ident", "imirror [\<dots>?n] = [\<dots>?n]",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_iMax", "iMax [\<dots>?n] = enat ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iIN_iFROM_subset_same", "[?n\<dots>,?d] <= [?n\<dots>]",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("IL_Interval.iMOD_iFROM_subset_same", "[ ?r, mod ?m ] <= [?r\<dots>]",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("IL_Interval.iFROM_iIN_neq", "[?n'\<dots>] ~= [?n\<dots>,?d]",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iMODb_not_empty", "[ ?r, mod ?m, ?c ] ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("IL_Interval.not_iFROM_iIN_subset", "~ [?n'\<dots>] <= [?n\<dots>,?d]",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iIN_card", "card [?n\<dots>,?d] = Suc ?d",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iMOD_0_card", "card [ ?r, mod 0 ] = Suc 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_hole 1))),
    ("IL_Interval.iMODb_Min", "iMin [ ?r, mod ?m, ?c ] = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("IL_Interval.iIN_0", "[?n\<dots>,0] = {?n}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("IL_Interval.iMOD_0", "[ ?r, mod 0 ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("IL_Interval.iMOD_1", "[ ?r, mod Suc 0 ] = [?r\<dots>]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_icard", "icard [\<dots>?n] = enat (Suc ?n)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMOD_0_icard", "icard [ ?r, mod 0 ] = eSuc 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iMOD_0_iMax", "iMax [ ?r, mod 0 ] = enat ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iFROM_iMODb_neq", "[?n\<dots>] ~= [ ?r, mod ?m, ?c ]",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("IL_Interval.not_iFROM_iMODb_subset",
     "~ [?n'\<dots>] <= [ ?r, mod ?m, ?c ]",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iIN_Max", "Max [?n\<dots>,?d] = ?n + ?d",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iTILL_mirror_elem",
     "mirror_elem ?x [\<dots>?n] = ?n - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iFROM_inext_nth",
     "[?n\<dots>] \<rightarrow> ?a = ?n + ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iMODb_mod_0_card", "card [ ?r, mod 0, ?c ] = Suc 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_hole 1))),
    ("IL_Interval.iMODb_mod_0", "[ ?r, mod 0, ?c ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_hole 1))),
    ("IL_Interval.iMODb_0", "[ ?r, mod ?m, 0 ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_hole 1))),
    ("IL_Interval.iIN_imirror_ident",
     "imirror [?n\<dots>,?d] = [?n\<dots>,?d]",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iFROM_Suc_pred_insert_conv",
     "insert ?n [Suc ?n\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("IL_Interval.iFROM_iff", "(?x : [?n\<dots>]) = (?n <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iTILL_iff", "(?x : [\<dots>?n]) = (?x <= ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iIN_icard", "icard [?n\<dots>,?d] = enat (Suc ?d)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMODb_mod_0_icard", "icard [ ?r, mod 0, ?c ] = eSuc 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2),
           template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iIN_iTILL_subset_same",
     "[?n\<dots>,?d] <= [\<dots>?n + ?d]",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_iMOD_subset_same",
     "[ ?r, mod ?m, ?c ] <= [ ?r, mod ?m ]",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("IL_Interval.iMODb_mod_1", "[ ?r, mod Suc 0, ?c ] = [?r\<dots>,?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iTILL_Suc_insert_conv",
     "insert (Suc ?n) [\<dots>?n] = [\<dots>Suc ?n]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iFROM_eq_conv",
     "([?n\<dots>] = [?n'\<dots>]) = (?n = ?n')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("IL_Interval.iTILL_eq_conv",
     "([\<dots>?n] = [\<dots>?n']) = (?n = ?n')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("IL_Interval.iFROM_subset_conv",
     "([?n'\<dots>] <= [?n\<dots>]) = (?n <= ?n')",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iTILL_iFROM_subset_conv",
     "([\<dots>?n'] <= [?n\<dots>]) = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("IL_Interval.iTILL_subset_conv",
     "([\<dots>?n'] <= [\<dots>?n]) = (?n' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iIN_iMax", "iMax [?n\<dots>,?d] = enat (?n + ?d)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_I", "?n <= ?x ==> ?x : [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iTILL_I", "?x <= ?n ==> ?x : [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iFROM_D", "?x : [?n\<dots>] ==> ?n <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("IL_Interval.iTILL_D", "?x : [\<dots>?n] ==> ?x <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("IL_Interval.iFROM_inter'",
     "[?n\<dots>] Int [?n'\<dots>] = [max ?n ?n'\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iTILL_inter'",
     "[\<dots>?n] Int [\<dots>?n'] = [\<dots>min ?n ?n']",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_union'",
     "[?n\<dots>] Un [?n'\<dots>] = [min ?n ?n'\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iTILL_union'",
     "[\<dots>?n] Un [\<dots>?n'] = [\<dots>max ?n ?n']",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_imirror_ident",
     "imirror [ ?r, mod ?m, ?c ] = [ ?r, mod ?m, ?c ]",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("IL_Interval.iIN_iFROM_subset_conv",
     "([?n'\<dots>,?d'] <= [?n\<dots>]) = (?n <= ?n')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("IL_Interval.iMOD_iFROM_subset_conv",
     "([ ?r', mod ?m' ] <= [?n\<dots>]) = (?n <= ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("IL_Interval.iMODb_iIN_subset_same",
     "[ ?r, mod ?m, ?c ] <= [?r\<dots>,?m * ?c]",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_infinite", "0 < ?m ==> infinite [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))
               )
           ))),
    ("IL_Interval.iTILL_Suc", "?x < ?n ==> Suc ?x : [\<dots>?n]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iFROM_subset",
     "?n <= ?n' ==> [?n'\<dots>] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iTILL_subset",
     "?n' <= ?n ==> [\<dots>?n'] <= [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iIN_geD", "?x : [?n\<dots>,?d] ==> ?n <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 2))),
    ("IL_Interval.iMOD_geD", "?x : [ ?r, mod ?m ] ==> ?r <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 2))),
    ("IL_Interval.iTILL_inext_nth_if",
     "[\<dots>?n] \<rightarrow> ?a = (if ?a <= ?n then ?a else ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0),
         template_var 1))),
    ("IL_Interval.iMODb_Max", "Max [ ?r, mod ?m, ?c ] = ?r + ?m * ?c",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_inext_nth",
     "[ ?r, mod ?m ] \<rightarrow> ?a = ?r + ?m * ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iIN_iFROM_iTILL_conv",
     "[?n\<dots>,?d] = [?n\<dots>] Int [\<dots>?n + ?d]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iIN_Suc_pred_insert_conv",
     "insert ?n [Suc ?n\<dots>,?d] = [?n\<dots>,Suc ?d]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMOD_Suc_pred_insert_conv",
     "insert ?r [ ?r + ?m, mod ?m ] = [ ?r, mod ?m ]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("IL_Interval.iIN_iFROM_append_union",
     "[?n\<dots>,?d] Un [?n + ?d\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app (template_hole 1, template_var 1))),
    ("IL_Interval.iMODb_iFROM_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [?n\<dots>]) = (?n <= ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 3))),
    ("IL_Interval.iMODb_iTILL_subset_same",
     "[ ?r, mod ?m, ?c ] <= [\<dots>?r + ?m * ?c]",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_card", "0 < ?m ==> card [ ?r, mod ?m ] = 0",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_hole 3))),
    ("IL_Interval.iMOD_icard",
     "0 < ?m ==> icard [ ?r, mod ?m ] = \<infinity>",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("IL_Interval.iMOD_iMax",
     "0 < ?m ==> iMax [ ?r, mod ?m ] = \<infinity>",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("IL_Interval.iTILL_inext_nth",
     "?a <= ?n ==> [\<dots>?n] \<rightarrow> ?a = ?a",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_var 1))),
    ("IL_Interval.iIN_iFROM_subset",
     "?n <= ?n' ==> [?n'\<dots>,?d'] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("IL_Interval.iMOD_iFROM_subset",
     "?n <= ?r' ==> [ ?r', mod ?m' ] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("IL_Interval.iTILL_iIN_subset",
     "?n' <= ?d ==> [\<dots>?n'] <= [0\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("IL_Interval.iFROM_Suc", "?x : [?n\<dots>] ==> Suc ?x : [?n\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("IL_Interval.iMODb_geD", "?x : [ ?r, mod ?m, ?c ] ==> ?r <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 2, template_var 3))),
    ("IL_Interval.iMOD_card_if",
     "card [ ?r, mod ?m ] = (if ?m = 0 then Suc 0 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_app (template_hole 0, template_hole 1)),
             template_hole 1)
           ))),
    ("IL_Interval.iTILL_inext_if",
     "inext ?t [\<dots>?n] = (if ?t < ?n then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("IL_Interval.iIN_iFROM_append_union_Suc",
     "[?n\<dots>,?d] Un [Suc (?n + ?d)\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app (template_hole 2, template_var 1))),
    ("IL_Interval.iIN_iTILL_subset_conv",
     "([?n'\<dots>,?d'] <= [\<dots>?n]) = (?n' + ?d' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("IL_Interval.iMOD_icard_if",
     "icard [ ?r, mod ?m ] = (if ?m = 0 then eSuc 0 else \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("IL_Interval.iMODb_iMax",
     "iMax [ ?r, mod ?m, ?c ] = enat (?r + ?m * ?c)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iTILL_iMOD_neq",
     "0 < ?m ==> [\<dots>?n] ~= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.not_iMOD_iTILL_subset",
     "0 < ?m' ==> ~ [ ?r', mod ?m' ] <= [\<dots>?n]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iTILL_iIN_neq",
     "0 < ?n ==> [\<dots>?n'] ~= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iFROM_pred", "?n < ?x ==> ?x - Suc 0 : [?n\<dots>]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iTILL_inext", "?t < ?n ==> inext ?t [\<dots>?n] = Suc ?t",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iTILL_iFROM_union",
     "?n <= ?n' ==> [\<dots>?n'] Un [?n\<dots>] = UNIV",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("IL_Interval.iMODb_iFROM_subset",
     "?n <= ?r' ==> [ ?r', mod ?m', ?c' ] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 3)))),
    ("IL_Interval.iFROM_plus", "?x : [?n\<dots>] ==> ?x + ?k : [?n\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("IL_Interval.iTILL_minus",
     "?x : [\<dots>?n] ==> ?x - ?k : [\<dots>?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("IL_Interval.iIN_leD", "?x : [?n\<dots>,?d] ==> ?x <= ?n + ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_inext_if",
     "inext ?t [?n\<dots>] = (if ?t : [?n\<dots>] then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("IL_Interval.iTILL_iprev_nth_if",
     "[\<dots>?n] \<leftarrow> ?a = (if ?a <= ?n then ?n - ?a else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("IL_Interval.iIN_mirror_elem",
     "mirror_elem ?x [?n\<dots>,?d] = ?n + ?n + ?d - ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iFROM_cut_ge",
     "[?n\<dots>] \<down>\<ge> ?t =
      (if ?n <= ?t then [?t\<dots>] else [?n\<dots>])",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iTILL_cut_le",
     "[\<dots>?n] \<down>\<le> ?t =
      (if ?t <= ?n then [\<dots>?t] else [\<dots>?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iFROM_pred_insert_conv",
     "insert (?n - Suc 0) [?n\<dots>] = [?n - Suc 0\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_hole 1))))),
    ("IL_Interval.iIN_Suc_insert_conv",
     "insert (Suc (?n + ?d)) [?n\<dots>,?d] = [?n\<dots>,Suc ?d]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("IL_Interval.iIN_iMOD_neq",
     "0 < ?m ==> [?n\<dots>,?d] ~= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("IL_Interval.iMODb_card",
     "0 < ?m ==> card [ ?r, mod ?m, ?c ] = Suc ?c",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.not_iMOD_iIN_subset",
     "0 < ?m' ==> ~ [ ?r', mod ?m' ] <= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iTILL_iprev_nth",
     "?a <= ?n ==> [\<dots>?n] \<leftarrow> ?a = ?n - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_Interval.iTILL_inter",
     "?n <= ?n' ==> [\<dots>?n] Int [\<dots>?n'] = [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iFROM_union",
     "?n <= ?n' ==> [?n\<dots>] Un [?n'\<dots>] = [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iFROM_inter",
     "?n' <= ?n ==> [?n\<dots>] Int [?n'\<dots>] = [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iTILL_union",
     "?n' <= ?n ==> [\<dots>?n] Un [\<dots>?n'] = [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iFROM_inext",
     "?t : [?n\<dots>] ==> inext ?t [?n\<dots>] = Suc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iFROM_iprev'",
     "?t : [?n\<dots>] ==> iprev (Suc ?t) [?n\<dots>] = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_var 1))),
    ("IL_Interval.iFROM_cut_ge1",
     "?t : [?n\<dots>] ==> [?n\<dots>] \<down>\<ge> ?t = [?t\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iTILL_cut_le1",
     "?t : [\<dots>?n] ==> [\<dots>?n] \<down>\<le> ?t = [\<dots>?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iTILL_pred",
     "?x : [\<dots>?n] ==> ?x - Suc 0 : [\<dots>?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_hole 0))),
             template_app (template_hole 3, template_var 0))
           ))),
    ("IL_Interval.iTILL_cut_ge2",
     "?t ~: [\<dots>?n] ==> [\<dots>?n] \<down>\<ge> ?t = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iTILL_cut_greater2",
     "?t ~: [\<dots>?n] ==> [\<dots>?n] \<down>> ?t = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iIN_iTILL_subset",
     "?n' + ?d' <= ?n ==> [?n'\<dots>,?d'] <= [\<dots>?n]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMODb_imp_iMOD",
     "?x : [ ?r, mod ?m, ?c ] ==> ?x : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iFROM_iprev_if",
     "iprev ?t [?n\<dots>] = (if ?n < ?t then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("IL_Interval.iMODb_card_if",
     "card [ ?r, mod ?m, ?c ] = (if ?m = 0 then Suc 0 else Suc ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 1)),
               template_app (template_hole 0, template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iMOD_inext_nth_Suc_diff",
     "([ ?r, mod ?m ] \<rightarrow> Suc ?n) -
      ([ ?r, mod ?m ] \<rightarrow> ?n) =
      ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 1)),
    ("IL_Interval.iMODb_iMOD_iIN_conv",
     "[ ?r, mod ?m, ?c ] = [ ?r, mod ?m ] Int [?r\<dots>,?m * ?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_cut_greater",
     "[?n\<dots>] \<down>> ?t =
      (if ?n <= ?t then [Suc ?t\<dots>] else [?n\<dots>])",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 3, template_var 1)))),
    ("IL_Interval.iMOD_iIN_iMODb_conv",
     "[ ?r, mod ?m ] Int [?r\<dots>,?d] = [ ?r, mod ?m, ?d div ?m ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_Interval.iMODb_Suc_pred_insert_conv",
     "insert ?r [ ?r + ?m, mod ?m, ?c ] = [ ?r, mod ?m, Suc ?c ]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iTILL_iIN_subset_conv",
     "([\<dots>?n'] <= [?n\<dots>,?d]) = (?n = 0 & ?n' <= ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_iMODb_neq",
     "0 < ?m ==> [ ?r, mod ?m ] ~= [ ?r', mod ?m', ?c' ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 4)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iMODb_icard",
     "0 < ?m ==> icard [ ?r, mod ?m, ?c ] = enat (Suc ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("IL_Interval.not_iMOD_iMODb_subset",
     "0 < ?m' ==> ~ [ ?r', mod ?m' ] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 4)],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iFROM_iprev",
     "?n < ?t ==> iprev ?t [?n\<dots>] = ?t - Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_Interval.iFROM_iprev_diff_const",
     "?n < ?t ==> ?t - iprev ?t [?n\<dots>] = Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iTILL_inext_diff_const",
     "?t < ?n ==> inext ?t [\<dots>?n] - ?t = Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0))),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iIN_inext_nth",
     "?a <= ?d ==> [?n\<dots>,?d] \<rightarrow> ?a = ?n + ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("IL_Interval.iFROM_cut_greater1",
     "?t : [?n\<dots>] ==> [?n\<dots>] \<down>> ?t = [Suc ?t\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 1))))),
    ("IL_Interval.iFROM_iMOD_neq",
     "?m ~= Suc 0 ==> [?n\<dots>] ~= [ ?r, mod ?m ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 4, template_hole 3))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.not_iFROM_iMOD_subset",
     "?m ~= Suc 0 ==> ~ [?n'\<dots>] <= [ ?r, mod ?m ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 4, template_hole 3))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.iTILL_cut_le2",
     "?t ~: [\<dots>?n] ==> [\<dots>?n] \<down>\<le> ?t = [\<dots>?n]",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("IL_Interval.iMOD_0_cut_greater",
     "?t : [ ?r, mod 0 ] ==> [ ?r, mod 0 ] \<down>> ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iMOD_modD",
     "?x : [ ?r, mod ?m ] ==> ?x mod ?m = ?r mod ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_plus_divisor",
     "?x : [ ?r, mod ?m ] ==> ?x + ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_subset_imp_divisor_mod_0",
     "[ ?r', mod ?m' ] <= [ ?r, mod ?m ] ==> ?m' mod ?m = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("IL_Interval.iTILL_iprev_if",
     "iprev ?t [\<dots>?n] = (if ?t : [\<dots>?n] then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("IL_Interval.iMODb_iMOD_iTILL_conv",
     "[ ?r, mod ?m, ?c ] = [ ?r, mod ?m ] Int [\<dots>?r + ?m * ?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("IL_Interval.iTILL_cut_ge",
     "[\<dots>?n] \<down>\<ge> ?t =
      (if ?n < ?t then {} else [?t\<dots>,?n - ?t])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_cut_le",
     "[?n\<dots>] \<down>\<le> ?t =
      (if ?t < ?n then {} else [?n\<dots>,?t - ?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_Interval.iIN_append_union",
     "[?n\<dots>,?d] Un [?n + ?d\<dots>,?d'] = [?n\<dots>,?d + ?d']",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iIN_iff",
     "(?x : [?n\<dots>,?d]) = (?n <= ?x & ?x <= ?n + ?d)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_iFROM_eq_conv",
     "([?n\<dots>] = [ ?r, mod ?m ]) = (?n = ?r & ?m = Suc 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("IL_Interval.iFROM_iMOD_subset_conv",
     "([?n'\<dots>] <= [ ?r, mod ?m ]) = (?r <= ?n' & ?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("IL_Interval.iIN_eq_conv",
     "([?n\<dots>,?d] = [?n'\<dots>,?d']) = (?n = ?n' & ?d = ?d')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_0_eq_conv",
     "([ ?r, mod 0 ] = [ ?r', mod ?m' ]) = (?r = ?r' & ?m' = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 2))
           ))),
    ("IL_Interval.iMOD_singleton_eq_conv",
     "([ ?r, mod ?m ] = {?a}) = (?r = ?a & ?m = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("IL_Interval.iMOD_singleton_subset_conv",
     "([ ?r, mod ?m ] <= {?a}) = (?r = ?a & ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("IL_Interval.iMODb_iTILL_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [\<dots>?n]) = (?r' + ?m' * ?c' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("IL_Interval.iMODb_icard_if",
     "icard [ ?r, mod ?m, ?c ] = enat (if ?m = 0 then Suc 0 else Suc ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_app (template_hole 0, template_hole 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("IL_Interval.iIN_iFROM_inext_nth",
     "?a <= ?d ==>
      [?n\<dots>,?d] \<rightarrow> ?a = [?n\<dots>] \<rightarrow> ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)),
           template_var 2)))),
    ("IL_Interval.iFROM_inext_diff_const",
     "?t : [?n\<dots>] ==> inext ?t [?n\<dots>] - ?t = Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iTILL_iprev",
     "?t : [\<dots>?n] ==> iprev ?t [\<dots>?n] = ?t - Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 5, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_Interval.iMODb_modD",
     "?x : [ ?r, mod ?m, ?c ] ==> ?x mod ?m = ?r mod ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("IL_Interval.iMODb_leD",
     "?x : [ ?r, mod ?m, ?c ] ==> ?x <= ?r + ?m * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_E",
     "[| ?x : [?n\<dots>]; ?n <= ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("IL_Interval.iTILL_E",
     "[| ?x : [\<dots>?n]; ?x <= ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("IL_Interval.iMOD_inext_if",
     "inext ?t [ ?r, mod ?m ] =
      (if ?t : [ ?r, mod ?m ] then ?t + ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iIN_inext_nth_if",
     "[?n\<dots>,?d] \<rightarrow> ?a =
      (if ?a <= ?d then ?n + ?a else ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("IL_Interval.iIN_iprev_nth_if",
     "[?n\<dots>,?d] \<leftarrow> ?a =
      (if ?a <= ?d then ?n + ?d - ?a else ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMODb_mirror_elem",
     "mirror_elem ?x [ ?r, mod ?m, ?c ] = ?r + ?r + ?m * ?c - ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 3))),
    ("IL_Interval.iFROM_cut_less",
     "[?n\<dots>] \<down>< ?t =
      (if ?t <= ?n then {} else [?n\<dots>,?t - Suc ?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("IL_Interval.iMODb_mod_0_subset_conv",
     "([ ?r', mod 0, ?c' ] <= [ ?r, mod ?m, ?c ]) =
      (?r' : [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_hole 1),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_0_subset_conv",
     "([ ?r', mod ?m', 0 ] <= [ ?r, mod ?m, ?c ]) =
      (?r' : [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_hole 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_cut_less1",
     "?n < ?t ==> [?n\<dots>] \<down>< ?t = [?n\<dots>,?t - Suc ?n]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("IL_Interval.iIN_iprev_nth",
     "?a <= ?d ==> [?n\<dots>,?d] \<leftarrow> ?a = ?n + ?d - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("IL_Interval.iFROM_iTILL_iIN_conv",
     "?n <= ?n' ==> [?n\<dots>] Int [\<dots>?n'] = [?n\<dots>,?n' - ?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_Interval.iFROM_cut_le1",
     "?t : [?n\<dots>] ==>
      [?n\<dots>] \<down>\<le> ?t = [?n\<dots>,?t - ?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iTILL_cut_ge1",
     "?t : [\<dots>?n] ==>
      [\<dots>?n] \<down>\<ge> ?t = [?t\<dots>,?n - ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_Interval.iMOD_inext",
     "?t : [ ?r, mod ?m ] ==> inext ?t [ ?r, mod ?m ] = ?t + ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_inext_diff_const",
     "?t : [ ?r, mod ?m ] ==> inext ?t [ ?r, mod ?m ] - ?t = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 2),
         template_var 0))),
    ("IL_Interval.iMOD_iprev'",
     "?t : [ ?r, mod ?m ] ==> iprev (?t + ?m) [ ?r, mod ?m ] = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMOD_cut_ge1",
     "?t : [ ?r, mod ?m ] ==>
      [ ?r, mod ?m ] \<down>\<ge> ?t = [ ?t, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_plus_divisor_mult",
     "?x : [ ?r, mod ?m ] ==> ?x + ?k * ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMODb_0_cut_greater",
     "?t : [ ?r, mod 0, ?c ] ==> [ ?r, mod 0, ?c ] \<down>> ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("IL_Interval.iMODb_iTILL_subset",
     "?r' + ?m' * ?c' <= ?n ==> [ ?r', mod ?m', ?c' ] <= [\<dots>?n]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iFROM_trans",
     "[| ?y : [?x\<dots>]; ?z : [?y\<dots>] |] ==> ?z : [?x\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iTILL_trans",
     "[| ?y : [\<dots>?x]; ?z : [\<dots>?y] |] ==> ?z : [\<dots>?x]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iMOD_inext_nth_diff",
     "([ ?r, mod ?m ] \<rightarrow> ?a) -
      ([ ?r, mod ?m ] \<rightarrow> ?b) =
      (?a - ?b) * ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iTILL_cut_greater",
     "[\<dots>?n] \<down>> ?t =
      (if ?n <= ?t then {} else [Suc ?t\<dots>,?n - Suc ?t])",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 1, template_var 0)))))),
    ("IL_Interval.iIN_append_union_Suc",
     "[?n\<dots>,?d] Un [Suc (?n + ?d)\<dots>,?d'] =
      [?n\<dots>,Suc (?d + ?d')]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMODb_Suc_insert_conv",
     "insert (?r + ?m * Suc ?c) [ ?r, mod ?m, ?c ] =
      [ ?r, mod ?m, Suc ?c ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iMOD_iff",
     "(?x : [ ?r, mod ?m ]) = (?x mod ?m = ?r mod ?m & ?r <= ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("IL_Interval.iMODb_inext_nth",
     "?a <= ?c ==> [ ?r, mod ?m, ?c ] \<rightarrow> ?a = ?r + ?m * ?a",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("IL_Interval.iMOD_iMODb_inext_nth",
     "?a <= ?c ==>
      [ ?r, mod ?m, ?c ] \<rightarrow> ?a =
      [ ?r, mod ?m ] \<rightarrow> ?a",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 3)))),
    ("IL_Interval.iFROM_iprev_diff_const'",
     "?t : [?n\<dots>] ==> Suc ?t - iprev (Suc ?t) [?n\<dots>] = Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 2, template_hole 0)))),
    ("IL_Interval.iIN_iFROM_inext",
     "?a < ?n + ?d ==> inext ?a [?n\<dots>,?d] = inext ?a [?n\<dots>]",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 1))))),
    ("IL_Interval.iIN_I",
     "[| ?n <= ?x; ?x <= ?n + ?d |] ==> ?x : [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_pred_insert_conv",
     "?m <= ?r ==> insert (?r - ?m) [ ?r, mod ?m ] = [ ?r - ?m, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("IL_Interval.iIN_cut_le1",
     "?t : [?n\<dots>,?d] ==>
      [?n\<dots>,?d] \<down>\<le> ?t = [?n\<dots>,?t - ?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMOD_Suc",
     "?x : [ ?r, mod ?m ] ==> (Suc ?x : [ ?r, mod ?m ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 2, template_var 2)),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 0,
           template_app (template_hole 2, template_hole 0))))),
    ("IL_Interval.iIN_inext_if",
     "inext ?t [?n\<dots>,?d] =
      (if ?n <= ?t & ?t < ?n + ?d then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           template_app (template_hole 0, template_var 2)),
         template_var 2))),
    ("IL_Interval.iMODb_iprev_nth_if",
     "[ ?r, mod ?m, ?c ] \<leftarrow> ?a =
      (if ?a <= ?c then ?r + ?m * (?c - ?a) else ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 3))),
    ("IL_Interval.iMOD_cut_le",
     "[ ?r, mod ?m ] \<down>\<le> ?t =
      (if ?t < ?r then {} else [ ?r, mod ?m, (?t - ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1))))),
    ("IL_Interval.iIN_subset_conv",
     "([?n'\<dots>,?d'] <= [?n\<dots>,?d]) =
      (?n <= ?n' & ?n' + ?d' <= ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_0_subset_conv",
     "([ ?r', mod 0 ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("IL_Interval.iIN_iFROM_append_union_pred",
     "0 < ?d ==> [?n\<dots>,?d - Suc 0] Un [?n + ?d\<dots>] = [?n\<dots>]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_hole 7)))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iIN_iTILL_iTILL_conv",
     "0 < ?n ==> [?n\<dots>,?d] = [\<dots>?n + ?d] - [\<dots>?n - Suc 0]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_hole 7))))))),
    ("IL_Interval.iMODb_iprev_nth",
     "?a <= ?c ==>
      [ ?r, mod ?m, ?c ] \<leftarrow> ?a = ?r + ?m * (?c - ?a)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)))))),
    ("IL_Interval.iIN_iFROM_union",
     "?n' <= Suc (?n + ?d) ==>
      [?n\<dots>,?d] Un [?n'\<dots>] = [min ?n ?n'\<dots>]",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_Interval.not_iTILL_iMOD_subset",
     "[| 0 < ?n'; ?m ~= Suc 0 |] ==> ~ [\<dots>?n'] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.iFROM_minus",
     "[| ?x : [?n\<dots>]; ?k <= ?x - ?n |] ==> ?x - ?k : [?n\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 2, template_var 1))
           ))),
    ("IL_Interval.iTILL_plus",
     "[| ?x : [\<dots>?n]; ?k <= ?n - ?x |] ==> ?x + ?k : [\<dots>?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 3, template_var 1))
           ))),
    ("IL_Interval.iMOD_trans",
     "[| ?y : [ ?x, mod ?m ]; ?z : [ ?y, mod ?m ] |]
      ==> ?z : [ ?x, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_I",
     "[| ?x mod ?m = ?r mod ?m; ?r <= ?x |] ==> ?x : [ ?r, mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_iprev_if",
     "iprev ?t [ ?r, mod ?m ] =
      (if ?t : [ ?r, mod ?m ] & ?r < ?t then ?t - ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMOD_cut_less",
     "[ ?r, mod ?m ] \<down>< ?t =
      (if ?t <= ?r then {} else [ ?r, mod ?m, (?t - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2)),
           template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_var 1))))),
    ("IL_Interval.iMODb_append_union",
     "[ ?r, mod ?m, ?c ] Un [ ?r + ?m * ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, ?c + ?c' ]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_iIN_0_eq_conv",
     "([?n\<dots>,0] = [ ?r, mod ?m, ?c ]) = (?n = ?r & (?m = 0 | ?c = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 4)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 4)))
           ))),
    ("IL_Interval.iMODb_singleton_eq_conv",
     "([ ?r, mod ?m, ?c ] = {?a}) = (?r = ?a & (?m = 0 | ?c = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))
           ))),
    ("IL_Interval.iMODb_singleton_subset_conv",
     "([ ?r, mod ?m, ?c ] <= {?a}) = (?r = ?a & (?m = 0 | ?c = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))
           ))),
    ("IL_Interval.iMODb_0_iMOD_subset_conv",
     "([ ?r', mod ?m', 0 ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_hole 5)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("IL_Interval.iMOD_eq_conv",
     "0 < ?m ==>
      ([ ?r, mod ?m ] = [ ?r', mod ?m' ]) = (?r = ?r' & ?m = ?m')",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 3)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))
             )))),
    ("IL_Interval.iTILL_iMOD_subset_conv",
     "0 < ?n' ==> ([\<dots>?n'] <= [ ?r, mod ?m ]) = (?r = 0 & ?m = Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 7)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_hole 7)))
             )))),
    ("IL_Interval.iMOD_iTILL_iMODb_conv",
     "?r <= ?n ==>
      [ ?r, mod ?m ] Int [\<dots>?n] = [ ?r, mod ?m, (?n - ?r) div ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("IL_Interval.iTILL_imirror_bounds",
     "?n <= ?l + ?r ==>
      imirror_bounds [\<dots>?n] ?l ?r = [?l + ?r - ?n\<dots>,?n]",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_var 2)),
           template_var 2)))),
    ("IL_Interval.iIN_cut_ge1",
     "?t : [?n\<dots>,?d] ==>
      [?n\<dots>,?d] \<down>\<ge> ?t = [?t\<dots>,?n + ?d - ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("IL_Interval.iMOD_iprev_diff_const'",
     "?t : [ ?r, mod ?m ] ==>
      ?t + ?m - iprev (?t + ?m) [ ?r, mod ?m ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_var 0))),
    ("IL_Interval.iMOD_plus",
     "?x : [ ?r, mod ?m ] ==> (?x + ?k : [ ?r, mod ?m ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 0)),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0)))),
    ("IL_Interval.not_iIN_iMOD_subset",
     "[| 0 < ?d'; ?m ~= Suc 0 |] ==> ~ [?n'\<dots>,?d'] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 3),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.not_iTILL_iMODb_subset",
     "[| 0 < ?n'; ?m ~= Suc 0 |] ==> ~ [\<dots>?n'] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 3),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iIN_inext",
     "[| ?n <= ?t; ?t < ?n + ?d |] ==> inext ?t [?n\<dots>,?d] = Suc ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iIN_iprev'",
     "[| ?n <= ?t; ?t < ?n + ?d |] ==> iprev (Suc ?t) [?n\<dots>,?d] = ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_Interval.iTILL_iprev_diff_const",
     "[| ?t : [\<dots>?n]; 0 < ?t |] ==> ?t - iprev ?t [\<dots>?n] = Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 0, template_hole 4)))),
    ("IL_Interval.iTILL_iMODb_neq",
     "[| ?m ~= Suc 0; 0 < ?n |] ==> [\<dots>?n] ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 5, template_hole 4))
            ),
        template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("IL_Interval.iIN_pred",
     "[| ?x : [?n\<dots>,?d]; ?n < ?x |] ==> ?x - Suc 0 : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_hole 0))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iIN_Suc",
     "[| ?x : [?n\<dots>,?d]; ?x < ?n + ?d |] ==> Suc ?x : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iIN_iprev_if",
     "iprev ?t [?n\<dots>,?d] =
      (if ?n < ?t & ?t <= ?n + ?d then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 2),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_hole 0))),
         template_var 2))),
    ("IL_Interval.iMODb_inext_nth_if",
     "[ ?r, mod ?m, ?c ] \<rightarrow> ?a =
      (if ?a <= ?c then ?r + ?m * ?a else ?r + ?m * ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_Interval.iTILL_cut_less",
     "[\<dots>?n] \<down>< ?t =
      (if ?n < ?t then [\<dots>?n]
       else if ?t = 0 then {} else [\<dots>?t - Suc 0])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_hole 2),
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_hole 3)))))
           ))),
    ("IL_Interval.iMODb_mod_0_eq_conv",
     "([ ?r, mod 0, ?c ] = [ ?r', mod ?m', ?c' ]) =
      (?r = ?r' & (?m' = 0 | ?c' = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_hole 3),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 3)))
           ))),
    ("IL_Interval.iMODb_0_eq_conv",
     "([ ?r, mod ?m, 0 ] = [ ?r', mod ?m', ?c' ]) =
      (?r = ?r' & (?m' = 0 | ?c' = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 3)))
           ))),
    ("IL_Interval.iMODb_subset_mod_0_conv",
     "([ ?r', mod ?m', ?c' ] <= [ ?r, mod 0, ?c ]) =
      (?r' = ?r & (?m' = 0 | ?c' = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 3)))
           ))),
    ("IL_Interval.iMODb_subset_0_conv",
     "([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, 0 ]) =
      (?r' = ?r & (?m' = 0 | ?c' = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 3)))
           ))),
    ("IL_Interval.iIN_iMOD_subset_conv",
     "0 < ?d' ==>
      ([?n'\<dots>,?d'] <= [ ?r, mod ?m ]) = (?r <= ?n' & ?m = Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 3)),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_hole 8)))
             )))),
    ("IL_Interval.mod_partition_Union",
     "0 < ?m ==> (UN k. ?A Int [k * ?m\<dots>,?m - Suc 0]) = ?A",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_hole 0)),
         template_var 0))),
    ("IL_Interval.iIN_pred_insert_conv",
     "0 < ?n ==>
      insert (?n - Suc 0) [?n\<dots>,?d] = [?n - Suc 0\<dots>,Suc ?d]",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 5))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 5))),
           template_app (template_hole 1, template_var 0))))),
    ("IL_Interval.iMODb_pred_insert_conv",
     "?m <= ?r ==>
      insert (?r - ?m) [ ?r, mod ?m, ?c ] = [ ?r - ?m, mod ?m, Suc ?c ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("IL_Interval.iMOD_cut_le1",
     "?t : [ ?r, mod ?m ] ==>
      [ ?r, mod ?m ] \<down>\<le> ?t = [ ?r, mod ?m, (?t - ?r) div ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("IL_Interval.iMOD_iMODb_inext",
     "?a < ?r + ?m * ?c ==>
      inext ?a [ ?r, mod ?m, ?c ] = inext ?a [ ?r, mod ?m ]",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMODb_subset_imp_divisor_mod_0",
     "[| 0 < ?c'; [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ] |]
      ==> ?m' mod ?m = 0",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 5),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_var 5),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_hole 4))),
    ("IL_Interval.not_iIN_iMODb_subset",
     "[| 0 < ?d'; ?m ~= Suc 0 |]
      ==> ~ [?n'\<dots>,?d'] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 4),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("IL_Interval.mod_cut_greater_aux_t_less",
     "[| 0 < ?m; ?r <= ?t |] ==> ?t < ?t + ?m - (?t - ?r) mod ?m",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_var 2))))),
    ("IL_Interval.iIN_subset",
     "[| ?n <= ?n'; ?n' + ?d' <= ?n + ?d |]
      ==> [?n'\<dots>,?d'] <= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("IL_Interval.iTILL_cut_less1",
     "[| ?t : [\<dots>?n]; 0 < ?t |]
      ==> [\<dots>?n] \<down>< ?t = [\<dots>?t - Suc 0]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 0)),
           template_var 1),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_hole 4)))))),
    ("IL_Interval.iIN_iMODb_neq2",
     "[| ?m ~= Suc 0; 0 < ?d |] ==> [?n\<dots>,?d] ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 4,
              template_app (template_hole 5, template_hole 4))
            ),
        template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 0))
           ))),
    ("IL_Interval.iIN_iMODb_neq",
     "[| 2 <= ?m; 0 < ?c |] ==> [?n\<dots>,?d] ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 4),
        template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4),
               template_var 3))
           ))),
    ("IL_Interval.iMOD_mem_diff",
     "[| ?a : [ ?r, mod ?m ]; ?b : [ ?r, mod ?m ] |]
      ==> (?a - ?b) mod ?m = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iMOD_iprev",
     "[| ?t : [ ?r, mod ?m ]; ?r < ?t |]
      ==> iprev ?t [ ?r, mod ?m ] = ?t - ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_iprev_diff_const",
     "[| ?t : [ ?r, mod ?m ]; ?r < ?t |]
      ==> ?t - iprev ?t [ ?r, mod ?m ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_var 0))),
    ("IL_Interval.iIN_minus",
     "[| ?x : [?n\<dots>,?d]; ?k <= ?x - ?n |]
      ==> ?x - ?k : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_minus_divisor",
     "[| ?x : [ ?r, mod ?m ]; ?m + ?r <= ?x |]
      ==> ?x - ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iMODb_iprev_if",
     "iprev ?t [ ?r, mod ?m, ?c ] =
      (if ?t : [ ?r, mod ?m, ?c ] & ?r < ?t then ?t - ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 3))),
    ("IL_Interval.iMODb_append_union_Suc",
     "[ ?r, mod ?m, ?c ] Un [ ?r + ?m * Suc ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, Suc (?c + ?c') ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_var 1)))),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMODb_iIN_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [?n\<dots>,?d]) =
      (?n <= ?r' & ?r' + ?m' * ?c' <= ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 4)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("IL_Interval.iIN_cut_ge2",
     "?t ~: [?n\<dots>,?d] ==>
      [?n\<dots>,?d] \<down>\<ge> ?t =
      (if ?t < ?n then [?n\<dots>,?d] else {})",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("IL_Interval.iMOD_inter'",
     "?r mod ?m = ?r' mod ?m ==>
      [ ?r, mod ?m ] Int [ ?r', mod ?m ] = [ max ?r ?r', mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_Interval.iMOD_union'",
     "?r mod ?m = ?r' mod ?m ==>
      [ ?r, mod ?m ] Un [ ?r', mod ?m ] = [ min ?r ?r', mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_Interval.iIN_iprev",
     "[| ?n < ?t; ?t <= ?n + ?d |]
      ==> iprev ?t [?n\<dots>,?d] = ?t - Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_Interval.iIN_iprev_diff_const",
     "[| ?n < ?t; ?t <= ?n + ?d |]
      ==> ?t - iprev ?t [?n\<dots>,?d] = Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iIN_inext_diff_const",
     "[| ?n <= ?t; ?t < ?n + ?d |]
      ==> inext ?t [?n\<dots>,?d] - ?t = Suc 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iMOD_imp_iMODb",
     "[| ?x : [ ?r, mod ?m ]; ?x <= ?r + ?m * ?c |]
      ==> ?x : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iIN_append_union_pred",
     "0 < ?d ==>
      [?n\<dots>,?d - Suc 0] Un [?n + ?d\<dots>,?d'] =
      [?n\<dots>,?d + ?d']",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_hole 6)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("IL_Interval.iMOD_cut_greater1",
     "?t : [ ?r, mod ?m ] ==>
      [ ?r, mod ?m ] \<down>> ?t =
      (if ?m = 0 then {} else [ ?t + ?m, mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_var 2)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 0))
             )))),
    ("IL_Interval.iMODb_cut_le1",
     "?t : [ ?r, mod ?m, ?c ] ==>
      [ ?r, mod ?m, ?c ] \<down>\<le> ?t =
      [ ?r, mod ?m, (?t - ?r) div ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1))))),
    ("IL_Interval.iTILL_cut_greater1",
     "[| ?t : [\<dots>?n]; ?t < ?n |]
      ==> [\<dots>?n] \<down>> ?t = [Suc ?t\<dots>,?n - Suc ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 6, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 1, template_var 1)))))),
    ("IL_Interval.iIN_plus",
     "[| ?x : [?n\<dots>,?d]; ?k <= ?n + ?d - ?x |]
      ==> ?x + ?k : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iIN_E",
     "[| ?x : [?n\<dots>,?d]; [| ?n <= ?x; ?x <= ?n + ?d |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 3)],
          template_implication
           ([template_inequation
              (less_equals, template_var 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("IL_Interval.iMODb_mem_diff",
     "[| ?a : [ ?r, mod ?m, ?c ]; ?b : [ ?r, mod ?m, ?c ] |]
      ==> (?a - ?b) mod ?m = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("IL_Interval.iMODb_iprev",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?r < ?t |]
      ==> iprev ?t [ ?r, mod ?m, ?c ] = ?t - ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("IL_Interval.iMODb_iprev_diff_const",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?r < ?t |]
      ==> ?t - iprev ?t [ ?r, mod ?m, ?c ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_var 1))),
    ("IL_Interval.iMODb_subset_imp_iMOD_subset",
     "[| [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]; 0 < ?c' |]
      ==> [ ?r', mod ?m' ] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 1, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 5), template_var 4),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("IL_Interval.iMODb_iIN_subset",
     "[| ?n <= ?r'; ?r' + ?m' * ?c' <= ?n + ?d |]
      ==> [ ?r', mod ?m', ?c' ] <= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 0)))),
    ("IL_Interval.iIN_iprev_diff_const'",
     "[| ?n <= ?t; ?t < ?n + ?d |]
      ==> Suc ?t - iprev (Suc ?t) [?n\<dots>,?d] = Suc 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app (template_hole 3, template_hole 0)))),
    ("IL_Interval.iIN_cut_less1",
     "[| ?t : [?n\<dots>,?d]; ?n < ?t |]
      ==> [?n\<dots>,?d] \<down>< ?t = [?n\<dots>,?t - Suc ?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1)))))),
    ("IL_Interval.Suc_in_imp_neq_iMOD",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |] ==> ?S ~= [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.Suc_in_imp_not_subset_iMOD",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |] ==> ~ ?S <= [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_var 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.iIN_cut_le",
     "[?n\<dots>,?d] \<down>\<le> ?t =
      (if ?t < ?n then {}
       else if ?t <= ?n + ?d then [?n\<dots>,?t - ?n] else [?n\<dots>,?d])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))))),
    ("IL_Interval.iIN_imirror_bounds",
     "?n + ?d <= ?l + ?r ==>
      imirror_bounds [?n\<dots>,?d] ?l ?r = [?l + ?r - ?n - ?d\<dots>,?d]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0)),
                   template_var 3)),
               template_var 2)),
           template_var 2)))),
    ("IL_Interval.iMOD_inter",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m |]
      ==> [ ?r, mod ?m ] Int [ ?r', mod ?m ] = [ ?r', mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_union",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m |]
      ==> [ ?r, mod ?m ] Un [ ?r', mod ?m ] = [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_pred",
     "[| ?x : [ ?r, mod ?m ]; ?r < ?x |]
      ==> (?x - Suc 0 : [ ?r, mod ?m ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app (template_hole 2, template_hole 1))),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 0,
           template_app (template_hole 2, template_hole 1))))),
    ("IL_Interval.iMOD_minus_divisor_mult2",
     "[| ?x : [ ?r, mod ?m ]; ?k <= (?x - ?r) div ?m |]
      ==> ?x - ?k * ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_minus_divisor_mult",
     "[| ?x : [ ?r, mod ?m ]; ?k * ?m <= ?x - ?r |]
      ==> ?x - ?k * ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_E",
     "[| ?x : [ ?r, mod ?m ];
         [| ?x mod ?m = ?r mod ?m; ?r <= ?x |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))],
          template_implication
           ([template_inequation
              (less_equals, template_var 2, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("IL_Interval.iMODb_plus_divisor",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?x < ?r + ?m * ?c |]
      ==> ?x + ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.Suc_in_imp_neq_iMODb",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |] ==> ?S ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_equation
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.Suc_in_imp_not_subset_iMODb",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |]
      ==> ~ ?S <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_var 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMODb_inext_if",
     "inext ?t [ ?r, mod ?m, ?c ] =
      (if ?t : [ ?r, mod ?m, ?c ] & ?t < ?r + ?m * ?c then ?t + ?m
       else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_var 3))),
    ("IL_Interval.iIN_cut_less",
     "[?n\<dots>,?d] \<down>< ?t =
      (if ?t <= ?n then {}
       else if ?t <= ?n + ?d then [?n\<dots>,?t - Suc ?n]
            else [?n\<dots>,?d])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2)))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMODb_iff",
     "(?x : [ ?r, mod ?m, ?c ]) =
      (?x mod ?m = ?r mod ?m & ?r <= ?x & ?x <= ?r + ?m * ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("IL_Interval.iMODb_iIN_eq_conv",
     "0 < ?d ==>
      ([?n\<dots>,?d] = [ ?r, mod ?m, ?c ]) =
      (?n = ?r & ?m = Suc 0 & ?c = ?d)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 4)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 0, template_hole 7))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)))
             )))),
    ("IL_Interval.iIN_cut_ge",
     "[?n\<dots>,?d] \<down>\<ge> ?t =
      (if ?t < ?n then [?n\<dots>,?d]
       else if ?t <= ?n + ?d then [?t\<dots>,?n + ?d - ?t] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0))),
           template_hole 0)))),
    ("IL_Interval.iMOD_minus",
     "[| ?x : [ ?r, mod ?m ]; ?k <= ?x - ?r |]
      ==> (?x - ?k : [ ?r, mod ?m ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 0)),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0)))),
    ("IL_Interval.iMODb_inext",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> inext ?t [ ?r, mod ?m, ?c ] = ?t + ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 1)))),
    ("IL_Interval.iMODb_inext_diff_const",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> inext ?t [ ?r, mod ?m, ?c ] - ?t = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_var 3),
         template_var 1))),
    ("IL_Interval.iMODb_iprev'",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> iprev (?t + ?m) [ ?r, mod ?m, ?c ] = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 3))),
    ("IL_Interval.iMODb_pred",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?r < ?x |]
      ==> (?x - Suc 0 : [ ?r, mod ?m, ?c ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app (template_hole 2, template_hole 1))),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 1,
           template_app (template_hole 2, template_hole 1))))),
    ("IL_Interval.iMODb_minus_divisor_mult",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?r + ?k * ?m <= ?x |]
      ==> ?x - ?k * ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)),
          template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMODb_append_union_pred",
     "0 < ?c ==>
      [ ?r, mod ?m, ?c - Suc 0 ] Un [ ?r + ?m * ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, ?c + ?c' ]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_hole 7)))),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3))),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("IL_Interval.iMOD_subset",
     "[| ?r <= ?r'; ?r' mod ?m = ?r mod ?m; ?m' mod ?m = 0 |]
      ==> [ ?r', mod ?m' ] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_hole 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("IL_Interval.iIN_trans",
     "[| ?y : [?x\<dots>,?d]; ?z : [?y\<dots>,?d']; ?d' <= ?x + ?d - ?y |]
      ==> ?z : [?x\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2)),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))
           ))),
    ("IL_Interval.iIN_cut_greater",
     "[?n\<dots>,?d] \<down>> ?t =
      (if ?t < ?n then [?n\<dots>,?d]
       else if ?t < ?n + ?d then [Suc ?t\<dots>,?n + ?d - Suc ?t] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_app (template_hole 2, template_var 0)))),
           template_hole 0)))),
    ("IL_Interval.iMOD_cut_greater",
     "[ ?r, mod ?m ] \<down>> ?t =
      (if ?t < ?r then [ ?r, mod ?m ]
       else if ?m = 0 then {} else [ ?t + ?m - (?t - ?r) mod ?m, mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4)),
                 template_hole 3),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 2)),
                       template_var 1))),
                 template_var 1)))
           ))),
    ("IL_Interval.iTILL_iMODb_subset_conv",
     "0 < ?n' ==>
      ([\<dots>?n'] <= [ ?r, mod ?m, ?c ]) =
      (?r = 0 & ?m = Suc 0 & ?n' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 3)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 10)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app (template_hole 3, template_hole 10))),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)))))
             )))),
    ("IL_Interval.finite_mod_partition_Union",
     "[| 0 < ?m; finite ?A |]
      ==> (UN k<=Max ?A div ?m. ?A Int [k * ?m\<dots>,?m - Suc 0]) = ?A",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)))),
         template_var 0))),
    ("IL_Interval.iMODb_inext_nth_diff",
     "[| ?a <= ?c; ?b <= ?c |]
      ==> ([ ?r, mod ?m, ?c ] \<rightarrow> ?a) -
          ([ ?r, mod ?m, ?c ] \<rightarrow> ?b) =
          (?a - ?b) * ?m",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0),
                   template_var 3)),
               template_var 4)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2)),
           template_var 0)))),
    ("IL_Interval.iIN_cut_greater1",
     "[| ?t : [?n\<dots>,?d]; ?t < ?n + ?d |]
      ==> [?n\<dots>,?d] \<down>> ?t = [Suc ?t\<dots>,?n + ?d - Suc ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 2)))))),
    ("IL_Interval.iMOD_cut_less1",
     "[| ?t : [ ?r, mod ?m ]; ?r < ?t |]
      ==> [ ?r, mod ?m ] \<down>< ?t =
          [ ?r, mod ?m, (?t - ?r) div ?m - Suc 0 ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app (template_hole 1, template_hole 0)))))),
    ("IL_Interval.iMODb_minus",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k <= ?x - ?r |]
      ==> (?x - ?k : [ ?r, mod ?m, ?c ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 0)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_hole 0)))),
    ("IL_Interval.iMODb_Suc",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?x < ?r + ?m * ?c |]
      ==> (Suc ?x : [ ?r, mod ?m, ?c ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 2, template_var 3)),
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 1,
           template_app (template_hole 2, template_hole 0))))),
    ("IL_Interval.iMODb_plus_divisor_mult2",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k <= ?c - (?x - ?r) div ?m |]
      ==> ?x + ?k * ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iFROM_induct",
     "[| ?P ?n; !!k. [| k : [?n\<dots>]; ?P k |] ==> ?P (Suc k);
         ?a : [?n\<dots>] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("IL_Interval.iMODb_iMOD_subset",
     "[| ?r <= ?r'; ?r' mod ?m = ?r mod ?m; ?m' mod ?m = 0 |]
      ==> [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 2),
          template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 2)))),
    ("IL_Interval.iMODb_I",
     "[| ?x mod ?m = ?r mod ?m; ?r <= ?x; ?x <= ?r + ?m * ?c |]
      ==> ?x : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_subset_conv",
     "0 < ?m ==>
      ([ ?r', mod ?m' ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r' & ?m' mod ?m = 0)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 3))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 3)),
                   template_hole 7)))
             )))),
    ("IL_Interval.mod_cut_greater_aux_le_x",
     "[| ?r <= ?t; ?t < ?x; ?x mod ?m = ?r mod ?m |]
      ==> ?t + ?m - (?t - ?r) mod ?m <= ?x",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_var 0)),
         template_var 1))),
    ("IL_Interval.iMOD_cut_ge",
     "[ ?r, mod ?m ] \<down>\<ge> ?t =
      (if ?t <= ?r then [ ?r, mod ?m ]
       else if ?m = 0 then {}
            else [ ?t + ?m - Suc ((?t - Suc ?r) mod ?m), mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 5)),
                 template_hole 4),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1)),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 3, template_var 0),
                             template_app
                              (template_hole 1, template_var 2))),
                         template_var 1)))),
                 template_var 1)))
           ))),
    ("IL_Interval.iMODb_iMOD_subset_conv",
     "0 < ?c' ==>
      ([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r' & ?m' mod ?m = 0)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2),
                    template_var 4)),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0)),
                   template_hole 8)))
             )))),
    ("IL_Interval.iMODb_imirror_bounds",
     "?r' + ?m' * ?c' <= ?l + ?r ==>
      imirror_bounds [ ?r', mod ?m', ?c' ] ?l ?r =
      [ ?l + ?r - ?r' - ?m' * ?c', mod ?m', ?c' ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2))),
             template_var 3),
           template_var 2)))),
    ("IL_Interval.iMODb_eq_conv",
     "[| 0 < ?m; 0 < ?c |]
      ==> ([ ?r, mod ?m, ?c ] = [ ?r', mod ?m', ?c' ]) =
          (?r = ?r' & ?m = ?m' & ?c = ?c')",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 5),
        template_inequation (less_than, template_hole 5, template_var 4)],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0)))
             )))),
    ("IL_Interval.iMODb_cut_less1",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?r < ?t |]
      ==> [ ?r, mod ?m, ?c ] \<down>< ?t =
          [ ?r, mod ?m, (?t - ?r) div ?m - Suc 0 ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_app (template_hole 1, template_hole 0)))))),
    ("IL_Interval.iMODb_iprev_diff_const'",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> ?t + ?m - iprev (?t + ?m) [ ?r, mod ?m, ?c ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1),
               template_var 0))),
         template_var 1))),
    ("IL_Interval.iMODb_plus_divisor_mult",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k * ?m <= ?r + ?m * ?c - ?x |]
      ==> ?x + ?k * ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 0), template_var 2),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1))),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_subset_imp_iMODb_subset",
     "[| [ ?r', mod ?m' ] <= [ ?r, mod ?m ];
         ?r' + ?m' * ?c' <= ?r + ?m * ?c |]
      ==> [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 5),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 4),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("IL_Interval.iMODb_cut_le",
     "[ ?r, mod ?m, ?c ] \<down>\<le> ?t =
      (if ?t < ?r then {}
       else if ?t < ?r + ?m * ?c then [ ?r, mod ?m, (?t - ?r) div ?m ]
            else [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 3)),
           template_hole 4),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)))),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1))))),
    ("IL_Interval.iIN_iMODb_subset_conv",
     "0 < ?d' ==>
      ([?n'\<dots>,?d'] <= [ ?r, mod ?m, ?c ]) =
      (?r <= ?n' & ?m = Suc 0 & ?n' + ?d' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 4)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_hole 10))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 4)),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)))))
             )))),
    ("IL_Interval.iMOD_induct",
     "[| ?P ?r; !!k. [| k : [ ?r, mod ?m ]; ?P k |] ==> ?P (k + ?m);
         ?a : [ ?r, mod ?m ] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 3, template_var 0)))),
    ("IL_Interval.iMODb_cut_less",
     "[ ?r, mod ?m, ?c ] \<down>< ?t =
      (if ?t <= ?r then {}
       else if ?r + ?m * ?c < ?t then [ ?r, mod ?m, ?c ]
            else [ ?r, mod ?m, (?t - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 3)),
           template_hole 6),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 3))),
               template_var 2)))))),
    ("IL_Interval.iMODb_plus",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k <= ?r + ?m * ?c - ?x |]
      ==> (?x + ?k : [ ?r, mod ?m, ?c ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1))),
            template_var 4))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 0)),
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_hole 0)))),
    ("IL_Interval.iMODb_iMOD_append_union'",
     "[| ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * Suc ?c |]
      ==> [ ?r, mod ?m, ?c ] Un [ ?r', mod ?m ] = [ min ?r ?r', mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 0))))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 2)))),
    ("IL_Interval.iMODb_cut_ge1",
     "?t : [ ?r, mod ?m, ?c ] ==>
      [ ?r, mod ?m, ?c ] \<down>\<ge> ?t =
      (if ?r + ?m * ?c < ?t then {}
       else [ ?t, mod ?m, ?c - (?t - ?r) div ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_var 3)),
             template_hole 2),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_var 1))))))),
    ("IL_Interval.mod_partition_is_disjoint",
     "[| 0 < ?m; ?k ~= ?k' |]
      ==> ?A Int [?k * ?m\<dots>,?m - Suc 0] Int
          (?A Int [?k' * ?m\<dots>,?m - Suc 0]) =
          {}",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 1, template_hole 9))))),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_hole 9))))),
         template_hole 0))),
    ("IL_Interval.iMODb_E",
     "[| ?x : [ ?r, mod ?m, ?c ];
         [| ?x mod ?m = ?r mod ?m; ?r <= ?x; ?x <= ?r + ?m * ?c |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))],
          template_implication
           ([template_inequation
              (less_equals, template_var 3, template_var 4)],
            template_implication
             ([template_inequation
                (less_equals, template_var 4,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("IL_Interval.iTILL_induct",
     "[| ?P 0; !!k. [| k : [\<dots>?n]; k ~= ?n; ?P k |] ==> ?P (Suc k);
         ?a : [\<dots>?n] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 2, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("IL_Interval.iMODb_trans'",
     "[| ?y : [ ?x, mod ?m, ?c ]; ?z : [ ?y, mod ?m, ?c' ];
         ?c' <= ?x div ?m + ?c - ?y div ?m |]
      ==> ?z : [ ?x, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 3),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2)),
            template_app
             (template_app (template_hole 0, template_var 5),
              template_var 3)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2))
           ))),
    ("IL_Interval.iMODb_trans",
     "[| ?y : [ ?x, mod ?m, ?c ]; ?z : [ ?y, mod ?m, ?c' ];
         ?m * ?c' <= ?x + ?m * ?c - ?y |]
      ==> ?z : [ ?x, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 3),
                template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 0),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2))),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2))
           ))),
    ("IL_Interval.iTILL_rev_induct",
     "[| ?P ?n; !!k. [| k : [\<dots>?n]; 0 < k; ?P k |] ==> ?P (k - Suc 0);
         ?a : [\<dots>?n] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("IL_Interval.iIN_inter",
     "[| ?n <= ?n'; ?n' <= ?n + ?d; ?n + ?d <= ?n' + ?d' |]
      ==> [?n\<dots>,?d] Int [?n'\<dots>,?d'] = [?n'\<dots>,?n + ?d - ?n']",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_var 2))))),
    ("IL_Interval.iMODb_iMOD_append_union",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * Suc ?c |]
      ==> [ ?r, mod ?m, ?c ] Un [ ?r', mod ?m ] = [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("IL_Interval.iMODb_cut_greater1",
     "?t : [ ?r, mod ?m, ?c ] ==>
      [ ?r, mod ?m, ?c ] \<down>> ?t =
      (if ?r + ?m * ?c <= ?t then {}
       else [ ?t + ?m, mod ?m, ?c - Suc ((?t - ?r) div ?m) ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))),
                 template_var 3)),
             template_hole 3),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1)),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2)),
                   template_var 1)))))))),
    ("IL_Interval.iIN_union",
     "[| ?n <= ?n'; ?n' <= Suc (?n + ?d); ?n + ?d <= ?n' + ?d' |]
      ==> [?n\<dots>,?d] Un [?n'\<dots>,?d'] = [?n\<dots>,?n' - ?n + ?d']",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 0))))),
    ("IL_Interval.iIN_induct",
     "[| ?P ?n;
         !!k. [| k : [?n\<dots>,?d]; k ~= ?n + ?d; ?P k |] ==> ?P (Suc k);
         ?a : [?n\<dots>,?d] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 3, template_var 0)))),
    ("IL_Interval.iIN_rev_induct",
     "[| ?P (?n + ?d);
         !!k. [| k : [?n\<dots>,?d]; k ~= ?n; ?P k |] ==> ?P (k - Suc 0);
         ?a : [?n\<dots>,?d] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 3, template_var 0)))),
    ("IL_Interval.iMODb_cut_greater",
     "[ ?r, mod ?m, ?c ] \<down>> ?t =
      (if ?t < ?r then [ ?r, mod ?m, ?c ]
       else if ?r + ?m * ?c <= ?t then {}
            else [ ?t + ?m -
                   (?t - ?r) mod
                   ?m, mod ?m, ?c - Suc ((?t - ?r) div ?m) ])",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_hole 4),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 3)),
                     template_var 2))),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 3)),
                   template_var 2)))))))),
    ("IL_Interval.iMODb_subset",
     "[| ?r <= ?r'; ?r' mod ?m = ?r mod ?m; ?m' mod ?m = 0;
         ?r' + ?m' * ?c' <= ?r + ?m * ?c |]
      ==> [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 5, template_var 5),
            template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 3),
          template_hole 4),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 3, template_var 5),
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 0)))),
    ("IL_Interval.iMODb_induct",
     "[| ?P ?r;
         !!k. [| k : [ ?r, mod ?m, ?c ]; k ~= ?r + ?m * ?c; ?P k |]
              ==> ?P (k + ?m);
         ?a : [ ?r, mod ?m, ?c ] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 4, template_var 3)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 4, template_var 0)))),
    ("IL_Interval.iMODb_rev_induct",
     "[| ?P (?r + ?m * ?c);
         !!k. [| k : [ ?r, mod ?m, ?c ]; k ~= ?r; ?P k |] ==> ?P (k - ?m);
         ?a : [ ?r, mod ?m, ?c ] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 4,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 4, template_var 0)))),
    ("IL_Interval.iMODb_cut_greater_aux",
     "[| 0 < ?m; ?t < ?r + ?m * ?c; ?r <= ?t |]
      ==> (?r + ?m * ?c - (?t + ?m - (?t - ?r) mod ?m)) div ?m =
          ?c - Suc ((?t - ?r) div ?m)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 0))),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_var 3)))),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 3)))))),
    ("IL_Interval.iMODb_cut_ge",
     "[ ?r, mod ?m, ?c ] \<down>\<ge> ?t =
      (if ?t <= ?r then [ ?r, mod ?m, ?c ]
       else if ?r + ?m * ?c < ?t then {}
            else [ ?t + ?m -
                   Suc ((?t - Suc ?r) mod
                        ?m), mod ?m, ?c - (?t + ?m - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_hole 4),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_app (template_hole 2, template_var 3))),
                       template_var 2)))),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_var 2)),
                     template_app (template_hole 2, template_var 3))),
                 template_var 2))))))),
    ("IL_Interval.iMODb_subset_conv'",
     "[| 0 < ?c; 0 < ?c' |]
      ==> ([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]) =
          (?r' mod ?m = ?r mod ?m &
           ?r <= ?r' & ?m' mod ?m = 0 & ?r' + ?m' * ?c' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 5),
        template_inequation (less_than, template_hole 9, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2),
                    template_var 4)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0),
                  template_var 5))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_var 0)),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_app
                          (template_app (template_hole 0, template_var 2),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5))))))
             )))),
    ("IL_Interval.iMODb_subset_conv",
     "[| 0 < ?m'; 0 < ?c' |]
      ==> ([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]) =
          (?r' mod ?m = ?r mod ?m &
           ?r <= ?r' & ?m' mod ?m = 0 & ?r' + ?m' * ?c' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 5),
        template_inequation (less_than, template_hole 9, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 5),
                    template_var 4)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 5),
                           template_var 1)),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0))))))
             )))),
    ("IL_Interval.iMODb_inter",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * ?c;
         ?r + ?m * ?c <= ?r' + ?m * ?c' |]
      ==> [ ?r, mod ?m, ?c ] Int [ ?r', mod ?m, ?c' ] =
          [ ?r', mod ?m, ?c - (?r' - ?r) div ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 2),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4)),
               template_var 2)))))),
    ("IL_Interval.iMODb_union",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * ?c;
         ?r + ?m * ?c <= ?r' + ?m * ?c' |]
      ==> [ ?r, mod ?m, ?c ] Un [ ?r', mod ?m, ?c' ] =
          [ ?r, mod ?m, ?r' div ?m - ?r div ?m + ?c' ]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 2),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2))),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.IL_IntervalMoreTemplates"
### 0.462s elapsed time, 0.527s cpu time, 0.000s GC time
val it = (): unit
