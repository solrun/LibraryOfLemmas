   [("IL_Interval.iFROM_card", "card [?n\<dots>] = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iTILL_Max", "Max [\<dots>?n] = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("IL_Interval.iFROM_Min", "iMin [?n\<dots>] = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("IL_Interval.iTILL_Min", "iMin [\<dots>?n] = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iFROM_icard", "icard [?n\<dots>] = \<infinity>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iFROM_iMax", "iMax [?n\<dots>] = \<infinity>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iTILL_card", "card [\<dots>?n] = Suc ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iMOD_0_Max", "Max [ ?r, mod 0 ] = ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("IL_Interval.iIN_Min", "iMin [?n\<dots>,?d] = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("IL_Interval.iMOD_Min", "iMin [ ?r, mod ?m ] = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("IL_Interval.iIN_0_iTILL_conv", "[0\<dots>,?n] = [\<dots>?n]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_imirror_ident", "imirror [\<dots>?n] = [\<dots>?n]",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_iMax", "iMax [\<dots>?n] = enat ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iIN_card", "card [?n\<dots>,?d] = Suc ?d",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iMOD_0_card", "card [ ?r, mod 0 ] = Suc 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_hole 1))),
    ("IL_Interval.iMODb_Min", "iMin [ ?r, mod ?m, ?c ] = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("IL_Interval.iIN_0", "[?n\<dots>,0] = {?n}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("IL_Interval.iMOD_0", "[ ?r, mod 0 ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("IL_Interval.iMOD_1", "[ ?r, mod Suc 0 ] = [?r\<dots>]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_icard", "icard [\<dots>?n] = enat (Suc ?n)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMOD_0_icard", "icard [ ?r, mod 0 ] = eSuc 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iMOD_0_iMax", "iMax [ ?r, mod 0 ] = enat ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iIN_Max", "Max [?n\<dots>,?d] = ?n + ?d",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iTILL_mirror_elem",
     "mirror_elem ?x [\<dots>?n] = ?n - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iFROM_inext_nth",
     "[?n\<dots>] \<rightarrow> ?a = ?n + ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iMODb_mod_0_card", "card [ ?r, mod 0, ?c ] = Suc 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_hole 1))),
    ("IL_Interval.iMODb_mod_0", "[ ?r, mod 0, ?c ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_hole 1))),
    ("IL_Interval.iMODb_0", "[ ?r, mod ?m, 0 ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_hole 1))),
    ("IL_Interval.iIN_imirror_ident",
     "imirror [?n\<dots>,?d] = [?n\<dots>,?d]",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iFROM_Suc_pred_insert_conv",
     "insert ?n [Suc ?n\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("IL_Interval.iFROM_iff", "(?x : [?n\<dots>]) = (?n <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iTILL_iff", "(?x : [\<dots>?n]) = (?x <= ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iIN_icard", "icard [?n\<dots>,?d] = enat (Suc ?d)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMODb_mod_0_icard", "icard [ ?r, mod 0, ?c ] = eSuc 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2),
           template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iMODb_mod_1", "[ ?r, mod Suc 0, ?c ] = [?r\<dots>,?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iTILL_Suc_insert_conv",
     "insert (Suc ?n) [\<dots>?n] = [\<dots>Suc ?n]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iFROM_eq_conv",
     "([?n\<dots>] = [?n'\<dots>]) = (?n = ?n')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("IL_Interval.iTILL_eq_conv",
     "([\<dots>?n] = [\<dots>?n']) = (?n = ?n')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("IL_Interval.iFROM_subset_conv",
     "([?n'\<dots>] <= [?n\<dots>]) = (?n <= ?n')",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iTILL_iFROM_subset_conv",
     "([\<dots>?n'] <= [?n\<dots>]) = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("IL_Interval.iTILL_subset_conv",
     "([\<dots>?n'] <= [\<dots>?n]) = (?n' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iIN_iMax", "iMax [?n\<dots>,?d] = enat (?n + ?d)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_inter'",
     "[?n\<dots>] Int [?n'\<dots>] = [max ?n ?n'\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iTILL_inter'",
     "[\<dots>?n] Int [\<dots>?n'] = [\<dots>min ?n ?n']",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_union'",
     "[?n\<dots>] Un [?n'\<dots>] = [min ?n ?n'\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iTILL_union'",
     "[\<dots>?n] Un [\<dots>?n'] = [\<dots>max ?n ?n']",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_imirror_ident",
     "imirror [ ?r, mod ?m, ?c ] = [ ?r, mod ?m, ?c ]",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("IL_Interval.iIN_iFROM_subset_conv",
     "([?n'\<dots>,?d'] <= [?n\<dots>]) = (?n <= ?n')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("IL_Interval.iMOD_iFROM_subset_conv",
     "([ ?r', mod ?m' ] <= [?n\<dots>]) = (?n <= ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("IL_Interval.iTILL_inext_nth_if",
     "[\<dots>?n] \<rightarrow> ?a = (if ?a <= ?n then ?a else ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0),
         template_var 1))),
    ("IL_Interval.iMODb_Max", "Max [ ?r, mod ?m, ?c ] = ?r + ?m * ?c",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_inext_nth",
     "[ ?r, mod ?m ] \<rightarrow> ?a = ?r + ?m * ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iIN_iFROM_iTILL_conv",
     "[?n\<dots>,?d] = [?n\<dots>] Int [\<dots>?n + ?d]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iIN_Suc_pred_insert_conv",
     "insert ?n [Suc ?n\<dots>,?d] = [?n\<dots>,Suc ?d]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMOD_Suc_pred_insert_conv",
     "insert ?r [ ?r + ?m, mod ?m ] = [ ?r, mod ?m ]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("IL_Interval.iIN_iFROM_append_union",
     "[?n\<dots>,?d] Un [?n + ?d\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app (template_hole 1, template_var 1))),
    ("IL_Interval.iMODb_iFROM_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [?n\<dots>]) = (?n <= ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 3))),
    ("IL_Interval.iMOD_card_if",
     "card [ ?r, mod ?m ] = (if ?m = 0 then Suc 0 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iTILL_inext_if",
     "inext ?t [\<dots>?n] = (if ?t < ?n then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("IL_Interval.iIN_iFROM_append_union_Suc",
     "[?n\<dots>,?d] Un [Suc (?n + ?d)\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app (template_hole 2, template_var 1))),
    ("IL_Interval.iIN_iTILL_subset_conv",
     "([?n'\<dots>,?d'] <= [\<dots>?n]) = (?n' + ?d' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("IL_Interval.iMOD_icard_if",
     "icard [ ?r, mod ?m ] = (if ?m = 0 then eSuc 0 else \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iMODb_iMax",
     "iMax [ ?r, mod ?m, ?c ] = enat (?r + ?m * ?c)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_inext_if",
     "inext ?t [?n\<dots>] = (if ?t : [?n\<dots>] then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("IL_Interval.iTILL_iprev_nth_if",
     "[\<dots>?n] \<leftarrow> ?a = (if ?a <= ?n then ?n - ?a else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("IL_Interval.iIN_mirror_elem",
     "mirror_elem ?x [?n\<dots>,?d] = ?n + ?n + ?d - ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iFROM_cut_ge",
     "[?n\<dots>] \<down>\<ge> ?t =
      (if ?n <= ?t then [?t\<dots>] else [?n\<dots>])",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iTILL_cut_le",
     "[\<dots>?n] \<down>\<le> ?t =
      (if ?t <= ?n then [\<dots>?t] else [\<dots>?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iFROM_pred_insert_conv",
     "insert (?n - Suc 0) [?n\<dots>] = [?n - Suc 0\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_hole 1))))),
    ("IL_Interval.iIN_Suc_insert_conv",
     "insert (Suc (?n + ?d)) [?n\<dots>,?d] = [?n\<dots>,Suc ?d]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("IL_Interval.iFROM_iprev_if",
     "iprev ?t [?n\<dots>] = (if ?n < ?t then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("IL_Interval.iMODb_card_if",
     "card [ ?r, mod ?m, ?c ] = (if ?m = 0 then Suc 0 else Suc ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iMOD_inext_nth_Suc_diff",
     "([ ?r, mod ?m ] \<rightarrow> Suc ?n) -
      ([ ?r, mod ?m ] \<rightarrow> ?n) =
      ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 1)),
    ("IL_Interval.iMODb_iMOD_iIN_conv",
     "[ ?r, mod ?m, ?c ] = [ ?r, mod ?m ] Int [?r\<dots>,?m * ?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_cut_greater",
     "[?n\<dots>] \<down>> ?t =
      (if ?n <= ?t then [Suc ?t\<dots>] else [?n\<dots>])",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 3, template_var 1)))),
    ("IL_Interval.iMOD_iIN_iMODb_conv",
     "[ ?r, mod ?m ] Int [?r\<dots>,?d] = [ ?r, mod ?m, ?d div ?m ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_Interval.iMODb_Suc_pred_insert_conv",
     "insert ?r [ ?r + ?m, mod ?m, ?c ] = [ ?r, mod ?m, Suc ?c ]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iTILL_iIN_subset_conv",
     "([\<dots>?n'] <= [?n\<dots>,?d]) = (?n = 0 & ?n' <= ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iTILL_iprev_if",
     "iprev ?t [\<dots>?n] = (if ?t : [\<dots>?n] then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("IL_Interval.iMODb_iMOD_iTILL_conv",
     "[ ?r, mod ?m, ?c ] = [ ?r, mod ?m ] Int [\<dots>?r + ?m * ?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("IL_Interval.iTILL_cut_ge",
     "[\<dots>?n] \<down>\<ge> ?t =
      (if ?n < ?t then {} else [?t\<dots>,?n - ?t])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_cut_le",
     "[?n\<dots>] \<down>\<le> ?t =
      (if ?t < ?n then {} else [?n\<dots>,?t - ?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_Interval.iIN_append_union",
     "[?n\<dots>,?d] Un [?n + ?d\<dots>,?d'] = [?n\<dots>,?d + ?d']",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iIN_iff",
     "(?x : [?n\<dots>,?d]) = (?n <= ?x & ?x <= ?n + ?d)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_iFROM_eq_conv",
     "([?n\<dots>] = [ ?r, mod ?m ]) = (?n = ?r & ?m = Suc 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_dunno)),
    ("IL_Interval.iFROM_iMOD_subset_conv",
     "([?n'\<dots>] <= [ ?r, mod ?m ]) = (?r <= ?n' & ?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iIN_eq_conv",
     "([?n\<dots>,?d] = [?n'\<dots>,?d']) = (?n = ?n' & ?d = ?d')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_dunno)),
    ("IL_Interval.iMOD_0_eq_conv",
     "([ ?r, mod 0 ] = [ ?r', mod ?m' ]) = (?r = ?r' & ?m' = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_dunno)),
    ("IL_Interval.iMOD_singleton_eq_conv",
     "([ ?r, mod ?m ] = {?a}) = (?r = ?a & ?m = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_dunno)),
    ("IL_Interval.iMOD_singleton_subset_conv",
     "([ ?r, mod ?m ] <= {?a}) = (?r = ?a & ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_dunno)),
    ("IL_Interval.iMODb_iTILL_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [\<dots>?n]) = (?r' + ?m' * ?c' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("IL_Interval.iMODb_icard_if",
     "icard [ ?r, mod ?m, ?c ] = enat (if ?m = 0 then Suc 0 else Suc ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iMOD_inext_if",
     "inext ?t [ ?r, mod ?m ] =
      (if ?t : [ ?r, mod ?m ] then ?t + ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iIN_inext_nth_if",
     "[?n\<dots>,?d] \<rightarrow> ?a =
      (if ?a <= ?d then ?n + ?a else ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("IL_Interval.iIN_iprev_nth_if",
     "[?n\<dots>,?d] \<leftarrow> ?a =
      (if ?a <= ?d then ?n + ?d - ?a else ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMODb_mirror_elem",
     "mirror_elem ?x [ ?r, mod ?m, ?c ] = ?r + ?r + ?m * ?c - ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 3))),
    ("IL_Interval.iFROM_cut_less",
     "[?n\<dots>] \<down>< ?t =
      (if ?t <= ?n then {} else [?n\<dots>,?t - Suc ?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("IL_Interval.iMODb_mod_0_subset_conv",
     "([ ?r', mod 0, ?c' ] <= [ ?r, mod ?m, ?c ]) =
      (?r' : [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_hole 1),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_0_subset_conv",
     "([ ?r', mod ?m', 0 ] <= [ ?r, mod ?m, ?c ]) =
      (?r' : [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_hole 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_inext_nth_diff",
     "([ ?r, mod ?m ] \<rightarrow> ?a) -
      ([ ?r, mod ?m ] \<rightarrow> ?b) =
      (?a - ?b) * ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iTILL_cut_greater",
     "[\<dots>?n] \<down>> ?t =
      (if ?n <= ?t then {} else [Suc ?t\<dots>,?n - Suc ?t])",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 1, template_var 0)))))),
    ("IL_Interval.iIN_append_union_Suc",
     "[?n\<dots>,?d] Un [Suc (?n + ?d)\<dots>,?d'] =
      [?n\<dots>,Suc (?d + ?d')]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMODb_Suc_insert_conv",
     "insert (?r + ?m * Suc ?c) [ ?r, mod ?m, ?c ] =
      [ ?r, mod ?m, Suc ?c ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iMOD_iff",
     "(?x : [ ?r, mod ?m ]) = (?x mod ?m = ?r mod ?m & ?r <= ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iIN_inext_if",
     "inext ?t [?n\<dots>,?d] =
      (if ?n <= ?t & ?t < ?n + ?d then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           template_app (template_hole 0, template_var 2)),
         template_var 2))),
    ("IL_Interval.iMODb_iprev_nth_if",
     "[ ?r, mod ?m, ?c ] \<leftarrow> ?a =
      (if ?a <= ?c then ?r + ?m * (?c - ?a) else ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 3))),
    ("IL_Interval.iMOD_cut_le",
     "[ ?r, mod ?m ] \<down>\<le> ?t =
      (if ?t < ?r then {} else [ ?r, mod ?m, (?t - ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1))))),
    ("IL_Interval.iIN_subset_conv",
     "([?n'\<dots>,?d'] <= [?n\<dots>,?d]) =
      (?n <= ?n' & ?n' + ?d' <= ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_0_subset_conv",
     "([ ?r', mod 0 ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iMOD_iprev_if",
     "iprev ?t [ ?r, mod ?m ] =
      (if ?t : [ ?r, mod ?m ] & ?r < ?t then ?t - ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMOD_cut_less",
     "[ ?r, mod ?m ] \<down>< ?t =
      (if ?t <= ?r then {} else [ ?r, mod ?m, (?t - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2)),
           template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_var 1))))),
    ("IL_Interval.iMODb_append_union",
     "[ ?r, mod ?m, ?c ] Un [ ?r + ?m * ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, ?c + ?c' ]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_iIN_0_eq_conv",
     "([?n\<dots>,0] = [ ?r, mod ?m, ?c ]) = (?n = ?r & (?m = 0 | ?c = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_dunno)),
    ("IL_Interval.iMODb_singleton_eq_conv",
     "([ ?r, mod ?m, ?c ] = {?a}) = (?r = ?a & (?m = 0 | ?c = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_dunno)),
    ("IL_Interval.iMODb_singleton_subset_conv",
     "([ ?r, mod ?m, ?c ] <= {?a}) = (?r = ?a & (?m = 0 | ?c = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_dunno)),
    ("IL_Interval.iMODb_0_iMOD_subset_conv",
     "([ ?r', mod ?m', 0 ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_hole 5)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iIN_iprev_if",
     "iprev ?t [?n\<dots>,?d] =
      (if ?n < ?t & ?t <= ?n + ?d then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 2),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_hole 0))),
         template_var 2))),
    ("IL_Interval.iMODb_inext_nth_if",
     "[ ?r, mod ?m, ?c ] \<rightarrow> ?a =
      (if ?a <= ?c then ?r + ?m * ?a else ?r + ?m * ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_Interval.iTILL_cut_less",
     "[\<dots>?n] \<down>< ?t =
      (if ?n < ?t then [\<dots>?n]
       else if ?t = 0 then {} else [\<dots>?t - Suc 0])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("IL_Interval.iMODb_mod_0_eq_conv",
     "([ ?r, mod 0, ?c ] = [ ?r', mod ?m', ?c' ]) =
      (?r = ?r' & (?m' = 0 | ?c' = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_hole 3),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_dunno)),
    ("IL_Interval.iMODb_0_eq_conv",
     "([ ?r, mod ?m, 0 ] = [ ?r', mod ?m', ?c' ]) =
      (?r = ?r' & (?m' = 0 | ?c' = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_dunno)),
    ("IL_Interval.iMODb_subset_mod_0_conv",
     "([ ?r', mod ?m', ?c' ] <= [ ?r, mod 0, ?c ]) =
      (?r' = ?r & (?m' = 0 | ?c' = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iMODb_subset_0_conv",
     "([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, 0 ]) =
      (?r' = ?r & (?m' = 0 | ?c' = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0),
                template_hole 3))
            )],
       template_dunno)),
    ("IL_Interval.iMODb_iprev_if",
     "iprev ?t [ ?r, mod ?m, ?c ] =
      (if ?t : [ ?r, mod ?m, ?c ] & ?r < ?t then ?t - ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 3))),
    ("IL_Interval.iMODb_append_union_Suc",
     "[ ?r, mod ?m, ?c ] Un [ ?r + ?m * Suc ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, Suc (?c + ?c') ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_var 1)))),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMODb_iIN_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [?n\<dots>,?d]) =
      (?n <= ?r' & ?r' + ?m' * ?c' <= ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 4)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("IL_Interval.iIN_cut_le",
     "[?n\<dots>,?d] \<down>\<le> ?t =
      (if ?t < ?n then {}
       else if ?t <= ?n + ?d then [?n\<dots>,?t - ?n] else [?n\<dots>,?d])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMODb_inext_if",
     "inext ?t [ ?r, mod ?m, ?c ] =
      (if ?t : [ ?r, mod ?m, ?c ] & ?t < ?r + ?m * ?c then ?t + ?m
       else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_var 3))),
    ("IL_Interval.iIN_cut_less",
     "[?n\<dots>,?d] \<down>< ?t =
      (if ?t <= ?n then {}
       else if ?t <= ?n + ?d then [?n\<dots>,?t - Suc ?n]
            else [?n\<dots>,?d])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2)))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMODb_iff",
     "(?x : [ ?r, mod ?m, ?c ]) =
      (?x mod ?m = ?r mod ?m & ?r <= ?x & ?x <= ?r + ?m * ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("IL_Interval.iIN_cut_ge",
     "[?n\<dots>,?d] \<down>\<ge> ?t =
      (if ?t < ?n then [?n\<dots>,?d]
       else if ?t <= ?n + ?d then [?t\<dots>,?n + ?d - ?t] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0))),
           template_hole 0)))),
    ("IL_Interval.iIN_cut_greater",
     "[?n\<dots>,?d] \<down>> ?t =
      (if ?t < ?n then [?n\<dots>,?d]
       else if ?t < ?n + ?d then [Suc ?t\<dots>,?n + ?d - Suc ?t] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_app (template_hole 2, template_var 0)))),
           template_hole 0)))),
    ("IL_Interval.iMOD_cut_greater",
     "[ ?r, mod ?m ] \<down>> ?t =
      (if ?t < ?r then [ ?r, mod ?m ]
       else if ?m = 0 then {} else [ ?t + ?m - (?t - ?r) mod ?m, mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("IL_Interval.iMOD_cut_ge",
     "[ ?r, mod ?m ] \<down>\<ge> ?t =
      (if ?t <= ?r then [ ?r, mod ?m ]
       else if ?m = 0 then {}
            else [ ?t + ?m - Suc ((?t - Suc ?r) mod ?m), mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("IL_Interval.iMODb_cut_le",
     "[ ?r, mod ?m, ?c ] \<down>\<le> ?t =
      (if ?t < ?r then {}
       else if ?t < ?r + ?m * ?c then [ ?r, mod ?m, (?t - ?r) div ?m ]
            else [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 3)),
           template_hole 4),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)))),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1))))),
    ("IL_Interval.iMODb_cut_less",
     "[ ?r, mod ?m, ?c ] \<down>< ?t =
      (if ?t <= ?r then {}
       else if ?r + ?m * ?c < ?t then [ ?r, mod ?m, ?c ]
            else [ ?r, mod ?m, (?t - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 3)),
           template_hole 6),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 3))),
               template_var 2)))))),
    ("IL_Interval.iMODb_cut_greater",
     "[ ?r, mod ?m, ?c ] \<down>> ?t =
      (if ?t < ?r then [ ?r, mod ?m, ?c ]
       else if ?r + ?m * ?c <= ?t then {}
            else [ ?t + ?m -
                   (?t - ?r) mod
                   ?m, mod ?m, ?c - Suc ((?t - ?r) div ?m) ])",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_hole 4),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 3)),
                     template_var 2))),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 3)),
                   template_var 2)))))))),
    ("IL_Interval.iMODb_cut_ge",
     "[ ?r, mod ?m, ?c ] \<down>\<ge> ?t =
      (if ?t <= ?r then [ ?r, mod ?m, ?c ]
       else if ?r + ?m * ?c < ?t then {}
            else [ ?t + ?m -
                   Suc ((?t - Suc ?r) mod
                        ?m), mod ?m, ?c - (?t + ?m - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_hole 4),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_app (template_hole 2, template_var 3))),
                       template_var 2)))),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_var 2)),
                     template_app (template_hole 2, template_var 3))),
                 template_var 2)))))))]
