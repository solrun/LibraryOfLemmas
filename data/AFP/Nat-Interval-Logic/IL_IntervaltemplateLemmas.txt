   [("IL_Interval.iTILL_finite", "finite [\<dots>?n]",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("IL_Interval.iIN_finite", "finite [?n\<dots>,?d]",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iMOD_0_finite", "finite [ ?r, mod 0 ]",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IL_Interval.iFROM_infinite", "infinite [?n\<dots>]",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("IL_Interval.iMODb_finite", "finite [ ?r, mod ?m, ?c ]",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iFROM_not_empty", "[?n\<dots>] ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("IL_Interval.iTILL_not_empty", "[\<dots>?n] ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("IL_Interval.iFROM_card", "card [?n\<dots>] = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iTILL_Max", "Max [\<dots>?n] = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("IL_Interval.iFROM_Min", "iMin [?n\<dots>] = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("IL_Interval.iTILL_Min", "iMin [\<dots>?n] = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iFROM_icard", "icard [?n\<dots>] = \<infinity>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iFROM_iMax", "iMax [?n\<dots>] = \<infinity>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("IL_Interval.iTILL_iFROM_subset", "[\<dots>?n'] <= [0\<dots>]",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iFROM_iTILL_neq", "[?n'\<dots>] ~= [\<dots>?n]",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_Interval.iIN_not_empty", "[?n\<dots>,?d] ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("IL_Interval.iMOD_not_empty", "[ ?r, mod ?m ] ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("IL_Interval.not_iFROM_iTILL_subset", "~ [?n'\<dots>] <= [\<dots>?n]",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("IL_Interval.iTILL_card", "card [\<dots>?n] = Suc ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iMOD_0_Max", "Max [ ?r, mod 0 ] = ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("IL_Interval.iIN_Min", "iMin [?n\<dots>,?d] = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("IL_Interval.iMOD_Min", "iMin [ ?r, mod ?m ] = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("IL_Interval.iIN_0_iTILL_conv", "[0\<dots>,?n] = [\<dots>?n]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_imirror_ident", "imirror [\<dots>?n] = [\<dots>?n]",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_iMax", "iMax [\<dots>?n] = enat ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iIN_iFROM_subset_same", "[?n\<dots>,?d] <= [?n\<dots>]",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("IL_Interval.iMOD_iFROM_subset_same", "[ ?r, mod ?m ] <= [?r\<dots>]",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("IL_Interval.iFROM_iIN_neq", "[?n'\<dots>] ~= [?n\<dots>,?d]",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iMODb_not_empty", "[ ?r, mod ?m, ?c ] ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("IL_Interval.not_iFROM_iIN_subset", "~ [?n'\<dots>] <= [?n\<dots>,?d]",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iIN_card", "card [?n\<dots>,?d] = Suc ?d",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iMOD_0_card", "card [ ?r, mod 0 ] = Suc 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_hole 1))),
    ("IL_Interval.iMODb_Min", "iMin [ ?r, mod ?m, ?c ] = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("IL_Interval.iIN_0", "[?n\<dots>,0] = {?n}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("IL_Interval.iMOD_0", "[ ?r, mod 0 ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("IL_Interval.iMOD_1", "[ ?r, mod Suc 0 ] = [?r\<dots>]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iTILL_icard", "icard [\<dots>?n] = enat (Suc ?n)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMOD_0_icard", "icard [ ?r, mod 0 ] = eSuc 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iMOD_0_iMax", "iMax [ ?r, mod 0 ] = enat ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("IL_Interval.iFROM_iMODb_neq", "[?n\<dots>] ~= [ ?r, mod ?m, ?c ]",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("IL_Interval.not_iFROM_iMODb_subset",
     "~ [?n'\<dots>] <= [ ?r, mod ?m, ?c ]",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("IL_Interval.iIN_Max", "Max [?n\<dots>,?d] = ?n + ?d",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iTILL_mirror_elem",
     "mirror_elem ?x [\<dots>?n] = ?n - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iFROM_inext_nth",
     "[?n\<dots>] \<rightarrow> ?a = ?n + ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iMODb_mod_0_card", "card [ ?r, mod 0, ?c ] = Suc 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_hole 1))),
    ("IL_Interval.iMODb_mod_0", "[ ?r, mod 0, ?c ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_hole 1))),
    ("IL_Interval.iMODb_0", "[ ?r, mod ?m, 0 ] = [?r\<dots>,0]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_hole 1))),
    ("IL_Interval.iIN_imirror_ident",
     "imirror [?n\<dots>,?d] = [?n\<dots>,?d]",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iFROM_Suc_pred_insert_conv",
     "insert ?n [Suc ?n\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("IL_Interval.iFROM_iff", "(?x : [?n\<dots>]) = (?n <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iTILL_iff", "(?x : [\<dots>?n]) = (?x <= ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iIN_icard", "icard [?n\<dots>,?d] = enat (Suc ?d)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMODb_mod_0_icard", "icard [ ?r, mod 0, ?c ] = eSuc 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2),
           template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("IL_Interval.iIN_iTILL_subset_same",
     "[?n\<dots>,?d] <= [\<dots>?n + ?d]",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_iMOD_subset_same",
     "[ ?r, mod ?m, ?c ] <= [ ?r, mod ?m ]",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("IL_Interval.iMODb_mod_1", "[ ?r, mod Suc 0, ?c ] = [?r\<dots>,?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iTILL_Suc_insert_conv",
     "insert (Suc ?n) [\<dots>?n] = [\<dots>Suc ?n]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iFROM_eq_conv",
     "([?n\<dots>] = [?n'\<dots>]) = (?n = ?n')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("IL_Interval.iTILL_eq_conv",
     "([\<dots>?n] = [\<dots>?n']) = (?n = ?n')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("IL_Interval.iFROM_subset_conv",
     "([?n'\<dots>] <= [?n\<dots>]) = (?n <= ?n')",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IL_Interval.iTILL_iFROM_subset_conv",
     "([\<dots>?n'] <= [?n\<dots>]) = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("IL_Interval.iTILL_subset_conv",
     "([\<dots>?n'] <= [\<dots>?n]) = (?n' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IL_Interval.iIN_iMax", "iMax [?n\<dots>,?d] = enat (?n + ?d)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_I", "?n <= ?x ==> ?x : [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iTILL_I", "?x <= ?n ==> ?x : [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iFROM_D", "?x : [?n\<dots>] ==> ?n <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("IL_Interval.iTILL_D", "?x : [\<dots>?n] ==> ?x <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("IL_Interval.iFROM_inter'",
     "[?n\<dots>] Int [?n'\<dots>] = [max ?n ?n'\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iTILL_inter'",
     "[\<dots>?n] Int [\<dots>?n'] = [\<dots>min ?n ?n']",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_union'",
     "[?n\<dots>] Un [?n'\<dots>] = [min ?n ?n'\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iTILL_union'",
     "[\<dots>?n] Un [\<dots>?n'] = [\<dots>max ?n ?n']",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_imirror_ident",
     "imirror [ ?r, mod ?m, ?c ] = [ ?r, mod ?m, ?c ]",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("IL_Interval.iIN_iFROM_subset_conv",
     "([?n'\<dots>,?d'] <= [?n\<dots>]) = (?n <= ?n')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("IL_Interval.iMOD_iFROM_subset_conv",
     "([ ?r', mod ?m' ] <= [?n\<dots>]) = (?n <= ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("IL_Interval.iMODb_iIN_subset_same",
     "[ ?r, mod ?m, ?c ] <= [?r\<dots>,?m * ?c]",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_infinite", "0 < ?m ==> infinite [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))
               )
           ))),
    ("IL_Interval.iTILL_Suc", "?x < ?n ==> Suc ?x : [\<dots>?n]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iFROM_subset",
     "?n <= ?n' ==> [?n'\<dots>] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iTILL_subset",
     "?n' <= ?n ==> [\<dots>?n'] <= [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iIN_geD", "?x : [?n\<dots>,?d] ==> ?n <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 2))),
    ("IL_Interval.iMOD_geD", "?x : [ ?r, mod ?m ] ==> ?r <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 2))),
    ("IL_Interval.iTILL_inext_nth_if",
     "[\<dots>?n] \<rightarrow> ?a = (if ?a <= ?n then ?a else ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0),
         template_var 1))),
    ("IL_Interval.iMODb_Max", "Max [ ?r, mod ?m, ?c ] = ?r + ?m * ?c",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_inext_nth",
     "[ ?r, mod ?m ] \<rightarrow> ?a = ?r + ?m * ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iIN_iFROM_iTILL_conv",
     "[?n\<dots>,?d] = [?n\<dots>] Int [\<dots>?n + ?d]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iIN_Suc_pred_insert_conv",
     "insert ?n [Suc ?n\<dots>,?d] = [?n\<dots>,Suc ?d]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMOD_Suc_pred_insert_conv",
     "insert ?r [ ?r + ?m, mod ?m ] = [ ?r, mod ?m ]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("IL_Interval.iIN_iFROM_append_union",
     "[?n\<dots>,?d] Un [?n + ?d\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app (template_hole 1, template_var 1))),
    ("IL_Interval.iMODb_iFROM_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [?n\<dots>]) = (?n <= ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 3))),
    ("IL_Interval.iMODb_iTILL_subset_same",
     "[ ?r, mod ?m, ?c ] <= [\<dots>?r + ?m * ?c]",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_card", "0 < ?m ==> card [ ?r, mod ?m ] = 0",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_hole 3))),
    ("IL_Interval.iMOD_icard",
     "0 < ?m ==> icard [ ?r, mod ?m ] = \<infinity>",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("IL_Interval.iMOD_iMax",
     "0 < ?m ==> iMax [ ?r, mod ?m ] = \<infinity>",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("IL_Interval.iTILL_inext_nth",
     "?a <= ?n ==> [\<dots>?n] \<rightarrow> ?a = ?a",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_var 1))),
    ("IL_Interval.iIN_iFROM_subset",
     "?n <= ?n' ==> [?n'\<dots>,?d'] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("IL_Interval.iMOD_iFROM_subset",
     "?n <= ?r' ==> [ ?r', mod ?m' ] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("IL_Interval.iTILL_iIN_subset",
     "?n' <= ?d ==> [\<dots>?n'] <= [0\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("IL_Interval.iFROM_Suc", "?x : [?n\<dots>] ==> Suc ?x : [?n\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("IL_Interval.iMODb_geD", "?x : [ ?r, mod ?m, ?c ] ==> ?r <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 2, template_var 3))),
    ("IL_Interval.iMOD_card_if",
     "card [ ?r, mod ?m ] = (if ?m = 0 then Suc 0 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_app (template_hole 0, template_hole 1)),
             template_hole 1)
           ))),
    ("IL_Interval.iTILL_inext_if",
     "inext ?t [\<dots>?n] = (if ?t < ?n then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("IL_Interval.iIN_iFROM_append_union_Suc",
     "[?n\<dots>,?d] Un [Suc (?n + ?d)\<dots>] = [?n\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app (template_hole 2, template_var 1))),
    ("IL_Interval.iIN_iTILL_subset_conv",
     "([?n'\<dots>,?d'] <= [\<dots>?n]) = (?n' + ?d' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("IL_Interval.iMOD_icard_if",
     "icard [ ?r, mod ?m ] = (if ?m = 0 then eSuc 0 else \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("IL_Interval.iMODb_iMax",
     "iMax [ ?r, mod ?m, ?c ] = enat (?r + ?m * ?c)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iTILL_iMOD_neq",
     "0 < ?m ==> [\<dots>?n] ~= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.not_iMOD_iTILL_subset",
     "0 < ?m' ==> ~ [ ?r', mod ?m' ] <= [\<dots>?n]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iTILL_iIN_neq",
     "0 < ?n ==> [\<dots>?n'] ~= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iFROM_pred", "?n < ?x ==> ?x - Suc 0 : [?n\<dots>]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iTILL_inext", "?t < ?n ==> inext ?t [\<dots>?n] = Suc ?t",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iTILL_iFROM_union",
     "?n <= ?n' ==> [\<dots>?n'] Un [?n\<dots>] = UNIV",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("IL_Interval.iMODb_iFROM_subset",
     "?n <= ?r' ==> [ ?r', mod ?m', ?c' ] <= [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 3)))),
    ("IL_Interval.iFROM_plus", "?x : [?n\<dots>] ==> ?x + ?k : [?n\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("IL_Interval.iTILL_minus",
     "?x : [\<dots>?n] ==> ?x - ?k : [\<dots>?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("IL_Interval.iIN_leD", "?x : [?n\<dots>,?d] ==> ?x <= ?n + ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_inext_if",
     "inext ?t [?n\<dots>] = (if ?t : [?n\<dots>] then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("IL_Interval.iTILL_iprev_nth_if",
     "[\<dots>?n] \<leftarrow> ?a = (if ?a <= ?n then ?n - ?a else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("IL_Interval.iIN_mirror_elem",
     "mirror_elem ?x [?n\<dots>,?d] = ?n + ?n + ?d - ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iFROM_cut_ge",
     "[?n\<dots>] \<down>\<ge> ?t =
      (if ?n <= ?t then [?t\<dots>] else [?n\<dots>])",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iTILL_cut_le",
     "[\<dots>?n] \<down>\<le> ?t =
      (if ?t <= ?n then [\<dots>?t] else [\<dots>?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iFROM_pred_insert_conv",
     "insert (?n - Suc 0) [?n\<dots>] = [?n - Suc 0\<dots>]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_hole 1))))),
    ("IL_Interval.iIN_Suc_insert_conv",
     "insert (Suc (?n + ?d)) [?n\<dots>,?d] = [?n\<dots>,Suc ?d]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("IL_Interval.iIN_iMOD_neq",
     "0 < ?m ==> [?n\<dots>,?d] ~= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("IL_Interval.iMODb_card",
     "0 < ?m ==> card [ ?r, mod ?m, ?c ] = Suc ?c",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.not_iMOD_iIN_subset",
     "0 < ?m' ==> ~ [ ?r', mod ?m' ] <= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iTILL_iprev_nth",
     "?a <= ?n ==> [\<dots>?n] \<leftarrow> ?a = ?n - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_Interval.iTILL_inter",
     "?n <= ?n' ==> [\<dots>?n] Int [\<dots>?n'] = [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iFROM_union",
     "?n <= ?n' ==> [?n\<dots>] Un [?n'\<dots>] = [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iFROM_inter",
     "?n' <= ?n ==> [?n\<dots>] Int [?n'\<dots>] = [?n\<dots>]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iTILL_union",
     "?n' <= ?n ==> [\<dots>?n] Un [\<dots>?n'] = [\<dots>?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iFROM_inext",
     "?t : [?n\<dots>] ==> inext ?t [?n\<dots>] = Suc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iFROM_iprev'",
     "?t : [?n\<dots>] ==> iprev (Suc ?t) [?n\<dots>] = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_var 1))),
    ("IL_Interval.iFROM_cut_ge1",
     "?t : [?n\<dots>] ==> [?n\<dots>] \<down>\<ge> ?t = [?t\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iTILL_cut_le1",
     "?t : [\<dots>?n] ==> [\<dots>?n] \<down>\<le> ?t = [\<dots>?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app (template_hole 2, template_var 1)))),
    ("IL_Interval.iTILL_pred",
     "?x : [\<dots>?n] ==> ?x - Suc 0 : [\<dots>?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_hole 0))),
             template_app (template_hole 3, template_var 0))
           ))),
    ("IL_Interval.iTILL_cut_ge2",
     "?t ~: [\<dots>?n] ==> [\<dots>?n] \<down>\<ge> ?t = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iTILL_cut_greater2",
     "?t ~: [\<dots>?n] ==> [\<dots>?n] \<down>> ?t = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iIN_iTILL_subset",
     "?n' + ?d' <= ?n ==> [?n'\<dots>,?d'] <= [\<dots>?n]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iMODb_imp_iMOD",
     "?x : [ ?r, mod ?m, ?c ] ==> ?x : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iFROM_iprev_if",
     "iprev ?t [?n\<dots>] = (if ?n < ?t then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("IL_Interval.iMODb_card_if",
     "card [ ?r, mod ?m, ?c ] = (if ?m = 0 then Suc 0 else Suc ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 1)),
               template_app (template_hole 0, template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("IL_Interval.iMOD_inext_nth_Suc_diff",
     "([ ?r, mod ?m ] \<rightarrow> Suc ?n) -
      ([ ?r, mod ?m ] \<rightarrow> ?n) =
      ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 1)),
    ("IL_Interval.iMODb_iMOD_iIN_conv",
     "[ ?r, mod ?m, ?c ] = [ ?r, mod ?m ] Int [?r\<dots>,?m * ?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_cut_greater",
     "[?n\<dots>] \<down>> ?t =
      (if ?n <= ?t then [Suc ?t\<dots>] else [?n\<dots>])",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 3, template_var 1)))),
    ("IL_Interval.iMOD_iIN_iMODb_conv",
     "[ ?r, mod ?m ] Int [?r\<dots>,?d] = [ ?r, mod ?m, ?d div ?m ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IL_Interval.iMODb_Suc_pred_insert_conv",
     "insert ?r [ ?r + ?m, mod ?m, ?c ] = [ ?r, mod ?m, Suc ?c ]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iTILL_iIN_subset_conv",
     "([\<dots>?n'] <= [?n\<dots>,?d]) = (?n = 0 & ?n' <= ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_iMODb_neq",
     "0 < ?m ==> [ ?r, mod ?m ] ~= [ ?r', mod ?m', ?c' ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 4)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iMODb_icard",
     "0 < ?m ==> icard [ ?r, mod ?m, ?c ] = enat (Suc ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("IL_Interval.not_iMOD_iMODb_subset",
     "0 < ?m' ==> ~ [ ?r', mod ?m' ] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 4)],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iFROM_iprev",
     "?n < ?t ==> iprev ?t [?n\<dots>] = ?t - Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_Interval.iFROM_iprev_diff_const",
     "?n < ?t ==> ?t - iprev ?t [?n\<dots>] = Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iTILL_inext_diff_const",
     "?t < ?n ==> inext ?t [\<dots>?n] - ?t = Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0))),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iIN_inext_nth",
     "?a <= ?d ==> [?n\<dots>,?d] \<rightarrow> ?a = ?n + ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("IL_Interval.iFROM_cut_greater1",
     "?t : [?n\<dots>] ==> [?n\<dots>] \<down>> ?t = [Suc ?t\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 1))))),
    ("IL_Interval.iFROM_iMOD_neq",
     "?m ~= Suc 0 ==> [?n\<dots>] ~= [ ?r, mod ?m ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 4, template_hole 3))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.not_iFROM_iMOD_subset",
     "?m ~= Suc 0 ==> ~ [?n'\<dots>] <= [ ?r, mod ?m ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 4, template_hole 3))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.iTILL_cut_le2",
     "?t ~: [\<dots>?n] ==> [\<dots>?n] \<down>\<le> ?t = [\<dots>?n]",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("IL_Interval.iMOD_0_cut_greater",
     "?t : [ ?r, mod 0 ] ==> [ ?r, mod 0 ] \<down>> ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iMOD_modD",
     "?x : [ ?r, mod ?m ] ==> ?x mod ?m = ?r mod ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_plus_divisor",
     "?x : [ ?r, mod ?m ] ==> ?x + ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_subset_imp_divisor_mod_0",
     "[ ?r', mod ?m' ] <= [ ?r, mod ?m ] ==> ?m' mod ?m = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("IL_Interval.iTILL_iprev_if",
     "iprev ?t [\<dots>?n] = (if ?t : [\<dots>?n] then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("IL_Interval.iMODb_iMOD_iTILL_conv",
     "[ ?r, mod ?m, ?c ] = [ ?r, mod ?m ] Int [\<dots>?r + ?m * ?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("IL_Interval.iTILL_cut_ge",
     "[\<dots>?n] \<down>\<ge> ?t =
      (if ?n < ?t then {} else [?t\<dots>,?n - ?t])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_cut_le",
     "[?n\<dots>] \<down>\<le> ?t =
      (if ?t < ?n then {} else [?n\<dots>,?t - ?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_Interval.iIN_append_union",
     "[?n\<dots>,?d] Un [?n + ?d\<dots>,?d'] = [?n\<dots>,?d + ?d']",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iIN_iff",
     "(?x : [?n\<dots>,?d]) = (?n <= ?x & ?x <= ?n + ?d)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_iFROM_eq_conv",
     "([?n\<dots>] = [ ?r, mod ?m ]) = (?n = ?r & ?m = Suc 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("IL_Interval.iFROM_iMOD_subset_conv",
     "([?n'\<dots>] <= [ ?r, mod ?m ]) = (?r <= ?n' & ?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("IL_Interval.iIN_eq_conv",
     "([?n\<dots>,?d] = [?n'\<dots>,?d']) = (?n = ?n' & ?d = ?d')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_0_eq_conv",
     "([ ?r, mod 0 ] = [ ?r', mod ?m' ]) = (?r = ?r' & ?m' = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 2))
           ))),
    ("IL_Interval.iMOD_singleton_eq_conv",
     "([ ?r, mod ?m ] = {?a}) = (?r = ?a & ?m = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("IL_Interval.iMOD_singleton_subset_conv",
     "([ ?r, mod ?m ] <= {?a}) = (?r = ?a & ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("IL_Interval.iMODb_iTILL_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [\<dots>?n]) = (?r' + ?m' * ?c' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("IL_Interval.iMODb_icard_if",
     "icard [ ?r, mod ?m, ?c ] = enat (if ?m = 0 then Suc 0 else Suc ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_app (template_hole 0, template_hole 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("IL_Interval.iIN_iFROM_inext_nth",
     "?a <= ?d ==>
      [?n\<dots>,?d] \<rightarrow> ?a = [?n\<dots>] \<rightarrow> ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)),
           template_var 2)))),
    ("IL_Interval.iFROM_inext_diff_const",
     "?t : [?n\<dots>] ==> inext ?t [?n\<dots>] - ?t = Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iTILL_iprev",
     "?t : [\<dots>?n] ==> iprev ?t [\<dots>?n] = ?t - Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 5, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_Interval.iMODb_modD",
     "?x : [ ?r, mod ?m, ?c ] ==> ?x mod ?m = ?r mod ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("IL_Interval.iMODb_leD",
     "?x : [ ?r, mod ?m, ?c ] ==> ?x <= ?r + ?m * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iFROM_E",
     "[| ?x : [?n\<dots>]; ?n <= ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("IL_Interval.iTILL_E",
     "[| ?x : [\<dots>?n]; ?x <= ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("IL_Interval.iMOD_inext_if",
     "inext ?t [ ?r, mod ?m ] =
      (if ?t : [ ?r, mod ?m ] then ?t + ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iIN_inext_nth_if",
     "[?n\<dots>,?d] \<rightarrow> ?a =
      (if ?a <= ?d then ?n + ?a else ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("IL_Interval.iIN_iprev_nth_if",
     "[?n\<dots>,?d] \<leftarrow> ?a =
      (if ?a <= ?d then ?n + ?d - ?a else ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMODb_mirror_elem",
     "mirror_elem ?x [ ?r, mod ?m, ?c ] = ?r + ?r + ?m * ?c - ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 3))),
    ("IL_Interval.iFROM_cut_less",
     "[?n\<dots>] \<down>< ?t =
      (if ?t <= ?n then {} else [?n\<dots>,?t - Suc ?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("IL_Interval.iMODb_mod_0_subset_conv",
     "([ ?r', mod 0, ?c' ] <= [ ?r, mod ?m, ?c ]) =
      (?r' : [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_hole 1),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_0_subset_conv",
     "([ ?r', mod ?m', 0 ] <= [ ?r, mod ?m, ?c ]) =
      (?r' : [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_hole 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IL_Interval.iFROM_cut_less1",
     "?n < ?t ==> [?n\<dots>] \<down>< ?t = [?n\<dots>,?t - Suc ?n]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("IL_Interval.iIN_iprev_nth",
     "?a <= ?d ==> [?n\<dots>,?d] \<leftarrow> ?a = ?n + ?d - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("IL_Interval.iFROM_iTILL_iIN_conv",
     "?n <= ?n' ==> [?n\<dots>] Int [\<dots>?n'] = [?n\<dots>,?n' - ?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_Interval.iFROM_cut_le1",
     "?t : [?n\<dots>] ==>
      [?n\<dots>] \<down>\<le> ?t = [?n\<dots>,?t - ?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iTILL_cut_ge1",
     "?t : [\<dots>?n] ==>
      [\<dots>?n] \<down>\<ge> ?t = [?t\<dots>,?n - ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IL_Interval.iMOD_inext",
     "?t : [ ?r, mod ?m ] ==> inext ?t [ ?r, mod ?m ] = ?t + ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_inext_diff_const",
     "?t : [ ?r, mod ?m ] ==> inext ?t [ ?r, mod ?m ] - ?t = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 2),
         template_var 0))),
    ("IL_Interval.iMOD_iprev'",
     "?t : [ ?r, mod ?m ] ==> iprev (?t + ?m) [ ?r, mod ?m ] = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMOD_cut_ge1",
     "?t : [ ?r, mod ?m ] ==>
      [ ?r, mod ?m ] \<down>\<ge> ?t = [ ?t, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_plus_divisor_mult",
     "?x : [ ?r, mod ?m ] ==> ?x + ?k * ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMODb_0_cut_greater",
     "?t : [ ?r, mod 0, ?c ] ==> [ ?r, mod 0, ?c ] \<down>> ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("IL_Interval.iMODb_iTILL_subset",
     "?r' + ?m' * ?c' <= ?n ==> [ ?r', mod ?m', ?c' ] <= [\<dots>?n]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IL_Interval.iFROM_trans",
     "[| ?y : [?x\<dots>]; ?z : [?y\<dots>] |] ==> ?z : [?x\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iTILL_trans",
     "[| ?y : [\<dots>?x]; ?z : [\<dots>?y] |] ==> ?z : [\<dots>?x]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("IL_Interval.iMOD_inext_nth_diff",
     "([ ?r, mod ?m ] \<rightarrow> ?a) -
      ([ ?r, mod ?m ] \<rightarrow> ?b) =
      (?a - ?b) * ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iTILL_cut_greater",
     "[\<dots>?n] \<down>> ?t =
      (if ?n <= ?t then {} else [Suc ?t\<dots>,?n - Suc ?t])",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 1, template_var 0)))))),
    ("IL_Interval.iIN_append_union_Suc",
     "[?n\<dots>,?d] Un [Suc (?n + ?d)\<dots>,?d'] =
      [?n\<dots>,Suc (?d + ?d')]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMODb_Suc_insert_conv",
     "insert (?r + ?m * Suc ?c) [ ?r, mod ?m, ?c ] =
      [ ?r, mod ?m, Suc ?c ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iMOD_iff",
     "(?x : [ ?r, mod ?m ]) = (?x mod ?m = ?r mod ?m & ?r <= ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("IL_Interval.iMODb_inext_nth",
     "?a <= ?c ==> [ ?r, mod ?m, ?c ] \<rightarrow> ?a = ?r + ?m * ?a",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("IL_Interval.iMOD_iMODb_inext_nth",
     "?a <= ?c ==>
      [ ?r, mod ?m, ?c ] \<rightarrow> ?a =
      [ ?r, mod ?m ] \<rightarrow> ?a",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 3)))),
    ("IL_Interval.iFROM_iprev_diff_const'",
     "?t : [?n\<dots>] ==> Suc ?t - iprev (Suc ?t) [?n\<dots>] = Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 2, template_hole 0)))),
    ("IL_Interval.iIN_iFROM_inext",
     "?a < ?n + ?d ==> inext ?a [?n\<dots>,?d] = inext ?a [?n\<dots>]",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 1))))),
    ("IL_Interval.iIN_I",
     "[| ?n <= ?x; ?x <= ?n + ?d |] ==> ?x : [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_pred_insert_conv",
     "?m <= ?r ==> insert (?r - ?m) [ ?r, mod ?m ] = [ ?r - ?m, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("IL_Interval.iIN_cut_le1",
     "?t : [?n\<dots>,?d] ==>
      [?n\<dots>,?d] \<down>\<le> ?t = [?n\<dots>,?t - ?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMOD_Suc",
     "?x : [ ?r, mod ?m ] ==> (Suc ?x : [ ?r, mod ?m ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 2, template_var 2)),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 0,
           template_app (template_hole 2, template_hole 0))))),
    ("IL_Interval.iIN_inext_if",
     "inext ?t [?n\<dots>,?d] =
      (if ?n <= ?t & ?t < ?n + ?d then Suc ?t else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           template_app (template_hole 0, template_var 2)),
         template_var 2))),
    ("IL_Interval.iMODb_iprev_nth_if",
     "[ ?r, mod ?m, ?c ] \<leftarrow> ?a =
      (if ?a <= ?c then ?r + ?m * (?c - ?a) else ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 3))),
    ("IL_Interval.iMOD_cut_le",
     "[ ?r, mod ?m ] \<down>\<le> ?t =
      (if ?t < ?r then {} else [ ?r, mod ?m, (?t - ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1))))),
    ("IL_Interval.iIN_subset_conv",
     "([?n'\<dots>,?d'] <= [?n\<dots>,?d]) =
      (?n <= ?n' & ?n' + ?d' <= ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMOD_0_subset_conv",
     "([ ?r', mod 0 ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("IL_Interval.iIN_iFROM_append_union_pred",
     "0 < ?d ==> [?n\<dots>,?d - Suc 0] Un [?n + ?d\<dots>] = [?n\<dots>]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_hole 7)))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app (template_hole 1, template_var 0)))),
    ("IL_Interval.iIN_iTILL_iTILL_conv",
     "0 < ?n ==> [?n\<dots>,?d] = [\<dots>?n + ?d] - [\<dots>?n - Suc 0]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_hole 7))))))),
    ("IL_Interval.iMODb_iprev_nth",
     "?a <= ?c ==>
      [ ?r, mod ?m, ?c ] \<leftarrow> ?a = ?r + ?m * (?c - ?a)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)))))),
    ("IL_Interval.iIN_iFROM_union",
     "?n' <= Suc (?n + ?d) ==>
      [?n\<dots>,?d] Un [?n'\<dots>] = [min ?n ?n'\<dots>]",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IL_Interval.not_iTILL_iMOD_subset",
     "[| 0 < ?n'; ?m ~= Suc 0 |] ==> ~ [\<dots>?n'] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.iFROM_minus",
     "[| ?x : [?n\<dots>]; ?k <= ?x - ?n |] ==> ?x - ?k : [?n\<dots>]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 2, template_var 1))
           ))),
    ("IL_Interval.iTILL_plus",
     "[| ?x : [\<dots>?n]; ?k <= ?n - ?x |] ==> ?x + ?k : [\<dots>?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 3, template_var 1))
           ))),
    ("IL_Interval.iMOD_trans",
     "[| ?y : [ ?x, mod ?m ]; ?z : [ ?y, mod ?m ] |]
      ==> ?z : [ ?x, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_I",
     "[| ?x mod ?m = ?r mod ?m; ?r <= ?x |] ==> ?x : [ ?r, mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_iprev_if",
     "iprev ?t [ ?r, mod ?m ] =
      (if ?t : [ ?r, mod ?m ] & ?r < ?t then ?t - ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 2))),
    ("IL_Interval.iMOD_cut_less",
     "[ ?r, mod ?m ] \<down>< ?t =
      (if ?t <= ?r then {} else [ ?r, mod ?m, (?t - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2)),
           template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_var 1))))),
    ("IL_Interval.iMODb_append_union",
     "[ ?r, mod ?m, ?c ] Un [ ?r + ?m * ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, ?c + ?c' ]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMODb_iIN_0_eq_conv",
     "([?n\<dots>,0] = [ ?r, mod ?m, ?c ]) = (?n = ?r & (?m = 0 | ?c = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 4)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 4)))
           ))),
    ("IL_Interval.iMODb_singleton_eq_conv",
     "([ ?r, mod ?m, ?c ] = {?a}) = (?r = ?a & (?m = 0 | ?c = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))
           ))),
    ("IL_Interval.iMODb_singleton_subset_conv",
     "([ ?r, mod ?m, ?c ] <= {?a}) = (?r = ?a & (?m = 0 | ?c = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))
           ))),
    ("IL_Interval.iMODb_0_iMOD_subset_conv",
     "([ ?r', mod ?m', 0 ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_hole 5)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("IL_Interval.iMOD_eq_conv",
     "0 < ?m ==>
      ([ ?r, mod ?m ] = [ ?r', mod ?m' ]) = (?r = ?r' & ?m = ?m')",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 3)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))
             )))),
    ("IL_Interval.iTILL_iMOD_subset_conv",
     "0 < ?n' ==> ([\<dots>?n'] <= [ ?r, mod ?m ]) = (?r = 0 & ?m = Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 7)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_hole 7)))
             )))),
    ("IL_Interval.iMOD_iTILL_iMODb_conv",
     "?r <= ?n ==>
      [ ?r, mod ?m ] Int [\<dots>?n] = [ ?r, mod ?m, (?n - ?r) div ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("IL_Interval.iTILL_imirror_bounds",
     "?n <= ?l + ?r ==>
      imirror_bounds [\<dots>?n] ?l ?r = [?l + ?r - ?n\<dots>,?n]",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_var 2)),
           template_var 2)))),
    ("IL_Interval.iIN_cut_ge1",
     "?t : [?n\<dots>,?d] ==>
      [?n\<dots>,?d] \<down>\<ge> ?t = [?t\<dots>,?n + ?d - ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("IL_Interval.iMOD_iprev_diff_const'",
     "?t : [ ?r, mod ?m ] ==>
      ?t + ?m - iprev (?t + ?m) [ ?r, mod ?m ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_var 0))),
    ("IL_Interval.iMOD_plus",
     "?x : [ ?r, mod ?m ] ==> (?x + ?k : [ ?r, mod ?m ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 0)),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0)))),
    ("IL_Interval.not_iIN_iMOD_subset",
     "[| 0 < ?d'; ?m ~= Suc 0 |] ==> ~ [?n'\<dots>,?d'] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 3),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("IL_Interval.not_iTILL_iMODb_subset",
     "[| 0 < ?n'; ?m ~= Suc 0 |] ==> ~ [\<dots>?n'] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 3),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iIN_inext",
     "[| ?n <= ?t; ?t < ?n + ?d |] ==> inext ?t [?n\<dots>,?d] = Suc ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("IL_Interval.iIN_iprev'",
     "[| ?n <= ?t; ?t < ?n + ?d |] ==> iprev (Suc ?t) [?n\<dots>,?d] = ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IL_Interval.iTILL_iprev_diff_const",
     "[| ?t : [\<dots>?n]; 0 < ?t |] ==> ?t - iprev ?t [\<dots>?n] = Suc 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 0, template_hole 4)))),
    ("IL_Interval.iTILL_iMODb_neq",
     "[| ?m ~= Suc 0; 0 < ?n |] ==> [\<dots>?n] ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 5, template_hole 4))
            ),
        template_inequation (less_than, template_hole 4, template_var 2)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("IL_Interval.iIN_pred",
     "[| ?x : [?n\<dots>,?d]; ?n < ?x |] ==> ?x - Suc 0 : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_hole 0))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iIN_Suc",
     "[| ?x : [?n\<dots>,?d]; ?x < ?n + ?d |] ==> Suc ?x : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iIN_iprev_if",
     "iprev ?t [?n\<dots>,?d] =
      (if ?n < ?t & ?t <= ?n + ?d then ?t - Suc 0 else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 2),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_hole 0))),
         template_var 2))),
    ("IL_Interval.iMODb_inext_nth_if",
     "[ ?r, mod ?m, ?c ] \<rightarrow> ?a =
      (if ?a <= ?c then ?r + ?m * ?a else ?r + ?m * ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_Interval.iTILL_cut_less",
     "[\<dots>?n] \<down>< ?t =
      (if ?n < ?t then [\<dots>?n]
       else if ?t = 0 then {} else [\<dots>?t - Suc 0])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_hole 2),
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_hole 3)))))
           ))),
    ("IL_Interval.iMODb_mod_0_eq_conv",
     "([ ?r, mod 0, ?c ] = [ ?r', mod ?m', ?c' ]) =
      (?r = ?r' & (?m' = 0 | ?c' = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_hole 3),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 3)))
           ))),
    ("IL_Interval.iMODb_0_eq_conv",
     "([ ?r, mod ?m, 0 ] = [ ?r', mod ?m', ?c' ]) =
      (?r = ?r' & (?m' = 0 | ?c' = 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 3)))
           ))),
    ("IL_Interval.iMODb_subset_mod_0_conv",
     "([ ?r', mod ?m', ?c' ] <= [ ?r, mod 0, ?c ]) =
      (?r' = ?r & (?m' = 0 | ?c' = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 3)))
           ))),
    ("IL_Interval.iMODb_subset_0_conv",
     "([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, 0 ]) =
      (?r' = ?r & (?m' = 0 | ?c' = 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 3)))
           ))),
    ("IL_Interval.iIN_iMOD_subset_conv",
     "0 < ?d' ==>
      ([?n'\<dots>,?d'] <= [ ?r, mod ?m ]) = (?r <= ?n' & ?m = Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 3)),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_hole 8)))
             )))),
    ("IL_Interval.mod_partition_Union",
     "0 < ?m ==> (UN k. ?A Int [k * ?m\<dots>,?m - Suc 0]) = ?A",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_hole 0)),
         template_var 0))),
    ("IL_Interval.iIN_pred_insert_conv",
     "0 < ?n ==>
      insert (?n - Suc 0) [?n\<dots>,?d] = [?n - Suc 0\<dots>,Suc ?d]",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 5))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 5))),
           template_app (template_hole 1, template_var 0))))),
    ("IL_Interval.iMODb_pred_insert_conv",
     "?m <= ?r ==>
      insert (?r - ?m) [ ?r, mod ?m, ?c ] = [ ?r - ?m, mod ?m, Suc ?c ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("IL_Interval.iMOD_cut_le1",
     "?t : [ ?r, mod ?m ] ==>
      [ ?r, mod ?m ] \<down>\<le> ?t = [ ?r, mod ?m, (?t - ?r) div ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("IL_Interval.iMOD_iMODb_inext",
     "?a < ?r + ?m * ?c ==>
      inext ?a [ ?r, mod ?m, ?c ] = inext ?a [ ?r, mod ?m ]",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMODb_subset_imp_divisor_mod_0",
     "[| 0 < ?c'; [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ] |]
      ==> ?m' mod ?m = 0",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 5),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_var 5),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_hole 4))),
    ("IL_Interval.not_iIN_iMODb_subset",
     "[| 0 < ?d'; ?m ~= Suc 0 |]
      ==> ~ [?n'\<dots>,?d'] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 4),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 3, template_hole 6))
            )],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("IL_Interval.mod_cut_greater_aux_t_less",
     "[| 0 < ?m; ?r <= ?t |] ==> ?t < ?t + ?m - (?t - ?r) mod ?m",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_var 2))))),
    ("IL_Interval.iIN_subset",
     "[| ?n <= ?n'; ?n' + ?d' <= ?n + ?d |]
      ==> [?n'\<dots>,?d'] <= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("IL_Interval.iTILL_cut_less1",
     "[| ?t : [\<dots>?n]; 0 < ?t |]
      ==> [\<dots>?n] \<down>< ?t = [\<dots>?t - Suc 0]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 0)),
           template_var 1),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_hole 4)))))),
    ("IL_Interval.iIN_iMODb_neq2",
     "[| ?m ~= Suc 0; 0 < ?d |] ==> [?n\<dots>,?d] ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 4,
              template_app (template_hole 5, template_hole 4))
            ),
        template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 0))
           ))),
    ("IL_Interval.iIN_iMODb_neq",
     "[| 2 <= ?m; 0 < ?c |] ==> [?n\<dots>,?d] ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 4),
        template_inequation (less_than, template_hole 4, template_var 3)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4),
               template_var 3))
           ))),
    ("IL_Interval.iMOD_mem_diff",
     "[| ?a : [ ?r, mod ?m ]; ?b : [ ?r, mod ?m ] |]
      ==> (?a - ?b) mod ?m = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("IL_Interval.iMOD_iprev",
     "[| ?t : [ ?r, mod ?m ]; ?r < ?t |]
      ==> iprev ?t [ ?r, mod ?m ] = ?t - ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_iprev_diff_const",
     "[| ?t : [ ?r, mod ?m ]; ?r < ?t |]
      ==> ?t - iprev ?t [ ?r, mod ?m ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_var 0))),
    ("IL_Interval.iIN_minus",
     "[| ?x : [?n\<dots>,?d]; ?k <= ?x - ?n |]
      ==> ?x - ?k : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_minus_divisor",
     "[| ?x : [ ?r, mod ?m ]; ?m + ?r <= ?x |]
      ==> ?x - ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iMODb_iprev_if",
     "iprev ?t [ ?r, mod ?m, ?c ] =
      (if ?t : [ ?r, mod ?m, ?c ] & ?r < ?t then ?t - ?m else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 3))),
    ("IL_Interval.iMODb_append_union_Suc",
     "[ ?r, mod ?m, ?c ] Un [ ?r + ?m * Suc ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, Suc (?c + ?c') ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_var 1)))),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("IL_Interval.iMODb_iIN_subset_conv",
     "([ ?r', mod ?m', ?c' ] <= [?n\<dots>,?d]) =
      (?n <= ?r' & ?r' + ?m' * ?c' <= ?n + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 4)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("IL_Interval.iIN_cut_ge2",
     "?t ~: [?n\<dots>,?d] ==>
      [?n\<dots>,?d] \<down>\<ge> ?t =
      (if ?t < ?n then [?n\<dots>,?d] else {})",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("IL_Interval.iMOD_inter'",
     "?r mod ?m = ?r' mod ?m ==>
      [ ?r, mod ?m ] Int [ ?r', mod ?m ] = [ max ?r ?r', mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_Interval.iMOD_union'",
     "?r mod ?m = ?r' mod ?m ==>
      [ ?r, mod ?m ] Un [ ?r', mod ?m ] = [ min ?r ?r', mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("IL_Interval.iIN_iprev",
     "[| ?n < ?t; ?t <= ?n + ?d |]
      ==> iprev ?t [?n\<dots>,?d] = ?t - Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("IL_Interval.iIN_iprev_diff_const",
     "[| ?n < ?t; ?t <= ?n + ?d |]
      ==> ?t - iprev ?t [?n\<dots>,?d] = Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iIN_inext_diff_const",
     "[| ?n <= ?t; ?t < ?n + ?d |]
      ==> inext ?t [?n\<dots>,?d] - ?t = Suc 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("IL_Interval.iMOD_imp_iMODb",
     "[| ?x : [ ?r, mod ?m ]; ?x <= ?r + ?m * ?c |]
      ==> ?x : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.iIN_append_union_pred",
     "0 < ?d ==>
      [?n\<dots>,?d - Suc 0] Un [?n + ?d\<dots>,?d'] =
      [?n\<dots>,?d + ?d']",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_hole 6)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("IL_Interval.iMOD_cut_greater1",
     "?t : [ ?r, mod ?m ] ==>
      [ ?r, mod ?m ] \<down>> ?t =
      (if ?m = 0 then {} else [ ?t + ?m, mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_var 2)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 0))
             )))),
    ("IL_Interval.iMODb_cut_le1",
     "?t : [ ?r, mod ?m, ?c ] ==>
      [ ?r, mod ?m, ?c ] \<down>\<le> ?t =
      [ ?r, mod ?m, (?t - ?r) div ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1))))),
    ("IL_Interval.iTILL_cut_greater1",
     "[| ?t : [\<dots>?n]; ?t < ?n |]
      ==> [\<dots>?n] \<down>> ?t = [Suc ?t\<dots>,?n - Suc ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 6, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 1, template_var 1)))))),
    ("IL_Interval.iIN_plus",
     "[| ?x : [?n\<dots>,?d]; ?k <= ?n + ?d - ?x |]
      ==> ?x + ?k : [?n\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iIN_E",
     "[| ?x : [?n\<dots>,?d]; [| ?n <= ?x; ?x <= ?n + ?d |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 3)],
          template_implication
           ([template_inequation
              (less_equals, template_var 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("IL_Interval.iMODb_mem_diff",
     "[| ?a : [ ?r, mod ?m, ?c ]; ?b : [ ?r, mod ?m, ?c ] |]
      ==> (?a - ?b) mod ?m = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("IL_Interval.iMODb_iprev",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?r < ?t |]
      ==> iprev ?t [ ?r, mod ?m, ?c ] = ?t - ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("IL_Interval.iMODb_iprev_diff_const",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?r < ?t |]
      ==> ?t - iprev ?t [ ?r, mod ?m, ?c ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_var 1))),
    ("IL_Interval.iMODb_subset_imp_iMOD_subset",
     "[| [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]; 0 < ?c' |]
      ==> [ ?r', mod ?m' ] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 1, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 5), template_var 4),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("IL_Interval.iMODb_iIN_subset",
     "[| ?n <= ?r'; ?r' + ?m' * ?c' <= ?n + ?d |]
      ==> [ ?r', mod ?m', ?c' ] <= [?n\<dots>,?d]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 0)))),
    ("IL_Interval.iIN_iprev_diff_const'",
     "[| ?n <= ?t; ?t < ?n + ?d |]
      ==> Suc ?t - iprev (Suc ?t) [?n\<dots>,?d] = Suc 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app (template_hole 3, template_hole 0)))),
    ("IL_Interval.iIN_cut_less1",
     "[| ?t : [?n\<dots>,?d]; ?n < ?t |]
      ==> [?n\<dots>,?d] \<down>< ?t = [?n\<dots>,?t - Suc ?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1)))))),
    ("IL_Interval.Suc_in_imp_neq_iMOD",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |] ==> ?S ~= [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.Suc_in_imp_not_subset_iMOD",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |] ==> ~ ?S <= [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_var 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IL_Interval.iIN_cut_le",
     "[?n\<dots>,?d] \<down>\<le> ?t =
      (if ?t < ?n then {}
       else if ?t <= ?n + ?d then [?n\<dots>,?t - ?n] else [?n\<dots>,?d])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))))),
    ("IL_Interval.iIN_imirror_bounds",
     "?n + ?d <= ?l + ?r ==>
      imirror_bounds [?n\<dots>,?d] ?l ?r = [?l + ?r - ?n - ?d\<dots>,?d]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0)),
                   template_var 3)),
               template_var 2)),
           template_var 2)))),
    ("IL_Interval.iMOD_inter",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m |]
      ==> [ ?r, mod ?m ] Int [ ?r', mod ?m ] = [ ?r', mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IL_Interval.iMOD_union",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m |]
      ==> [ ?r, mod ?m ] Un [ ?r', mod ?m ] = [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IL_Interval.iMOD_pred",
     "[| ?x : [ ?r, mod ?m ]; ?r < ?x |]
      ==> (?x - Suc 0 : [ ?r, mod ?m ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app (template_hole 2, template_hole 1))),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 0,
           template_app (template_hole 2, template_hole 1))))),
    ("IL_Interval.iMOD_minus_divisor_mult2",
     "[| ?x : [ ?r, mod ?m ]; ?k <= (?x - ?r) div ?m |]
      ==> ?x - ?k * ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_minus_divisor_mult",
     "[| ?x : [ ?r, mod ?m ]; ?k * ?m <= ?x - ?r |]
      ==> ?x - ?k * ?m : [ ?r, mod ?m ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_E",
     "[| ?x : [ ?r, mod ?m ];
         [| ?x mod ?m = ?r mod ?m; ?r <= ?x |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))],
          template_implication
           ([template_inequation
              (less_equals, template_var 2, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("IL_Interval.iMODb_plus_divisor",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?x < ?r + ?m * ?c |]
      ==> ?x + ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("IL_Interval.Suc_in_imp_neq_iMODb",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |] ==> ?S ~= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_equation
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.Suc_in_imp_not_subset_iMODb",
     "[| ?n : ?S; Suc ?n : ?S; ?m ~= Suc 0 |]
      ==> ~ ?S <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 5, template_hole 2))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_var 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMODb_inext_if",
     "inext ?t [ ?r, mod ?m, ?c ] =
      (if ?t : [ ?r, mod ?m, ?c ] & ?t < ?r + ?m * ?c then ?t + ?m
       else ?t)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_var 3))),
    ("IL_Interval.iIN_cut_less",
     "[?n\<dots>,?d] \<down>< ?t =
      (if ?t <= ?n then {}
       else if ?t <= ?n + ?d then [?n\<dots>,?t - Suc ?n]
            else [?n\<dots>,?d])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2)))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))))),
    ("IL_Interval.iMODb_iff",
     "(?x : [ ?r, mod ?m, ?c ]) =
      (?x mod ?m = ?r mod ?m & ?r <= ?x & ?x <= ?r + ?m * ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("IL_Interval.iMODb_iIN_eq_conv",
     "0 < ?d ==>
      ([?n\<dots>,?d] = [ ?r, mod ?m, ?c ]) =
      (?n = ?r & ?m = Suc 0 & ?c = ?d)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 4)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 0, template_hole 7))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)))
             )))),
    ("IL_Interval.iIN_cut_ge",
     "[?n\<dots>,?d] \<down>\<ge> ?t =
      (if ?t < ?n then [?n\<dots>,?d]
       else if ?t <= ?n + ?d then [?t\<dots>,?n + ?d - ?t] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0))),
           template_hole 0)))),
    ("IL_Interval.iMOD_minus",
     "[| ?x : [ ?r, mod ?m ]; ?k <= ?x - ?r |]
      ==> (?x - ?k : [ ?r, mod ?m ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 0)),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0)))),
    ("IL_Interval.iMODb_inext",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> inext ?t [ ?r, mod ?m, ?c ] = ?t + ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 1)))),
    ("IL_Interval.iMODb_inext_diff_const",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> inext ?t [ ?r, mod ?m, ?c ] - ?t = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_var 3),
         template_var 1))),
    ("IL_Interval.iMODb_iprev'",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> iprev (?t + ?m) [ ?r, mod ?m, ?c ] = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 3))),
    ("IL_Interval.iMODb_pred",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?r < ?x |]
      ==> (?x - Suc 0 : [ ?r, mod ?m, ?c ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app (template_hole 2, template_hole 1))),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 1,
           template_app (template_hole 2, template_hole 1))))),
    ("IL_Interval.iMODb_minus_divisor_mult",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?r + ?k * ?m <= ?x |]
      ==> ?x - ?k * ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)),
          template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMODb_append_union_pred",
     "0 < ?c ==>
      [ ?r, mod ?m, ?c - Suc 0 ] Un [ ?r + ?m * ?c, mod ?m, ?c' ] =
      [ ?r, mod ?m, ?c + ?c' ]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_hole 7)))),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3))),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("IL_Interval.iMOD_subset",
     "[| ?r <= ?r'; ?r' mod ?m = ?r mod ?m; ?m' mod ?m = 0 |]
      ==> [ ?r', mod ?m' ] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_hole 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("IL_Interval.iIN_trans",
     "[| ?y : [?x\<dots>,?d]; ?z : [?y\<dots>,?d']; ?d' <= ?x + ?d - ?y |]
      ==> ?z : [?x\<dots>,?d]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2)),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))
           ))),
    ("IL_Interval.iIN_cut_greater",
     "[?n\<dots>,?d] \<down>> ?t =
      (if ?t < ?n then [?n\<dots>,?d]
       else if ?t < ?n + ?d then [Suc ?t\<dots>,?n + ?d - Suc ?t] else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_app (template_hole 2, template_var 0)))),
           template_hole 0)))),
    ("IL_Interval.iMOD_cut_greater",
     "[ ?r, mod ?m ] \<down>> ?t =
      (if ?t < ?r then [ ?r, mod ?m ]
       else if ?m = 0 then {} else [ ?t + ?m - (?t - ?r) mod ?m, mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4)),
                 template_hole 3),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 2)),
                       template_var 1))),
                 template_var 1)))
           ))),
    ("IL_Interval.iTILL_iMODb_subset_conv",
     "0 < ?n' ==>
      ([\<dots>?n'] <= [ ?r, mod ?m, ?c ]) =
      (?r = 0 & ?m = Suc 0 & ?n' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 3)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 10)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app (template_hole 3, template_hole 10))),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)))))
             )))),
    ("IL_Interval.finite_mod_partition_Union",
     "[| 0 < ?m; finite ?A |]
      ==> (UN k<=Max ?A div ?m. ?A Int [k * ?m\<dots>,?m - Suc 0]) = ?A",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)))),
         template_var 0))),
    ("IL_Interval.iMODb_inext_nth_diff",
     "[| ?a <= ?c; ?b <= ?c |]
      ==> ([ ?r, mod ?m, ?c ] \<rightarrow> ?a) -
          ([ ?r, mod ?m, ?c ] \<rightarrow> ?b) =
          (?a - ?b) * ?m",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0),
                   template_var 3)),
               template_var 4)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2)),
           template_var 0)))),
    ("IL_Interval.iIN_cut_greater1",
     "[| ?t : [?n\<dots>,?d]; ?t < ?n + ?d |]
      ==> [?n\<dots>,?d] \<down>> ?t = [Suc ?t\<dots>,?n + ?d - Suc ?t]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 2)))))),
    ("IL_Interval.iMOD_cut_less1",
     "[| ?t : [ ?r, mod ?m ]; ?r < ?t |]
      ==> [ ?r, mod ?m ] \<down>< ?t =
          [ ?r, mod ?m, (?t - ?r) div ?m - Suc 0 ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app (template_hole 1, template_hole 0)))))),
    ("IL_Interval.iMODb_minus",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k <= ?x - ?r |]
      ==> (?x - ?k : [ ?r, mod ?m, ?c ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 0)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_hole 0)))),
    ("IL_Interval.iMODb_Suc",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?x < ?r + ?m * ?c |]
      ==> (Suc ?x : [ ?r, mod ?m, ?c ]) = (?m = Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 2, template_var 3)),
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_var 1,
           template_app (template_hole 2, template_hole 0))))),
    ("IL_Interval.iMODb_plus_divisor_mult2",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k <= ?c - (?x - ?r) div ?m |]
      ==> ?x + ?k * ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iFROM_induct",
     "[| ?P ?n; !!k. [| k : [?n\<dots>]; ?P k |] ==> ?P (Suc k);
         ?a : [?n\<dots>] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("IL_Interval.iMODb_iMOD_subset",
     "[| ?r <= ?r'; ?r' mod ?m = ?r mod ?m; ?m' mod ?m = 0 |]
      ==> [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 2),
          template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 2)))),
    ("IL_Interval.iMODb_I",
     "[| ?x mod ?m = ?r mod ?m; ?r <= ?x; ?x <= ?r + ?m * ?c |]
      ==> ?x : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("IL_Interval.iMOD_subset_conv",
     "0 < ?m ==>
      ([ ?r', mod ?m' ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r' & ?m' mod ?m = 0)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 3))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 3)),
                   template_hole 7)))
             )))),
    ("IL_Interval.mod_cut_greater_aux_le_x",
     "[| ?r <= ?t; ?t < ?x; ?x mod ?m = ?r mod ?m |]
      ==> ?t + ?m - (?t - ?r) mod ?m <= ?x",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_var 0)),
         template_var 1))),
    ("IL_Interval.iMOD_cut_ge",
     "[ ?r, mod ?m ] \<down>\<ge> ?t =
      (if ?t <= ?r then [ ?r, mod ?m ]
       else if ?m = 0 then {}
            else [ ?t + ?m - Suc ((?t - Suc ?r) mod ?m), mod ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 5)),
                 template_hole 4),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1)),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 3, template_var 0),
                             template_app
                              (template_hole 1, template_var 2))),
                         template_var 1)))),
                 template_var 1)))
           ))),
    ("IL_Interval.iMODb_iMOD_subset_conv",
     "0 < ?c' ==>
      ([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m ]) =
      (?r' mod ?m = ?r mod ?m & ?r <= ?r' & ?m' mod ?m = 0)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2),
                    template_var 4)),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0)),
                   template_hole 8)))
             )))),
    ("IL_Interval.iMODb_imirror_bounds",
     "?r' + ?m' * ?c' <= ?l + ?r ==>
      imirror_bounds [ ?r', mod ?m', ?c' ] ?l ?r =
      [ ?l + ?r - ?r' - ?m' * ?c', mod ?m', ?c' ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2))),
             template_var 3),
           template_var 2)))),
    ("IL_Interval.iMODb_eq_conv",
     "[| 0 < ?m; 0 < ?c |]
      ==> ([ ?r, mod ?m, ?c ] = [ ?r', mod ?m', ?c' ]) =
          (?r = ?r' & ?m = ?m' & ?c = ?c')",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 5),
        template_inequation (less_than, template_hole 5, template_var 4)],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0)))
             )))),
    ("IL_Interval.iMODb_cut_less1",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?r < ?t |]
      ==> [ ?r, mod ?m, ?c ] \<down>< ?t =
          [ ?r, mod ?m, (?t - ?r) div ?m - Suc 0 ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_app (template_hole 1, template_hole 0)))))),
    ("IL_Interval.iMODb_iprev_diff_const'",
     "[| ?t : [ ?r, mod ?m, ?c ]; ?t < ?r + ?m * ?c |]
      ==> ?t + ?m - iprev (?t + ?m) [ ?r, mod ?m, ?c ] = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1),
               template_var 0))),
         template_var 1))),
    ("IL_Interval.iMODb_plus_divisor_mult",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k * ?m <= ?r + ?m * ?c - ?x |]
      ==> ?x + ?k * ?m : [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 0), template_var 2),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1))),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("IL_Interval.iMOD_subset_imp_iMODb_subset",
     "[| [ ?r', mod ?m' ] <= [ ?r, mod ?m ];
         ?r' + ?m' * ?c' <= ?r + ?m * ?c |]
      ==> [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 5),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 4),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("IL_Interval.iMODb_cut_le",
     "[ ?r, mod ?m, ?c ] \<down>\<le> ?t =
      (if ?t < ?r then {}
       else if ?t < ?r + ?m * ?c then [ ?r, mod ?m, (?t - ?r) div ?m ]
            else [ ?r, mod ?m, ?c ])",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 3)),
           template_hole 4),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)))),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1))))),
    ("IL_Interval.iIN_iMODb_subset_conv",
     "0 < ?d' ==>
      ([?n'\<dots>,?d'] <= [ ?r, mod ?m, ?c ]) =
      (?r <= ?n' & ?m = Suc 0 & ?n' + ?d' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 4)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_hole 10))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 4)),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)))))
             )))),
    ("IL_Interval.iMOD_induct",
     "[| ?P ?r; !!k. [| k : [ ?r, mod ?m ]; ?P k |] ==> ?P (k + ?m);
         ?a : [ ?r, mod ?m ] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 3, template_var 0)))),
    ("IL_Interval.iMODb_cut_less",
     "[ ?r, mod ?m, ?c ] \<down>< ?t =
      (if ?t <= ?r then {}
       else if ?r + ?m * ?c < ?t then [ ?r, mod ?m, ?c ]
            else [ ?r, mod ?m, (?t - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 3)),
           template_hole 6),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 3))),
               template_var 2)))))),
    ("IL_Interval.iMODb_plus",
     "[| ?x : [ ?r, mod ?m, ?c ]; ?k <= ?r + ?m * ?c - ?x |]
      ==> (?x + ?k : [ ?r, mod ?m, ?c ]) = (?k mod ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1))),
            template_var 4))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 0)),
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_hole 0)))),
    ("IL_Interval.iMODb_iMOD_append_union'",
     "[| ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * Suc ?c |]
      ==> [ ?r, mod ?m, ?c ] Un [ ?r', mod ?m ] = [ min ?r ?r', mod ?m ]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 0))))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 2)))),
    ("IL_Interval.iMODb_cut_ge1",
     "?t : [ ?r, mod ?m, ?c ] ==>
      [ ?r, mod ?m, ?c ] \<down>\<ge> ?t =
      (if ?r + ?m * ?c < ?t then {}
       else [ ?t, mod ?m, ?c - (?t - ?r) div ?m ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_var 3)),
             template_hole 2),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_var 1))))))),
    ("IL_Interval.mod_partition_is_disjoint",
     "[| 0 < ?m; ?k ~= ?k' |]
      ==> ?A Int [?k * ?m\<dots>,?m - Suc 0] Int
          (?A Int [?k' * ?m\<dots>,?m - Suc 0]) =
          {}",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 1, template_hole 9))))),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_hole 9))))),
         template_hole 0))),
    ("IL_Interval.iMODb_E",
     "[| ?x : [ ?r, mod ?m, ?c ];
         [| ?x mod ?m = ?r mod ?m; ?r <= ?x; ?x <= ?r + ?m * ?c |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))],
          template_implication
           ([template_inequation
              (less_equals, template_var 3, template_var 4)],
            template_implication
             ([template_inequation
                (less_equals, template_var 4,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("IL_Interval.iTILL_induct",
     "[| ?P 0; !!k. [| k : [\<dots>?n]; k ~= ?n; ?P k |] ==> ?P (Suc k);
         ?a : [\<dots>?n] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 2, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("IL_Interval.iMODb_trans'",
     "[| ?y : [ ?x, mod ?m, ?c ]; ?z : [ ?y, mod ?m, ?c' ];
         ?c' <= ?x div ?m + ?c - ?y div ?m |]
      ==> ?z : [ ?x, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 3),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2)),
            template_app
             (template_app (template_hole 0, template_var 5),
              template_var 3)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2))
           ))),
    ("IL_Interval.iMODb_trans",
     "[| ?y : [ ?x, mod ?m, ?c ]; ?z : [ ?y, mod ?m, ?c' ];
         ?m * ?c' <= ?x + ?m * ?c - ?y |]
      ==> ?z : [ ?x, mod ?m, ?c ]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 3),
                template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 0),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2))),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2))
           ))),
    ("IL_Interval.iTILL_rev_induct",
     "[| ?P ?n; !!k. [| k : [\<dots>?n]; 0 < k; ?P k |] ==> ?P (k - Suc 0);
         ?a : [\<dots>?n] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("IL_Interval.iIN_inter",
     "[| ?n <= ?n'; ?n' <= ?n + ?d; ?n + ?d <= ?n' + ?d' |]
      ==> [?n\<dots>,?d] Int [?n'\<dots>,?d'] = [?n'\<dots>,?n + ?d - ?n']",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_var 2))))),
    ("IL_Interval.iMODb_iMOD_append_union",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * Suc ?c |]
      ==> [ ?r, mod ?m, ?c ] Un [ ?r', mod ?m ] = [ ?r, mod ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("IL_Interval.iMODb_cut_greater1",
     "?t : [ ?r, mod ?m, ?c ] ==>
      [ ?r, mod ?m, ?c ] \<down>> ?t =
      (if ?r + ?m * ?c <= ?t then {}
       else [ ?t + ?m, mod ?m, ?c - Suc ((?t - ?r) div ?m) ])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))),
                 template_var 3)),
             template_hole 3),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1)),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2)),
                   template_var 1)))))))),
    ("IL_Interval.iIN_union",
     "[| ?n <= ?n'; ?n' <= Suc (?n + ?d); ?n + ?d <= ?n' + ?d' |]
      ==> [?n\<dots>,?d] Un [?n'\<dots>,?d'] = [?n\<dots>,?n' - ?n + ?d']",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 0))))),
    ("IL_Interval.iIN_induct",
     "[| ?P ?n;
         !!k. [| k : [?n\<dots>,?d]; k ~= ?n + ?d; ?P k |] ==> ?P (Suc k);
         ?a : [?n\<dots>,?d] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 3, template_var 0)))),
    ("IL_Interval.iIN_rev_induct",
     "[| ?P (?n + ?d);
         !!k. [| k : [?n\<dots>,?d]; k ~= ?n; ?P k |] ==> ?P (k - Suc 0);
         ?a : [?n\<dots>,?d] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 3, template_var 0)))),
    ("IL_Interval.iMODb_cut_greater",
     "[ ?r, mod ?m, ?c ] \<down>> ?t =
      (if ?t < ?r then [ ?r, mod ?m, ?c ]
       else if ?r + ?m * ?c <= ?t then {}
            else [ ?t + ?m -
                   (?t - ?r) mod
                   ?m, mod ?m, ?c - Suc ((?t - ?r) div ?m) ])",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_hole 4),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 3)),
                     template_var 2))),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 3)),
                   template_var 2)))))))),
    ("IL_Interval.iMODb_subset",
     "[| ?r <= ?r'; ?r' mod ?m = ?r mod ?m; ?m' mod ?m = 0;
         ?r' + ?m' * ?c' <= ?r + ?m * ?c |]
      ==> [ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 5, template_var 5),
            template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 3),
          template_hole 4),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 3, template_var 5),
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 0)))),
    ("IL_Interval.iMODb_induct",
     "[| ?P ?r;
         !!k. [| k : [ ?r, mod ?m, ?c ]; k ~= ?r + ?m * ?c; ?P k |]
              ==> ?P (k + ?m);
         ?a : [ ?r, mod ?m, ?c ] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 4, template_var 3)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 4, template_var 0)))),
    ("IL_Interval.iMODb_rev_induct",
     "[| ?P (?r + ?m * ?c);
         !!k. [| k : [ ?r, mod ?m, ?c ]; k ~= ?r; ?P k |] ==> ?P (k - ?m);
         ?a : [ ?r, mod ?m, ?c ] |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 4,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate (template_app (template_var 4, template_var 0)))),
    ("IL_Interval.iMODb_cut_greater_aux",
     "[| 0 < ?m; ?t < ?r + ?m * ?c; ?r <= ?t |]
      ==> (?r + ?m * ?c - (?t + ?m - (?t - ?r) mod ?m)) div ?m =
          ?c - Suc ((?t - ?r) div ?m)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 0))),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_var 3)))),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 3)))))),
    ("IL_Interval.iMODb_cut_ge",
     "[ ?r, mod ?m, ?c ] \<down>\<ge> ?t =
      (if ?t <= ?r then [ ?r, mod ?m, ?c ]
       else if ?r + ?m * ?c < ?t then {}
            else [ ?t + ?m -
                   Suc ((?t - Suc ?r) mod
                        ?m), mod ?m, ?c - (?t + ?m - Suc ?r) div ?m ])",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_hole 4),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_app (template_hole 2, template_var 3))),
                       template_var 2)))),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_var 2)),
                     template_app (template_hole 2, template_var 3))),
                 template_var 2))))))),
    ("IL_Interval.iMODb_subset_conv'",
     "[| 0 < ?c; 0 < ?c' |]
      ==> ([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]) =
          (?r' mod ?m = ?r mod ?m &
           ?r <= ?r' & ?m' mod ?m = 0 & ?r' + ?m' * ?c' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 5),
        template_inequation (less_than, template_hole 9, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2),
                    template_var 4)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0),
                  template_var 5))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_var 0)),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_app
                          (template_app (template_hole 0, template_var 2),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5))))))
             )))),
    ("IL_Interval.iMODb_subset_conv",
     "[| 0 < ?m'; 0 < ?c' |]
      ==> ([ ?r', mod ?m', ?c' ] <= [ ?r, mod ?m, ?c ]) =
          (?r' mod ?m = ?r mod ?m &
           ?r <= ?r' & ?m' mod ?m = 0 & ?r' + ?m' * ?c' <= ?r + ?m * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 5),
        template_inequation (less_than, template_hole 9, template_var 4)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 5),
                    template_var 4)),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 5),
                           template_var 1)),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0))))))
             )))),
    ("IL_Interval.iMODb_inter",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * ?c;
         ?r + ?m * ?c <= ?r' + ?m * ?c' |]
      ==> [ ?r, mod ?m, ?c ] Int [ ?r', mod ?m, ?c' ] =
          [ ?r', mod ?m, ?c - (?r' - ?r) div ?m ]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 2),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4)),
               template_var 2)))))),
    ("IL_Interval.iMODb_union",
     "[| ?r <= ?r'; ?r mod ?m = ?r' mod ?m; ?r' <= ?r + ?m * ?c;
         ?r + ?m * ?c <= ?r' + ?m * ?c' |]
      ==> [ ?r, mod ?m, ?c ] Un [ ?r', mod ?m, ?c' ] =
          [ ?r, mod ?m, ?r' div ?m - ?r div ?m + ?c' ]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 2),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2))),
             template_var 0)))))]
