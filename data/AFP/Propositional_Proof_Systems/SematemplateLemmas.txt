   [("Sema.top_semantics", "?A \<Turnstile> \<top>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Sema.entail_sat",
     "?\<Gamma> \<TTurnstile> \<bottom> = (~ sat ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Sema.const_simplifier_correct",
     "?\<A> \<Turnstile> simplify_consts ?F = ?\<A> \<Turnstile> ?F",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Sema.BigAnd_semantics",
     "?A \<Turnstile> \<^bold>\<And>?F = (ALL f:set ?F. ?A \<Turnstile> f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Sema.BigOr_semantics",
     "?A \<Turnstile> \<^bold>\<Or>?F = (EX f:set ?F. ?A \<Turnstile> f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Sema.irrelevant_atom",
     "?A ~: atoms ?F ==>
      ?\<A>(?A := ?V) \<Turnstile> ?F = ?\<A> \<Turnstile> ?F",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Sema.relevant_atoms_same_semantics",
     "ALL k:atoms ?F. ?\<A>\<^sub>1 k = ?\<A>\<^sub>2 k ==>
      ?\<A>\<^sub>1 \<Turnstile> ?F = ?\<A>\<^sub>2 \<Turnstile> ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Sema.pn_atoms_updates",
     "[| ?p ~: snd (pn_atoms ?F); ?n ~: fst (pn_atoms ?F) |]
      ==> (?M \<Turnstile> ?F -->
           ?M(?p := True) \<Turnstile> ?F &
           ?M(?n := False) \<Turnstile> ?F) &
          (~ ?M \<Turnstile> ?F -->
           ~ ?M(?n := True) \<Turnstile> ?F &
           ~ ?M(?p := False) \<Turnstile> ?F)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 7, template_var 2)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_app (template_hole 2, template_var 0),
                             template_var 3),
                           template_hole 1)),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 1),
                         template_hole 0)),
                     template_var 2)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_app (template_hole 2, template_var 0),
                             template_var 1),
                           template_hole 1)),
                       template_var 2))),
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 3),
                         template_hole 0)),
                     template_var 2)))))
           )))]
