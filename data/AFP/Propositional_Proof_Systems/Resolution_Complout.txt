Loading theory "HOL-Library.Case_Converter" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.Resolution_Compl" via "Draft.Resolution" via "Draft.CNF" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.535s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.859s cpu time, 0.046s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.Resolution_Compl" via "Draft.Resolution")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.227s elapsed time, 0.923s cpu time, 0.046s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.Resolution_Compl" via "Draft.Resolution" via "Draft.CNF")
Found termination order: "size_list size <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.082s elapsed time, 0.312s cpu time, 0.070s GC time
Loading theory "Draft.CNF" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.Resolution_Compl" via "Draft.Resolution")
### theory "HOL-Library.Nat_Bijection"
### 0.355s elapsed time, 1.417s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.403s elapsed time, 1.582s cpu time, 0.220s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  atoms_of_lit :: "'a literal => 'a"
### theory "Draft.CNF"
### 0.423s elapsed time, 1.663s cpu time, 0.150s GC time
Loading theory "Draft.CNF_Sema" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.Resolution_Compl")
### Ambiguous input (line 7 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Pos" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  shift :: "'a list => 'a stream => 'a stream"
### Ambiguous input (line 8 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Relation.converse" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Neg" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lit_semantics :: "('a => bool) => 'a literal => bool"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
### theory "Draft.CNF_Sema"
### 0.068s elapsed time, 0.265s cpu time, 0.060s GC time
  Proving monotonicity ...
Loading theory "Draft.Resolution" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.Resolution_Compl")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 11 of "$AFP/Propositional_Proof_Systems/Resolution.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>Relation.converse" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>Relation.converse" ("_position" k)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Resolution"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
  Proving monotonicity ...
### Ambiguous input (line 20 of "$AFP/Propositional_Proof_Systems/Resolution.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Resolution.Resolution"
###       ("\<^const>Set.union" ("_position" T) ("_position" S))
###       ("_position" D))
###     ("\<^const>Resolution.Resolution" ("_position" S) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Resolution.Resolution"
###     ("\<^const>Set.union" ("_position" T) ("_position" S))
###     ("\<^const>HOL.iff" ("_position" D)
###       ("\<^const>Resolution.Resolution" ("_position" S) ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Resolution"
### 0.476s elapsed time, 1.731s cpu time, 0.550s GC time
Loading theory "Draft.Resolution_Compl" (required by "Draft.Resolution_ComplMoreTemplates")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 4.143s cpu time, 0.835s GC time
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Resolution_Compl"
### 0.207s elapsed time, 0.818s cpu time, 0.075s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.026s elapsed time, 3.893s cpu time, 0.740s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"{{1\<inverse>}, {2\<^sup>+, 1\<^sup>+}, {0\<^sup>+, 1\<^sup>+},
  {2\<^sup>+, 0\<^sup>+}, {2\<inverse>, 1\<^sup>+},
  {2\<inverse>, 0\<^sup>+}}"
  :: "int literal set set"
"Some
  {\<box>, {2\<inverse>}, {2\<^sup>+}, {0\<^sup>+}, {1\<^sup>+},
   {2\<inverse>, 0\<^sup>+}, {2\<inverse>, 1\<^sup>+},
   {2\<^sup>+, 0\<^sup>+}, {0\<^sup>+, 1\<^sup>+}, {2\<^sup>+, 1\<^sup>+},
   {1\<inverse>}, {0\<inverse>}, {0\<^sup>+, 1\<^sup>+, 2\<inverse>},
   {0\<^sup>+, 1\<^sup>+, 2\<^sup>+}, {0\<^sup>+, 1\<inverse>}}"
  :: "int literal set set option"
Found termination order: "size <*mlex*> {}"
"Some
  {\<box>, {2\<inverse>}, {2\<^sup>+}, {0\<^sup>+}, {1\<^sup>+},
   {2\<inverse>, 0\<^sup>+}, {2\<inverse>, 1\<^sup>+},
   {2\<^sup>+, 0\<^sup>+}, {0\<^sup>+, 1\<^sup>+}, {2\<^sup>+, 1\<^sup>+},
   {1\<inverse>}, {0\<inverse>}, {0\<^sup>+, 1\<^sup>+, 2\<inverse>},
   {0\<^sup>+, 1\<^sup>+, 2\<^sup>+}, {0\<^sup>+, 1\<inverse>}}"
  :: "int literal set set option"
### theory "HOL-Library.Tree"
### 2.109s elapsed time, 7.465s cpu time, 1.101s GC time
Loading theory "Draft.Templates" (required by "Draft.Resolution_ComplMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.068s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Resolution_ComplMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.475s elapsed time, 0.516s cpu time, 0.048s GC time
Loading theory "Draft.Resolution_ComplMoreTemplates"
val templateLemmas =
   [("Resolution_Compl.finite_restrict",
     "finite ?S ==> finite (restrict_cnf_atom ?a ?v ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Resolution_Compl.restrict_cnf_remove",
     "atoms_of_cnf (restrict_cnf_atom ?a ?v ?c) <= atoms_of_cnf ?c - {?a}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("Resolution_Compl.cnf_substitution_lemma",
     "cnf_semantics ?A (restrict_cnf_atom ?a ?v ?S) =
      cnf_semantics (?A(?a := ?v)) ?S",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Resolution_Compl.Resolution_complete_standalone_finite",
     "[| ALL \<A>. ~ cnf_semantics \<A> ?S; finite (atoms_of_cnf ?S) |]
      ==> ?S \<turnstile> \<box>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Resolution_Compl.unrestrict'",
     "restrict_cnf_atom ?a ?v ?S \<turnstile> \<box> ==>
      EX R<={make_lit (~ ?v) ?a}. ?S \<turnstile> R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_hole 6)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Resolution_Compl.unrestrict_effects",
     "(%c. if {make_lit (~ ?v) ?a} Un c : ?S then {make_lit (~ ?v) ?a} Un c
           else c) `
      restrict_cnf_atom ?a ?v ?S
      <= ?S",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_var 0)),
    ("Resolution_Compl.can_cope_with_unrestrict_effects",
     "[| ?S \<turnstile> \<box>; ?S <= ?T |]
      ==> EX R<={make_lit ?v ?a}.
             (%c. if c : ?n then {make_lit ?v ?a} Un c else c) `
             ?T \<turnstile> R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_hole 10)
            ),
        template_inequation (less_equals, template_var 4, template_var 3)],
       template_predicate (template_app (template_hole 8, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Resolution_ComplMoreTemplates"
### 0.330s elapsed time, 0.461s cpu time, 0.060s GC time
val it = (): unit
