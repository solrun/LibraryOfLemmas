Loading theory "HOL-Library.Old_Datatype" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.SC_Sema" via "Draft.SC" via "Draft.Formulas" via "HOL-Library.Countable")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.SC_Sema" via "Draft.SC" via "HOL-Library.Multiset")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.552s cpu time, 0.047s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.790s cpu time, 0.062s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.477s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.433s elapsed time, 1.735s cpu time, 0.110s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.SC_Sema" via "Draft.SC")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.438s elapsed time, 1.761s cpu time, 0.110s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.SC_Sema" via "Draft.SC" via "Draft.Formulas")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.081s elapsed time, 4.068s cpu time, 0.893s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ExtrEqs")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.324s elapsed time, 5.032s cpu time, 0.903s GC time
Loading theory "Draft.Formulas" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.SC_Sema" via "Draft.SC")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 1.113s elapsed time, 4.205s cpu time, 1.125s GC time
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.440s elapsed time, 9.071s cpu time, 2.092s GC time
Loading theory "Draft.Templates" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ND_Compl_SCMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.931s elapsed time, 3.002s cpu time, 1.153s GC time
"(3, 2)"
  :: "nat * nat"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Formulas"
### 2.542s elapsed time, 7.976s cpu time, 2.338s GC time
Loading theory "Draft.ND" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.ND_Sound")
Loading theory "Draft.Sema" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.SC_Sema")
Proofs for inductive predicate(s) "ND"
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
  Proving monotonicity ...
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| {G} \<turnstile> F; {F} \<turnstile> H |] ==> {G} \<turnstile> H
### Ambiguous input (line 163 of "$AFP/Propositional_Proof_Systems/ND.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>ND.ND" ("_applC" ("_position" set) ("_position" G))
###       ("_position" F))
###     ("\<^const>ND.ND" ("\<^const>Set.empty")
###       ("\<^const>Formulas.formula.Imp"
###         ("\<^const>Formulas.BigAnd" ("_position" G)) ("_position" F)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>ND.ND" ("_applC" ("_position" set) ("_position" G))
###       ("_position" F))
###     ("\<^const>ND.ND" ("\<^const>Set.empty")
###       ("\<^const>Formulas.BigAnd"
###         ("\<^const>Formulas.formula.Imp" ("_position" G)
###           ("_position" F))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
### theory "Draft.ND"
### 0.144s elapsed time, 0.452s cpu time, 0.093s GC time
### theory "Draft.Sema"
### 0.149s elapsed time, 0.460s cpu time, 0.093s GC time
Loading theory "Draft.Compactness" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC")
Loading theory "Draft.ND_Sound" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC")
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
consts
  extender :: "nat => 'a formula set => 'a formula set"
### theory "Draft.Compactness"
### 0.084s elapsed time, 0.252s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### Ambiguous input (line 5 of "$AFP/Propositional_Proof_Systems/ND_Sound.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.formula.Imp"
###         ("\<^const>Formulas.BigAnd" ("_position" P)) ("_position" G)))
###     ("\<^const>HOL.implies"
###       ("_Ball" ("_position" F) ("_applC" ("_position" set) ("_position" P))
###         ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" F)))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd"
###         ("\<^const>Formulas.formula.Imp" ("_position" P) ("_position" G))))
###     ("\<^const>HOL.implies"
###       ("_Ball" ("_position" F) ("_applC" ("_position" set) ("_position" P))
###         ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" F)))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ND_Sound"
### 0.163s elapsed time, 0.415s cpu time, 0.000s GC time
### theory "HOL-Library.Multiset"
### 4.211s elapsed time, 13.970s cpu time, 3.477s GC time
Loading theory "Draft.SC" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC" via "Draft.SC_Sema")
### Ambiguous input (line 16 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SCp"
  Proving monotonicity ...
### Ambiguous input (line 40 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" S)))
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" S)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###         ("_position" S))
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" S)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" S)))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###         ("_position" S))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" S)))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>Formulas.formula.Or" ("_position" F)
###               ("_position" G)))
###           ("_position" S))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" S)))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>Formulas.formula.Or" ("_position" F)
###               ("_position" G)))
###           ("_position" S))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" S)))
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" H))
###             ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G)))
###             ("_position" S))
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" H))
###             ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" S)))
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("\<^const>SC.msins" ("_position" H) ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G)))
###             ("_position" S))
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("\<^const>SC.msins" ("_position" H) ("_position" S))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("_applC" ("\<^const>Formulas.formula.Not")
###                   ("_position" G)))
###               ("_position" S))
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" H))
###               ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" S)))
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" H))
###               ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("_applC" ("\<^const>Formulas.formula.Not")
###                   ("_position" G)))
###               ("_position" S))
###             ("\<^const>SC.msins"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###               ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" S)))
###             ("\<^const>SC.msins"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###               ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>Formulas.formula.Bot"))
###                 ("_position" S))
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" H))
###                 ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" S)))
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" H))
###                 ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>Formulas.formula.Bot"))
###                 ("_position" S))
###               ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" S)))
###               ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("_position" S))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" S)))
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" H))
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_applC" ("_position" Atom) ("_position" l)))
###                   ("_position" S))
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" H))
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" S)))
###                 ("\<^const>SC.msins"
###                   ("_applC" ("_position" Atom) ("_position" l))
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_position" S)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_applC" ("_position" Atom) ("_position" l)))
###                   ("_position" S))
###                 ("\<^const>SC.msins"
###                   ("_applC" ("_position" Atom) ("_position" l))
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_position" S)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rule already declared as safe elimination (elim!)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta>
### Ambiguous input (line 61 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("_position" \<Delta>))
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" \<Delta>)
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("\<^const>HOL.conj" ("_position" \<Delta>)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###           ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###           ("_position" \<Delta>))
###         ("_position" \<Gamma>)))
###     ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###         ("_position" \<Delta>))
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###         ("_position" \<Delta>)))
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SC"
### 0.380s elapsed time, 0.492s cpu time, 0.000s GC time
Loading theory "Draft.SCND" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC")
Loading theory "Draft.SC_Sema" (required by "Draft.ND_Compl_SCMoreTemplates" via "Draft.ND_Compl_SC")
### Ambiguous input (line 8 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.implies"
###     ("_MBall" ("_position" \<gamma>) ("_position" \<Gamma>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<gamma>)))
###     ("_MBex" ("_position" \<delta>) ("_position" \<Delta>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_semantics" ("_position" \<A>) ("_position" \<Gamma>)
###     ("_position" \<Delta>))
###   ("\<^const>HOL.implies"
###     ("_MBall" ("_position" \<gamma>) ("_position" \<Gamma>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<gamma>)))
###     ("_MBex" ("_position" \<delta>) ("_position" \<Delta>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SCND"
### 0.190s elapsed time, 0.424s cpu time, 0.095s GC time
### Ambiguous input (line 10 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_valid" ("_position" \<Gamma>) ("_position" \<Delta>))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^const>Sema.valid"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_valid" ("_position" \<Gamma>) ("_position" \<Delta>))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>SC_Sema.sequent_semantics" ("_position" A)
###       ("_position" \<Gamma>) ("_position" \<Delta>))))
### ("\<^const>Pure.eq"
###   ("\<^const>Sema.valid"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>SC_Sema.sequent_semantics" ("_position" A)
###       ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_nonvalid" ("_position" \<A>) ("_position" \<Gamma>)
###     ("_position" \<Delta>))
###   ("\<^const>HOL.Not"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_nonvalid" ("_position" \<A>) ("_position" \<Gamma>)
###     ("_position" \<Delta>))
###   ("\<^const>HOL.Not"
###     ("\<^const>SC_Sema.sequent_semantics" ("_position" \<A>)
###       ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("_multiset" ("_position" \<delta>))))
###     ("\<^const>Sema.entailment"
###       ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###       ("_position" \<delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.valid"
###     ("\<^const>HOL.iff"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("_multiset" ("_position" \<delta>)))
###       ("\<^const>Sema.entailment"
###         ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###         ("_position" \<delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.valid"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.iff" ("_multiset" ("_position" \<delta>))
###         ("\<^const>Sema.entailment"
###           ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###           ("_position" \<delta>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_multiset" ("_position" \<delta>)))
###     ("\<^const>Sema.entailment"
###       ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###       ("_position" \<delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.valid"
###     ("\<^const>Sema.entailment"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>HOL.iff" ("_multiset" ("_position" \<delta>))
###           ("_applC" ("_position" set_mset) ("_position" \<Gamma>))))
###       ("_position" \<delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("_position" A)
###           ("_cargs" ("\<^const>List.list.Nil") ("_position" B)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" A))
###           ("_applC" ("_position" set) ("_position" B)))
###         ("\<^const>Set.empty"))
###       ("_Finset"
###         ("\<^const>SC.msins"
###           ("_applC" ("_position" remdups) ("_position" A))
###           ("_applC" ("_position" remdups) ("_position" B))))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("_position" A)
###           ("_cargs" ("\<^const>List.list.Nil") ("_position" B)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" A))
###           ("_applC" ("_position" set) ("_position" B)))
###         ("\<^const>Set.empty"))
###       ("_Finset"
###         ("_tuple" ("_applC" ("_position" remdups) ("_position" A))
###           ("_tuple_arg" ("_applC" ("_position" remdups) ("_position" B)))))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs"
###             ("_list"
###               ("\<^const>Formulas.formula.Imp"
###                 ("\<^const>Formulas.formula.Imp"
###                   ("\<^const>Formulas.formula.Imp"
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.zero_class.zero"))
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.one_class.one")))
###                   ("_applC" ("_position" Atom)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_applC" ("_position" Atom)
###                   ("\<^const>Groups.one_class.one"))))
###             ("\<^const>List.list.Nil")))))
###     ("_Finset"
###       ("\<^const>SC.msins" ("_list" ("\<^const>Groups.zero_class.zero"))
###         ("_list"
###           ("_constrain" ("\<^const>Groups.one_class.one")
###             ("_type_name" nat)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs"
###             ("_list"
###               ("\<^const>Formulas.formula.Imp"
###                 ("\<^const>Formulas.formula.Imp"
###                   ("\<^const>Formulas.formula.Imp"
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.zero_class.zero"))
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.one_class.one")))
###                   ("_applC" ("_position" Atom)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_applC" ("_position" Atom)
###                   ("\<^const>Groups.one_class.one"))))
###             ("\<^const>List.list.Nil")))))
###     ("_Finset"
###       ("_tuple" ("_list" ("\<^const>Groups.zero_class.zero"))
###         ("_tuple_arg"
###           ("_list"
###             ("_constrain" ("\<^const>Groups.one_class.one")
###               ("_type_name" nat))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" C) ("_tuple_arg" ("_position" E)))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" G)
###             ("_cargs" ("_position" \<Delta>) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" C))
###         ("_applC" ("_position" set) ("_position" E)))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>SC.msins" ("_position" C) ("_position" E))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" G)
###             ("_cargs" ("_position" \<Delta>) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" C))
###         ("_applC" ("_position" set) ("_position" E)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" C) ("_tuple_arg" ("_position" D)))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" A)
###             ("_cargs" ("_position" \<Delta>) ("_position" B)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_nonvalid"
###       ("_lambda" ("_position" a)
###         ("\<^const>Set.member" ("_position" a)
###           ("_applC" ("_position" set) ("_position" C))))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" A))))
###         ("_applC" ("_position" mset) ("_position" \<Gamma>)))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" B))))
###         ("_applC" ("_position" mset) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>SC.msins" ("_position" C) ("_position" D))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" A)
###             ("_cargs" ("_position" \<Delta>) ("_position" B)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_nonvalid"
###       ("_lambda" ("_position" a)
###         ("\<^const>Set.member" ("_position" a)
###           ("_applC" ("_position" set) ("_position" C))))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" A))))
###         ("_applC" ("_position" mset) ("_position" \<Gamma>)))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" B))))
###         ("_applC" ("_position" mset) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" C) ("_tuple_arg" ("_position" D)))
###     ("_applC" ("_position" sc)
###       ("_cargs" ("_position" \<Gamma>)
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs" ("_position" \<Delta>) ("\<^const>List.list.Nil")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>SC.msins" ("_position" C) ("_position" D))
###     ("_applC" ("_position" sc)
###       ("_cargs" ("_position" \<Gamma>)
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs" ("_position" \<Delta>) ("\<^const>List.list.Nil")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 85 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.iff" ("_position" \<Delta>)
###       ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.iff" ("_position" \<Delta>)
###       ("\<^const>Sema.valid"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.iff" ("_position" \<Delta>)
###         ("\<^const>Sema.valid" ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SC_Sema"
### 0.773s elapsed time, 1.090s cpu time, 0.206s GC time
Loading theory "Draft.ND_Compl_SC" (required by "Draft.ND_Compl_SCMoreTemplates")
### theory "Draft.ND_Compl_SC"
### 0.338s elapsed time, 0.340s cpu time, 0.000s GC time
Loading theory "Draft.ND_Compl_SCMoreTemplates"
val templateLemmas =
   [("ND_Compl_SC.ND_sound_complete_countable",
     "(?\<Gamma> \<turnstile> ?F) = ?\<Gamma> \<TTurnstile> ?F",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ND_Compl_SC.ND_sound_complete_finite",
     "finite ?\<Gamma> ==>
      (?\<Gamma> \<turnstile> ?F) = ?\<Gamma> \<TTurnstile> ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.ND_Compl_SCMoreTemplates"
### 0.388s elapsed time, 0.578s cpu time, 0.075s GC time
val it = (): unit
