   [("Consistency.Hintikkas_lemma", "Hintikka ?S ==> sat ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Consistency.ex2", "finite_character ?C ==> subset_closed ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Consistency.pcp_seq_sub", "pcp_seq ?C ?S ?n <= pcp_lim ?C ?S",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("Consistency.pcp_sat", "[| pcp ?C; ?S : ?C |] ==> sat ?S",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Consistency.pcp_seq_mono",
     "?n <= ?m ==> pcp_seq ?C ?S ?n <= pcp_seq ?C ?S ?m",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Consistency.ex1",
     "pcp ?C ==> EX C'. ?C <= C' & pcp C' & subset_closed C'",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Consistency.pcp_lim_inserted_at_ex",
     "?x : pcp_lim ?C ?S ==> EX k. ?x : pcp_seq ?C ?S k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Consistency.pcp_seq_in",
     "[| pcp ?C; ?S : ?C |] ==> pcp_seq ?C ?S ?n : ?C",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Consistency.sallI", "(!!s. s <= ?S ==> ?P s) ==> ALL s<=?S. ?P s",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Consistency.ex3",
     "[| pcp ?C; subset_closed ?C |]
      ==> EX C'. ?C <= C' & pcp C' & finite_character C'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Consistency.pcp_seq_UN",
     "\<Union> {pcp_seq ?C ?S n |n. n <= ?m} = pcp_seq ?C ?S ?m",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("Consistency.pcp_lim_Hintikka",
     "[| pcp ?C; subset_closed ?C; finite_character ?C; ?S : ?C |]
      ==> Hintikka (pcp_lim ?C ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Consistency.cl_max'",
     "[| pcp ?C; subset_closed ?C; ?F \<triangleright> pcp_lim ?C ?S : ?C |]
      ==> ?F : pcp_lim ?C ?S",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 0))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("Consistency.pcp_lim_in",
     "[| pcp ?C; ?S : ?C; subset_closed ?C; finite_character ?C |]
      ==> pcp_lim ?C ?S : ?C",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Consistency.cl_max",
     "[| pcp ?C; subset_closed ?C; ?K : ?C; pcp_lim ?C ?S <= ?K |]
      ==> pcp_lim ?C ?S = ?K",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_var 1))),
    ("Consistency.cl_max'",
     "[| pcp ?C; subset_closed ?C;
         ?F \<triangleright> ?G \<triangleright> pcp_lim ?C ?S : ?C |]
      ==> ?F : pcp_lim ?C ?S & ?G : pcp_lim ?C ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 0)))),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)))
           ))),
    ("Consistency.con_dis_simps",
     "Con ?a1.0 ?a2.0 ?a3.0 =
      (?a1.0 = ?a2.0 \<^bold>\<and> ?a3.0 |
       (EX F G.
           ?a1.0 = \<^bold>\<not> (F \<^bold>\<or> G) &
           ?a2.0 = \<^bold>\<not> F & ?a3.0 = \<^bold>\<not> G) |
       (EX G. ?a1.0 = \<^bold>\<not> (?a2.0 \<^bold>\<rightarrow> G) &
              ?a3.0 = \<^bold>\<not> G) |
       ?a1.0 = \<^bold>\<not> (\<^bold>\<not> ?a2.0) & ?a3.0 = ?a2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 4, t_empty)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 4, t_empty)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app
                        (template_hole 2,
                         template_app (template_hole 2, template_var 1)))),
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 1)))))
           ))),
    ("Consistency.con_dis_simps",
     "Dis ?a1.0 ?a2.0 ?a3.0 =
      (?a1.0 = ?a2.0 \<^bold>\<or> ?a3.0 |
       (EX F G.
           ?a1.0 = F \<^bold>\<rightarrow> G &
           ?a2.0 = \<^bold>\<not> F & ?a3.0 = G) |
       (EX F G.
           ?a1.0 = \<^bold>\<not> (F \<^bold>\<and> G) &
           ?a2.0 = \<^bold>\<not> F & ?a3.0 = \<^bold>\<not> G) |
       ?a1.0 = \<^bold>\<not> (\<^bold>\<not> ?a2.0) & ?a3.0 = ?a2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 4, t_empty)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 4, t_empty)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app
                        (template_hole 1,
                         template_app (template_hole 1, template_var 1)))),
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 1)))))
           ))),
    ("Consistency.Hintikka_alt",
     "Hintikka ?S =
      (\<bottom> ~: ?S &
       (ALL k. Atom k : ?S --> \<^bold>\<not> (Atom k) : ?S --> False) &
       (ALL F G H. Con F G H --> F : ?S --> G : ?S & H : ?S) &
       (ALL F G H. Dis F G H --> F : ?S --> G : ?S | H : ?S))",
     template_equation
      (template_app (template_hole 13, template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 0))),
         template_app
          (template_app
            (template_hole 12, template_app (template_hole 8, t_empty)),
           template_app
            (template_app
              (template_hole 12, template_app (template_hole 3, t_empty)),
             template_app (template_hole 3, t_empty)))))),
    ("Consistency.pcp_alt",
     "pcp ?C =
      (ALL S:?C.
          \<bottom> ~: S &
          (ALL k. Atom k : S --> \<^bold>\<not> (Atom k) : S --> False) &
          (ALL F G H.
              Con F G H -->
              F : S --> G \<triangleright> H \<triangleright> S : ?C) &
          (ALL F G H.
              Dis F G H -->
              F : S -->
              G \<triangleright> S : ?C | H \<triangleright> S : ?C))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app (template_hole 15, template_var 0), t_empty)))]
