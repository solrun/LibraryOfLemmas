Loading theory "HOL-Library.Cancellation" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.SC_Cut" via "Draft.SC" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.CNF_Formulas" via "Draft.CNF" via "HOL-Library.Simps_Case_Conv")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.654s cpu time, 0.051s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.CNF_Formulas" via "Draft.Formulas" via "HOL-Library.Countable")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.208s elapsed time, 0.837s cpu time, 0.051s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.CNF_Formulas" via "Draft.CNF")
Found termination order: "size_list size <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.068s elapsed time, 0.279s cpu time, 0.000s GC time
Loading theory "Draft.CNF" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.CNF_Formulas")
### theory "HOL-Library.Nat_Bijection"
### 0.366s elapsed time, 1.459s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.501s elapsed time, 1.992s cpu time, 0.191s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.SC_Cut" via "Draft.SC")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.392s elapsed time, 1.544s cpu time, 0.140s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  atoms_of_lit :: "'a literal => 'a"
### theory "Draft.CNF"
### 0.447s elapsed time, 1.738s cpu time, 0.234s GC time
Loading theory "Draft.CNF_Sema" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.CNF_Formulas_Sema")
### Ambiguous input (line 7 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Pos" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 8 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Relation.converse" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Neg" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lit_semantics :: "('a => bool) => 'a literal => bool"
### theory "Draft.CNF_Sema"
### 0.045s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.874s cpu time, 0.093s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.Resolution")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.While_Combinator"
### 0.656s elapsed time, 2.433s cpu time, 0.799s GC time
Loading theory "Draft.Resolution" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.105s elapsed time, 4.198s cpu time, 0.978s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.CNF_Formulas" via "Draft.Formulas")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Ambiguous input (line 11 of "$AFP/Propositional_Proof_Systems/Resolution.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>CNF.literal.Neg" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset"
###                   ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>CNF.literal.Neg" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>Transitive_Closure.trancl" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>Relation.converse" ("_position" k)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Resolution" ("_position" S) ("_position" C)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Resolution" ("_position" S) ("_position" D)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###           ("_position" C)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>Relation.converse" ("_position" k)) ("_position" D)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>Resolution" ("_position" S)
###             ("\<^const>Set.union"
###               ("\<^const>Groups.minus_class.minus" ("_position" C)
###                 ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))
###               ("\<^const>Groups.minus_class.minus" ("_position" D)
###                 ("_Finset"
###                   ("\<^const>Relation.converse" ("_position" k)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Resolution"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 20 of "$AFP/Propositional_Proof_Systems/Resolution.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Resolution.Resolution"
###       ("\<^const>Set.union" ("_position" T) ("_position" S))
###       ("_position" D))
###     ("\<^const>Resolution.Resolution" ("_position" S) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Resolution.Resolution"
###     ("\<^const>Set.union" ("_position" T) ("_position" S))
###     ("\<^const>HOL.iff" ("_position" D)
###       ("\<^const>Resolution.Resolution" ("_position" S) ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.Resolution"
### 0.314s elapsed time, 1.236s cpu time, 0.160s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.ExtrEqs")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.BigO"
### 0.876s elapsed time, 3.437s cpu time, 0.417s GC time
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Countable"
### 1.226s elapsed time, 4.817s cpu time, 0.577s GC time
Loading theory "Draft.Formulas" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.CNF_Formulas")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Tree"
### 2.283s elapsed time, 8.816s cpu time, 1.536s GC time
Loading theory "Draft.Templates" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.ExtrEqs")
"{{1\<inverse>}, {2\<^sup>+, 1\<^sup>+}, {0\<^sup>+, 1\<^sup>+},
  {2\<^sup>+, 0\<^sup>+}, {2\<inverse>, 1\<^sup>+},
  {2\<inverse>, 0\<^sup>+}}"
  :: "int literal set set"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.086s elapsed time, 0.328s cpu time, 0.065s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates")
"Some
  {\<box>, {2\<inverse>}, {2\<^sup>+}, {0\<^sup>+}, {1\<^sup>+},
   {2\<inverse>, 0\<^sup>+}, {2\<inverse>, 1\<^sup>+},
   {2\<^sup>+, 0\<^sup>+}, {0\<^sup>+, 1\<^sup>+}, {2\<^sup>+, 1\<^sup>+},
   {1\<inverse>}, {0\<inverse>}, {0\<^sup>+, 1\<^sup>+, 2\<inverse>},
   {0\<^sup>+, 1\<^sup>+, 2\<^sup>+}, {0\<^sup>+, 1\<inverse>}}"
  :: "int literal set set option"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
### theory "Draft.ExtrEqs"
### 0.741s elapsed time, 2.897s cpu time, 0.358s GC time
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
"Some
  {\<box>, {2\<inverse>}, {2\<^sup>+}, {0\<^sup>+}, {1\<^sup>+},
   {2\<inverse>, 0\<^sup>+}, {2\<inverse>, 1\<^sup>+},
   {2\<^sup>+, 0\<^sup>+}, {0\<^sup>+, 1\<^sup>+}, {2\<^sup>+, 1\<^sup>+},
   {1\<inverse>}, {0\<inverse>}, {0\<^sup>+, 1\<^sup>+, 2\<inverse>},
   {0\<^sup>+, 1\<^sup>+, 2\<^sup>+}, {0\<^sup>+, 1\<inverse>}}"
  :: "int literal set set option"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
"(3, 2)"
  :: "nat * nat"
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.207s elapsed time, 15.528s cpu time, 3.229s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Formulas"
### 2.313s elapsed time, 7.555s cpu time, 1.795s GC time
Loading theory "Draft.CNF_Formulas" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC")
Loading theory "Draft.SC" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC" via "Draft.SC_Cut")
Loading theory "Draft.Sema" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.SC_Sema")
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Sema"
### 0.106s elapsed time, 0.318s cpu time, 0.000s GC time
### Ambiguous input (line 16 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SCp"
  Proving monotonicity ...
### Ambiguous input (line 40 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" S)))
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" S)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###         ("_position" S))
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" S)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" S)))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###         ("_position" S))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" S)))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>Formulas.formula.Or" ("_position" F)
###               ("_position" G)))
###           ("_position" S))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" S)))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>Formulas.formula.Or" ("_position" F)
###               ("_position" G)))
###           ("_position" S))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" S)))
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" H))
###             ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G)))
###             ("_position" S))
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" H))
###             ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" S)))
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("\<^const>SC.msins" ("_position" H) ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G)))
###             ("_position" S))
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("\<^const>SC.msins" ("_position" H) ("_position" S))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("_applC" ("\<^const>Formulas.formula.Not")
###                   ("_position" G)))
###               ("_position" S))
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" H))
###               ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" S)))
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" H))
###               ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("_applC" ("\<^const>Formulas.formula.Not")
###                   ("_position" G)))
###               ("_position" S))
###             ("\<^const>SC.msins"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###               ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" S)))
###             ("\<^const>SC.msins"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###               ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>Formulas.formula.Bot"))
###                 ("_position" S))
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" H))
###                 ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" S)))
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" H))
###                 ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>Formulas.formula.Bot"))
###                 ("_position" S))
###               ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" S)))
###               ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("_position" S))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" S)))
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" H))
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_applC" ("_position" Atom) ("_position" l)))
###                   ("_position" S))
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" H))
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" S)))
###                 ("\<^const>SC.msins"
###                   ("_applC" ("_position" Atom) ("_position" l))
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_position" S)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_applC" ("_position" Atom) ("_position" l)))
###                   ("_position" S))
###                 ("\<^const>SC.msins"
###                   ("_applC" ("_position" Atom) ("_position" l))
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_position" S)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rule already declared as safe elimination (elim!)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta>
### Ambiguous input (line 61 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("_position" \<Delta>))
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" \<Delta>)
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("\<^const>HOL.conj" ("_position" \<Delta>)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###           ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###           ("_position" \<Delta>))
###         ("_position" \<Gamma>)))
###     ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###         ("_position" \<Delta>))
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###         ("_position" \<Delta>)))
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SC"
### 0.767s elapsed time, 2.178s cpu time, 1.233s GC time
Loading theory "Draft.SC_Cut" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution" via "Draft.LSC")
Loading theory "Draft.SC_Sema" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 8 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.implies"
###     ("_MBall" ("_position" \<gamma>) ("_position" \<Gamma>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<gamma>)))
###     ("_MBex" ("_position" \<delta>) ("_position" \<Delta>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_semantics" ("_position" \<A>) ("_position" \<Gamma>)
###     ("_position" \<Delta>))
###   ("\<^const>HOL.implies"
###     ("_MBall" ("_position" \<gamma>) ("_position" \<Gamma>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<gamma>)))
###     ("_MBex" ("_position" \<delta>) ("_position" \<Delta>)
###       ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###         ("_position" \<delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 10 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_valid" ("_position" \<Gamma>) ("_position" \<Delta>))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^const>Sema.valid"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_valid" ("_position" \<Gamma>) ("_position" \<Delta>))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>SC_Sema.sequent_semantics" ("_position" A)
###       ("_position" \<Gamma>) ("_position" \<Delta>))))
### ("\<^const>Pure.eq"
###   ("\<^const>Sema.valid"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("\<^const>SC_Sema.sequent_semantics" ("_position" A)
###       ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/Propositional_Proof_Systems/SC_Cut.thy") produces 450 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###         ("\<^const>HOL.implies" ("_position" \<Delta>)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###       ("_position" \<Delta>))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_arg"
###         ("\<^const>SC.SCp"
###           ("\<^const>SC.SCp"
###             ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###             ("\<^const>HOL.implies" ("_position" \<Delta>)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###           ("_position" \<Delta>))))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" F))
###           ("_position" \<Gamma>))
###         ("\<^const>HOL.implies" ("_position" \<Delta>)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###       ("_position" \<Delta>))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_args" ("_position" F)
###         ("_tuple_arg"
###           ("\<^const>SC.SCp"
###             ("\<^const>SC.SCp" ("_position" \<Gamma>)
###               ("\<^const>HOL.implies" ("_position" \<Delta>)
###                 ("\<^const>SC.msins" ("_position" F)
###                   ("_position" \<Gamma>))))
###             ("_position" \<Delta>)))))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("\<^const>SC.msins" ("_position" F) ("_position" F))
###       ("_tuple_arg"
###         ("\<^const>SC.SCp"
###           ("\<^const>SC.SCp" ("_position" \<Gamma>)
###             ("\<^const>HOL.implies" ("_position" \<Delta>)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###           ("_position" \<Delta>))))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###         ("_position" \<Delta>))
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_arg"
###         ("\<^const>HOL.implies"
###           ("\<^const>SC.SCp"
###             ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###             ("_position" \<Delta>))
###           ("\<^const>SC.SCp"
###             ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###             ("_position" \<Delta>)))))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" F))
###           ("_position" \<Gamma>))
###         ("_position" \<Delta>))
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("\<^const>HOL.implies" ("_position" \<Delta>)
###         ("\<^const>SC.SCp"
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###           ("_position" \<Delta>))))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_arg"
###         ("\<^const>SC.SCp"
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###           ("\<^const>HOL.implies" ("_position" \<Delta>)
###             ("\<^const>SC.SCp"
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###               ("_position" \<Delta>))))))
###     ("_tuple"
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins" ("_position" F)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###             ("_position" \<Gamma>)))
###         ("_position" F))
###       ("_tuple_arg" ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_nonvalid" ("_position" \<A>) ("_position" \<Gamma>)
###     ("_position" \<Delta>))
###   ("\<^const>HOL.Not"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>sequent_nonvalid" ("_position" \<A>) ("_position" \<Gamma>)
###     ("_position" \<Delta>))
###   ("\<^const>HOL.Not"
###     ("\<^const>SC_Sema.sequent_semantics" ("_position" \<A>)
###       ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Propositional_Proof_Systems/SC_Cut.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Propositional_Proof_Systems/SC_Cut.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" F))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("_multiset" ("_position" \<delta>))))
###     ("\<^const>Sema.entailment"
###       ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###       ("_position" \<delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.valid"
###     ("\<^const>HOL.iff"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("_multiset" ("_position" \<delta>)))
###       ("\<^const>Sema.entailment"
###         ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###         ("_position" \<delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.valid"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.iff" ("_multiset" ("_position" \<delta>))
###         ("\<^const>Sema.entailment"
###           ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###           ("_position" \<delta>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_multiset" ("_position" \<delta>)))
###     ("\<^const>Sema.entailment"
###       ("_applC" ("_position" set_mset) ("_position" \<Gamma>))
###       ("_position" \<delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.valid"
###     ("\<^const>Sema.entailment"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>HOL.iff" ("_multiset" ("_position" \<delta>))
###           ("_applC" ("_position" set_mset) ("_position" \<Gamma>))))
###       ("_position" \<delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("_position" A)
###           ("_cargs" ("\<^const>List.list.Nil") ("_position" B)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" A))
###           ("_applC" ("_position" set) ("_position" B)))
###         ("\<^const>Set.empty"))
###       ("_Finset"
###         ("\<^const>SC.msins"
###           ("_applC" ("_position" remdups) ("_position" A))
###           ("_applC" ("_position" remdups) ("_position" B))))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("_position" A)
###           ("_cargs" ("\<^const>List.list.Nil") ("_position" B)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" A))
###           ("_applC" ("_position" set) ("_position" B)))
###         ("\<^const>Set.empty"))
###       ("_Finset"
###         ("_tuple" ("_applC" ("_position" remdups) ("_position" A))
###           ("_tuple_arg" ("_applC" ("_position" remdups) ("_position" B)))))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/Propositional_Proof_Systems/SC_Cut.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_constrain" ("_position" F)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" formula)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_constrain" ("_position" F)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" formula)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SC_Cut"
### 0.284s elapsed time, 0.952s cpu time, 0.113s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 76 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset"
###       ("_Finset" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 95 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list" ("_list" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list"
###       ("_list" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf_lists (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
### Ambiguous input (line 45 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs"
###             ("_list"
###               ("\<^const>Formulas.formula.Imp"
###                 ("\<^const>Formulas.formula.Imp"
###                   ("\<^const>Formulas.formula.Imp"
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.zero_class.zero"))
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.one_class.one")))
###                   ("_applC" ("_position" Atom)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_applC" ("_position" Atom)
###                   ("\<^const>Groups.one_class.one"))))
###             ("\<^const>List.list.Nil")))))
###     ("_Finset"
###       ("\<^const>SC.msins" ("_list" ("\<^const>Groups.zero_class.zero"))
###         ("_list"
###           ("_constrain" ("\<^const>Groups.one_class.one")
###             ("_type_name" nat)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sc)
###       ("_cargs" ("\<^const>List.list.Nil")
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs"
###             ("_list"
###               ("\<^const>Formulas.formula.Imp"
###                 ("\<^const>Formulas.formula.Imp"
###                   ("\<^const>Formulas.formula.Imp"
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.zero_class.zero"))
###                     ("_applC" ("_position" Atom)
###                       ("\<^const>Groups.one_class.one")))
###                   ("_applC" ("_position" Atom)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_applC" ("_position" Atom)
###                   ("\<^const>Groups.one_class.one"))))
###             ("\<^const>List.list.Nil")))))
###     ("_Finset"
###       ("_tuple" ("_list" ("\<^const>Groups.zero_class.zero"))
###         ("_tuple_arg"
###           ("_list"
###             ("_constrain" ("\<^const>Groups.one_class.one")
###               ("_type_name" nat))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" C) ("_tuple_arg" ("_position" E)))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" G)
###             ("_cargs" ("_position" \<Delta>) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" C))
###         ("_applC" ("_position" set) ("_position" E)))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>SC.msins" ("_position" C) ("_position" E))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" G)
###             ("_cargs" ("_position" \<Delta>) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_applC" ("_position" set) ("_position" C))
###         ("_applC" ("_position" set) ("_position" E)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" C) ("_tuple_arg" ("_position" D)))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" A)
###             ("_cargs" ("_position" \<Delta>) ("_position" B)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_nonvalid"
###       ("_lambda" ("_position" a)
###         ("\<^const>Set.member" ("_position" a)
###           ("_applC" ("_position" set) ("_position" C))))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" A))))
###         ("_applC" ("_position" mset) ("_position" \<Gamma>)))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" B))))
###         ("_applC" ("_position" mset) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>SC.msins" ("_position" C) ("_position" D))
###       ("_applC" ("_position" sc)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" A)
###             ("_cargs" ("_position" \<Delta>) ("_position" B)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_nonvalid"
###       ("_lambda" ("_position" a)
###         ("\<^const>Set.member" ("_position" a)
###           ("_applC" ("_position" set) ("_position" C))))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" A))))
###         ("_applC" ("_position" mset) ("_position" \<Gamma>)))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" Atom)
###             ("_applC" ("_position" mset) ("_position" B))))
###         ("_applC" ("_position" mset) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" C) ("_tuple_arg" ("_position" D)))
###     ("_applC" ("_position" sc)
###       ("_cargs" ("_position" \<Gamma>)
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs" ("_position" \<Delta>) ("\<^const>List.list.Nil")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>SC.msins" ("_position" C) ("_position" D))
###     ("_applC" ("_position" sc)
###       ("_cargs" ("_position" \<Gamma>)
###         ("_cargs" ("\<^const>List.list.Nil")
###           ("_cargs" ("_position" \<Delta>) ("\<^const>List.list.Nil")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 85 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.iff" ("_position" \<Delta>)
###       ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.iff" ("_position" \<Delta>)
###       ("\<^const>Sema.valid"
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.iff" ("_position" \<Delta>)
###         ("\<^const>Sema.valid" ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Propositional_Proof_Systems/SC_Sema.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Sema.valid"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Sema.sequent_valid" ("_position" \<Gamma>)
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SC_Sema"
### 0.942s elapsed time, 2.390s cpu time, 0.298s GC time
Found termination order: "size <*mlex*> {}"
consts
  form_of_lit :: "'a literal => 'a formula"
### theory "Draft.CNF_Formulas"
### 1.826s elapsed time, 4.706s cpu time, 1.531s GC time
Loading theory "Draft.LSC" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small" via "Draft.LSC_Resolution")
Loading theory "Draft.CNF_Formulas_Sema" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small")
### Ambiguous input (line 9 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_applC" ("_position" Atom)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" k) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("\<^const>Formulas.formula.Not")
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###           ("_applC" ("_position" Atom) ("_position" k)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>LSC"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not")
###           ("_applC" ("_position" Atom) ("_position" k)))
###         ("_applC" ("_position" Atom) ("_position" k)))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("\<^const>Formulas.formula.Not")
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###         ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>LSC"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" k)))
###       ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" k)))
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("\<^fixed>LSC" ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 10 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###     ("\<^fixed>LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>LSC"
###     ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F) ("_position" G))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F) ("_position" G))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 24 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins"
###             ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###             ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F)
###             ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G)))
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G)))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins"
###             ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###             ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 15 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 27 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not")
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G)))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 18 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Imp" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Imp" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Imp" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Imp" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Imp" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Formulas.formula.Imp" ("_position" F)
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 18 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F)
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###         ("\<^fixed>LSC" ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G)))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^fixed>LSC"
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F)
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 18 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^fixed>LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F)))
###       ("\<^fixed>LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^fixed>LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not")
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F)))
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("\<^const>Formulas.formula.Not")
###           ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F)))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "LSC"
  Proving monotonicity ...
### Ambiguous input (line 52 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus" ("_position" \<Gamma>)
###     ("\<^const>LSC.LSC"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" Not) ("_position" \<Delta>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>Groups.plus_class.plus" ("_position" \<Gamma>)
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" Not) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.iff" ("\<^const>Multiset.empty_mset")
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>Multiset.empty_mset"))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.iff" ("\<^const>Multiset.empty_mset")
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("_cargs" ("_position" nnf)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("\<^const>LSC.LSC"
###         ("_applC" ("_position" nnf) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" nnf) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("_cargs" ("_position" nnf)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("\<^const>LSC.LSC"
###         ("_applC" ("_position" nnf) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" nnf) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 102 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins" ("_position" F)
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 102 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("\<^const>Formulas.formula.Not")
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("_applC" ("\<^const>Formulas.formula.Not") ("_position" F))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 116 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus" ("_position" \<Gamma>)
###       ("\<^const>LSC.LSC" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus" ("_position" \<Gamma>)
###         ("_position" \<Theta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins" ("_position" F)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins" ("\<^const>SC.msins" ("_position" F) ("_position" F))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins" ("_position" F)
###     ("\<^const>SC.msins" ("_position" F)
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins" ("_position" F) ("_position" F))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins" ("_position" F)
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>))))
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F)
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>))))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F)
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>))))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" F)
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###         ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###         ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###           ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###         ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###           ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###           ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###         ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###         ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###         ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" F))
###         ("\<^const>Formulas.formula.Or" ("_position" H) ("_position" F)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>))))
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And" ("_position" F)
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>))))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And" ("_position" F)
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###           ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>))))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And" ("_position" F)
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" G))
###         ("\<^const>Formulas.formula.And" ("_position" F) ("_position" H)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###         ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>)))
###     ("\<^const>Formulas.formula.Or"
###       ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###           ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###         ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###           ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>)))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###           ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###         ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###         ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###         ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>Formulas.formula.Or" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>)))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("\<^const>Formulas.formula.And" ("_position" G) ("_position" F))
###         ("\<^const>Formulas.formula.And" ("_position" H) ("_position" F)))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 172 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or" ("_position" S)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" T) ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>Formulas.formula.Or" ("_position" S) ("_position" T))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or" ("_position" S) ("_position" T))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>Formulas.formula.Or"
###       ("_applC" ("_position" Atom) ("_position" k)) ("_position" S))
###     ("\<^const>Formulas.formula.Or"
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" k)))
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" T) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("_applC" ("_position" Atom) ("_position" k))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" S)
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("\<^const>Formulas.formula.Not")
###               ("_applC" ("_position" Atom) ("_position" k)))
###             ("_position" T)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Atom)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" k) ("_position" S))
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("\<^const>Formulas.formula.Not")
###               ("_applC" ("_position" Atom) ("_position" k)))
###             ("_position" T)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("_position" Atom) ("_position" k)) ("_position" S))
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("\<^const>Formulas.formula.Not")
###             ("_applC" ("_position" Atom) ("_position" k)))
###           ("_position" T)))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("_applC" ("_position" Atom) ("_position" k))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" S)
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("\<^const>Formulas.formula.Not")
###               ("_applC" ("_position" Atom) ("_position" k)))
###             ("_position" T))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Atom)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" k) ("_position" S))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("\<^const>Formulas.formula.Not")
###               ("_applC" ("_position" Atom) ("_position" k)))
###             ("_position" T))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>Formulas.formula.Or"
###       ("_applC" ("_position" Atom) ("_position" k)) ("_position" S))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("\<^const>Formulas.formula.Not")
###             ("_applC" ("_position" Atom) ("_position" k)))
###           ("_position" T))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("_applC" ("_position" Atom) ("_position" k)) ("_position" S))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("\<^const>Formulas.formula.Not")
###             ("_applC" ("_position" Atom) ("_position" k)))
###           ("_position" T))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>Formulas.formula.Or"
###       ("_applC" ("_position" Atom) ("_position" k)) ("_position" S))
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("_applC" ("\<^const>Formulas.formula.Not")
###           ("_applC" ("_position" Atom) ("_position" k)))
###         ("_position" T))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("_applC" ("_position" Atom) ("_position" k)) ("_position" S))
###       ("\<^const>Formulas.formula.Or"
###         ("_applC" ("\<^const>Formulas.formula.Not")
###           ("_applC" ("_position" Atom) ("_position" k)))
###         ("_position" T)))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("_applC" ("_position" form_of_lit) ("_position" A))
###     ("_applC" ("_position" disj_of_clause)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("_position" A) ("_position" F)))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" form_of_lit)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Or" ("_position" A)
###           ("_applC" ("_position" disj_of_clause)
###             ("_applC" ("_position" removeAll)
###               ("_cargs" ("_position" A) ("_position" F)))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Or"
###         ("_applC" ("_position" form_of_lit) ("_position" A))
###         ("_applC" ("_position" disj_of_clause)
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("_position" A) ("_position" F)))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("_applC" ("_position" form_of_lit) ("_position" A))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" disj_of_clause)
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("_position" A) ("_position" F))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>Formulas.formula.Or"
###       ("_applC" ("_position" form_of_lit) ("_position" A))
###       ("_applC" ("_position" disj_of_clause)
###         ("_applC" ("_position" removeAll)
###           ("_cargs" ("_position" A) ("_position" F)))))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" disj_of_clause)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("_position" disj_of_clause) ("_position" F))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("_applC" ("_position" disj_of_clause) ("_position" F))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" disj_of_clause)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>List.append"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Pos" ("_position" k))
###               ("_position" F)))
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Neg" ("_position" k))
###               ("_position" G))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("_applC" ("_position" disj_of_clause)
###         ("\<^const>List.append"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Pos" ("_position" k))
###               ("_position" F)))
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Neg" ("_position" k))
###               ("_position" G)))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" disj_of_clause)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>List.append"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>Transitive_Closure.trancl" ("_position" k))
###               ("_position" F)))
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Neg" ("_position" k))
###               ("_position" G))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("_applC" ("_position" disj_of_clause)
###         ("\<^const>List.append"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>Transitive_Closure.trancl" ("_position" k))
###               ("_position" F)))
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Neg" ("_position" k))
###               ("_position" G)))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" disj_of_clause)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>List.append"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Pos" ("_position" k))
###               ("_position" F)))
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>Relation.converse" ("_position" k))
###               ("_position" G))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("_applC" ("_position" disj_of_clause)
###         ("\<^const>List.append"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>CNF.literal.Pos" ("_position" k))
###               ("_position" F)))
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>Relation.converse" ("_position" k))
###               ("_position" G)))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" disj_of_clause)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>List.append"
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>Transitive_Closure.trancl" ("_position" k))
###               ("_position" F)))
###           ("_applC" ("_position" removeAll)
###             ("_cargs" ("\<^const>Relation.converse" ("_position" k))
###               ("_position" G))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("_position" disj_of_clause)
###       ("\<^const>List.append"
###         ("_applC" ("_position" removeAll)
###           ("_cargs" ("\<^const>Transitive_Closure.trancl" ("_position" k))
###             ("_position" F)))
###         ("_applC" ("_position" removeAll)
###           ("_cargs" ("\<^const>Relation.converse" ("_position" k))
###             ("_position" G)))))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("_position" disj_of_clause)
###       ("\<^const>List.append"
###         ("_applC" ("_position" removeAll)
###           ("_cargs" ("\<^const>CNF.literal.Pos" ("_position" k))
###             ("_position" F)))
###         ("_applC" ("_position" removeAll)
###           ("_cargs" ("\<^const>Relation.converse" ("_position" k))
###             ("_position" G)))))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("_position" disj_of_clause)
###       ("\<^const>List.append"
###         ("_applC" ("_position" removeAll)
###           ("_cargs" ("\<^const>Transitive_Closure.trancl" ("_position" k))
###             ("_position" F)))
###         ("_applC" ("_position" removeAll)
###           ("_cargs" ("\<^const>CNF.literal.Neg" ("_position" k))
###             ("_position" G)))))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Transitive_Closure.trancl" ("_position" k))
###     ("_applC" ("_position" set) ("_position" F))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("\<^const>CNF.literal.Pos" ("_position" k))
###     ("_applC" ("_position" set) ("_position" F))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("\<^const>Relation.converse" ("_position" k))
###     ("_applC" ("_position" set) ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("\<^const>CNF.literal.Neg" ("_position" k))
###     ("_applC" ("_position" set) ("_position" G))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 224 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("_position" disj_of_clause) ("_position" F))
###     ("_applC" ("_position" disj_of_clause)
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" disj_of_clause)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("_applC" ("_position" disj_of_clause) ("_position" G)))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" disj_of_clause) ("_position" F))
###         ("_applC" ("_position" disj_of_clause) ("_position" G)))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" disj_of_clause)
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("_applC" ("_position" disj_of_clause) ("_position" G))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("_position" disj_of_clause) ("_position" F))
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" disj_of_clause) ("_position" G))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LSC.LSC"
###     ("\<^const>SC.msins"
###       ("_applC" ("_position" disj_of_clause) ("_position" F))
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" disj_of_clause) ("_position" G))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("_applC" ("_position" disj_of_clause) ("_position" F))
###     ("\<^const>SC.msins"
###       ("_applC" ("_position" disj_of_clause) ("_position" G))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.msins"
###     ("\<^const>SC.msins"
###       ("_applC" ("_position" disj_of_clause) ("_position" F))
###       ("_applC" ("_position" disj_of_clause) ("_position" G)))
###     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 24 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" image_mset)
###               ("_cargs" ("_position" disj_of_clause)
###                 ("_applC" ("_position" mset) ("_position" G))))
###             ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" image_mset)
###               ("_cargs" ("_position" disj_of_clause)
###                 ("_applC" ("_position" mset) ("_position" G))))
###             ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" image_mset)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" disj_of_clause)
###                 ("_applC" ("_position" mset) ("_position" G)))
###               ("_position" \<Gamma>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" image_mset)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" disj_of_clause)
###                 ("_applC" ("_position" mset) ("_position" G)))
###               ("_position" \<Gamma>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("\<^const>LSC.LSC"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" mset) ("_position" G))
###                 ("_position" \<Gamma>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("\<^const>LSC.LSC"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" mset) ("_position" G))
###                 ("_position" \<Gamma>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" image_mset)
###             ("_cargs" ("_position" disj_of_clause)
###               ("_applC" ("_position" mset) ("_position" G))))
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" image_mset)
###             ("_cargs" ("_position" disj_of_clause)
###               ("_applC" ("_position" mset) ("_position" G))))
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset)
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_position" d)
###               ("\<^const>Formulas.formula.Or" ("_position" F)
###                 ("_applC" ("_position" disj_of_clause) ("_position" d))))
###             ("_position" G))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" image_mset)
###               ("_cargs" ("_position" disj_of_clause)
###                 ("_applC" ("_position" mset) ("_position" G))))
###             ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mset)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" map)
###             ("_cargs"
###               ("_lambda" ("_position" d)
###                 ("\<^const>Formulas.formula.Or" ("_position" F)
###                   ("_applC" ("_position" disj_of_clause) ("_position" d))))
###               ("_position" G)))
###           ("_position" \<Gamma>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" image_mset)
###               ("_cargs" ("_position" disj_of_clause)
###                 ("_applC" ("_position" mset) ("_position" G))))
###             ("_position" \<Gamma>))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mset)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" map)
###             ("_cargs"
###               ("_lambda" ("_position" d)
###                 ("\<^const>Formulas.formula.Or" ("_position" F)
###                   ("_applC" ("_position" disj_of_clause) ("_position" d))))
###               ("_position" G)))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CNF_Formulas_Sema"
### 0.420s elapsed time, 0.903s cpu time, 0.062s GC time
### Ambiguous input (line 265 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 48 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" disj_of_clause)
###           ("_applC" ("_position" mset) ("_position" F))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" G))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("_cargs" ("_position" disj_of_clause)
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" mset) ("_position" F))
###             ("_position" \<Gamma>))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" G))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" F)))
###           ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" G))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" F))))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" G))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" disj_of_clause)
###           ("_applC" ("_position" mset) ("_position" F))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" disj_of_clause)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" mset) ("_position" G))
###               ("_position" \<Gamma>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("_cargs" ("_position" disj_of_clause)
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" mset) ("_position" F))
###             ("_position" \<Gamma>))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" disj_of_clause)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" mset) ("_position" G))
###               ("_position" \<Gamma>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" F)))
###           ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" disj_of_clause)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" mset) ("_position" G))
###               ("_position" \<Gamma>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" disj_of_clause)
###             ("_applC" ("_position" mset) ("_position" F))))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" disj_of_clause)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" mset) ("_position" G))
###               ("_position" \<Gamma>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" disj_of_clause)
###           ("_applC" ("_position" mset) ("_position" F))))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" disj_of_clause)
###               ("_applC" ("_position" mset) ("_position" G)))
###             ("_position" \<Gamma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" image_mset)
###       ("_cargs" ("_position" disj_of_clause)
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" mset) ("_position" F))
###             ("_position" \<Gamma>))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("\<^const>LSC.LSC"
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" disj_of_clause)
###               ("_applC" ("_position" mset) ("_position" G)))
###             ("_position" \<Gamma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset)
###           ("_listcompr"
###             ("\<^const>Formulas.formula.Or"
###               ("_applC" ("_position" disj_of_clause) ("_position" c))
###               ("_applC" ("_position" disj_of_clause) ("_position" d)))
###             ("_lc_gen" ("_position" c) ("_position" F))
###             ("_lc_quals" ("_lc_gen" ("_position" d) ("_position" G))
###               ("_lc_end"))))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 316 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset) ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mset)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus" ("_position" F)
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset) ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset) ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Formulas.BigAnd"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mset)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus" ("_position" F)
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Formulas.BigAnd"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset) ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Formulas.BigAnd"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset) ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("\<^const>Formulas.BigAnd" ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" mset)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus" ("_position" F)
###           ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("\<^const>Formulas.BigAnd" ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" mset) ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("\<^const>Formulas.BigAnd" ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" mset) ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.minus_class.minus" ("_position" \<Gamma>)
###       ("\<^const>LSC.LSC"
###         ("_multiset"
###           ("_applC" ("\<^const>Formulas.formula.Not")
###             ("\<^const>Formulas.formula.Bot")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" \<Gamma>)
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.uminus_class.uminus"
###           ("_multiset"
###             ("_applC" ("\<^const>Formulas.formula.Not")
###               ("\<^const>Formulas.formula.Bot"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.minus_class.minus" ("_position" \<Gamma>)
###         ("_multiset"
###           ("_applC" ("\<^const>Formulas.formula.Not")
###             ("\<^const>Formulas.formula.Bot")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 336 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" mset) ("_position" F))
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Formulas.BigAnd"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" mset) ("_position" F))
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("\<^const>Formulas.BigAnd" ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" mset) ("_position" F))
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" mset) ("_position" F))
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("\<^const>Formulas.BigAnd" ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" mset) ("_position" F))
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>LSC.LSC"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mset)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus" ("_position" F)
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Formulas.BigAnd"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mset)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus" ("_position" F)
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.msins" ("\<^const>Formulas.BigAnd" ("_position" F))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mset)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus" ("_position" F)
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mset)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus" ("_position" F)
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>SC.msins" ("\<^const>Formulas.BigAnd" ("_position" F))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###         ("_applC" ("_position" is_nnf) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mset)
###           ("\<^const>LSC.LSC"
###             ("\<^const>Groups.plus_class.plus" ("_position" F)
###               ("_position" \<Gamma>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 347 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_comprehension_mset"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("_position" disj_of_clause) ("_position" c))
###           ("_applC" ("_position" disj_of_clause) ("_position" d)))
###         ("\<^const>SC.msins" ("_position" c) ("_position" d))
###         ("_position" C))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("\<^const>SC.msins" ("_position" c) ("_position" d))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_comprehension_mset"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("_position" disj_of_clause) ("_position" c))
###           ("_applC" ("_position" disj_of_clause) ("_position" d)))
###         ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###         ("_position" C))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("\<^const>SC.msins" ("_position" c) ("_position" d))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("_position" disj_of_clause) ("_position" c))
###             ("_applC" ("_position" disj_of_clause) ("_position" d)))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###           ("_position" C))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("\<^const>SC.msins" ("_position" c) ("_position" d))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("_position" disj_of_clause) ("_position" c))
###             ("_applC" ("_position" disj_of_clause) ("_position" d)))
###           ("\<^const>SC.msins" ("_position" c) ("_position" d))
###           ("_position" C))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("\<^const>SC.msins" ("_position" c) ("_position" d))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_comprehension_mset"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("_position" disj_of_clause) ("_position" c))
###           ("_applC" ("_position" disj_of_clause) ("_position" d)))
###         ("\<^const>SC.msins" ("_position" c) ("_position" d))
###         ("_position" C))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_comprehension_mset"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("_position" disj_of_clause) ("_position" c))
###           ("_applC" ("_position" disj_of_clause) ("_position" d)))
###         ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###         ("_position" C))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("_position" disj_of_clause) ("_position" c))
###             ("_applC" ("_position" disj_of_clause) ("_position" d)))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###           ("_position" C))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LSC.LSC"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("\<^const>Formulas.formula.Or"
###             ("_applC" ("_position" disj_of_clause) ("_position" c))
###             ("_applC" ("_position" disj_of_clause) ("_position" d)))
###           ("\<^const>SC.msins" ("_position" c) ("_position" d))
###           ("_position" C))
###         ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus"
###         ("_comprehension_mset"
###           ("_applC" ("_position" disj_of_clause)
###             ("\<^const>List.append" ("_position" c) ("_position" d)))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###           ("_position" C))
###         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_comprehension_mset"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("_position" disj_of_clause) ("_position" c))
###           ("_applC" ("_position" disj_of_clause) ("_position" d)))
###         ("\<^const>SC.msins" ("_position" c) ("_position" d))
###         ("_position" C))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus"
###           ("_comprehension_mset"
###             ("_applC" ("_position" disj_of_clause)
###               ("\<^const>List.append" ("_position" c) ("_position" d)))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###             ("_position" C))
###           ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.plus_class.plus"
###       ("_comprehension_mset"
###         ("\<^const>Formulas.formula.Or"
###           ("_applC" ("_position" disj_of_clause) ("_position" c))
###           ("_applC" ("_position" disj_of_clause) ("_position" d)))
###         ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###         ("_position" C))
###       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("\<^const>Groups.plus_class.plus"
###           ("_comprehension_mset"
###             ("_applC" ("_position" disj_of_clause)
###               ("\<^const>List.append" ("_position" c) ("_position" d)))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" d)))
###             ("_position" C))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 367 of "$AFP/Propositional_Proof_Systems/LSC.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("_cargs" ("_position" cnf_form_of)
###           ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" image_mset)
###         ("\<^const>LSC.LSC"
###           ("_applC" ("_position" cnf_form_of) ("_position" \<Gamma>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LSC.LSC"
###         ("_applC" ("_position" image_mset)
###           ("_cargs" ("_position" cnf_form_of) ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.LSC"
### 0.504s elapsed time, 1.040s cpu time, 0.123s GC time
Loading theory "Draft.LSC_Resolution" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates" via "Draft.Resolution_Compl_SC_Small")
### Ambiguous input (line 98 of "$AFP/Propositional_Proof_Systems/LSC_Resolution.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins"
###               ("_applC" ("_position" disj_of_clause) ("_position" R'))
###               ("\<^const>LSC.LSC"
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_comprehension_mset"
###                     ("_applC" ("_position" disj_of_clause) ("_position" c))
###                     ("_position" c)
###                     ("_applC" ("_position" mset) ("_position" S')))
###                   ("_position" \<Gamma>))))
###             ("\<^const>LSC.LSC"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_comprehension_mset"
###                   ("_applC" ("_position" disj_of_clause) ("_position" c))
###                   ("_position" c)
###                   ("_applC" ("_position" mset) ("_position" S')))
###                 ("_position" \<Gamma>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("_tuple" ("_applC" ("_position" disj_of_clause) ("_position" R'))
###             ("_tuple_arg"
###               ("\<^const>HOL.implies"
###                 ("\<^const>LSC.LSC"
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_comprehension_mset"
###                       ("_applC" ("_position" disj_of_clause)
###                         ("_position" c))
###                       ("_position" c)
###                       ("_applC" ("_position" mset) ("_position" S')))
###                     ("_position" \<Gamma>)))
###                 ("\<^const>LSC.LSC"
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_comprehension_mset"
###                       ("_applC" ("_position" disj_of_clause)
###                         ("_position" c))
###                       ("_position" c)
###                       ("_applC" ("_position" mset) ("_position" S')))
###                     ("_position" \<Gamma>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("\<^const>HOL.implies"
###             ("\<^const>LSC.LSC"
###               ("\<^const>SC.msins"
###                 ("_applC" ("_position" disj_of_clause) ("_position" R'))
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_comprehension_mset"
###                     ("_applC" ("_position" disj_of_clause) ("_position" c))
###                     ("_position" c)
###                     ("_applC" ("_position" mset) ("_position" S')))
###                   ("_position" \<Gamma>))))
###             ("\<^const>LSC.LSC"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_comprehension_mset"
###                   ("_applC" ("_position" disj_of_clause) ("_position" c))
###                   ("_position" c)
###                   ("_applC" ("_position" mset) ("_position" S')))
###                 ("_position" \<Gamma>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" disj_of_clause)
###               ("\<^const>LSC.LSC"
###                 ("\<^const>SC.msins" ("_position" R')
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_comprehension_mset"
###                       ("_applC" ("_position" disj_of_clause)
###                         ("_position" c))
###                       ("_position" c)
###                       ("_applC" ("_position" mset) ("_position" S')))
###                     ("_position" \<Gamma>)))))
###             ("\<^const>LSC.LSC"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_comprehension_mset"
###                   ("_applC" ("_position" disj_of_clause) ("_position" c))
###                   ("_position" c)
###                   ("_applC" ("_position" mset) ("_position" S')))
###                 ("_position" \<Gamma>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins"
###               ("_applC" ("_position" disj_of_clause) ("_position" R'))
###               ("\<^const>Groups.plus_class.plus"
###                 ("_comprehension_mset"
###                   ("_applC" ("_position" disj_of_clause) ("_position" c))
###                   ("_position" c)
###                   ("_applC" ("_position" mset) ("_position" S')))
###                 ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###             ("\<^const>LSC.LSC"
###               ("\<^const>Groups.plus_class.plus"
###                 ("_comprehension_mset"
###                   ("_applC" ("_position" disj_of_clause) ("_position" c))
###                   ("_position" c)
###                   ("_applC" ("_position" mset) ("_position" S')))
###                 ("_position" \<Gamma>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("_tuple" ("_applC" ("_position" disj_of_clause) ("_position" R'))
###             ("_tuple_arg"
###               ("\<^const>HOL.implies"
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_comprehension_mset"
###                     ("_applC" ("_position" disj_of_clause) ("_position" c))
###                     ("_position" c)
###                     ("_applC" ("_position" mset) ("_position" S')))
###                   ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###                 ("\<^const>LSC.LSC"
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_comprehension_mset"
###                       ("_applC" ("_position" disj_of_clause)
###                         ("_position" c))
###                       ("_position" c)
###                       ("_applC" ("_position" mset) ("_position" S')))
###                     ("_position" \<Gamma>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("\<^const>HOL.implies"
###             ("\<^const>SC.msins"
###               ("_applC" ("_position" disj_of_clause) ("_position" R'))
###               ("\<^const>LSC.LSC"
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_comprehension_mset"
###                     ("_applC" ("_position" disj_of_clause) ("_position" c))
###                     ("_position" c)
###                     ("_applC" ("_position" mset) ("_position" S')))
###                   ("_position" \<Gamma>))))
###             ("\<^const>Groups.plus_class.plus"
###               ("_comprehension_mset"
###                 ("_applC" ("_position" disj_of_clause) ("_position" c))
###                 ("_position" c)
###                 ("_applC" ("_position" mset) ("_position" S')))
###               ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("_tuple" ("_applC" ("_position" disj_of_clause) ("_position" R'))
###             ("_tuple_arg"
###               ("\<^const>HOL.implies"
###                 ("\<^const>LSC.LSC"
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_comprehension_mset"
###                       ("_applC" ("_position" disj_of_clause)
###                         ("_position" c))
###                       ("_position" c)
###                       ("_applC" ("_position" mset) ("_position" S')))
###                     ("_position" \<Gamma>)))
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_comprehension_mset"
###                     ("_applC" ("_position" disj_of_clause) ("_position" c))
###                     ("_position" c)
###                     ("_applC" ("_position" mset) ("_position" S')))
###                   ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("\<^const>HOL.implies"
###             ("\<^const>LSC.LSC"
###               ("\<^const>SC.msins"
###                 ("_applC" ("_position" disj_of_clause) ("_position" R'))
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_comprehension_mset"
###                     ("_applC" ("_position" disj_of_clause) ("_position" c))
###                     ("_position" c)
###                     ("_applC" ("_position" mset) ("_position" S')))
###                   ("_position" \<Gamma>))))
###             ("\<^const>Groups.plus_class.plus"
###               ("_comprehension_mset"
###                 ("_applC" ("_position" disj_of_clause) ("_position" c))
###                 ("_position" c)
###                 ("_applC" ("_position" mset) ("_position" S')))
###               ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" set) ("_position" R'))
###           ("_position" R))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" set) ("_position" S'))))
###             ("_position" S))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" disj_of_clause)
###               ("\<^const>LSC.LSC"
###                 ("\<^const>SC.msins" ("_position" R')
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_comprehension_mset"
###                       ("_applC" ("_position" disj_of_clause)
###                         ("_position" c))
###                       ("_position" c)
###                       ("_applC" ("_position" mset) ("_position" S')))
###                     ("_position" \<Gamma>)))))
###             ("\<^const>Groups.plus_class.plus"
###               ("_comprehension_mset"
###                 ("_applC" ("_position" disj_of_clause) ("_position" c))
###                 ("_position" c)
###                 ("_applC" ("_position" mset) ("_position" S')))
###               ("\<^const>LSC.LSC" ("_position" \<Gamma>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 144 of "$AFP/Propositional_Proof_Systems/LSC_Resolution.thy") produces 27 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>SC.msins" ("_position" R')
###                     ("\<^const>SC.msins" ("_position" S')
###                       ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###                   ("\<^const>SC.msins" ("_position" S')
###                     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("_tuple" ("_position" R')
###                   ("_tuple_arg"
###                     ("\<^const>HOL.implies"
###                       ("\<^const>SC.msins" ("_position" S')
###                         ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###                       ("\<^const>SC.msins" ("_position" S')
###                         ("\<^const>LSC.LSC"
###                           ("_position" \<Gamma>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>SC.msins"
###                     ("\<^const>SC.msins" ("_position" R') ("_position" S'))
###                     ("\<^const>LSC.LSC" ("_position" \<Gamma>)))
###                   ("\<^const>SC.msins" ("_position" S')
###                     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("_tuple" ("_position" R')
###                   ("_tuple_args" ("_position" S')
###                     ("_tuple_arg"
###                       ("\<^const>HOL.implies"
###                         ("\<^const>LSC.LSC" ("_position" \<Gamma>))
###                         ("\<^const>SC.msins" ("_position" S')
###                           ("\<^const>LSC.LSC"
###                             ("_position" \<Gamma>)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("_tuple"
###                   ("\<^const>SC.msins" ("_position" R') ("_position" S'))
###                   ("_tuple_arg"
###                     ("\<^const>HOL.implies"
###                       ("\<^const>LSC.LSC" ("_position" \<Gamma>))
###                       ("\<^const>SC.msins" ("_position" S')
###                         ("\<^const>LSC.LSC"
###                           ("_position" \<Gamma>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>LSC.LSC"
###                     ("\<^const>SC.msins"
###                       ("\<^const>SC.msins" ("_position" R')
###                         ("_position" S'))
###                       ("_position" \<Gamma>)))
###                   ("\<^const>SC.msins" ("_position" S')
###                     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>SC.msins" ("_position" R')
###                     ("\<^const>LSC.LSC"
###                       ("\<^const>SC.msins" ("_position" S')
###                         ("_position" \<Gamma>))))
###                   ("\<^const>SC.msins" ("_position" S')
###                     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("_tuple" ("_position" R')
###                   ("_tuple_arg"
###                     ("\<^const>HOL.implies"
###                       ("\<^const>LSC.LSC"
###                         ("\<^const>SC.msins" ("_position" S')
###                           ("_position" \<Gamma>)))
###                       ("\<^const>SC.msins" ("_position" S')
###                         ("\<^const>LSC.LSC"
###                           ("_position" \<Gamma>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>LSC.LSC"
###                     ("\<^const>SC.msins" ("_position" R')
###                       ("\<^const>SC.msins" ("_position" S')
###                         ("_position" \<Gamma>))))
###                   ("\<^const>SC.msins" ("_position" S')
###                     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S') ("_position" R'))
###     ("\<^const>HOL.All_binder" ("_position" \<Gamma>)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" is_nnf_mset) ("_position" \<Gamma>))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_disj) ("_position" R'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_nnf) ("_position" S'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" cnf) ("_position" R'))
###                 ("_Finset" ("_position" R)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" cnf) ("_position" S'))
###                   ("_position" S))
###                 ("_tuple"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>SC.msins" ("_position" R')
###                       ("\<^const>SC.msins" ("_position" S')
###                         ("\<^const>LSC.LSC" ("_position" \<Gamma>))))
###                     ("_position" S'))
###                   ("_tuple_arg"
###                     ("\<^const>LSC.LSC" ("_position" \<Gamma>))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.LSC_Resolution"
### 0.253s elapsed time, 0.262s cpu time, 0.000s GC time
Loading theory "Draft.Resolution_Compl_SC_Small" (required by "Draft.Resolution_Compl_SC_SmallMoreTemplates")
### theory "Draft.Resolution_Compl_SC_Small"
### 0.312s elapsed time, 0.353s cpu time, 0.056s GC time
Loading theory "Draft.Resolution_Compl_SC_SmallMoreTemplates"
val templateLemmas =
   [("Resolution_Compl_SC_Small.Resolution_complete_single",
     "\<Turnstile> ?F ==>
      cnf (nnf (\<^bold>\<not> ?F)) \<turnstile> \<box>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("Resolution_Compl_SC_Small.Resolution_complete'",
     "[| finite ?S; ?S \<TTurnstile> ?F |]
      ==> \<Union>
           ((cnf o nnf) ` ({\<^bold>\<not> ?F} Un ?S)) \<turnstile> \<box>",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_hole 5)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 0)),
                         template_hole 1)),
                     template_var 1)))),
             template_hole 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Resolution_Compl_SC_SmallMoreTemplates"
### 0.379s elapsed time, 0.502s cpu time, 0.000s GC time
val it = (): unit
