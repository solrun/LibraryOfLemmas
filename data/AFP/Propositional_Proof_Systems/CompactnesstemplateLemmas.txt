   [("Compactness.extended_superset", "?S <= extended ?S",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Compactness.compactness", "sat ?S = fin_sat ?S",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Compactness.extender_subset", "?S <= extender ?k ?S",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Compactness.extended_id", "extended (extended ?S) = extended ?S",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Compactness.extended_fin_sat", "fin_sat ?S ==> fin_sat (extended ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Compactness.extender_Sucset",
     "extender ?k ?S <= extender (Suc ?k) ?S",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Compactness.extender_fin_sat",
     "fin_sat ?S ==> fin_sat (extender ?n ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Compactness.fin_sat_insert",
     "fin_sat (?a \<triangleright> ?G) ==> fin_sat ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Compactness.not_fin_sat_extended_UNIV",
     "~ fin_sat ?S ==> extended ?S = UNIV",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Compactness.extended_max",
     "?F : extended ?S | \<^bold>\<not> ?F : extended ?S",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Compactness.fin_sat_antimono",
     "[| fin_sat ?F; ?G <= ?F |] ==> fin_sat ?G",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Compactness.fin_sat_extend",
     "fin_sat ?S ==>
      fin_sat (?F \<triangleright> ?S) |
      fin_sat (\<^bold>\<not> ?F \<triangleright> ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)))
           ))),
    ("Compactness.extended_complem",
     "fin_sat ?S ==>
      (?F : extended ?S) ~= (\<^bold>\<not> ?F : extended ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Compactness.ext_model",
     "fin_sat ?S ==>
      (%k. Atom k : extended ?S) \<Turnstile> ?F = (?F : extended ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Compactness.compact_entailment",
     "?\<Gamma> \<TTurnstile> ?F ==>
      EX \<Gamma>'.
         finite \<Gamma>' &
         \<Gamma>' <= ?\<Gamma> & \<Gamma>' \<TTurnstile> ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Compactness.extender_deeper",
     "[| ?F : extender ?k ?S; ?k <= ?l |] ==> ?F : extender ?l ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("Compactness.compact_to_formula",
     "[| ?\<Gamma> \<TTurnstile> ?F;
         !!\<Gamma>'.
            [| set \<Gamma>' <= ?\<Gamma>;
               \<Turnstile> \<^bold>\<And>\<Gamma>' \<^bold>\<rightarrow>
                            ?F |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Compactness.not_in_extended_FE",
     "[| fin_sat ?S; ~ sat (\<^bold>\<not> ?F \<triangleright> ?G);
         ?F ~: extended ?S; ?G <= extended ?S; finite ?G |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 1)),
                    template_var 0))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0)))]
