   [("Resolution.s_sub_all_clauses", "?S <= all_clauses ?S",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Resolution.res_in_all_clauses", "res ?S <= all_clauses ?S",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Resolution.atoms_res", "atoms_of_cnf (res ?S) <= atoms_of_cnf ?S",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Resolution.Res_in_all_clauses", "res ?S Un ?S <= all_clauses ?S",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Resolution.all_clauses_Res_inv",
     "all_clauses (res ?S Un ?S) = all_clauses ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Resolution.res", "?C : res ?S ==> ?S \<turnstile> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Resolution.Resolution_weaken",
     "?S \<turnstile> ?D ==> ?T Un ?S \<turnstile> ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Resolution.Res_sound",
     "Res ?S = Some ?S' ==> ALL C:?S'. ?S \<turnstile> C",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("Resolution.Rwhile_sound",
     "Rwhile ?S = Some ?S' ==> ALL C:?S'. ?S \<turnstile> C",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("Resolution.finite_res",
     "ALL C:?S. finite C ==> ALL C:res ?S. finite C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("Resolution.all_clauses_finite",
     "finite ?S & (ALL C:?S. finite C) ==> finite (all_clauses ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 0), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Resolution.Resolution_unnecessary",
     "ALL C:?T. ?S \<turnstile> C ==>
      (?T Un ?S \<turnstile> ?D) = (?S \<turnstile> ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Resolution.Res_terminates",
     "[| finite ?S; ALL C:?S. finite C |] ==> EX T. Res ?S = Some T",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0), t_empty)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Resolution.Resolution_taint_assumptions",
     "?S Un ?T \<turnstile> ?C ==>
      EX R<=?D. (Un) ?D ` ?S Un ?T \<turnstile> R Un ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Resolution.Resolution_useless_infinite",
     "[| ?S \<turnstile> ?R; finite ?R |]
      ==> EX S'<=?S. Ball S' finite & finite S' & (S' \<turnstile> ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Resolution.exlitE",
     "[| !!x. ?xe = x\<^sup>+ ==> ?P x; !!x. ?xe = x\<inverse> ==> False |]
      ==> EX x. ?xe = x\<^sup>+ & ?P x",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty))))]
