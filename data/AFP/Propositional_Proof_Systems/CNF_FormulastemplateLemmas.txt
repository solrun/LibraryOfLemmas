   [("CNF_Formulas.disj_of_clause_is", "is_disj (disj_of_clause ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.form_of_lit_is_lit", "is_lit_plus (form_of_lit ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.disj_of_clause_is_nnf", "is_nnf (disj_of_clause ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.form_of_cnf_is_nnf", "is_nnf (form_of_cnf ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.form_of_lit_is_nnf", "is_nnf (form_of_lit ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.is_nnf_nnf", "is_nnf (nnf ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.disj_is_nnf", "is_disj ?F ==> is_nnf ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF_Formulas.cnf_form_of_is", "is_nnf ?F ==> is_cnf (cnf_form_of ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.nnf_cnf_form", "is_nnf ?F ==> is_nnf (cnf_form_of ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.cnf_fin", "is_nnf ?F ==> finite (cnf ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.cnf_disj", "cnf (disj_of_clause ?R) = {set ?R}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("CNF_Formulas.cnf_form_of_cnf",
     "cnf (form_of_cnf ?S) = set (map set ?S)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("CNF_Formulas.nnf_BigAnd",
     "nnf \<^bold>\<And>?F = \<^bold>\<And>map nnf ?F",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("CNF_Formulas.is_nnf_nnf_id", "is_nnf ?F ==> nnf ?F = ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("CNF_Formulas.nnf_no_imp",
     "?A \<^bold>\<rightarrow> ?B ~: set (subformulae (nnf ?F))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))
             )
         )),
    ("CNF_Formulas.is_cnf_BigAnd",
     "is_cnf \<^bold>\<And>?ls = (ALL l:set ?ls. is_cnf l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("CNF_Formulas.BigOr_is_not_cnf",
     "is_cnf \<^bold>\<Or>?ls = (ALL l:set ?ls. is_lit_plus l)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("CNF_Formulas.is_nnf_BigAnd",
     "is_nnf \<^bold>\<And>?ls = (ALL l:set ?ls. is_nnf l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("CNF_Formulas.is_nnf_BigOr",
     "is_nnf \<^bold>\<Or>?ls = (ALL l:set ?ls. is_nnf l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("CNF_Formulas.disj_of_clause_simps",
     "disj_of_clause (?F # ?FF) =
      form_of_lit ?F \<^bold>\<or> disj_of_clause ?FF",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("CNF_Formulas.cnf_cnf", "is_nnf ?F ==> cnf (cnf_form_of ?F) = cnf ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("CNF_Formulas.cnf_BigAnd",
     "cnf \<^bold>\<And>?ls = \<Union> (cnf ` set ?ls)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("CNF_Formulas.BigOr_is_not_cnf''",
     "is_cnf \<^bold>\<Or>?ls ==> ALL l:set ?ls. is_lit_plus l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("CNF_Formulas.BigOr_is_not_cnf'",
     "ALL l:set ?ls. is_lit_plus l ==> is_cnf \<^bold>\<Or>?ls",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.form_of_lit_cases",
     "form_of_lit ?xa =
      (case ?xa of xda\<^sup>+ => Atom xda
       | xea\<inverse> => \<^bold>\<not> (Atom xea))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_app (template_hole 2, t_empty), t_empty),
         template_var 0))),
    ("CNF_Formulas.cnf_fin", "[| is_nnf ?F; ?C : cnf ?F |] ==> finite ?C",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF_Formulas.subformulae_nnf",
     "[| is_nnf ?F; ?G : set (subformulae ?F) |] ==> is_nnf ?G",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("CNF_Formulas.is_nnf_NotD",
     "is_nnf (\<^bold>\<not> ?F) ==> (EX k. ?F = Atom k) | ?F = \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("CNF_Formulas.cnf_disj_ex",
     "is_disj ?F ==> EX R. cnf ?F = {R} | cnf ?F = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("CNF_Formulas.cnf_BigOr",
     "cnf \<^bold>\<Or>?x @ ?y =
      {f Un g |f g. f : cnf \<^bold>\<Or>?x & g : cnf \<^bold>\<Or>?y}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app (template_hole 5, t_empty))),
    ("CNF_Formulas.is_lit_plus_cases",
     "is_lit_plus ?xa =
      (case ?xa of Atom xda => True | \<bottom> => True
       | \<^bold>\<not> (Atom xea) => True
       | \<^bold>\<not> \<bottom> => True | \<^bold>\<not> _ => False
       | _ => False)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, t_empty),
                   template_hole 1),
                 t_empty),
               t_empty),
             t_empty),
           t_empty),
         template_var 0)))]
