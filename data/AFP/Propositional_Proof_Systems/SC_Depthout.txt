Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SC_DepthMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.SC_DepthMoreTemplates" via "Draft.SC_Depth" via "Draft.SC" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SC_DepthMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SC_DepthMoreTemplates" via "Draft.SC_Depth" via "Draft.SC" via "Draft.Formulas" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.615s cpu time, 0.046s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SC_DepthMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.334s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SC_DepthMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.821s cpu time, 0.084s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SC_DepthMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.401s elapsed time, 1.616s cpu time, 0.129s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SC_DepthMoreTemplates" via "Draft.SC_Depth" via "Draft.SC" via "Draft.Formulas")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.475s elapsed time, 1.895s cpu time, 0.188s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SC_DepthMoreTemplates" via "Draft.SC_Depth" via "Draft.SC")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.051s elapsed time, 3.974s cpu time, 0.782s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SC_DepthMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.Countable"
### 1.365s elapsed time, 5.197s cpu time, 0.971s GC time
Loading theory "Draft.Formulas" (required by "Draft.SC_DepthMoreTemplates" via "Draft.SC_Depth" via "Draft.SC")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
### theory "HOL-Library.BigO"
### 1.110s elapsed time, 4.204s cpu time, 1.129s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.434s elapsed time, 9.018s cpu time, 2.084s GC time
Loading theory "Draft.Templates" (required by "Draft.SC_DepthMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "Draft.Templates"
### 0.061s elapsed time, 0.182s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SC_DepthMoreTemplates")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.945s elapsed time, 3.065s cpu time, 1.182s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Formulas"
### 2.506s elapsed time, 7.930s cpu time, 2.394s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.104s elapsed time, 13.149s cpu time, 3.399s GC time
Loading theory "Draft.SC" (required by "Draft.SC_DepthMoreTemplates" via "Draft.SC_Depth")
### Ambiguous input (line 16 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SCp"
  Proving monotonicity ...
### Ambiguous input (line 40 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" S)))
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" S)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###         ("_position" S))
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" S)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###           ("_position" S)))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G)))
###         ("_position" S))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" S)))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>Formulas.formula.Or" ("_position" F)
###               ("_position" G)))
###           ("_position" S))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###             ("_position" S)))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>Formulas.formula.Or" ("_position" F)
###               ("_position" G)))
###           ("_position" S))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Or" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" S)))
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" H))
###             ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G)))
###             ("_position" S))
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" H))
###             ("_position" S)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins" ("_position" H)
###             ("\<^const>SC.msins"
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G))
###               ("_position" S)))
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("\<^const>SC.msins" ("_position" H) ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>Formulas.formula.And" ("_position" F)
###                 ("_position" G)))
###             ("_position" S))
###           ("\<^const>SC.msins"
###             ("\<^const>Formulas.formula.And" ("_position" F)
###               ("_position" G))
###             ("\<^const>SC.msins" ("_position" H) ("_position" S))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("_applC" ("\<^const>Formulas.formula.Not")
###                   ("_position" G)))
###               ("_position" S))
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" H))
###               ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" S)))
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" H))
###               ("_position" S))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("_applC" ("\<^const>Formulas.formula.Not")
###                   ("_position" G)))
###               ("_position" S))
###             ("\<^const>SC.msins"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###               ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>SC.msins" ("_position" H)
###               ("\<^const>SC.msins"
###                 ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###                 ("_position" S)))
###             ("\<^const>SC.msins"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" G))
###               ("\<^const>SC.msins" ("_position" H) ("_position" S)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>Formulas.formula.Bot"))
###                 ("_position" S))
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" H))
###                 ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" S)))
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" H))
###                 ("_position" S)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>Formulas.formula.Bot"))
###                 ("_position" S))
###               ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>SC.msins" ("_position" H)
###                 ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                   ("_position" S)))
###               ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("_position" S))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" S)))
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" H))
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_applC" ("_position" Atom) ("_position" l)))
###                   ("_position" S))
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" H))
###                   ("_position" S))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins" ("_position" H)
###                   ("\<^const>SC.msins"
###                     ("_applC" ("_position" Atom) ("_position" l))
###                     ("_position" S)))
###                 ("\<^const>SC.msins"
###                   ("_applC" ("_position" Atom) ("_position" l))
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_position" S)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" NO_MATCH)
###       ("_cargs"
###         ("\<^const>Formulas.formula.Imp" ("_position" I) ("_position" J))
###         ("_position" H))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" NO_MATCH)
###         ("_cargs"
###           ("\<^const>Formulas.formula.Or" ("_position" I) ("_position" J))
###           ("_position" H))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" NO_MATCH)
###           ("_cargs"
###             ("\<^const>Formulas.formula.And" ("_position" I)
###               ("_position" J))
###             ("_position" H))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" NO_MATCH)
###             ("_cargs"
###               ("_applC" ("\<^const>Formulas.formula.Not") ("_position" J))
###               ("_position" H))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" NO_MATCH)
###               ("_cargs" ("\<^const>Formulas.formula.Bot") ("_position" H))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" NO_MATCH)
###                 ("_cargs" ("_applC" ("_position" Atom) ("_position" k))
###                   ("_position" H))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>SC.msins"
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_applC" ("_position" Atom) ("_position" l)))
###                   ("_position" S))
###                 ("\<^const>SC.msins"
###                   ("_applC" ("_position" Atom) ("_position" l))
###                   ("\<^const>SC.msins" ("_position" H)
###                     ("_position" S)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rule already declared as safe elimination (elim!)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta>
### Rule already declared as safe elimination (elim!)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta>
### Ambiguous input (line 61 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("_position" \<Delta>))
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" \<Delta>)
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("\<^const>HOL.conj" ("_position" \<Delta>)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("\<^const>SC.SCp"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("\<^const>SC.SCp" ("_position" \<Gamma>)
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp"
###       ("\<^const>SC.SCp" ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###           ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/Propositional_Proof_Systems/SC.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>HOL.eq"
###         ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###           ("_position" \<Delta>))
###         ("_position" \<Gamma>)))
###     ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC.SCp" ("_position" \<Gamma>)
###     ("\<^const>HOL.eq"
###       ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###         ("_position" \<Delta>))
###       ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SC.SCp" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("\<^const>Formulas.formula.Bot")
###         ("_position" \<Delta>)))
###     ("\<^const>SC.SCp" ("_position" \<Gamma>) ("_position" \<Delta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SC"
### 0.393s elapsed time, 0.542s cpu time, 0.066s GC time
Loading theory "Draft.SC_Depth" (required by "Draft.SC_DepthMoreTemplates")
### Ambiguous input (line 27 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_applC" ("_position" Suc) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_applC" ("_position" Suc) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_applC" ("_position" Suc) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_applC" ("_position" Suc) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SCc"
  Proving monotonicity ...
?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n + ?m
### Ambiguous input (line 74 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G) ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" G)
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" H)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" F))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" F)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Delta>))))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 79 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 196 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" I))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F)
###             ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###           ("_position" I))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" G) ("_position" H))
###             ("_position" I)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" G) ("_position" H))
###             ("_position" I))
###           ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" I)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G)
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G)
###             ("\<^const>SC.msins" ("_position" H) ("_position" I)))
###           ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" I))
###           ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" \<Delta>))))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("\<^const>SC.msins" ("_position" I) ("_position" \<Delta>)))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 80 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G) ("_position" H))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins" ("_position" H) ("_position" \<Gamma>))))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" H)
###           ("\<^const>SC.msins" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 196 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" F) ("_position" G))
###             ("_position" H))
###           ("_position" I))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F)
###             ("\<^const>SC.msins" ("_position" G) ("_position" H)))
###           ("_position" I))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" G) ("_position" H))
###             ("_position" I)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" G) ("_position" H))
###             ("_position" I))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("\<^const>SC.msins" ("_position" H) ("_position" I)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" G)
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" G)
###             ("\<^const>SC.msins" ("_position" H) ("_position" I)))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" H) ("_position" I))
###           ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G)
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" \<Gamma>))))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" G))
###           ("_position" H))
###         ("\<^const>SC.msins" ("_position" I) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins"
###             ("\<^const>SC.msins" ("_position" H) ("_position" I))
###             ("_position" F))
###           ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rule already declared as introduction (intro)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?H, ?F, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?F, ?G, ?H, ?I, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?H, ?I, ?F, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?H, ?F, ?G, ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?I, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?H, ?I, ?F, ?G, ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?H, ?F, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?F, ?G, ?H, ?I, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
### ?H, ?I, ?F, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?H, ?F, ?G, ?\<Delta> \<down> ?n
### Rule already declared as introduction (intro)
### ?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?I, ?\<Delta> \<down> ?n ==>
### ?\<Gamma> \<Rightarrow> ?H, ?I, ?F, ?G, ?\<Delta> \<down> ?n
### Ambiguous input (line 85 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Imp"
###         ("_applC" ("_position" Atom) ("_position" C))
###         ("\<^const>Formulas.formula.Imp"
###           ("_applC" ("_position" Atom) ("_position" D))
###           ("_applC" ("_position" Atom) ("_position" E))))
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp"
###           ("_applC" ("_position" Atom) ("_position" k))
###           ("\<^const>Formulas.formula.And"
###             ("_applC" ("_position" Atom) ("_position" C))
###             ("_applC" ("_position" Atom) ("_position" D))))
###         ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###           ("\<^const>Multiset.empty_mset"))))
###     ("_multiset" ("_applC" ("_position" Atom) ("_position" E)))
###     ("_applC" ("_position" Suc)
###       ("_applC" ("_position" Suc)
###         ("_applC" ("_position" Suc)
###           ("_applC" ("_position" Suc)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp"
###           ("_applC" ("_position" Atom) ("_position" C))
###           ("\<^const>Formulas.formula.Imp"
###             ("_applC" ("_position" Atom) ("_position" D))
###             ("_applC" ("_position" Atom) ("_position" E))))
###         ("\<^const>Formulas.formula.Imp"
###           ("_applC" ("_position" Atom) ("_position" k))
###           ("\<^const>Formulas.formula.And"
###             ("_applC" ("_position" Atom) ("_position" C))
###             ("_applC" ("_position" Atom) ("_position" D)))))
###       ("\<^const>SC.msins" ("_applC" ("_position" Atom) ("_position" k))
###         ("\<^const>Multiset.empty_mset")))
###     ("_multiset" ("_applC" ("_position" Atom) ("_position" E)))
###     ("_applC" ("_position" Suc)
###       ("_applC" ("_position" Suc)
###         ("_applC" ("_position" Suc)
###           ("_applC" ("_position" Suc)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins"
###         ("\<^const>Formulas.formula.Imp"
###           ("_applC" ("_position" Atom) ("_position" C))
###           ("\<^const>Formulas.formula.Imp"
###             ("_applC" ("_position" Atom) ("_position" D))
###             ("_applC" ("_position" Atom) ("_position" E))))
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp"
###             ("_applC" ("_position" Atom) ("_position" k))
###             ("\<^const>Formulas.formula.And"
###               ("_applC" ("_position" Atom) ("_position" C))
###               ("_applC" ("_position" Atom) ("_position" D))))
###           ("_applC" ("_position" Atom) ("_position" k))))
###       ("\<^const>Multiset.empty_mset"))
###     ("_multiset" ("_applC" ("_position" Atom) ("_position" E)))
###     ("_applC" ("_position" Suc)
###       ("_applC" ("_position" Suc)
###         ("_applC" ("_position" Suc)
###           ("_applC" ("_position" Suc)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC.msins"
###       ("\<^const>Formulas.formula.Imp"
###         ("_applC" ("_position" Atom) ("_position" C))
###         ("\<^const>Formulas.formula.Imp"
###           ("_applC" ("_position" Atom) ("_position" D))
###           ("_applC" ("_position" Atom) ("_position" E))))
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp"
###             ("_applC" ("_position" Atom) ("_position" k))
###             ("\<^const>Formulas.formula.And"
###               ("_applC" ("_position" Atom) ("_position" C))
###               ("_applC" ("_position" Atom) ("_position" D))))
###           ("_applC" ("_position" Atom) ("_position" k)))
###         ("\<^const>Multiset.empty_mset")))
###     ("_multiset" ("_applC" ("_position" Atom) ("_position" E)))
###     ("_applC" ("_position" Suc)
###       ("_applC" ("_position" Suc)
###         ("_applC" ("_position" Suc)
###           ("_applC" ("_position" Suc)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC.msins"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins"
###           ("\<^const>Formulas.formula.Imp"
###             ("_applC" ("_position" Atom) ("_position" C))
###             ("\<^const>Formulas.formula.Imp"
###               ("_applC" ("_position" Atom) ("_position" D))
###               ("_applC" ("_position" Atom) ("_position" E))))
###           ("\<^const>Formulas.formula.Imp"
###             ("_applC" ("_position" Atom) ("_position" k))
###             ("\<^const>Formulas.formula.And"
###               ("_applC" ("_position" Atom) ("_position" C))
###               ("_applC" ("_position" Atom) ("_position" D)))))
###         ("_applC" ("_position" Atom) ("_position" k)))
###       ("\<^const>Multiset.empty_mset"))
###     ("_multiset" ("_applC" ("_position" Atom) ("_position" E)))
###     ("_applC" ("_position" Suc)
###       ("_applC" ("_position" Suc)
###         ("_applC" ("_position" Suc)
###           ("_applC" ("_position" Suc)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>)))
###       ("_position" \<Delta>) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###     ("_position" \<Delta>)
###     ("\<^const>HOL.conj" ("_position" n)
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###       ("_position" \<Delta>)
###       ("\<^const>HOL.conj" ("_position" n)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>) ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###       ("_position" \<Delta>) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###     ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###     ("\<^const>HOL.conj" ("_position" n)
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))
###         ("_position" \<Delta>) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SC_Depth.SCc"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("\<^const>HOL.conj" ("_position" n)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Gamma>))))
###     ("_position" \<Delta>) ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 148 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("_position" n))
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))
###         ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("\<^const>HOL.conj" ("_position" n)
###         ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###           ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" And)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###         ("\<^const>HOL.conj" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("_position" F) ("_position" G))
###         ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins"
###         ("_applC" ("_position" Or)
###           ("_cargs" ("_position" F) ("_position" G)))
###         ("_position" \<Delta>))
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" G) ("_position" \<Delta>)))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 150 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###         ("_position" \<Delta>)
###         ("\<^const>HOL.implies" ("_position" n)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###       ("_position" \<Delta>) ("_position" n))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_arg"
###         ("\<^const>SC_Depth.SCc"
###           ("\<^const>SC_Depth.SCc"
###             ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>HOL.implies" ("_position" n)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###           ("_position" \<Delta>) ("_position" n))))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" F))
###           ("_position" \<Gamma>))
###         ("_position" \<Delta>)
###         ("\<^const>HOL.implies" ("_position" n)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###       ("_position" \<Delta>) ("_position" n))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_args" ("_position" F)
###         ("_tuple_arg"
###           ("\<^const>SC_Depth.SCc"
###             ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>HOL.implies" ("_position" n)
###                 ("\<^const>SC.msins" ("_position" F)
###                   ("_position" \<Gamma>))))
###             ("_position" \<Delta>) ("_position" n)))))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("\<^const>SC.msins" ("_position" F) ("_position" F))
###       ("_tuple_arg"
###         ("\<^const>SC_Depth.SCc"
###           ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>HOL.implies" ("_position" n)
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))))
###           ("_position" \<Delta>) ("_position" n))))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###         ("_position" \<Delta>) ("_position" n))
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###         ("_position" \<Delta>) ("_position" n)))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_arg"
###         ("\<^const>HOL.implies"
###           ("\<^const>SC_Depth.SCc"
###             ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###             ("_position" \<Delta>) ("_position" n))
###           ("\<^const>SC_Depth.SCc"
###             ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###             ("_position" \<Delta>) ("_position" n)))))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("_position" F) ("_position" F))
###           ("_position" \<Gamma>))
###         ("_position" \<Delta>) ("_position" n))
###       ("\<^const>SC_Depth.SCc"
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###         ("_position" \<Delta>) ("_position" n)))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC.msins" ("_position" F)
###         ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>)))
###       ("_position" \<Delta>)
###       ("\<^const>HOL.implies" ("_position" n)
###         ("\<^const>SC_Depth.SCc"
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###           ("_position" \<Delta>) ("_position" n))))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_tuple" ("_position" F)
###       ("_tuple_arg"
###         ("\<^const>SC_Depth.SCc"
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###           ("_position" \<Delta>)
###           ("\<^const>HOL.implies" ("_position" n)
###             ("\<^const>SC_Depth.SCc"
###               ("\<^const>SC.msins" ("_position" F) ("_position" \<Gamma>))
###               ("_position" \<Delta>) ("_position" n))))))
###     ("\<^const>SC_Depth.SCc"
###       ("\<^const>SC_Depth.SCc" ("_position" \<Gamma>)
###         ("\<^const>SC.msins" ("_position" F)
###           ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>)))
###         ("\<^const>HOL.implies" ("_position" n) ("_position" \<Gamma>)))
###       ("\<^const>SC.msins" ("_position" F) ("_position" \<Delta>))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cut_bound :: "nat => nat => 'a formula => nat"
consts
  cut_bound' :: "nat => 'a formula => nat"
consts
  depth :: "'a formula => nat"
consts
  cbnd :: "'a => nat => 'a"
### Ambiguous input (line 544 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 42 parse trees (10 displayed):
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2)))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args"
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args"
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3)))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.zero_class.zero") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3)))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 545 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 42 parse trees (10 displayed):
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2)))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args"
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args"
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3)))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("\<^const>Groups.one_class.one") ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3)))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SC_Depth"
### 0.475s elapsed time, 0.705s cpu time, 0.039s GC time
Loading theory "Draft.SC_DepthMoreTemplates"
### Ambiguous input (line 546 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 42 parse trees (10 displayed):
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2)))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args"
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args"
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3)))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 2)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3)))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"[0, 0, 0, 0, 0]"
  :: "int list"
"[2, 4, 16, 256, 65536]"
  :: "int list"
### Ambiguous input (line 547 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 42 parse trees (10 displayed):
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2)))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args"
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args"
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3)))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("_applC" ("_position" cbnd)
###       ("_constrain" ("_Numeral" ("_constify" ("_position" 3)))
###         ("_type_name" int)))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3)))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"[4, 8, 32, 512, 131072]"
  :: "int list"
"[6, 12, 48, 768, 196608]"
  :: "int list"
### Ambiguous input (line 551 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 5 parse trees:
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 549 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 42 parse trees (10 displayed):
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2)))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args"
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))
###             ("_Numeral" ("_constify" ("_position" 4)))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args"
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3)))))
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3)))))
###         ("_Numeral" ("_constify" ("_position" 4)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"[2, 7, 505]"
  :: "int list"
"[2, 4, 16, 256, 65536]"
  :: "int list"
### Ambiguous input (line 552 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 5 parse trees:
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound')
###           ("_Numeral" ("_constify" ("_position" 3)))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" Imp)
###                 ("_cargs"
###                   ("_applC" ("_position" Or)
###                     ("_cargs" ("_position" F) ("_position" F)))
###                   ("_applC" ("_position" And)
###                     ("_cargs" ("_position" F) ("_position" F))))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("\<^const>SC.msins"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val templateLemmas =
   [("SC_Depth.cbnd_grow", "?k <= ??.SC_Depth.cbnd ?k ?d",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SC_Depth.BotL_canonical'",
     "\<bottom>, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> Suc ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("SC_Depth.no_0_SC",
     "?\<Gamma> \<Rightarrow> ?\<Delta> \<down> 0 ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate (template_hole 0))),
    ("SC_Depth.cut_bound'_cbnd",
     "??.SC_Depth.cut_bound' ?n ?F <= ??.SC_Depth.cbnd ?n (depth ?F)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SC_Depth.cut_bound_max'",
     "max ?n (??.SC_Depth.cut_bound' ?n ?F) = ??.SC_Depth.cut_bound' ?n ?F",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SC_Depth.SC_SCp_eq",
     "(EX n. ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> n) =
      ?\<Gamma> \<Rightarrow> ?\<Delta>",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SC_Depth.cut_bound_'",
     "cut_bound ?n ?m ?F <= ??.SC_Depth.cut_bound' (max ?n ?m) ?F",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("SC_Depth.cbnd_comm",
     "??.SC_Depth.cbnd (?l * ?k) ?n = ?l * ??.SC_Depth.cbnd ?k ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SC_Depth.Ax_canonical'",
     "Atom ?k, ?\<Gamma> \<Rightarrow> Atom ?k, ?\<Delta> \<down> Suc ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SC_Depth.deeper_suc",
     "?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SC_Depth.cut_bound'_mono",
     "?a <= ?b ==>
      ??.SC_Depth.cut_bound' ?a ?F <= ??.SC_Depth.cut_bound' ?b ?F",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SC_Depth.cbnd_mono",
     "?b <= ?d ==> ??.SC_Depth.cbnd ?a ?b <= ??.SC_Depth.cbnd ?a ?d",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SC_Depth.deeper",
     "?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n + ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SC_Depth.weakenR'",
     "?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?F, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("SC_Depth.weakenL'",
     "?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("SC_Depth.cut_bound_max",
     "max ?n (??.SC_Depth.cut_bound' (max ?n ?m) ?F) =
      ??.SC_Depth.cut_bound' (max ?n ?m) ?F",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("SC_Depth.Bot_delR'",
     "?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?\<Delta> - (\<bottom>, {#}) \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_var 0)
           ))),
    ("SC_Depth.cbnd_closed", "??.SC_Depth.cbnd ?k ?n = ?k * 2 ^ 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("SC_Depth.NotR_inv'",
     "?\<Gamma> \<Rightarrow> \<^bold>\<not> ?F, ?\<Delta> \<down> ?n ==>
      ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_var 1),
             template_var 0)
           ))),
    ("SC_Depth.NotL_inv'",
     "\<^bold>\<not> ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?F, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 3)),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("SC_Depth.inR1'",
     "?\<Gamma> \<Rightarrow> ?G, ?H, ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?H, ?G, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))),
             template_var 0)
           ))),
    ("SC_Depth.ImpR_inv'",
     "?\<Gamma> \<Rightarrow>
      ?F \<^bold>\<rightarrow> ?G, ?\<Delta> \<down> ?n ==>
      ?F, ?\<Gamma> \<Rightarrow> ?G, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("SC_Depth.OrR_inv'",
     "?\<Gamma> \<Rightarrow> ?F \<^bold>\<or> ?G, ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?F, ?G, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_var 0)
           ))),
    ("SC_Depth.inL1'",
     "?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?H, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 2))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2))),
               template_var 1),
             template_var 0)
           ))),
    ("SC_Depth.AndL_inv'",
     "?F \<^bold>\<and> ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?F, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 4),
                        template_var 3)),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))),
               template_var 1),
             template_var 0)
           ))),
    ("SC_Depth.cut_bound_mono",
     "[| ?a <= ?c; ?b <= ?d |]
      ==> cut_bound ?a ?b ?F <= cut_bound ?c ?d ?F",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("SC_Depth.inR2'",
     "?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?G, ?H, ?F, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 1)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)))),
             template_var 0)
           ))),
    ("SC_Depth.inR3'",
     "?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?H, ?F, ?G, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 1)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)))),
             template_var 0)
           ))),
    ("SC_Depth.inL2'",
     "?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?G, ?H, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 5),
                    template_app
                     (template_app (template_hole 0, template_var 4),
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 2)))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 2)))),
               template_var 1),
             template_var 0)
           ))),
    ("SC_Depth.inL3'",
     "?F, ?G, ?H, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?H, ?F, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 5),
                    template_app
                     (template_app (template_hole 0, template_var 4),
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 2)))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 2)))),
               template_var 1),
             template_var 0)
           ))),
    ("SC_Depth.AndR_inv'",
     "?\<Gamma> \<Rightarrow> ?F \<^bold>\<and> ?G, ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?F, ?\<Delta> \<down> ?n &
      ?\<Gamma> \<Rightarrow> ?G, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("SC_Depth.ImpL_inv'",
     "?F \<^bold>\<rightarrow> ?G, ?\<Gamma> \<Rightarrow>
      ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?F, ?\<Delta> \<down> ?n &
      ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3)),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1),
               template_var 0))
           ))),
    ("SC_Depth.OrL_inv'",
     "?F \<^bold>\<or> ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n &
      ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3)),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1),
               template_var 0))
           ))),
    ("SC_Depth.cut_bound",
     "[| ?\<Gamma> \<Rightarrow> ?F, ?\<Delta> \<down> ?n;
         ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?m |]
      ==> ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> cut_bound ?n ?m ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 4)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("SC_Depth.Cut_Atom_depth",
     "[| Atom ?k, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n;
         ?\<Gamma> \<Rightarrow> Atom ?k, ?\<Delta> \<down> ?m |]
      ==> ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n + ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SC_Depth.inR4'",
     "?\<Gamma> \<Rightarrow> ?F, ?G, ?H, ?I, ?\<Delta> \<down> ?n ==>
      ?\<Gamma> \<Rightarrow> ?H, ?I, ?F, ?G, ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 6),
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 1))))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 1))))),
             template_var 0)
           ))),
    ("SC_Depth.inL4'",
     "?F, ?G, ?H, ?I, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n ==>
      ?H, ?I, ?F, ?G, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 6),
                    template_app
                     (template_app (template_hole 0, template_var 5),
                      template_app
                       (template_app (template_hole 0, template_var 4),
                        template_app
                         (template_app (template_hole 0, template_var 3),
                          template_var 2))))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 6),
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 2))))),
               template_var 1),
             template_var 0)
           ))),
    ("SC_Depth.contract'",
     "(?F, ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n -->
       ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n) &
      (?\<Gamma> \<Rightarrow> ?F, ?F, ?\<Delta> \<down> ?n -->
       ?\<Gamma> \<Rightarrow> ?F, ?\<Delta> \<down> ?n)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 3),
                         template_app
                          (template_app (template_hole 0, template_var 3),
                           template_var 2))),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2)),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1))),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_var 0)))
         )),
    ("SC_Depth.cut'",
     "[| ?\<Gamma> \<Rightarrow> ?F, ?\<Delta> \<down> ?n;
         ?F, ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n |]
      ==> ?\<Gamma> \<Rightarrow> ?\<Delta> \<down> ?n * 2 ^ 2 ^ depth ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_app (template_hole 0, template_var 2)))))
           )))]:
   (string * thm * template) list
### theory "Draft.SC_DepthMoreTemplates"
### 0.648s elapsed time, 2.544s cpu time, 0.303s GC time
"%u. (((u \<^bold>\<or> u) \<^bold>\<and> (u \<^bold>\<or> u)) \<^bold>\<or>
      ((u \<^bold>\<or> u) \<^bold>\<and>
       (u \<^bold>\<or> u))) \<^bold>\<and>
     (((u \<^bold>\<or> u) \<^bold>\<and> (u \<^bold>\<or> u)) \<^bold>\<or>
      ((u \<^bold>\<or> u) \<^bold>\<and> (u \<^bold>\<or> u)))"
  :: "'a formula => 'a formula"
"[2, 16, 65536]"
  :: "int list"
### Ambiguous input (line 548 of "$AFP/Propositional_Proof_Systems/SC_Depth.thy") produces 1430 parse trees (10 displayed):
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###                 ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###                   ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                     ("_Numeral" ("_constify" ("_position" 7)))))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args" ("_Numeral" ("_constify" ("_position" 2)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###                 ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                   ("_Numeral" ("_constify" ("_position" 7))))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###                 ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                   ("_Numeral" ("_constify" ("_position" 7))))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("_Numeral" ("_constify" ("_position" 2)))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                 ("_Numeral" ("_constify" ("_position" 7)))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 3)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                 ("_Numeral" ("_constify" ("_position" 7)))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args" ("\<^const>Groups.one_class.one")
###           ("_args"
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))
###             ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###                 ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                   ("_Numeral" ("_constify" ("_position" 7))))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Groups.one_class.one"))
###         ("_args"
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                 ("_Numeral" ("_constify" ("_position" 7)))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args" ("\<^const>Groups.zero_class.zero")
###         ("_args"
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3)))))
###           ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###               ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###                 ("_Numeral" ("_constify" ("_position" 7)))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>SC.msins" ("\<^const>Groups.one_class.one")
###             ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###               ("_Numeral" ("_constify" ("_position" 7))))))))))
### ("_applC" ("_position" map)
###   ("_cargs"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" int)
###           ("_lambda" ("_position" n)
###             ("\<^const>Rings.divide_class.divide" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 3))))))
###         ("_applC" ("_position" cut_bound)
###           ("_cargs" ("_Numeral" ("_constify" ("_position" 3)))
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("_lambda" ("_position" n)
###         ("_applC"
###           ("\<^const>Nat.compower"
###             ("_lambda" ("_position" F)
###               ("_applC" ("_position" And)
###                 ("_cargs" ("_position" F) ("_position" F))))
###             ("_position" n))
###           ("_applC" ("_position" Atom)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_list"
###       ("_args"
###         ("\<^const>SC.msins"
###           ("\<^const>SC.msins" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>SC.msins" ("_Numeral" ("_constify" ("_position" 2)))
###             ("_Numeral" ("_constify" ("_position" 3)))))
###         ("_args" ("_Numeral" ("_constify" ("_position" 4)))
###           ("_args" ("_Numeral" ("_constify" ("_position" 5)))
###             ("_args" ("_Numeral" ("_constify" ("_position" 6)))
###               ("_Numeral" ("_constify" ("_position" 7))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"[2, 3, 5, 9, 17, 33, 65, 129]"
  :: "int list"
val it = (): unit
