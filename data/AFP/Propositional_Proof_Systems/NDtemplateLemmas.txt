   [("ND.Top_provable", "?\<Gamma> \<turnstile> \<top>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("ND.NotBot_provable",
     "?\<Gamma> \<turnstile> \<^bold>\<not> \<bottom>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("ND.ND_lem", "{} \<turnstile> \<^bold>\<not> ?F \<^bold>\<or> ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0))
         )),
    ("ND.Not2I",
     "?F \<triangleright> ?\<Gamma> \<turnstile>
      \<^bold>\<not> (\<^bold>\<not> ?F)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_var 1)))
         )),
    ("ND.Not2E",
     "\<^bold>\<not>
       (\<^bold>\<not> ?F) \<triangleright> ?\<Gamma> \<turnstile>
      ?F",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 0, template_var 1))),
               template_var 0)),
           template_var 1)
         )),
    ("ND.BotE",
     "?\<Gamma> \<turnstile> \<bottom> ==> ?\<Gamma> \<turnstile> ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Bit_Operations.AND_lower", "0 <= ?x ==> 0 <= and ?x ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.AND_upper1", "0 <= ?x ==> and ?x ?y <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Bit_Operations.AND_upper2", "0 <= ?y ==> and ?x ?y <= ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("ND.AssmBigAnd",
     "(set ?G \<turnstile> ?F) =
      ({} \<turnstile> \<^bold>\<And>?G \<^bold>\<rightarrow> ?F)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 4, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("ND.ND_deMorganAnd",
     "{\<^bold>\<not> (?F \<^bold>\<and> ?G)} \<turnstile>
      \<^bold>\<not> ?F \<^bold>\<or> \<^bold>\<not> ?G",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 3, template_var 0)))
         )),
    ("ND.ND_deMorganOr",
     "{\<^bold>\<not> (?F \<^bold>\<or> ?G)} \<turnstile>
      \<^bold>\<not> ?F \<^bold>\<and> \<^bold>\<not> ?G",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 3, template_var 0)))
         )),
    ("ND.Top_useless",
     "?\<Gamma> \<turnstile> ?F ==> ?\<Gamma> - {\<top>} \<turnstile> ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_var 0)
           ))),
    ("ND.Weaken",
     "[| ?\<Gamma> \<turnstile> ?F; ?\<Gamma> <= ?\<Gamma>' |]
      ==> ?\<Gamma>' \<turnstile> ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("ND.Not2IE",
     "?F \<triangleright> ?\<Gamma> \<turnstile> ?G ==>
      \<^bold>\<not>
       (\<^bold>\<not> ?F) \<triangleright> ?\<Gamma> \<turnstile>
      ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 0, template_var 2))),
                 template_var 1)),
             template_var 0)
           ))),
    ("ND.NotSwap",
     "\<^bold>\<not> ?F \<triangleright> ?\<Gamma> \<turnstile> ?G ==>
      \<^bold>\<not> ?G \<triangleright> ?\<Gamma> \<turnstile> ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)),
             template_var 2)
           ))),
    ("ND.NDtrans",
     "[| ?\<Gamma> \<turnstile> ?F;
         ?F \<triangleright> ?\<Gamma> \<turnstile> ?G |]
      ==> ?\<Gamma> \<turnstile> ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Bit_Operations.AND_upper2''",
     "[| 0 <= ?y; ?y < ?z |] ==> and ?x ?y < ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Bit_Operations.AND_upper1''",
     "[| 0 <= ?y; ?y < ?z |] ==> and ?y ?ya < ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Bit_Operations.AND_upper2'",
     "[| 0 <= ?y; ?y <= ?z |] ==> and ?x ?y <= ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Bit_Operations.AND_upper1'",
     "[| 0 <= ?y; ?y <= ?z |] ==> and ?y ?ya <= ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("ND.AndL_sim",
     "?F \<triangleright> ?G \<triangleright> ?\<Gamma> \<turnstile> ?H ==>
      ?F \<^bold>\<and> ?G \<triangleright> ?\<Gamma> \<turnstile> ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_var 0)
           ))),
    ("ND.ImpR_sim",
     "\<^bold>\<not>
       ?G \<triangleright> ?F \<triangleright> ?\<Gamma> \<turnstile>
      \<bottom> ==>
      \<^bold>\<not>
       (?F \<^bold>\<rightarrow> ?G) \<triangleright> ?\<Gamma> \<turnstile>
      \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 2))),
                 template_var 0)),
             template_hole 1)
           ))),
    ("ND.ND_caseDistinction",
     "[| ?F \<triangleright> ?\<Gamma> \<turnstile> ?H;
         \<^bold>\<not> ?F \<triangleright> ?\<Gamma> \<turnstile> ?H |]
      ==> ?\<Gamma> \<turnstile> ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), template_var 0)
           ))),
    ("ND.OrR_sim",
     "\<^bold>\<not>
       ?F \<triangleright> \<^bold>\<not>
                            ?G \<triangleright> ?\<Gamma> \<turnstile>
      \<bottom> ==>
      \<^bold>\<not>
       (?G \<^bold>\<or> ?F) \<triangleright> ?\<Gamma> \<turnstile>
      \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 1)),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 2))),
                 template_var 0)),
             template_hole 1)
           ))),
    ("ND.sim_sim",
     "[| ?F \<triangleright> ?\<Gamma> \<turnstile> ?H;
         ?G \<triangleright> ?\<Gamma> \<turnstile> ?F |]
      ==> ?G \<triangleright> ?\<Gamma> \<turnstile> ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 2)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("ND.OrL_sim",
     "[| ?F \<triangleright> ?\<Gamma> \<turnstile> ?H;
         ?G \<triangleright> ?\<Gamma> \<turnstile> ?H |]
      ==> ?F \<^bold>\<or> ?G \<triangleright> ?\<Gamma> \<turnstile> ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0)),
                 template_var 2)),
             template_var 1)
           ))),
    ("ND.ImpL_sim",
     "[| \<^bold>\<not> ?F \<triangleright> ?\<Gamma> \<turnstile>
         \<bottom>;
         ?G \<triangleright> ?\<Gamma> \<turnstile> \<bottom> |]
      ==> ?F \<^bold>\<rightarrow>
          ?G \<triangleright> ?\<Gamma> \<turnstile>
          \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1)),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_hole 1)
           ))),
    ("ND.AndR_sim",
     "[| \<^bold>\<not> ?F \<triangleright> ?\<Gamma> \<turnstile> ?H;
         \<^bold>\<not> ?G \<triangleright> ?\<Gamma> \<turnstile> ?H |]
      ==> \<^bold>\<not>
           (?F \<^bold>\<and> ?G) \<triangleright> ?\<Gamma> \<turnstile>
          ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 0)),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0))),
                 template_var 2)),
             template_var 1)
           )))]
