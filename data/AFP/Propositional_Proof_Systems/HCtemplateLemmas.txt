   [("HC.imp_self", "AX0 \<turnstile>\<^sub>H ?F \<^bold>\<rightarrow> ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("HC.HC_intros",
     "AX0 \<turnstile>\<^sub>H
      ?F \<^bold>\<rightarrow> ?G \<^bold>\<rightarrow> ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      ?F \<^bold>\<rightarrow> ?G \<^bold>\<rightarrow> ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      ?F \<^bold>\<rightarrow> ?F \<^bold>\<or> ?G",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      ?G \<^bold>\<rightarrow> ?F \<^bold>\<or> ?G",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      (?F \<^bold>\<and> ?G) \<^bold>\<rightarrow> ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      (?F \<^bold>\<and> ?G) \<^bold>\<rightarrow> ?G",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      \<^bold>\<not> ?F \<^bold>\<rightarrow>
      ?F \<^bold>\<rightarrow> \<bottom>",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      (?F \<^bold>\<rightarrow> \<bottom>) \<^bold>\<rightarrow>
      \<^bold>\<not> ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      (\<^bold>\<not> ?F \<^bold>\<rightarrow>
       \<bottom>) \<^bold>\<rightarrow>
      ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_var 0))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      ?F \<^bold>\<rightarrow>
      ?G \<^bold>\<rightarrow> ?F \<^bold>\<and> ?G",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("HC.hilbert_folgeaxiome_as_strong_as_AX0",
     "(AX0 Un ?\<Gamma> \<turnstile>\<^sub>H ?F) =
      (AXH Un ?\<Gamma> \<turnstile>\<^sub>H ?F)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 1)),
         template_var 0))),
    ("HC.HC_mono",
     "[| ?S \<turnstile>\<^sub>H ?F; ?S <= ?T |]
      ==> ?T \<turnstile>\<^sub>H ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("HC.HC_intros",
     "AX0 \<turnstile>\<^sub>H
      (?F \<^bold>\<rightarrow>
       ?G \<^bold>\<rightarrow> ?H) \<^bold>\<rightarrow>
      (?F \<^bold>\<rightarrow> ?G) \<^bold>\<rightarrow>
      ?F \<^bold>\<rightarrow> ?H",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      (?F \<^bold>\<rightarrow> ?H) \<^bold>\<rightarrow>
      (?G \<^bold>\<rightarrow> ?H) \<^bold>\<rightarrow>
      (?F \<^bold>\<or> ?G) \<^bold>\<rightarrow> ?H",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1))))
         )),
    ("HC.HC_intros",
     "AX10 \<turnstile>\<^sub>H
      (?F \<^bold>\<rightarrow>
       ?G \<^bold>\<rightarrow> ?H) \<^bold>\<rightarrow>
      (?F \<^bold>\<rightarrow> ?G) \<^bold>\<rightarrow>
      ?F \<^bold>\<rightarrow> ?H",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("HC.Deduction_theorem",
     "AX0 Un (?F \<triangleright> ?\<Gamma>) \<turnstile>\<^sub>H ?G ==>
      AX0 Un ?\<Gamma> \<turnstile>\<^sub>H ?F \<^bold>\<rightarrow> ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           )))]
