Loading theory "HOL-Library.Case_Converter" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.CNF_Formulas" via "Draft.CNF" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.CNF_Formulas" via "Draft.Formulas" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.501s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.189s elapsed time, 0.779s cpu time, 0.041s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.CNF_Formulas" via "Draft.CNF")
Found termination order: "size_list size <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.081s elapsed time, 0.309s cpu time, 0.056s GC time
Loading theory "Draft.CNF" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.CNF_Formulas")
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.281s cpu time, 0.098s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.929s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.419s elapsed time, 1.672s cpu time, 0.179s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.CNF_Formulas" via "Draft.Formulas")
consts
  atoms_of_lit :: "'a literal => 'a"
### theory "Draft.CNF"
### 0.439s elapsed time, 1.722s cpu time, 0.184s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.055s elapsed time, 4.032s cpu time, 0.814s GC time
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.991s elapsed time, 3.519s cpu time, 0.763s GC time
### theory "HOL-Library.Countable"
### 1.310s elapsed time, 4.720s cpu time, 0.866s GC time
Loading theory "Draft.Formulas" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.CNF_Formulas")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.985s elapsed time, 6.253s cpu time, 1.108s GC time
Loading theory "Draft.Templates" (required by "Draft.CNF_FormulasMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CNF_FormulasMoreTemplates")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.561s elapsed time, 1.306s cpu time, 0.083s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Formulas"
### 1.592s elapsed time, 3.134s cpu time, 0.271s GC time
Loading theory "Draft.CNF_Formulas" (required by "Draft.CNF_FormulasMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 76 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset"
###       ("_Finset" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 95 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list" ("_list" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list"
###       ("_list" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf_lists (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
Found termination order: "size <*mlex*> {}"
consts
  form_of_lit :: "'a literal => 'a formula"
### theory "Draft.CNF_Formulas"
### 1.142s elapsed time, 1.313s cpu time, 0.140s GC time
Loading theory "Draft.CNF_FormulasMoreTemplates"
val templateLemmas =
   [("CNF_Formulas.disj_of_clause_is", "is_disj (disj_of_clause ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.form_of_lit_is_lit", "is_lit_plus (form_of_lit ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.disj_of_clause_is_nnf", "is_nnf (disj_of_clause ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.form_of_cnf_is_nnf", "is_nnf (form_of_cnf ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.form_of_lit_is_nnf", "is_nnf (form_of_lit ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.is_nnf_nnf", "is_nnf (nnf ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CNF_Formulas.disj_is_nnf", "is_disj ?F ==> is_nnf ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF_Formulas.cnf_form_of_is", "is_nnf ?F ==> is_cnf (cnf_form_of ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.nnf_cnf_form", "is_nnf ?F ==> is_nnf (cnf_form_of ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.cnf_fin", "is_nnf ?F ==> finite (cnf ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.cnf_disj", "cnf (disj_of_clause ?R) = {set ?R}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("CNF_Formulas.cnf_form_of_cnf",
     "cnf (form_of_cnf ?S) = set (map set ?S)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("CNF_Formulas.nnf_BigAnd",
     "nnf \<^bold>\<And>?F = \<^bold>\<And>map nnf ?F",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("CNF_Formulas.is_nnf_nnf_id", "is_nnf ?F ==> nnf ?F = ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("CNF_Formulas.nnf_no_imp",
     "?A \<^bold>\<rightarrow> ?B ~: set (subformulae (nnf ?F))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))
             )
         )),
    ("CNF_Formulas.is_cnf_BigAnd",
     "is_cnf \<^bold>\<And>?ls = (ALL l:set ?ls. is_cnf l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("CNF_Formulas.BigOr_is_not_cnf",
     "is_cnf \<^bold>\<Or>?ls = (ALL l:set ?ls. is_lit_plus l)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("CNF_Formulas.is_nnf_BigAnd",
     "is_nnf \<^bold>\<And>?ls = (ALL l:set ?ls. is_nnf l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("CNF_Formulas.is_nnf_BigOr",
     "is_nnf \<^bold>\<Or>?ls = (ALL l:set ?ls. is_nnf l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("CNF_Formulas.disj_of_clause_simps",
     "disj_of_clause (?F # ?FF) =
      form_of_lit ?F \<^bold>\<or> disj_of_clause ?FF",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("CNF_Formulas.cnf_cnf", "is_nnf ?F ==> cnf (cnf_form_of ?F) = cnf ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("CNF_Formulas.cnf_BigAnd",
     "cnf \<^bold>\<And>?ls = \<Union> (cnf ` set ?ls)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("CNF_Formulas.BigOr_is_not_cnf''",
     "is_cnf \<^bold>\<Or>?ls ==> ALL l:set ?ls. is_lit_plus l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("CNF_Formulas.BigOr_is_not_cnf'",
     "ALL l:set ?ls. is_lit_plus l ==> is_cnf \<^bold>\<Or>?ls",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF_Formulas.form_of_lit_cases",
     "form_of_lit ?xa =
      (case ?xa of xda\<^sup>+ => Atom xda
       | xea\<inverse> => \<^bold>\<not> (Atom xea))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_app (template_hole 2, t_empty), t_empty),
         template_var 0))),
    ("CNF_Formulas.cnf_fin", "[| is_nnf ?F; ?C : cnf ?F |] ==> finite ?C",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF_Formulas.subformulae_nnf",
     "[| is_nnf ?F; ?G : set (subformulae ?F) |] ==> is_nnf ?G",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("CNF_Formulas.is_nnf_NotD",
     "is_nnf (\<^bold>\<not> ?F) ==> (EX k. ?F = Atom k) | ?F = \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("CNF_Formulas.cnf_disj_ex",
     "is_disj ?F ==> EX R. cnf ?F = {R} | cnf ?F = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("CNF_Formulas.cnf_BigOr",
     "cnf \<^bold>\<Or>?x @ ?y =
      {f Un g |f g. f : cnf \<^bold>\<Or>?x & g : cnf \<^bold>\<Or>?y}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app (template_hole 5, t_empty))),
    ("CNF_Formulas.is_lit_plus_cases",
     "is_lit_plus ?xa =
      (case ?xa of Atom xda => True | \<bottom> => True
       | \<^bold>\<not> (Atom xea) => True
       | \<^bold>\<not> \<bottom> => True | \<^bold>\<not> _ => False
       | _ => False)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, t_empty),
                   template_hole 1),
                 t_empty),
               t_empty),
             t_empty),
           t_empty),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.CNF_FormulasMoreTemplates"
### 0.325s elapsed time, 0.436s cpu time, 0.023s GC time
val it = (): unit
