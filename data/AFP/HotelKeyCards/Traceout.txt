Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TraceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.LaTeXsugar" (required by "Draft.TraceMoreTemplates" via "Draft.Trace" via "Draft.Basis" via "Draft.Notation")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TraceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TraceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.LaTeXsugar"
### 0.065s elapsed time, 0.296s cpu time, 0.000s GC time
Loading theory "Draft.Notation" (required by "Draft.TraceMoreTemplates" via "Draft.Trace" via "Draft.Basis")
### theory "Draft.Notation"
### 0.042s elapsed time, 0.156s cpu time, 0.038s GC time
Loading theory "Draft.Basis" (required by "Draft.TraceMoreTemplates" via "Draft.Trace")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.496s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TraceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Basis"
### 0.024s elapsed time, 0.095s cpu time, 0.000s GC time
Loading theory "Draft.Trace" (required by "Draft.TraceMoreTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.835s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TraceMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.366s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TraceMoreTemplates" via "Draft.ExtrEqs")
consts
  owns :: "event list => room => guest option"
consts
  currk :: "event list => room => key"
consts
  issued :: "event list => key set"
consts
  cards :: "event list => guest => (key * key) set"
consts
  roomk :: "event list => room => key"
consts
  isin :: "event list => room => guest set"
consts
  hotel :: "event list => bool"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Trace"
### 0.555s elapsed time, 2.183s cpu time, 0.229s GC time
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.965s elapsed time, 3.363s cpu time, 0.790s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.025s elapsed time, 3.249s cpu time, 0.749s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.855s elapsed time, 4.798s cpu time, 0.889s GC time
Loading theory "Draft.Templates" (required by "Draft.TraceMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TraceMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.446s elapsed time, 0.478s cpu time, 0.036s GC time
Loading theory "Draft.TraceMoreTemplates"
val templateLemmas =
   [("Trace.safe_safe", "safe ?s ?r ==> safe\<^sub>0 ?s ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Trace.initk_issued", "hotel ?s ==> initk ?r : issued ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Trace.issued_app", "issued (?s @ ?s') = issued ?s Un issued ?s'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Trace.currk_issued", "hotel ?s ==> currk ?s ?r : issued ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Trace.roomk_issued", "hotel ?s ==> roomk ?s ?r : issued ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Trace.safe_roomk_currk",
     "[| hotel ?s; safe\<^sub>0 ?s ?r |] ==> roomk ?s ?r = currk ?s ?r",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trace.key1_issued",
     "[| hotel ?s; (?k, ?k') : cards ?s ?g |] ==> ?k : issued ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Trace.key2_issued",
     "[| hotel ?s; (?k, ?k') : cards ?s ?g |] ==> ?k' : issued ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Trace.no_Check_in_owns", "no_Check_in ?s ?r ==> owns ?s ?r = None",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Trace.Enter_safe",
     "[| hotel (Enter ?g ?r ?c # ?s); safe\<^sub>0 ?s ?r |]
      ==> owns ?s ?r = \<lfloor>?g\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app (template_hole 0, template_var 3)))),
    ("Trace.safe",
     "[| hotel ?s; safe ?s ?r; ?g : isin ?s ?r |]
      ==> owns ?s ?r = \<lfloor>?g\<rfloor>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Trace.currk_app",
     "no_Check_in ?s\<^sub>2 ?r ==>
      currk (?s\<^sub>2 @ ?s\<^sub>1) ?r = currk ?s\<^sub>1 ?r",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Trace.owns_app",
     "no_Check_in ?s\<^sub>2 ?r ==>
      owns (?s\<^sub>2 @ ?s\<^sub>1) ?r = owns ?s\<^sub>1 ?r",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Trace.safe_future",
     "[| safe\<^sub>0 ?s ?r; no_Check_in ?s' ?r |]
      ==> safe\<^sub>0 (?s' @ ?s) ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (template_predicate (template_app (template_hole 5, t_empty)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Trace.guest_key2_disj2",
     "[| hotel ?s; (?k\<^sub>1, ?k) : cards ?s ?g\<^sub>1;
         (?k\<^sub>2, ?k) : cards ?s ?g\<^sub>2 |]
      ==> ?g\<^sub>1 = ?g\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 5),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 5),
                template_var 0))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Trace.only_owner_enter_normal",
     "[| hotel ?s; safe\<^sub>0 ?s ?r; (?k, roomk ?s ?r) : cards ?s ?g |]
      ==> owns ?s ?r = \<lfloor>?g\<rfloor>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Trace.currk_Check_in",
     "[| hotel (?s\<^sub>2 @ Check_in ?g ?r (?k, ?k') # ?s\<^sub>1);
         ?k' =
         currk (?s\<^sub>2 @ Check_in ?g ?r (?k, ?k') # ?s\<^sub>1) ?r' |]
      ==> ?r' = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_app (template_hole 4, template_var 5),
                        template_var 4),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2))),
                  template_var 1)))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_app (template_hole 4, template_var 5),
                        template_var 4),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2))),
                  template_var 1))),
            template_var 0))],
       template_equation (template_var 0, template_var 4))),
    ("Trace.in_set_conv_decomp_firstD",
     "[| ?P ?x; ?x : set ?xs |]
      ==> EX ys x zs. ?xs = ys @ x # zs & ?P x & (ALL y:set ys. ~ ?P y)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Trace.Enter_safe_future",
     "[| hotel (Enter ?g ?r ?c # ?s' @ ?s); safe\<^sub>0 ?s ?r;
         no_Check_in ?s' ?r |]
      ==> owns ?s ?r = \<lfloor>?g\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_var 3)
            ),
        template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 3),
         template_app (template_hole 0, template_var 4)))),
    ("Trace.ownsD",
     "owns ?s ?r = \<lfloor>?g\<rfloor> ==>
      EX s\<^sub>1 s\<^sub>2 g c.
         ?s = s\<^sub>2 @ [Check_in g ?r c] @ s\<^sub>1 &
         no_Check_in s\<^sub>2 ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1),
          template_app (template_hole 12, template_var 0))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Trace.no_checkin_no_newkey",
     "[| hotel (?s\<^sub>2 @ [Check_in ?g ?r (?k, ?k')] @ ?s\<^sub>1);
         no_Check_in ?s\<^sub>2 ?r |]
      ==> (?k', ?k'')
          ~: cards (?s\<^sub>2 @ Check_in ?g ?r (?k, ?k') # ?s\<^sub>1)
              ?g'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_app (template_hole 9, template_var 6),
                            template_var 5),
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_var 3))),
                      template_hole 7)),
                  template_var 2)))
            ),
        template_negation
         (template_predicate (template_app (template_hole 5, t_empty)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 11, template_var 7),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 9, template_var 6),
                               template_var 5),
                             template_app
                              (template_app
                                (template_hole 8, template_var 4),
                               template_var 3))),
                         template_var 2))),
                   template_var 0))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.TraceMoreTemplates"
### 0.320s elapsed time, 0.464s cpu time, 0.067s GC time
val it = (): unit
