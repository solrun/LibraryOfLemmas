Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FinFunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.FinFunMoreTemplates" via "Draft.FinFun" via "HOL-Library.Cardinality")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FinFunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FinFunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.491s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FinFunMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.192s elapsed time, 0.790s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FinFunMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.272s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FinFunMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Phantom_Type"
### 0.542s elapsed time, 2.166s cpu time, 0.213s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.FinFunMoreTemplates" via "Draft.FinFun")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "card2": 'a
consts
  snth :: "'a stream => nat => 'a"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.007s elapsed time, 3.826s cpu time, 0.852s GC time
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  flat :: "'a list stream => 'a stream"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
### theory "HOL-Library.Stream"
### 1.065s elapsed time, 3.907s cpu time, 0.805s GC time
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.923s elapsed time, 3.200s cpu time, 0.722s GC time
Loading theory "Draft.FinFun" (required by "Draft.FinFunMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.011s elapsed time, 6.282s cpu time, 1.070s GC time
Loading theory "Draft.Templates" (required by "Draft.FinFunMoreTemplates" via "Draft.ExtrEqs")
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.103s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FinFunMoreTemplates")
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.552s elapsed time, 1.161s cpu time, 0.139s GC time
### theory "Draft.FinFun"
### 1.520s elapsed time, 2.931s cpu time, 0.348s GC time
Loading theory "Draft.FinFunMoreTemplates"
val templateLemmas =
   [("FinFun.distinct_finfun_to_list", "distinct (finfun_to_list ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FinFun.sorted_finfun_to_list", "sorted (finfun_to_list ?f)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("FinFun.const_finfun", "(%x. ?a) : finfun",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)
         )),
    ("FinFun.map_of_finfun", "map_of ?xs : finfun",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("FinFun.Abs_finfun_inverse_finite_class",
     "finfun_apply (Abs_finfun ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("FinFun.finfun_All_const", "finfun_All (finfun_const ?b) = ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("FinFun.finfun_Ex_const", "finfun_Ex (finfun_const ?b) = ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("FinFun.finfun_comp_id1", "finfun_comp id ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("FinFun.finfun_const_apply", "finfun_apply (finfun_const ?b) ?a = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("FinFun.finfun_All_All", "finfun_All ?P = All (finfun_apply ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_Ex_Ex", "finfun_Ex ?P = Ex (finfun_apply ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_clearjunk_const",
     "finfun_clearjunk (finfun_const ?b) = finfun_const ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("FinFun.finfun_comp_id1", "finfun_comp (%x. x) ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, t_empty), template_var 0),
       template_var 0)),
    ("FinFun.finfun_fst_conv", "finfun_fst (finfun_Diag ?f ?g) = ?f",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("FinFun.finfun_snd_conv", "finfun_snd (finfun_Diag ?f ?g) = ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("FinFun.finite_finfun_dom",
     "finite {x. finfun_apply (finfun_dom ?f) x}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("FinFun.finfun_fst_const",
     "finfun_fst (finfun_const ?bc) = finfun_const (fst ?bc)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_snd_const",
     "finfun_snd (finfun_const ?bc) = finfun_const (snd ?bc)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_comp_const1",
     "finfun_comp (%x. ?c) ?f = finfun_const ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("FinFun.finfun_comp2_const",
     "finfun_comp2 (finfun_const ?c) ?f = finfun_const ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("FinFun.finfun_curry_const",
     "finfun_curry (finfun_const ?c) = finfun_const (finfun_const ?c)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_Diag_collapse",
     "finfun_Diag (finfun_fst ?f) (finfun_snd ?f) = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("FinFun.finfun_upd_apply_same",
     "finfun_apply (finfun_update ?f ?a ?b) ?a = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("FinFun.finfun_comp_const",
     "finfun_comp ?g (finfun_const ?c) = finfun_const (?g ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("FinFun.finfun_update_const_same",
     "finfun_update (finfun_const ?b) ?a ?b = finfun_const ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 1),
       template_app (template_hole 0, template_var 1))),
    ("FinFun.finfun_upd_triv",
     "finfun_update ?f ?x (finfun_apply ?f ?x) = ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("FinFun.finfun_comp_apply",
     "finfun_apply (finfun_comp ?g ?f) = ?g o finfun_apply ?f",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FinFun.expand_finfun_eq",
     "(?f = ?g) = (finfun_apply ?f = finfun_apply ?g)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_All_except_const_finfun_UNIV_code",
     "finfun_All_except ?A (finfun_const ?b) = (?b | is_list_UNIV ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("FinFun.Abs_finfun_inject_finite_class",
     "(Abs_finfun ?x = Abs_finfun ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("FinFun.finfun_comp_conv_comp",
     "finfun_comp ?g ?f = Abs_finfun (?g o finfun_apply ?f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("FinFun.finfun_Diag_const1",
     "finfun_Diag (finfun_const ?b) ?g = finfun_comp (Pair ?b) ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("FinFun.Abs_finfun_inverse_finite",
     "finite UNIV ==> finfun_apply (Abs_finfun ?x) = ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("FinFun.finfun_curry", "?f : finfun ==> curry ?f : finfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("FinFun.set_finfun_to_list",
     "set (finfun_to_list ?f) = {x. finfun_apply (finfun_dom ?f) x}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("FinFun.fun_upd_finfun", "(?y(?a := ?b) : finfun) = (?y : finfun)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 2), template_hole 0))),
    ("FinFun.finfun_fst_comp_conv",
     "finfun_fst (finfun_comp ?f ?g) = finfun_comp (fst o ?f) ?g",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0))),
    ("FinFun.finfun_snd_comp_conv",
     "finfun_snd (finfun_comp ?f ?g) = finfun_comp (snd o ?f) ?g",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0))),
    ("FinFun.finfun_clearjunk_update",
     "finfun_clearjunk (finfun_update_code ?f ?a ?b) =
      finfun_update ?f ?a ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("FinFun.finfun_curry_conv_curry",
     "finfun_curry ?f =
      Abs_finfun (%a. Abs_finfun (curry (finfun_apply ?f) a))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("FinFun.finfun_Diag_const_const",
     "finfun_Diag (finfun_const ?b) (finfun_const ?c) =
      finfun_const (?b, ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FinFun.finfun_dom_finfunI",
     "(%a. finfun_apply ?f a ~= finfun_default ?f) : finfun",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("FinFun.finfun_left_compose", "?y : finfun ==> ?g o ?y : finfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0)
           ))),
    ("FinFun.fst_finfun", "?y : finfun ==> fst o ?y : finfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("FinFun.snd_finfun", "?y : finfun ==> snd o ?y : finfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("FinFun.finfun_curry", "?f : finfun ==> curry ?f ?a : finfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("FinFun.finfun_All_except_const",
     "finfun_All_except ?A (finfun_const ?b) = (?b | set ?A = UNIV)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_hole 0))
           ))),
    ("FinFun.finfun_comp_comp_collapse",
     "finfun_comp ?f (finfun_comp ?g ?h) = finfun_comp (?f o ?g) ?h",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("FinFun.finfun_Diag_const2",
     "finfun_Diag ?f (finfun_const ?c) = finfun_comp (%b. (b, ?c)) ?f",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("FinFun.finfun_dom_conv",
     "finfun_apply (finfun_dom ?f) ?x =
      (finfun_apply ?f ?x ~= finfun_default ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("FinFun.finfun_fst_update",
     "finfun_fst (finfun_update ?f ?a ?bc) =
      finfun_update (finfun_fst ?f) ?a (fst ?bc)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_fst_update_code",
     "finfun_fst (finfun_update_code ?f ?a ?bc) =
      finfun_update (finfun_fst ?f) ?a (fst ?bc)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_snd_update",
     "finfun_snd (finfun_update ?f ?a ?bc) =
      finfun_update (finfun_snd ?f) ?a (snd ?bc)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_snd_update_code",
     "finfun_snd (finfun_update_code ?f ?a ?bc) =
      finfun_update (finfun_snd ?f) ?a (snd ?bc)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FinFun.finfun_update_twice",
     "finfun_update (finfun_update ?f ?a ?b) ?a ?b' =
      finfun_update ?f ?a ?b'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("FinFun.finfun_dom_const",
     "finfun_dom (finfun_const ?c) =
      finfun_const (finite UNIV & ?c ~= undefined)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("FinFun.finfun_Abs_finfun_curry",
     "?f : finfun ==> (%a. Abs_finfun (curry ?f a)) : finfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)
           ))),
    ("FinFun.finfun_Diag_apply",
     "finfun_apply (finfun_Diag ?f ?g) =
      (%x. (finfun_apply ?f x, finfun_apply ?g x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       t_empty)),
    ("FinFun.finfun_All_update",
     "finfun_All (finfun_update ?f ?a ?b) =
      (?b & finfun_All_except [?a] ?f)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 2)))),
    ("FinFun.finfun_Diag_conv_Abs_finfun",
     "finfun_Diag ?f ?g =
      Abs_finfun (%x. (finfun_apply ?f x, finfun_apply ?g x))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("FinFun.Abs_finfun_inject_finite",
     "finite UNIV ==> (Abs_finfun ?x = Abs_finfun ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("FinFun.finfun_comp_update",
     "finfun_comp ?g (finfun_update ?f ?a ?b) =
      finfun_update (finfun_comp ?g ?f) ?a (?g ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_var 3, template_var 0)))),
    ("FinFun.finfun_comp_update_code",
     "finfun_comp ?g (finfun_update_code ?f ?a ?b) =
      finfun_update_code (finfun_comp ?g ?f) ?a (?g ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_var 3, template_var 0)))),
    ("FinFun.finfun_ext",
     "(!!a. finfun_apply ?f a = finfun_apply ?g a) ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("FinFun.finfun_upd_apply",
     "finfun_apply (finfun_update ?f ?a ?b) ?a' =
      (if ?a = ?a' then ?b else finfun_apply ?f ?a')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))
           ))),
    ("FinFun.finfun_upd_apply_code",
     "finfun_apply (finfun_update_code ?f ?a ?b) ?a' =
      (if ?a = ?a' then ?b else finfun_apply ?f ?a')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))
           ))),
    ("FinFun.eq_finfun_All_ext",
     "(?f = ?g) =
      finfun_All (finfun_comp (%(x, y). x = y) (finfun_Diag ?f ?g))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("FinFun.finfun_Diag_eq",
     "(finfun_Diag ?f ?g = finfun_Diag ?f' ?g') = (?f = ?f' & ?g = ?g')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("FinFun.finfun_dom_update",
     "finfun_dom (finfun_update ?f ?a ?b) =
      finfun_update (finfun_dom ?f) ?a (?b ~= finfun_default ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 5, template_var 2)),
               template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("FinFun.finfun_dom_update_code",
     "finfun_dom (finfun_update_code ?f ?a ?b) =
      finfun_update_code (finfun_dom ?f) ?a (?b ~= finfun_default ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 5, template_var 2)),
               template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("FinFun.finfun_right_compose",
     "[| ?g : finfun; inj ?f |] ==> ?g o ?f : finfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("FinFun.Diag_finfun",
     "((%x. (?f x, ?g x)) : finfun) = (?f : finfun & ?g : finfun)",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty), template_hole 5),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("FinFun.finfun_upd_apply_other",
     "?a ~= ?a' ==>
      finfun_apply (finfun_update ?f ?a ?b) ?a' = finfun_apply ?f ?a'",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("FinFun.remove1_insort_insert_same",
     "?x ~: set ?xs ==> remove1 ?x (insort_insert ?x ?xs) = ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 1),
             template_var 0)),
         template_var 0))),
    ("FinFun.finfun_update_const_code",
     "finfun_update (finfun_const ?b) ?a ?b' =
      (if ?b = ?b' then finfun_const ?b
       else finfun_update_code (finfun_const ?b) ?a ?b')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app (template_hole 3, template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 2)),
                 template_var 1),
               template_var 0))
           ))),
    ("FinFun.finfun_Diag_update2",
     "finfun_Diag ?f (finfun_update ?g ?a ?c) =
      finfun_update (finfun_Diag ?f ?g) ?a (finfun_apply ?f ?a, ?c)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("FinFun.finfun_Diag_update1",
     "finfun_Diag (finfun_update ?f ?a ?b) ?g =
      finfun_update (finfun_Diag ?f ?g) ?a (?b, finfun_apply ?g ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("FinFun.finfun_Diag_update1_code",
     "finfun_Diag (finfun_update_code ?f ?a ?b) ?g =
      finfun_update (finfun_Diag ?f ?g) ?a (?b, finfun_apply ?g ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("FinFun.finfun_Diag_const_update",
     "finfun_Diag (finfun_const ?b) (finfun_update ?g ?a ?c) =
      finfun_update (finfun_Diag (finfun_const ?b) ?g) ?a (?b, ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("FinFun.finfun_Diag_update_const",
     "finfun_Diag (finfun_update ?f ?a ?b) (finfun_const ?c) =
      finfun_update (finfun_Diag ?f (finfun_const ?c)) ?a (?b, ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 2, template_var 0))),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FinFun.finfun_Diag_const_code",
     "finfun_Diag (finfun_const ?b) (finfun_update_code ?g ?a ?c) =
      finfun_update_code (finfun_Diag (finfun_const ?b) ?g) ?a (?b, ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("FinFun.fold_finfun_update_finite_univ",
     "finite UNIV ==>
      Finite_Set.fold (%a f. finfun_update f a ?b') (finfun_const ?b) UNIV =
      finfun_const ?b'",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 0)),
           template_hole 4),
         template_app (template_hole 0, template_var 1)))),
    ("FinFun.finfun_exhaust_disj",
     "(EX b. ?x = finfun_const b) | (EX f a b. ?x = finfun_update f a b)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app (template_hole 2, t_empty))
         )),
    ("FinFun.card_eq_1_iff",
     "(card ?A = 1) = (?A ~= {} & (ALL x:?A. ALL y:?A. x = y))",
     template_bimplication
      (template_equation
        (template_app (template_hole 7, template_var 0), template_hole 6),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_app (template_hole 1, template_var 0), t_empty))
           ))),
    ("FinFun.finfun_All_except_update",
     "finfun_All_except ?A (finfun_update ?f ?a ?b) =
      ((?a : set ?A | ?b) & finfun_All_except (?a # ?A) ?f)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 3))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3)),
           template_var 2)))),
    ("FinFun.finfun_All_except_update_code",
     "finfun_All_except ?A (finfun_update_code ?f ?a ?b) =
      ((?a : set ?A | ?b) & finfun_All_except (?a # ?A) ?f)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 3))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3)),
           template_var 2)))),
    ("FinFun.finfun_curry_update",
     "finfun_curry (finfun_update ?f (?a, ?b) ?c) =
      finfun_update (finfun_curry ?f) ?a
       (finfun_update (finfun_apply (finfun_curry ?f) ?a) ?b ?c)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 3)),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("FinFun.finfun_curry_update_code",
     "finfun_curry (finfun_update_code ?f (?a, ?b) ?c) =
      finfun_update (finfun_curry ?f) ?a
       (finfun_update (finfun_apply (finfun_curry ?f) ?a) ?b ?c)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 3)),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("FinFun.finfun_to_list_update",
     "finfun_to_list (finfun_update ?f ?a ?b) =
      (if ?b = finfun_default ?f then remove1 ?a (finfun_to_list ?f)
       else insort_insert ?a (finfun_to_list ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 6, template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 1),
               template_app (template_hole 6, template_var 2)))
           ))),
    ("FinFun.finfun_to_list_update_code",
     "finfun_to_list (finfun_update_code ?f ?a ?b) =
      (if ?b = finfun_default ?f then remove1 ?a (finfun_to_list ?f)
       else insort_insert ?a (finfun_to_list ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 6, template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 1),
               template_app (template_hole 6, template_var 2)))
           ))),
    ("FinFun.finfun_update_twist",
     "?a ~= ?a' ==>
      finfun_update (finfun_update ?f ?a ?b) ?a' ?b' =
      finfun_update (finfun_update ?f ?a' ?b') ?a ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 4),
           template_var 1)))),
    ("FinFun.finfun_update_update_code",
     "finfun_update (finfun_update_code ?f ?a ?b) ?a' ?b' =
      (if ?a = ?a' then finfun_update ?f ?a ?b'
       else finfun_update_code (finfun_update ?f ?a' ?b') ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 1),
                     template_var 0)),
                 template_var 3),
               template_var 2))
           ))),
    ("FinFun.finfun_const_eq_update",
     "(finfun_const ?b = finfun_update ?f ?a ?b') =
      (?b = ?b' & (ALL a'. ?a ~= a' --> finfun_apply ?f a' = ?b))",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 0)),
             template_app (template_hole 4, t_empty))
           ))),
    ("FinFun.finfun_to_list_const",
     "finfun_to_list (finfun_const ?c) =
      (if infinite UNIV | ?c = undefined then []
       else THE xs. set xs = UNIV & sorted xs & distinct xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_hole 10))),
                   template_app
                    (template_app (template_hole 9, template_var 0),
                     template_hole 8))),
               template_hole 7),
             template_app (template_hole 6, t_empty))
           ))),
    ("FinFun.finfun_weak_induct",
     "[| !!b. ?P (finfun_const b);
         !!f a b. ?P f ==> ?P (finfun_update f a b) |]
      ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("FinFun.finfun_exhaust",
     "[| !!b. ?x = finfun_const b ==> ?thesis;
         !!f a b. ?x = finfun_update f a b ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("FinFun.finfun_comp2_update",
     "inj ?f ==>
      finfun_comp2 (finfun_update ?g ?b ?c) ?f =
      (if ?b : range ?f
       then finfun_update (finfun_comp2 ?g ?f) (inv ?f ?b) ?c
       else finfun_comp2 ?g ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 8))),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_hole 8),
                     template_var 3),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 3))))),
    ("FinFun.finfun_Diag_update_update",
     "finfun_Diag (finfun_update ?f ?a ?b) (finfun_update ?g ?a' ?c) =
      (if ?a = ?a' then finfun_update (finfun_Diag ?f ?g) ?a (?b, ?c)
       else finfun_update
             (finfun_update (finfun_Diag ?f ?g) ?a (?b, finfun_apply ?g ?a))
             ?a' (finfun_apply ?f ?a', ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 8, template_var 5),
                       template_var 2)),
                   template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 8, template_var 5),
                           template_var 2)),
                       template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 4)))),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1)),
                 template_var 0)))
           ))),
    ("FinFun.finfun_rec_unique",
     "[| !!c. ?f (finfun_const c) = ?cnst c;
         !!g a b. ?f (finfun_update g a b) = ?upd g a b (?f g);
         !!c. ?f' (finfun_const c) = ?cnst c;
         !!g a b. ?f' (finfun_update g a b) = ?upd g a b (?f' g) |]
      ==> ?f = ?f'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 3, template_var 0))),
    ("FinFun.finfun_dom_const_code",
     "finfun_dom (finfun_const ?c) =
      (if CARD(?'a) = 0 then finfun_const False
       else Code.abort STR ''finfun_dom called on finite type''
             (%_. finfun_dom (finfun_const ?c)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7)),
                   template_hole 6)),
               template_app (template_hole 5, template_hole 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 2, template_hole 4),
                               template_hole 1),
                             template_hole 1),
                           template_hole 4),
                         template_hole 4),
                       template_hole 1),
                     template_hole 1),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 2, template_hole 1),
                                 template_hole 4),
                               template_hole 4),
                             template_hole 1),
                           template_hole 4),
                         template_hole 1),
                       template_hole 1),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 2, template_hole 4),
                                   template_hole 1),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 4),
                           template_hole 1),
                         template_hole 1),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 2, template_hole 4),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 4),
                               template_hole 4),
                             template_hole 1),
                           template_hole 1),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 2, template_hole 1), template_hole 4),
                                     template_hole 1),
                                   template_hole 4),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 1),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 2, template_hole 4), template_hole 1),
 template_hole 1),
                                     template_hole 1),
                                   template_hole 4),
                                 template_hole 1),
                               template_hole 1),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 2, template_hole 1), template_hole 1),
   template_hole 1),
 template_hole 1),
                                     template_hole 1),
                                   template_hole 4),
                                 template_hole 1),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 2, template_hole 4), template_hole 4),
     template_hole 1),
   template_hole 4),
 template_hole 4),
                                     template_hole 1),
                                   template_hole 1),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 2, template_hole 1), template_hole 1),
       template_hole 1),
     template_hole 1),
   template_hole 4),
 template_hole 1),
                                     template_hole 1),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 4),
         template_hole 1),
       template_hole 1),
     template_hole 4),
   template_hole 1),
 template_hole 1),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 4),
             template_hole 4),
           template_hole 4),
         template_hole 4),
       template_hole 4),
     template_hole 1),
   template_hole 4),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 1),
             template_hole 4),
           template_hole 4),
         template_hole 4),
       template_hole 1),
     template_hole 1),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 4),
               template_hole 4),
             template_hole 4),
           template_hole 4),
         template_hole 1),
       template_hole 1),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 4),
                   template_hole 4),
                 template_hole 1),
               template_hole 1),
             template_hole 4),
           template_hole 1),
         template_hole 1),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_hole 4),
                     template_hole 4),
                   template_hole 1),
                 template_hole 1),
               template_hole 4),
             template_hole 1),
           template_hole 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 4),
                     template_hole 1),
                   template_hole 4),
                 template_hole 4),
               template_hole 1),
             template_hole 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 4),
                         template_hole 4),
                       template_hole 1),
                     template_hole 4),
                   template_hole 4),
                 template_hole 1),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_hole 4),
                           template_hole 4),
                         template_hole 4),
                       template_hole 4),
                     template_hole 4),
                   template_hole 1),
                 template_hole 4),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 2, template_hole 1),
                             template_hole 1),
                           template_hole 1),
                         template_hole 1),
                       template_hole 4),
                     template_hole 1),
                   template_hole 1),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 2, template_hole 4),
                               template_hole 1),
                             template_hole 1),
                           template_hole 1),
                         template_hole 4),
                       template_hole 1),
                     template_hole 1),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 2, template_hole 4),
                                 template_hole 4),
                               template_hole 4),
                             template_hole 4),
                           template_hole 4),
                         template_hole 1),
                       template_hole 4),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 2, template_hole 4),
                                   template_hole 1),
                                 template_hole 1),
                               template_hole 4),
                             template_hole 4),
                           template_hole 1),
                         template_hole 1),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 2, template_hole 1),
                                     template_hole 4),
                                   template_hole 4),
                                 template_hole 1),
                               template_hole 4),
                             template_hole 1),
                           template_hole 1),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 2, template_hole 4), template_hole 1),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 4),
                               template_hole 1),
                             template_hole 1),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 2, template_hole 1), template_hole 4),
 template_hole 4),
                                     template_hole 1),
                                   template_hole 4),
                                 template_hole 1),
                               template_hole 1),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 2, template_hole 4), template_hole 4),
   template_hole 1),
 template_hole 4),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 1),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 2, template_hole 1), template_hole 4),
     template_hole 1),
   template_hole 4),
 template_hole 4),
                                     template_hole 1),
                                   template_hole 1),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 2, template_hole 4), template_hole 4),
       template_hole 4),
     template_hole 4),
   template_hole 4),
 template_hole 1),
                                     template_hole 4),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 4),
           template_hole 4),
         template_hole 1),
       template_hole 4),
     template_hole 1),
   template_hole 1),
 template_hole 1),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 4),
           template_hole 4),
         template_hole 1),
       template_hole 1),
     template_hole 1),
   template_hole 1),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 4),
               template_hole 4),
             template_hole 4),
           template_hole 4),
         template_hole 1),
       template_hole 1),
     template_hole 1),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 4),
               template_hole 1),
             template_hole 4),
           template_hole 4),
         template_hole 1),
       template_hole 1),
     template_hole 0))))))))))))))))))))))))))))))))),
               t_empty))
           ))),
    ("FinFun.finfun_to_list_const_code",
     "finfun_to_list (finfun_const ?c) =
      (if CARD(?'a) = 0 then []
       else Code.abort STR ''finfun_to_list called on finite type''
             (%_. finfun_to_list (finfun_const ?c)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7)),
                   template_hole 6)),
               template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_hole 2),
                               template_hole 1),
                             template_hole 1),
                           template_hole 2),
                         template_hole 2),
                       template_hole 1),
                     template_hole 1),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 3, template_hole 1),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 1),
                           template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 2),
                                   template_hole 1),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 2),
                           template_hole 1),
                         template_hole 1),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 3, template_hole 2),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 1),
                           template_hole 1),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 3, template_hole 1), template_hole 2),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 1),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 3, template_hole 2), template_hole 1),
 template_hole 1),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 1),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 3, template_hole 1), template_hole 1),
   template_hole 1),
 template_hole 1),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 3, template_hole 2), template_hole 2),
     template_hole 1),
   template_hole 2),
 template_hole 1),
                                     template_hole 1),
                                   template_hole 1),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 3, template_hole 1), template_hole 1),
       template_hole 1),
     template_hole 1),
   template_hole 2),
 template_hole 1),
                                     template_hole 1),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 1),
           template_hole 1),
         template_hole 1),
       template_hole 1),
     template_hole 1),
   template_hole 2),
 template_hole 1),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 2),
           template_hole 1),
         template_hole 1),
       template_hole 2),
     template_hole 1),
   template_hole 1),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 2),
             template_hole 2),
           template_hole 1),
         template_hole 2),
       template_hole 1),
     template_hole 1),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 1),
                 template_hole 1),
               template_hole 2),
             template_hole 2),
           template_hole 1),
         template_hole 1),
       template_hole 1),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           template_hole 1),
         template_hole 1),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 2),
                   template_hole 2),
                 template_hole 2),
               template_hole 2),
             template_hole 1),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 1),
                       template_hole 1),
                     template_hole 2),
                   template_hole 2),
                 template_hole 2),
               template_hole 1),
             template_hole 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 1),
                         template_hole 2),
                       template_hole 2),
                     template_hole 2),
                   template_hole 2),
                 template_hole 1),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_hole 2),
                   template_hole 1),
                 template_hole 1),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3, template_hole 2),
                             template_hole 2),
                           template_hole 1),
                         template_hole 1),
                       template_hole 2),
                     template_hole 1),
                   template_hole 1),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_hole 1),
                               template_hole 2),
                             template_hole 1),
                           template_hole 2),
                         template_hole 2),
                       template_hole 1),
                     template_hole 1),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 3, template_hole 2),
                                 template_hole 2),
                               template_hole 1),
                             template_hole 2),
                           template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 2),
                                   template_hole 2),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 2),
                           template_hole 1),
                         template_hole 2),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 3, template_hole 1),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 1),
                               template_hole 2),
                             template_hole 1),
                           template_hole 1),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 3, template_hole 2), template_hole 1),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 2),
                               template_hole 1),
                             template_hole 1),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 3, template_hole 2), template_hole 2),
 template_hole 2),
                                     template_hole 2),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 2),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 3, template_hole 2), template_hole 1),
   template_hole 1),
 template_hole 2),
                                     template_hole 2),
                                   template_hole 1),
                                 template_hole 1),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 3, template_hole 1), template_hole 2),
     template_hole 2),
   template_hole 1),
 template_hole 2),
                                     template_hole 1),
                                   template_hole 1),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 3, template_hole 2), template_hole 1),
       template_hole 1),
     template_hole 1),
   template_hole 2),
 template_hole 1),
                                     template_hole 1),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 1),
           template_hole 2),
         template_hole 2),
       template_hole 1),
     template_hole 2),
   template_hole 1),
 template_hole 1),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 2),
           template_hole 1),
         template_hole 2),
       template_hole 1),
     template_hole 1),
   template_hole 1),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 2),
             template_hole 1),
           template_hole 2),
         template_hole 2),
       template_hole 1),
     template_hole 1),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_hole 2),
             template_hole 2),
           template_hole 2),
         template_hole 1),
       template_hole 2),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           template_hole 1),
         template_hole 1),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 1),
                     template_hole 2),
                   template_hole 2),
                 template_hole 1),
               template_hole 1),
             template_hole 1),
           template_hole 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_hole 2),
                     template_hole 2),
                   template_hole 2),
                 template_hole 1),
               template_hole 1),
             template_hole 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 1),
                         template_hole 2),
                       template_hole 1),
                     template_hole 2),
                   template_hole 2),
                 template_hole 1),
               template_hole 1),
             template_hole 0))))))))))))))))))))))))))))))))))))),
               t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.FinFunMoreTemplates"
### 0.359s elapsed time, 0.501s cpu time, 0.022s GC time
val it = (): unit
