Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.Generic_ADS_Construction" via "Draft.Merkle_Interface" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Conditional_Parametricity" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.Generic_ADS_Construction" via "Draft.Merkle_Interface")
Loading theory "HOL-Library.BNF_Axiomatization" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.Generic_ADS_Construction")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature BNF_AXIOMATIZATION =
  sig
    val bnf_axiomatization:
       (string -> bool) ->
         (binding option * (typ * sort)) list ->
           binding ->
             mixfix ->
               binding ->
                 binding ->
                   binding ->
                     typ list -> local_theory -> BNF_Def.bnf * local_theory
  end
structure BNF_Axiomatization: BNF_AXIOMATIZATION
### theory "HOL-Library.BNF_Axiomatization"
### 0.101s elapsed time, 0.434s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.125s elapsed time, 0.507s cpu time, 0.029s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.Generic_ADS_Construction" via "Draft.Merkle_Interface")
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.600s cpu time, 0.029s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Monad_Syntax"
### 0.034s elapsed time, 0.140s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CONDITIONAL_PARAMETRICITY =
  sig
    exception WARNING of string
    val default_settings: settings
    val get_parametricity_theorems: Proof.context -> thm list
    val mk_cond_goal: Proof.context -> thm -> term * thm
    val mk_goal: Proof.context -> term -> term
    val mk_param_goal_from_eq_def: Proof.context -> thm -> term
    val parametric_constant:
       settings ->
         Attrib.binding * thm -> Proof.context -> thm * Proof.context
    val prove_find_goal_cond:
       settings -> Proof.context -> thm list -> thm option -> term -> thm
    val prove_goal: settings -> Proof.context -> thm option -> term -> thm
    val quiet_settings: settings
    type settings =
       {suppress_print_theorem: bool,
        suppress_warnings: bool,
        use_equality_heuristic: bool, warnings_as_errors: bool}
    val step_tac: settings -> Proof.context -> thm list -> int -> tactic
  end
structure Conditional_Parametricity: CONDITIONAL_PARAMETRICITY
### theory "HOL-Library.Conditional_Parametricity"
### 0.417s elapsed time, 1.660s cpu time, 0.139s GC time
Loading theory "Draft.Merkle_Interface" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.Generic_ADS_Construction")
### theory "HOL-Library.Set_Algebras"
### 0.274s elapsed time, 1.084s cpu time, 0.110s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.473s elapsed time, 1.869s cpu time, 0.186s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs")
locale merkle_interface
  fixes h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
    and m :: "'a\<^sub>m => 'a\<^sub>m => 'a\<^sub>m option"
  assumes "merkle_interface h bo m"
locale blinding_respects_hashes
  fixes h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
  assumes "blinding_respects_hashes h bo"
locale blinding_of_on
  fixes A :: "'a\<^sub>m set"
    and h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
  assumes "blinding_of_on A h bo"
locale merge_on
  fixes A :: "'a\<^sub>m set"
    and h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
    and m :: "'a\<^sub>m => 'a\<^sub>m => 'a\<^sub>m option"
  assumes "merge_on A h bo m"
theorem
  le_fun_parametric:
    [| (?A1.0 ===> ?A3.0 ===> (=)) (<=) (<=); bi_total ?A2.0 |]
    ==> ((?A2.0 ===> ?A1.0) ===> (?A2.0 ===> ?A3.0) ===> (=)) (<=) (<=)
theorem
  vimage2p_parametric:
    ((?A1.0 ===> ?A3.0) ===>
     (?A2.0 ===> ?A4.0) ===>
     (?A3.0 ===> ?A4.0 ===> ?A5.0) ===> ?A1.0 ===> ?A2.0 ===> ?A5.0)
     vimage2p vimage2p
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
theorem
  blinding_respects_hashes_parametric_aux:
    [| (?A1.0 ===> (?A2.0 ===> ?A2.0 ===> (=)) ===> ?A4.0) (<=) (<=);
       bi_unique ?A3.0 |]
    ==> ((?A2.0 ===> ?A3.0) ===> ?A1.0 ===> ?A4.0) blinding_respects_hashes
         blinding_respects_hashes
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
theorem
  blinding_of_on_axioms_parametric:
    [| bi_unique ?A; bi_total ?A |]
    ==> (rel_set ?A ===> (?A ===> ?A ===> (=)) ===> (=))
         blinding_of_on_axioms blinding_of_on_axioms
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
theorem
  blinding_of_on_parametric:
    [| bi_total ?A1.0; bi_unique ?A2.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A1.0 ===>
         (?A1.0 ===> ?A2.0) ===> (?A1.0 ===> ?A1.0 ===> (=)) ===> (=))
         blinding_of_on blinding_of_on
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
theorem
  antisymp_parametric:
    [| bi_unique ?A; bi_total ?A |]
    ==> ((?A ===> ?A ===> (=)) ===> (=)) antisymp antisymp
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
theorem
  transp_parametric:
    bi_total ?A ==> ((?A ===> ?A ===> (=)) ===> (=)) transp transp
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.060s elapsed time, 4.052s cpu time, 0.795s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
theorem
  merge_on_axioms_parametric:
    [| bi_unique ?A2.0; bi_total ?A2.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A2.0 ===>
         (?A2.0 ===> ?A1.0) ===>
         (?A2.0 ===> ?A2.0 ===> (=)) ===>
         (?A2.0 ===> ?A2.0 ===> rel_option ?A2.0) ===> (=))
         merge_on_axioms merge_on_axioms
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
theorem
  merge_on_parametric:
    [| bi_unique ?A2.0; bi_total ?A1.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A1.0 ===>
         (?A1.0 ===> ?A2.0) ===>
         (?A1.0 ===> ?A1.0 ===> (=)) ===>
         (?A1.0 ===> ?A1.0 ===> rel_option ?A1.0) ===> (=))
         merge_on merge_on
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.134s elapsed time, 4.143s cpu time, 0.795s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
theorem
  merkle_interface_parametric:
    [| bi_total ?A2.0; bi_unique ?A2.0; bi_unique ?A1.0 |]
    ==> ((?A2.0 ===> ?A1.0) ===>
         (?A2.0 ===> ?A2.0 ===> (=)) ===>
         (?A2.0 ===> ?A2.0 ===> rel_option ?A2.0) ===> (=))
         merkle_interface merkle_interface
### theory "Draft.Merkle_Interface"
### 1.543s elapsed time, 5.344s cpu time, 0.954s GC time
Loading theory "Draft.Generic_ADS_Construction" (required by "Draft.Generic_ADS_ConstructionMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.105s elapsed time, 6.984s cpu time, 1.113s GC time
Loading theory "Draft.Templates" (required by "Draft.Generic_ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Generic_ADS_ConstructionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.780s elapsed time, 1.856s cpu time, 0.769s GC time
consts
  root_hash_T' ::
    "('a\<^sub>h, 'a\<^sub>h) T\<^sub>m => 'a\<^sub>h T\<^sub>h"
consts
  root_hash_G' ::
    "('a\<^sub>h, 'a\<^sub>h, 'b\<^sub>h, 'b\<^sub>h) G\<^sub>m
     => ('a\<^sub>h, 'b\<^sub>h) G\<^sub>h"
Proofs for inductive predicate(s) "blinding_of_T"
  Proving monotonicity ...
Proofs for inductive predicate(s) "blinding_of_G"
  Proving monotonicity ...
consts
  merge_G ::
    "('a\<^sub>m, 'a\<^sub>h, 'b\<^sub>m, 'b\<^sub>h) G\<^sub>m
     => ('a\<^sub>m, 'a\<^sub>h, 'b\<^sub>m, 'b\<^sub>h) G\<^sub>m
        => ('a\<^sub>m, 'a\<^sub>h, 'b\<^sub>m,
            'b\<^sub>h) G\<^sub>m option"
### theory "Draft.Generic_ADS_Construction"
### 3.921s elapsed time, 5.593s cpu time, 1.115s GC time
Loading theory "Draft.Generic_ADS_ConstructionMoreTemplates"
val templateLemmas =
   [("Generic_ADS_Construction.root_hash_T_simps",
     "root_hash_T ?rha (T\<^sub>m ?x) =
      T\<^sub>h (root_hash_F ?rha (root_hash_T ?rha) ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("Generic_ADS_Construction.blinding_respects_hashes_T",
     "blinding_respects_hashes ?rh ?bo ==>
      blinding_respects_hashes (root_hash_T ?rh) (blinding_of_T ?rh ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.irrefl_subterm_T",
     "?x : set3_F\<^sub>m ?y ==> ?y ~= the_T\<^sub>m ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Generic_ADS_Construction.root_hash_G_unfold",
     "root_hash_G ?rha ?rhb =
      G\<^sub>h o root_hash_F (root_hash_T ?rha) ?rhb o the_G\<^sub>m",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_hole 0))),
    ("Generic_ADS_Construction.root_hash_G_simps",
     "root_hash_G ?rha ?rhb (G\<^sub>m ?x) =
      G\<^sub>h (root_hash_F (root_hash_T ?rha) ?rhb ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Generic_ADS_Construction.blinding_of_T_mono",
     "?bo <= ?bo' ==> blinding_of_T ?rh ?bo <= blinding_of_T ?rh ?bo'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Generic_ADS_Construction.blinding_of_T",
     "blinding_of_on UNIV ?rh ?bo ==>
      blinding_of_on UNIV (root_hash_T ?rh) (blinding_of_T ?rh ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.blinding_of_G_unfold",
     "blinding_of_G ?rha ?boa ?rhb ?bob =
      vimage2p the_G\<^sub>m the_G\<^sub>m
       (blinding_of_F (root_hash_T ?rha) (blinding_of_T ?rha ?boa) ?rhb
         ?bob)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Generic_ADS_Construction.merge_T",
     "merge_on UNIV ?rh ?bo ?m ==>
      merge_on UNIV (root_hash_T ?rh) (blinding_of_T ?rh ?bo)
       (merge_T ?rh ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.blinding_of_on_T",
     "blinding_of_on ?A ?rh ?bo ==>
      blinding_of_on {x. set1_T\<^sub>m x <= ?A} (root_hash_T ?rh)
       (blinding_of_T ?rh ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.blinding_of_T_root_hash",
     "?bo <= vimage2p ?rh ?rh (=) ==>
      blinding_of_T ?rh ?bo
      <= vimage2p (root_hash_T ?rh) (root_hash_T ?rh) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 0),
            template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Generic_ADS_Construction.blinding_respects_hashes_F",
     "[| blinding_respects_hashes ?rha ?boa;
         blinding_respects_hashes ?rhb ?bob |]
      ==> blinding_respects_hashes (root_hash_F ?rha ?rhb)
           (blinding_of_F ?rha ?boa ?rhb ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.blinding_of_G_mono",
     "[| ?boa <= ?boa'; ?bob <= ?bob' |]
      ==> blinding_of_G ?rha ?boa ?rhb ?bob
          <= blinding_of_G ?rha ?boa' ?rhb ?bob'",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0),
           template_var 2)))),
    ("Generic_ADS_Construction.blinding_of_F_mono",
     "[| ?boa <= ?boa'; ?bob <= ?bob' |]
      ==> blinding_of_F ?rha ?boa ?rhb ?bob
          <= blinding_of_F ?rha ?boa' ?rhb ?bob'",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0),
           template_var 2)))),
    ("Generic_ADS_Construction.merge_G_simps",
     "merge_G ?rha ?ma ?rhb ?mb (G\<^sub>m ?x) (G\<^sub>m ?y) =
      map_option G\<^sub>m
       (merge_F (root_hash_T ?rha) (merge_T ?rha ?ma) ?rhb ?mb ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 5)),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Generic_ADS_Construction.merge_on_T",
     "merge_on ?A ?rh ?bo ?m ==>
      merge_on {x. set1_T\<^sub>m x <= ?A} (root_hash_T ?rh)
       (blinding_of_T ?rh ?bo) (merge_T ?rh ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.blinding_of_G",
     "[| blinding_of_on UNIV ?rha ?boa; blinding_of_on UNIV ?rhb ?bob |]
      ==> blinding_of_on UNIV (root_hash_G ?rha ?rhb)
           (blinding_of_G ?rha ?boa ?rhb ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.merge_F",
     "[| merge_on UNIV ?rha ?boa ?ma; merge_on UNIV ?rhb ?bob ?mb |]
      ==> merge_on UNIV (root_hash_F ?rha ?rhb)
           (blinding_of_F ?rha ?boa ?rhb ?bob) (merge_F ?rha ?ma ?rhb ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.merge_G",
     "[| merge_on UNIV ?rha ?boa ?ma; merge_on UNIV ?rhb ?bob ?mb |]
      ==> merge_on UNIV (root_hash_G ?rha ?rhb)
           (blinding_of_G ?rha ?boa ?rhb ?bob) (merge_G ?rha ?ma ?rhb ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.merge_T_cong",
     "(!!a b. a : set1_T\<^sub>m ?x ==> ?m a b = ?m' a b) ==>
      merge_T ?rh ?m ?x ?y = merge_T ?rh ?m' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 4),
           template_var 0)))),
    ("Generic_ADS_Construction.blinding_of_G_root_hash",
     "[| ?boa <= vimage2p ?rha ?rha (=); ?bob <= vimage2p ?rhb ?rhb (=) |]
      ==> blinding_of_G ?rha ?boa ?rhb ?bob
          <= vimage2p (root_hash_G ?rha ?rhb) (root_hash_G ?rha ?rhb) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 2),
              template_var 2),
            template_hole 8)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 0),
            template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 3),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("Generic_ADS_Construction.blinding_of_on_G",
     "[| blinding_of_on ?A ?rha ?boa; blinding_of_on ?B ?rhb ?bob |]
      ==> blinding_of_on
           {x. set1_G\<^sub>m x <= ?A & set3_G\<^sub>m x <= ?B}
           (root_hash_G ?rha ?rhb) (blinding_of_G ?rha ?boa ?rhb ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.blinding_of_on_F",
     "[| blinding_of_on ?A ?rha ?boa; blinding_of_on ?B ?rhb ?bob |]
      ==> blinding_of_on
           {x. set1_F\<^sub>m x <= ?A & set3_F\<^sub>m x <= ?B}
           (root_hash_F ?rha ?rhb) (blinding_of_F ?rha ?boa ?rhb ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.merge_on_F",
     "[| merge_on ?A ?rha ?boa ?ma; merge_on ?B ?rhb ?bob ?mb |]
      ==> merge_on {x. set1_F\<^sub>m x <= ?A & set3_F\<^sub>m x <= ?B}
           (root_hash_F ?rha ?rhb) (blinding_of_F ?rha ?boa ?rhb ?bob)
           (merge_F ?rha ?ma ?rhb ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 4),
                 template_var 2),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.merge_on_G",
     "[| merge_on ?A ?rha ?boa ?ma; merge_on ?B ?rhb ?bob ?mb |]
      ==> merge_on {x. set1_G\<^sub>m x <= ?A & set3_G\<^sub>m x <= ?B}
           (root_hash_G ?rha ?rhb) (blinding_of_G ?rha ?boa ?rhb ?bob)
           (merge_G ?rha ?ma ?rhb ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 4),
                 template_var 2),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.blinding_of_F_mono_inductive",
     "[| !!x y. ?boa x y --> ?boa' x y; !!x y. ?bob x y --> ?bob' x y |]
      ==> blinding_of_F ?rha ?boa ?rhb ?bob ?x ?y -->
          blinding_of_F ?rha ?boa' ?rhb ?bob' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 7),
                       template_var 2),
                     template_var 5),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 6),
                     template_var 2),
                   template_var 4),
                 template_var 1),
               template_var 0))
           ))),
    ("Generic_ADS_Construction.merge_G_cong",
     "[| !!a b. a : set1_G\<^sub>m ?x ==> ?ma a b = ?ma' a b;
         !!a b. a : set3_G\<^sub>m ?x ==> ?mb a b = ?mb' a b |]
      ==> merge_G ?rha ?ma ?rhb ?mb ?x ?y =
          merge_G ?rha ?ma' ?rhb ?mb' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 6),
                 template_var 1),
               template_var 4),
             template_var 7),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 5),
                 template_var 1),
               template_var 3),
             template_var 7),
           template_var 0)))),
    ("Generic_ADS_Construction.merge_F_cong",
     "[| !!a b. a : set1_F\<^sub>m ?x ==> ?ma a b = ?ma' a b;
         !!a b. a : set3_F\<^sub>m ?x ==> ?mb a b = ?mb' a b |]
      ==> merge_F ?rha ?ma ?rhb ?mb ?x ?y =
          merge_F ?rha ?ma' ?rhb ?mb' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 6),
                 template_var 1),
               template_var 4),
             template_var 7),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 5),
                 template_var 1),
               template_var 3),
             template_var 7),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Generic_ADS_ConstructionMoreTemplates"
### 0.471s elapsed time, 0.642s cpu time, 0.046s GC time
val it = (): unit
