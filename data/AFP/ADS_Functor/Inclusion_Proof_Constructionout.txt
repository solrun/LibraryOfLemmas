Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.Inclusion_Proof_Construction" via "Draft.ADS_Construction" via "Draft.Merkle_Interface" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Conditional_Parametricity" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.Inclusion_Proof_Construction" via "Draft.ADS_Construction" via "Draft.Merkle_Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.Inclusion_Proof_Construction" via "Draft.ADS_Construction" via "HOL-Library.Simps_Case_Conv")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.110s elapsed time, 0.459s cpu time, 0.038s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.Inclusion_Proof_Construction" via "Draft.ADS_Construction" via "Draft.Merkle_Interface")
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.499s cpu time, 0.038s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Monad_Syntax"
### 0.030s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.175s elapsed time, 0.724s cpu time, 0.038s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.Inclusion_Proof_Construction" via "Draft.ADS_Construction")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.070s elapsed time, 0.279s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
signature CONDITIONAL_PARAMETRICITY =
  sig
    exception WARNING of string
    val default_settings: settings
    val get_parametricity_theorems: Proof.context -> thm list
    val mk_cond_goal: Proof.context -> thm -> term * thm
    val mk_goal: Proof.context -> term -> term
    val mk_param_goal_from_eq_def: Proof.context -> thm -> term
    val parametric_constant:
       settings ->
         Attrib.binding * thm -> Proof.context -> thm * Proof.context
    val prove_find_goal_cond:
       settings -> Proof.context -> thm list -> thm option -> term -> thm
    val prove_goal: settings -> Proof.context -> thm option -> term -> thm
    val quiet_settings: settings
    type settings =
       {suppress_print_theorem: bool,
        suppress_warnings: bool,
        use_equality_heuristic: bool, warnings_as_errors: bool}
    val step_tac: settings -> Proof.context -> thm list -> int -> tactic
  end
structure Conditional_Parametricity: CONDITIONAL_PARAMETRICITY
### theory "HOL-Library.Conditional_Parametricity"
### 0.369s elapsed time, 1.482s cpu time, 0.090s GC time
Loading theory "Draft.Merkle_Interface" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.Inclusion_Proof_Construction" via "Draft.ADS_Construction")
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.895s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.264s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.ExtrEqs")
locale merkle_interface
  fixes h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
    and m :: "'a\<^sub>m => 'a\<^sub>m => 'a\<^sub>m option"
  assumes "merkle_interface h bo m"
locale blinding_respects_hashes
  fixes h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
  assumes "blinding_respects_hashes h bo"
locale blinding_of_on
  fixes A :: "'a\<^sub>m set"
    and h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
  assumes "blinding_of_on A h bo"
locale merge_on
  fixes A :: "'a\<^sub>m set"
    and h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
    and m :: "'a\<^sub>m => 'a\<^sub>m => 'a\<^sub>m option"
  assumes "merge_on A h bo m"
theorem
  le_fun_parametric:
    [| (?A1.0 ===> ?A3.0 ===> (=)) (<=) (<=); bi_total ?A2.0 |]
    ==> ((?A2.0 ===> ?A1.0) ===> (?A2.0 ===> ?A3.0) ===> (=)) (<=) (<=)
theorem
  vimage2p_parametric:
    ((?A1.0 ===> ?A3.0) ===>
     (?A2.0 ===> ?A4.0) ===>
     (?A3.0 ===> ?A4.0 ===> ?A5.0) ===> ?A1.0 ===> ?A2.0 ===> ?A5.0)
     vimage2p vimage2p
theorem
  blinding_respects_hashes_parametric_aux:
    [| (?A1.0 ===> (?A2.0 ===> ?A2.0 ===> (=)) ===> ?A4.0) (<=) (<=);
       bi_unique ?A3.0 |]
    ==> ((?A2.0 ===> ?A3.0) ===> ?A1.0 ===> ?A4.0) blinding_respects_hashes
         blinding_respects_hashes
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
theorem
  blinding_of_on_axioms_parametric:
    [| bi_unique ?A; bi_total ?A |]
    ==> (rel_set ?A ===> (?A ===> ?A ===> (=)) ===> (=))
         blinding_of_on_axioms blinding_of_on_axioms
Found termination order: "size <*mlex*> {}"
theorem
  blinding_of_on_parametric:
    [| bi_total ?A1.0; bi_unique ?A2.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A1.0 ===>
         (?A1.0 ===> ?A2.0) ===> (?A1.0 ===> ?A1.0 ===> (=)) ===> (=))
         blinding_of_on blinding_of_on
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
theorem
  antisymp_parametric:
    [| bi_unique ?A; bi_total ?A |]
    ==> ((?A ===> ?A ===> (=)) ===> (=)) antisymp antisymp
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
theorem
  transp_parametric:
    bi_total ?A ==> ((?A ===> ?A ===> (=)) ===> (=)) transp transp
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.121s elapsed time, 4.289s cpu time, 0.875s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.170s elapsed time, 4.396s cpu time, 0.893s GC time
theorem
  merge_on_axioms_parametric:
    [| bi_unique ?A2.0; bi_total ?A2.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A2.0 ===>
         (?A2.0 ===> ?A1.0) ===>
         (?A2.0 ===> ?A2.0 ===> (=)) ===>
         (?A2.0 ===> ?A2.0 ===> rel_option ?A2.0) ===> (=))
         merge_on_axioms merge_on_axioms
Found termination order: "size <*mlex*> {}"
theorem
  merge_on_parametric:
    [| bi_unique ?A2.0; bi_total ?A1.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A1.0 ===>
         (?A1.0 ===> ?A2.0) ===>
         (?A1.0 ===> ?A1.0 ===> (=)) ===>
         (?A1.0 ===> ?A1.0 ===> rel_option ?A1.0) ===> (=))
         merge_on merge_on
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
theorem
  merkle_interface_parametric:
    [| bi_total ?A2.0; bi_unique ?A2.0; bi_unique ?A1.0 |]
    ==> ((?A2.0 ===> ?A1.0) ===>
         (?A2.0 ===> ?A2.0 ===> (=)) ===>
         (?A2.0 ===> ?A2.0 ===> rel_option ?A2.0) ===> (=))
         merkle_interface merkle_interface
### theory "Draft.Merkle_Interface"
### 1.602s elapsed time, 5.436s cpu time, 1.022s GC time
Loading theory "Draft.ADS_Construction" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.Inclusion_Proof_Construction")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
theorem
  merge_discrete_parametric:
    bi_unique ?A ==>
    rel_fun ?A (rel_fun ?A (rel_option ?A)) merge_discrete merge_discrete
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.165s elapsed time, 6.819s cpu time, 1.143s GC time
Loading theory "Draft.Templates" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.093s elapsed time, 0.223s cpu time, 0.093s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.804s elapsed time, 1.884s cpu time, 0.740s GC time
consts
  hash_blindable' ::
    "('a\<^sub>h, 'a\<^sub>h) blindable\<^sub>m
     => 'a\<^sub>h blindable\<^sub>h"
theorem
  hash_blindable'_parametric:
    rel_fun (rel_blindable\<^sub>m ?A ?A) (rel_blindable\<^sub>h ?A)
     hash_blindable' hash_blindable'
theorem
  hash_blindable_parametric:
    rel_fun (rel_fun ?A1.0 ?A2.0)
     (rel_fun (rel_blindable\<^sub>m ?A1.0 ?A2.0)
       (rel_blindable\<^sub>h ?A2.0))
     hash_blindable hash_blindable
Proofs for inductive predicate(s) "blinding_of_blindable"
  Proving monotonicity ...
theorem
  blinding_of_blindable_parametric:
    bi_unique ?A3.0 ==>
    rel_fun (rel_fun ?A1.0 ?A3.0)
     (rel_fun (rel_fun ?A2.0 (rel_fun ?A1.0 (=)))
       (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A3.0)
         (rel_fun (rel_blindable\<^sub>m ?A1.0 ?A3.0) (=))))
     blinding_of_blindable blinding_of_blindable
Found termination order: "{}"
theorem
  merge_blindable_parametric:
    bi_unique ?A1.0 ==>
    rel_fun (rel_fun ?A2.0 ?A1.0)
     (rel_fun (rel_fun ?A2.0 (rel_fun ?A2.0 (rel_option ?A2.0)))
       (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A1.0)
         (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A1.0)
           (rel_option (rel_blindable\<^sub>m ?A2.0 ?A1.0)))))
     merge_blindable merge_blindable
Found termination order: "{}"
theorem
  merge_sum_parametric:
    rel_fun (rel_fun ?A1.0 (rel_fun ?A2.0 (rel_option ?A3.0)))
     (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (rel_option ?A6.0)))
       (rel_fun (rel_sum ?A1.0 ?A4.0)
         (rel_fun (rel_sum ?A2.0 ?A5.0)
           (rel_option (rel_sum ?A3.0 ?A6.0)))))
     merge_sum merge_sum
Found termination order: "{}"
theorem
  merge_prod_parametric:
    rel_fun (rel_fun ?A1.0 (rel_fun ?A2.0 (rel_option ?A3.0)))
     (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (rel_option ?A6.0)))
       (rel_fun (rel_prod ?A1.0 ?A4.0)
         (rel_fun (rel_prod ?A2.0 ?A5.0)
           (rel_option (rel_prod ?A3.0 ?A6.0)))))
     merge_prod merge_prod
locale list_R1
consts
  list_R1_to_list :: "'a list_R1 => 'a list"
consts
  list_to_list_R1 :: "'a list => 'a list_R1"
theorem
  hash_F_parametric:
    rel_fun (rel_fun ?A2.0 ?A4.0)
     (rel_fun (rel_fun ?A3.0 ?A5.0)
       (rel_fun (rel_sum ?A1.0 (rel_prod ?A2.0 ?A3.0))
         (rel_sum ?A1.0 (rel_prod ?A4.0 ?A5.0))))
     hash_F hash_F
theorem
  blinding_of_F_parametric:
    bi_unique ?A1.0 ==>
    rel_fun (rel_fun ?A2.0 (rel_fun ?A3.0 (=)))
     (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (=)))
       (rel_fun (rel_sum ?A1.0 (rel_prod ?A2.0 ?A4.0))
         (rel_fun (rel_sum ?A1.0 (rel_prod ?A3.0 ?A5.0)) (=))))
     blinding_of_F blinding_of_F
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
theorem
  merge_F_parametric:
    bi_unique ?A1.0 ==>
    rel_fun (rel_fun ?A2.0 (rel_fun ?A3.0 (rel_option ?A4.0)))
     (rel_fun (rel_fun ?A5.0 (rel_fun ?A6.0 (rel_option ?A7.0)))
       (rel_fun (rel_sum ?A1.0 (rel_prod ?A2.0 ?A5.0))
         (rel_fun (rel_sum ?A1.0 (rel_prod ?A3.0 ?A6.0))
           (rel_option (rel_sum ?A1.0 (rel_prod ?A4.0 ?A7.0))))))
     merge_F merge_F
theorem
  merge_list_parametric:
    bi_unique ?A ==>
    rel_fun (rel_fun ?A (rel_fun ?A (rel_option ?A)))
     (rel_fun (list_all2 ?A)
       (rel_fun (list_all2 ?A) (rel_option (list_all2 ?A))))
     merge_list merge_list
theorem
  is_none_parametric:
    rel_fun (rel_option ?A) (=) Option.is_none Option.is_none
consts
  hash_rt_tree' ::
    "('a\<^sub>h, 'a\<^sub>h) rose_tree\<^sub>m
     => 'a\<^sub>h rose_tree\<^sub>h"
theorem
  hash_rt_F\<^sub>m_parametric:
    rel_fun (rel_fun ?A1.0 ?A3.0)
     (rel_fun (rel_fun ?A2.0 ?A4.0)
       (rel_fun
         (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
           (rel_prod ?A3.0 (list_all2 ?A4.0)))
         (rel_blindable\<^sub>h (rel_prod ?A3.0 (list_all2 ?A4.0)))))
     hash_rt_F\<^sub>m hash_rt_F\<^sub>m
theorem
  hash_tree_parametric:
    rel_fun (rel_fun ?A1.0 ?A2.0)
     (rel_fun (rel_rose_tree\<^sub>m ?A1.0 ?A2.0)
       (rel_rose_tree\<^sub>h ?A2.0))
     hash_tree hash_tree
Proofs for inductive predicate(s) "blinding_of_tree"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
theorem
  merge_rt_F\<^sub>m_parametric:
    [| bi_unique ?A3.0; bi_unique ?A4.0; bi_unique ?A2.0 |]
    ==> rel_fun (rel_fun ?A1.0 ?A3.0)
         (rel_fun (rel_fun ?A1.0 (rel_fun ?A1.0 (rel_option ?A1.0)))
           (rel_fun (rel_fun ?A2.0 ?A4.0)
             (rel_fun (rel_fun ?A2.0 (rel_fun ?A2.0 (rel_option ?A2.0)))
               (rel_fun
                 (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
                   (rel_prod ?A3.0 (list_all2 ?A4.0)))
                 (rel_fun
                   (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
                     (rel_prod ?A3.0 (list_all2 ?A4.0)))
                   (rel_option
                     (rel_blindable\<^sub>m
                       (rel_prod ?A1.0 (list_all2 ?A2.0))
                       (rel_prod ?A3.0 (list_all2 ?A4.0)))))))))
         merge_rt_F\<^sub>m merge_rt_F\<^sub>m
### theory "Draft.ADS_Construction"
### 4.700s elapsed time, 7.212s cpu time, 2.080s GC time
Loading theory "Draft.Inclusion_Proof_Construction" (required by "Draft.Inclusion_Proof_ConstructionMoreTemplates")
consts
  blind_blindable ::
    "('a\<^sub>m => 'a\<^sub>h)
     => ('a\<^sub>m, 'a\<^sub>h) blindable\<^sub>m
        => ('a\<^sub>m, 'a\<^sub>h) blindable\<^sub>m"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "length <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p))) (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p))) (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale merkle_interface
  fixes h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
    and m :: "'a\<^sub>m => 'a\<^sub>m => 'a\<^sub>m option"
  assumes "merkle_interface h bo m"
### theory "Draft.Inclusion_Proof_Construction"
### 1.148s elapsed time, 1.297s cpu time, 0.173s GC time
Loading theory "Draft.Inclusion_Proof_ConstructionMoreTemplates"
val templateLemmas =
   [("Inclusion_Proof_Construction.blinding_blinds",
     "is_blinded (blind_source_tree ?h ?t)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Inclusion_Proof_Construction.tree_of_zipper_id",
     "tree_of_zipper (zipper_of_tree ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Inclusion_Proof_Construction.zippers_rose_tree_neq_Nil",
     "zippers_rose_tree ?e ?h (?p, ?t) ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Inclusion_Proof_Construction.hash_blind_blindable",
     "hash_blindable ?h (blind_blindable ?h ?x) = hash_blindable ?h ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Inclusion_Proof_Construction.hash_blinded_simp",
     "hash_tree ?h' (blind_source_tree ?h ?st) = hash_source_tree ?h ?st",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Inclusion_Proof_Construction.blinded_blinds_embedded",
     "blinding_of_tree ?h ?bo (blind_source_tree (?h o ?e) ?st)
       (embed_source_tree ?e ?st)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Inclusion_Proof_Construction.hash_embedded_simp",
     "hash_tree ?h (embed_source_tree ?e ?st) =
      hash_source_tree (?h o ?e) ?st",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Inclusion_Proof_Construction.zipper_children_same_tree",
     "?z' : set (zipper_children ?z) ==>
      tree_of_zipper ?z' = tree_of_zipper ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Inclusion_Proof_Construction.zipper_children_same_tree\<^sub>m",
     "?z' : set (zipper_children\<^sub>m ?z) ==>
      tree_of_zipper\<^sub>m ?z' = tree_of_zipper\<^sub>m ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Inclusion_Proof_Construction.blinded_embedded_same_hash",
     "hash_tree ?h'' (blind_source_tree (?h o ?e) ?st) =
      hash_tree ?h (embed_source_tree ?e ?st)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Inclusion_Proof_Construction.tree_of_zipper\<^sub>m_append",
     "tree_of_zipper\<^sub>m (?p @ ?p', ?t) =
      tree_of_zipper\<^sub>m (?p', tree_of_zipper\<^sub>m (?p, ?t))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Inclusion_Proof_Construction.tree_of_embed_commute",
     "tree_of_zipper\<^sub>m (embed_path ?e ?p, embed_source_tree ?e ?t) =
      embed_source_tree ?e (tree_of_zipper (?p, ?t))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Inclusion_Proof_Construction.zipper_children_size_change",
     "(?a, ?b) : set (zipper_children (?p, ?v)) ==> size ?b < size ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Inclusion_Proof_Construction.splits_iff",
     "((?l, ?a, ?r) : set (splits ?ll)) = (?ll = ?l @ ?a # ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Inclusion_Proof_Construction.blind_embed_path_same_hash",
     "hash_tree ?h (tree_of_zipper\<^sub>m (blind_path ?e ?h ?p, ?t)) =
      hash_tree ?h (tree_of_zipper\<^sub>m (embed_path ?e ?p, ?t))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Inclusion_Proof_Construction.hash_tree_of_zipper_same_path",
     "(hash_tree ?h (tree_of_zipper\<^sub>m (?p, ?v)) =
       hash_tree ?h (tree_of_zipper\<^sub>m (?p, ?v'))) =
      (hash_tree ?h ?v = hash_tree ?h ?v')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Inclusion_Proof_Construction.blind_source_tree_cases",
     "blind_source_tree ?x1ba ?xa =
      (case ?xa of
       Tree (x3a, x2ba) =>
         Tree\<^sub>m
          (Blinded
            (Content (?x1ba x3a, map (hash_source_tree ?x1ba) x2ba))))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 7, t_empty), template_var 0))),
    ("Inclusion_Proof_Construction.blinding_of_same_path",
     "blinding_of_on UNIV ?h ?bo ==>
      blinding_of_tree ?h ?bo (tree_of_zipper\<^sub>m (?p, ?t))
       (tree_of_zipper\<^sub>m (?p, ?t')) =
      blinding_of_tree ?h ?bo ?t ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("Inclusion_Proof_Construction.zippers_rose_tree_same_hash'",
     "?z : set (zippers_rose_tree ?e ?h (?p, ?t)) ==>
      hash_tree ?h (tree_of_zipper\<^sub>m ?z) =
      hash_tree ?h
       (tree_of_zipper\<^sub>m
         (embed_path ?e ?p, embed_source_tree ?e ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app (template_hole 3, template_var 4)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))))))),
    ("Inclusion_Proof_Construction.blind_path_elem_cases",
     "blind_path_elem ?x1ba ?x2ba ?xaa =
      (case ?xaa of
       (x5a, x4a, x3ba) =>
         (?x1ba x5a, map (blind_source_tree (?x2ba o ?x1ba)) x4a,
          map (blind_source_tree (?x2ba o ?x1ba)) x3ba))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 6, t_empty), template_var 0))),
    ("Inclusion_Proof_Construction.tree_of_zipper_cases",
     "tree_of_zipper ?xa =
      (case ?xa of ([], xda) => xda
       | ((x5a, x4a, x3a) # x2a, xda) =>
           tree_of_zipper (x2a, Tree (x5a, x4a @ xda # x3a)))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_app (template_hole 8, t_empty), template_var 0))),
    ("Inclusion_Proof_Construction.zippers_rose_tree_blinding_of",
     "[| blinding_of_on UNIV ?h ?bo;
         ?z : set (zippers_rose_tree ?e ?h (?p, ?t)) |]
      ==> blinding_of_tree ?h ?bo (tree_of_zipper\<^sub>m ?z)
           (tree_of_zipper\<^sub>m
             (blind_path ?e ?h ?p, embed_source_tree ?e ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4),
               template_app (template_hole 3, template_var 3)),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 5),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))))
           ))),
    ("Inclusion_Proof_Construction.hash_view_zipper_eqI",
     "[| map (hash_path_elem ?h) ?p = map (hash_path_elem ?h') ?p';
         hash_tree ?h ?v = hash_tree ?h' ?v' |]
      ==> hash_tree ?h (tree_of_zipper\<^sub>m (?p, ?v)) =
          hash_tree ?h' (tree_of_zipper\<^sub>m (?p', ?v'))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 5)),
            template_var 4),
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 3)),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 5), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 5),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Inclusion_Proof_Construction.childz_same_tree",
     "(?l, ?t, ?r) : set (splits ?ts) ==>
      tree_of_zipper\<^sub>m
       (embed_path ?e ?p, embed_source_tree ?e (Tree (?d, ?ts))) =
      tree_of_zipper\<^sub>m
       (embed_path ?e ((?d, ?l, ?r) # ?p), embed_source_tree ?e ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 6),
                  template_app
                   (template_app (template_hole 12, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 3))))),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 4))),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 5))))))]:
   (string * thm * template) list
### theory "Draft.Inclusion_Proof_ConstructionMoreTemplates"
### 0.348s elapsed time, 0.464s cpu time, 0.000s GC time
val it = (): unit
