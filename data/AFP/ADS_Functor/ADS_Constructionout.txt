Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ADS_Construction" via "Draft.Merkle_Interface" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ADS_Construction" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Conditional_Parametricity" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ADS_Construction" via "Draft.Merkle_Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.121s elapsed time, 0.510s cpu time, 0.037s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ADS_Construction" via "Draft.Merkle_Interface")
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.514s cpu time, 0.037s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Monad_Syntax"
### 0.046s elapsed time, 0.178s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.181s elapsed time, 0.736s cpu time, 0.037s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ADS_Construction")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.074s elapsed time, 0.294s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.314s cpu time, 0.078s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.316s elapsed time, 1.250s cpu time, 0.078s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs")
signature CONDITIONAL_PARAMETRICITY =
  sig
    exception WARNING of string
    val default_settings: settings
    val get_parametricity_theorems: Proof.context -> thm list
    val mk_cond_goal: Proof.context -> thm -> term * thm
    val mk_goal: Proof.context -> term -> term
    val mk_param_goal_from_eq_def: Proof.context -> thm -> term
    val parametric_constant:
       settings ->
         Attrib.binding * thm -> Proof.context -> thm * Proof.context
    val prove_find_goal_cond:
       settings -> Proof.context -> thm list -> thm option -> term -> thm
    val prove_goal: settings -> Proof.context -> thm option -> term -> thm
    val quiet_settings: settings
    type settings =
       {suppress_print_theorem: bool,
        suppress_warnings: bool,
        use_equality_heuristic: bool, warnings_as_errors: bool}
    val step_tac: settings -> Proof.context -> thm list -> int -> tactic
  end
structure Conditional_Parametricity: CONDITIONAL_PARAMETRICITY
### theory "HOL-Library.Conditional_Parametricity"
### 0.524s elapsed time, 2.091s cpu time, 0.207s GC time
Loading theory "Draft.Merkle_Interface" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ADS_Construction")
locale merkle_interface
  fixes h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
    and m :: "'a\<^sub>m => 'a\<^sub>m => 'a\<^sub>m option"
  assumes "merkle_interface h bo m"
locale blinding_respects_hashes
  fixes h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
  assumes "blinding_respects_hashes h bo"
locale blinding_of_on
  fixes A :: "'a\<^sub>m set"
    and h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
  assumes "blinding_of_on A h bo"
locale merge_on
  fixes A :: "'a\<^sub>m set"
    and h :: "'a\<^sub>m => 'a\<^sub>h"
    and bo :: "'a\<^sub>m => 'a\<^sub>m => bool"
    and m :: "'a\<^sub>m => 'a\<^sub>m => 'a\<^sub>m option"
  assumes "merge_on A h bo m"
consts
  left :: "'a tree => 'a tree"
theorem
  le_fun_parametric:
    [| (?A1.0 ===> ?A3.0 ===> (=)) (<=) (<=); bi_total ?A2.0 |]
    ==> ((?A2.0 ===> ?A1.0) ===> (?A2.0 ===> ?A3.0) ===> (=)) (<=) (<=)
consts
  right :: "'a tree => 'a tree"
theorem
  vimage2p_parametric:
    ((?A1.0 ===> ?A3.0) ===>
     (?A2.0 ===> ?A4.0) ===>
     (?A3.0 ===> ?A4.0 ===> ?A5.0) ===> ?A1.0 ===> ?A2.0 ===> ?A5.0)
     vimage2p vimage2p
theorem
  blinding_respects_hashes_parametric_aux:
    [| (?A1.0 ===> (?A2.0 ===> ?A2.0 ===> (=)) ===> ?A4.0) (<=) (<=);
       bi_unique ?A3.0 |]
    ==> ((?A2.0 ===> ?A3.0) ===> ?A1.0 ===> ?A4.0) blinding_respects_hashes
         blinding_respects_hashes
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
theorem
  blinding_of_on_axioms_parametric:
    [| bi_unique ?A; bi_total ?A |]
    ==> (rel_set ?A ===> (?A ===> ?A ===> (=)) ===> (=))
         blinding_of_on_axioms blinding_of_on_axioms
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
theorem
  blinding_of_on_parametric:
    [| bi_total ?A1.0; bi_unique ?A2.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A1.0 ===>
         (?A1.0 ===> ?A2.0) ===> (?A1.0 ===> ?A1.0 ===> (=)) ===> (=))
         blinding_of_on blinding_of_on
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
theorem
  antisymp_parametric:
    [| bi_unique ?A; bi_total ?A |]
    ==> ((?A ===> ?A ===> (=)) ===> (=)) antisymp antisymp
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
theorem
  transp_parametric:
    bi_total ?A ==> ((?A ===> ?A ===> (=)) ===> (=)) transp transp
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.142s elapsed time, 4.366s cpu time, 1.008s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.101s elapsed time, 4.196s cpu time, 0.917s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
theorem
  merge_on_axioms_parametric:
    [| bi_unique ?A2.0; bi_total ?A2.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A2.0 ===>
         (?A2.0 ===> ?A1.0) ===>
         (?A2.0 ===> ?A2.0 ===> (=)) ===>
         (?A2.0 ===> ?A2.0 ===> rel_option ?A2.0) ===> (=))
         merge_on_axioms merge_on_axioms
Found termination order: "size <*mlex*> {}"
theorem
  merge_on_parametric:
    [| bi_unique ?A2.0; bi_total ?A1.0; bi_unique ?A1.0 |]
    ==> (rel_set ?A1.0 ===>
         (?A1.0 ===> ?A2.0) ===>
         (?A1.0 ===> ?A1.0 ===> (=)) ===>
         (?A1.0 ===> ?A1.0 ===> rel_option ?A1.0) ===> (=))
         merge_on merge_on
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
theorem
  merkle_interface_parametric:
    [| bi_total ?A2.0; bi_unique ?A2.0; bi_unique ?A1.0 |]
    ==> ((?A2.0 ===> ?A1.0) ===>
         (?A2.0 ===> ?A2.0 ===> (=)) ===>
         (?A2.0 ===> ?A2.0 ===> rel_option ?A2.0) ===> (=))
         merkle_interface merkle_interface
### theory "Draft.Merkle_Interface"
### 1.533s elapsed time, 5.095s cpu time, 0.987s GC time
Loading theory "Draft.ADS_Construction" (required by "Draft.ADS_ConstructionMoreTemplates")
Found termination order: "size <*mlex*> {}"
theorem
  merge_discrete_parametric:
    bi_unique ?A ==>
    rel_fun ?A (rel_fun ?A (rel_option ?A)) merge_discrete merge_discrete
### theory "HOL-Library.Tree"
### 2.103s elapsed time, 6.770s cpu time, 1.214s GC time
Loading theory "Draft.Templates" (required by "Draft.ADS_ConstructionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.196s cpu time, 0.087s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ADS_ConstructionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.751s elapsed time, 1.804s cpu time, 0.759s GC time
consts
  hash_blindable' ::
    "('a\<^sub>h, 'a\<^sub>h) blindable\<^sub>m
     => 'a\<^sub>h blindable\<^sub>h"
theorem
  hash_blindable'_parametric:
    rel_fun (rel_blindable\<^sub>m ?A ?A) (rel_blindable\<^sub>h ?A)
     hash_blindable' hash_blindable'
theorem
  hash_blindable_parametric:
    rel_fun (rel_fun ?A1.0 ?A2.0)
     (rel_fun (rel_blindable\<^sub>m ?A1.0 ?A2.0)
       (rel_blindable\<^sub>h ?A2.0))
     hash_blindable hash_blindable
Proofs for inductive predicate(s) "blinding_of_blindable"
  Proving monotonicity ...
theorem
  blinding_of_blindable_parametric:
    bi_unique ?A3.0 ==>
    rel_fun (rel_fun ?A1.0 ?A3.0)
     (rel_fun (rel_fun ?A2.0 (rel_fun ?A1.0 (=)))
       (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A3.0)
         (rel_fun (rel_blindable\<^sub>m ?A1.0 ?A3.0) (=))))
     blinding_of_blindable blinding_of_blindable
Found termination order: "{}"
theorem
  merge_blindable_parametric:
    bi_unique ?A1.0 ==>
    rel_fun (rel_fun ?A2.0 ?A1.0)
     (rel_fun (rel_fun ?A2.0 (rel_fun ?A2.0 (rel_option ?A2.0)))
       (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A1.0)
         (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A1.0)
           (rel_option (rel_blindable\<^sub>m ?A2.0 ?A1.0)))))
     merge_blindable merge_blindable
Found termination order: "{}"
theorem
  merge_sum_parametric:
    rel_fun (rel_fun ?A1.0 (rel_fun ?A2.0 (rel_option ?A3.0)))
     (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (rel_option ?A6.0)))
       (rel_fun (rel_sum ?A1.0 ?A4.0)
         (rel_fun (rel_sum ?A2.0 ?A5.0)
           (rel_option (rel_sum ?A3.0 ?A6.0)))))
     merge_sum merge_sum
Found termination order: "{}"
theorem
  merge_prod_parametric:
    rel_fun (rel_fun ?A1.0 (rel_fun ?A2.0 (rel_option ?A3.0)))
     (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (rel_option ?A6.0)))
       (rel_fun (rel_prod ?A1.0 ?A4.0)
         (rel_fun (rel_prod ?A2.0 ?A5.0)
           (rel_option (rel_prod ?A3.0 ?A6.0)))))
     merge_prod merge_prod
locale list_R1
consts
  list_R1_to_list :: "'a list_R1 => 'a list"
consts
  list_to_list_R1 :: "'a list => 'a list_R1"
theorem
  hash_F_parametric:
    rel_fun (rel_fun ?A2.0 ?A4.0)
     (rel_fun (rel_fun ?A3.0 ?A5.0)
       (rel_fun (rel_sum ?A1.0 (rel_prod ?A2.0 ?A3.0))
         (rel_sum ?A1.0 (rel_prod ?A4.0 ?A5.0))))
     hash_F hash_F
theorem
  blinding_of_F_parametric:
    bi_unique ?A1.0 ==>
    rel_fun (rel_fun ?A2.0 (rel_fun ?A3.0 (=)))
     (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (=)))
       (rel_fun (rel_sum ?A1.0 (rel_prod ?A2.0 ?A4.0))
         (rel_fun (rel_sum ?A1.0 (rel_prod ?A3.0 ?A5.0)) (=))))
     blinding_of_F blinding_of_F
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
theorem
  merge_F_parametric:
    bi_unique ?A1.0 ==>
    rel_fun (rel_fun ?A2.0 (rel_fun ?A3.0 (rel_option ?A4.0)))
     (rel_fun (rel_fun ?A5.0 (rel_fun ?A6.0 (rel_option ?A7.0)))
       (rel_fun (rel_sum ?A1.0 (rel_prod ?A2.0 ?A5.0))
         (rel_fun (rel_sum ?A1.0 (rel_prod ?A3.0 ?A6.0))
           (rel_option (rel_sum ?A1.0 (rel_prod ?A4.0 ?A7.0))))))
     merge_F merge_F
theorem
  merge_list_parametric:
    bi_unique ?A ==>
    rel_fun (rel_fun ?A (rel_fun ?A (rel_option ?A)))
     (rel_fun (list_all2 ?A)
       (rel_fun (list_all2 ?A) (rel_option (list_all2 ?A))))
     merge_list merge_list
theorem
  is_none_parametric:
    rel_fun (rel_option ?A) (=) Option.is_none Option.is_none
consts
  hash_rt_tree' ::
    "('a\<^sub>h, 'a\<^sub>h) rose_tree\<^sub>m
     => 'a\<^sub>h rose_tree\<^sub>h"
theorem
  hash_rt_F\<^sub>m_parametric:
    rel_fun (rel_fun ?A1.0 ?A3.0)
     (rel_fun (rel_fun ?A2.0 ?A4.0)
       (rel_fun
         (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
           (rel_prod ?A3.0 (list_all2 ?A4.0)))
         (rel_blindable\<^sub>h (rel_prod ?A3.0 (list_all2 ?A4.0)))))
     hash_rt_F\<^sub>m hash_rt_F\<^sub>m
theorem
  hash_tree_parametric:
    rel_fun (rel_fun ?A1.0 ?A2.0)
     (rel_fun (rel_rose_tree\<^sub>m ?A1.0 ?A2.0)
       (rel_rose_tree\<^sub>h ?A2.0))
     hash_tree hash_tree
Proofs for inductive predicate(s) "blinding_of_tree"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
theorem
  merge_rt_F\<^sub>m_parametric:
    [| bi_unique ?A3.0; bi_unique ?A4.0; bi_unique ?A2.0 |]
    ==> rel_fun (rel_fun ?A1.0 ?A3.0)
         (rel_fun (rel_fun ?A1.0 (rel_fun ?A1.0 (rel_option ?A1.0)))
           (rel_fun (rel_fun ?A2.0 ?A4.0)
             (rel_fun (rel_fun ?A2.0 (rel_fun ?A2.0 (rel_option ?A2.0)))
               (rel_fun
                 (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
                   (rel_prod ?A3.0 (list_all2 ?A4.0)))
                 (rel_fun
                   (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
                     (rel_prod ?A3.0 (list_all2 ?A4.0)))
                   (rel_option
                     (rel_blindable\<^sub>m
                       (rel_prod ?A1.0 (list_all2 ?A2.0))
                       (rel_prod ?A3.0 (list_all2 ?A4.0)))))))))
         merge_rt_F\<^sub>m merge_rt_F\<^sub>m
### theory "Draft.ADS_Construction"
### 4.415s elapsed time, 6.753s cpu time, 2.096s GC time
Loading theory "Draft.ADS_ConstructionMoreTemplates"
val templateLemmas =
   [("ADS_Construction.is_none_parametric",
     "rel_fun (rel_option ?A) (=) Option.is_none Option.is_none",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_hole 2),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.hash_blindable_simps",
     "hash_blindable ?h (Blinded ?y) = ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ADS_Construction.hash_blindable'_parametric",
     "rel_fun (rel_blindable\<^sub>m ?A ?A) (rel_blindable\<^sub>h ?A)
       hash_blindable' hash_blindable'",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 0)),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.hash_blindable_simps",
     "hash_blindable ?h (Unblinded ?x) = Content (?h ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("ADS_Construction.in_set1_blindable\<^sub>m_iff",
     "(?x : set1_blindable\<^sub>m ?y) = (?y = Unblinded ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("ADS_Construction.blinding_of_blindable_simps2",
     "blinding_of_blindable ?h ?bo (Unblinded ?x) (Blinded ?y') = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("ADS_Construction.blinding_of_list_mono_pred",
     "?R <= ?R' ==> list_all2 ?R <= list_all2 ?R'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ADS_Construction.hash_blindable_map",
     "hash_blindable ?f o map_blindable\<^sub>m ?g id =
      hash_blindable (?f o ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ADS_Construction.blinding_of_blindable_simps",
     "blinding_of_blindable ?h ?bo ?z (Blinded ?x) = (?z = Blinded ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("ADS_Construction.blinding_of_blindable_simps2",
     "blinding_of_blindable ?h ?bo (Blinded ?x') (Blinded ?y') =
      (?y' = ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 0, template_var 1))),
    ("ADS_Construction.blinding_of_blindable_simps2",
     "blinding_of_blindable ?h ?bo (Unblinded ?x) (Unblinded ?y) =
      ?bo ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("ADS_Construction.hash_tree_simps",
     "hash_tree ?h (Tree\<^sub>m ?x) =
      Tree\<^sub>h (hash_rt_F\<^sub>m ?h (hash_tree ?h) ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("ADS_Construction.hash_blindable_parametric",
     "rel_fun (rel_fun ?A1.0 ?A2.0)
       (rel_fun (rel_blindable\<^sub>m ?A1.0 ?A2.0)
         (rel_blindable\<^sub>h ?A2.0))
       hash_blindable hash_blindable",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.hash_tree_parametric",
     "rel_fun (rel_fun ?A1.0 ?A2.0)
       (rel_fun (rel_rose_tree\<^sub>m ?A1.0 ?A2.0)
         (rel_rose_tree\<^sub>h ?A2.0))
       hash_tree hash_tree",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.blinding_of_blindable_simps",
     "blinding_of_blindable ?h ?bo (Blinded ?x) ?y =
      (hash_blindable ?h ?y = ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_var 1))),
    ("ADS_Construction.hash_map_blindable_simp",
     "hash_blindable ?f (map_blindable\<^sub>m ?f' id ?x) =
      hash_blindable (?f o ?f') ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("ADS_Construction.merge_discrete_parametric",
     "bi_unique ?A ==>
      rel_fun ?A (rel_fun ?A (rel_option ?A)) merge_discrete
       merge_discrete",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("ADS_Construction.blinding_of_blindable_mono",
     "?bo <= ?bo' ==>
      blinding_of_blindable ?h ?bo <= blinding_of_blindable ?h ?bo'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("ADS_Construction.blinding_of_tree_mono",
     "?bo <= ?bo' ==> blinding_of_tree ?h ?bo <= blinding_of_tree ?h ?bo'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("ADS_Construction.blinding_of_fun_mono",
     "?R <= ?Ra ==> rel_fun (=) ?R <= rel_fun (=) ?Ra",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ADS_Construction.blinding_of_list",
     "blinding_of_on UNIV ?h ?bo ==>
      blinding_of_on UNIV (map ?h) (list_all2 ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.blinding_of_blindable_simps2",
     "blinding_of_blindable ?h ?bo (Blinded ?x') (Unblinded ?y) =
      (Content (?h ?y) = ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_var 3, template_var 0)),
         template_var 1))),
    ("ADS_Construction.blinding_of_blindable",
     "blinding_of_on UNIV ?h ?bo ==>
      blinding_of_on UNIV (hash_blindable ?h)
       (blinding_of_blindable ?h ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_tree",
     "blinding_of_on UNIV ?h ?bo ==>
      blinding_of_on UNIV (hash_tree ?h) (blinding_of_tree ?h ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_fun",
     "blinding_of_on UNIV ?rh ?bo ==>
      blinding_of_on UNIV ((o) ?rh) (rel_fun (=) ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("ADS_Construction.merkle_list",
     "merkle_interface ?h ?bo ?m ==>
      merkle_interface (map ?h) (list_all2 ?bo) (merge_list ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.merkle_fun",
     "merkle_interface ?rh ?bo ?m ==>
      merkle_interface ((o) ?rh) (rel_fun (=) ?bo) (merge_fun ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.blindable\<^sub>m_map_compositionality",
     "map_blindable\<^sub>m ?f ?g o map_blindable\<^sub>m ?f' ?g' =
      map_blindable\<^sub>m (?f o ?f') (?g o ?g')",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ADS_Construction.merkle_blindable",
     "merkle_interface ?h ?bo ?m ==>
      merkle_interface (hash_blindable ?h) (blinding_of_blindable ?h ?bo)
       (merge_blindable ?h ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.merkle_tree",
     "merkle_interface ?h ?bo ?m ==>
      merkle_interface (hash_tree ?h) (blinding_of_tree ?h ?bo)
       (merge_tree ?h ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.merge_list",
     "merge_on UNIV ?h ?bo ?m ==>
      merge_on UNIV (map ?h) (list_all2 ?bo) (merge_list ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.merge_fun",
     "merge_on UNIV ?rh ?bo ?m ==>
      merge_on UNIV ((o) ?rh) (rel_fun (=) ?bo) (merge_fun ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.blinding_of_blindable_simps",
     "blinding_of_blindable ?h ?bo (Unblinded ?x) ?y =
      (EX y. ?y = Unblinded y & ?bo ?x y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("ADS_Construction.blinding_of_on_list",
     "blinding_of_on ?A ?h ?bo ==>
      blinding_of_on {x. set x <= ?A} (map ?h) (list_all2 ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.merge_tree",
     "merge_on UNIV ?h ?bo ?m ==>
      merge_on UNIV (hash_tree ?h) (blinding_of_tree ?h ?bo)
       (merge_tree ?h ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.merge_blindable",
     "merge_on UNIV ?h ?bo ?m ==>
      merge_on UNIV (hash_blindable ?h) (blinding_of_blindable ?h ?bo)
       (merge_blindable ?h ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_list_hash",
     "?bo <= vimage2p ?h ?h (=) ==>
      list_all2 ?bo <= vimage2p (map ?h) (map ?h) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 0),
            template_hole 5))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ADS_Construction.blinding_of_sum_mono",
     "[| ?R1.0 <= ?R1a; ?R2.0 <= ?R2a |]
      ==> rel_sum ?R1.0 ?R2.0 <= rel_sum ?R1a ?R2a",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ADS_Construction.blinding_of_prod_mono",
     "[| ?R1.0 <= ?R1a; ?R2.0 <= ?R2a |]
      ==> rel_prod ?R1.0 ?R2.0 <= rel_prod ?R1a ?R2a",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ADS_Construction.blinding_of_on_blindable",
     "blinding_of_on ?A ?h ?bo ==>
      blinding_of_on {x. set1_blindable\<^sub>m x <= ?A} (hash_blindable ?h)
       (blinding_of_blindable ?h ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_on_tree",
     "blinding_of_on ?A ?h ?bo ==>
      blinding_of_on {x. set1_rose_tree\<^sub>m x <= ?A} (hash_tree ?h)
       (blinding_of_tree ?h ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_blindable_hash",
     "?bo <= vimage2p ?h ?h (=) ==>
      blinding_of_blindable ?h ?bo
      <= vimage2p (hash_blindable ?h) (hash_blindable ?h) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 0),
            template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ADS_Construction.blinding_of_tree_hash",
     "?bo <= vimage2p ?h ?h (=) ==>
      blinding_of_tree ?h ?bo
      <= vimage2p (hash_tree ?h) (hash_tree ?h) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 0),
            template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ADS_Construction.blinding_of_fun_hash",
     "?bo <= vimage2p ?rh ?rh (=) ==>
      rel_fun (=) ?bo <= vimage2p ((o) ?rh) ((o) ?rh) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 7, template_var 0),
              template_var 0),
            template_hole 6))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, template_hole 3), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ADS_Construction.option_bind_comm",
     "?x >>= (%y. ?c >>= ?f y) = ?c >>= (%y. ?x >>= (%z. ?f z y))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("ADS_Construction.blinding_of_on_fun",
     "blinding_of_on ?A ?rh ?bo ==>
      blinding_of_on {x. range x <= ?A} ((o) ?rh) (rel_fun (=) ?bo)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("ADS_Construction.merge_on_list",
     "merge_on ?A ?h ?bo ?m ==>
      merge_on {x. set x <= ?A} (map ?h) (list_all2 ?bo) (merge_list ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.blinding_of_sum",
     "[| blinding_of_on UNIV ?rha ?boa; blinding_of_on UNIV ?rhb ?bob |]
      ==> blinding_of_on UNIV (map_sum ?rha ?rhb) (rel_sum ?boa ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_prod",
     "[| blinding_of_on UNIV ?rha ?boa; blinding_of_on UNIV ?rhb ?bob |]
      ==> blinding_of_on UNIV (map_prod ?rha ?rhb) (rel_prod ?boa ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.merge_fun_parametric",
     "rel_fun (rel_fun ?A (rel_fun ?B (rel_option ?C)))
       (rel_fun (rel_fun (=) ?A)
         (rel_fun (rel_fun (=) ?B) (rel_option (rel_fun (=) ?C))))
       merge_fun merge_fun",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app (template_hole 7, template_var 0)))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_var 1)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.blinding_of_tree_simps",
     "blinding_of_tree ?h ?bo (Tree\<^sub>m ?t1.0) (Tree\<^sub>m ?t2.0) =
      blinding_of_blindable (map_prod ?h (map (hash_tree ?h)))
       (rel_prod ?bo (list_all2 (blinding_of_tree ?h ?bo))) ?t1.0 ?t2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_app (template_hole 6, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 3)))),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)))),
           template_var 1),
         template_var 0))),
    ("ADS_Construction.merge_list_parametric",
     "bi_unique ?A ==>
      rel_fun (rel_fun ?A (rel_fun ?A (rel_option ?A)))
       (rel_fun (list_all2 ?A)
         (rel_fun (list_all2 ?A) (rel_option (list_all2 ?A))))
       merge_list merge_list",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_app (template_hole 6, template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 4, template_var 0)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 4, template_var 0))))),
               template_hole 1),
             template_hole 0)
           ))),
    ("ADS_Construction.merge_on_tree",
     "merge_on ?A ?h ?bo ?m ==>
      merge_on {x. set1_rose_tree\<^sub>m x <= ?A} (hash_tree ?h)
       (blinding_of_tree ?h ?bo) (merge_tree ?h ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.merge_on_blindable",
     "merge_on ?A ?h ?bo ?m ==>
      merge_on {x. set1_blindable\<^sub>m x <= ?A} (hash_blindable ?h)
       (blinding_of_blindable ?h ?bo) (merge_blindable ?h ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ADS_Construction.merge_on_fun",
     "merge_on ?A ?rh ?bo ?m ==>
      merge_on {x. range x <= ?A} ((o) ?rh) (rel_fun (=) ?bo)
       (merge_fun ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, t_empty)),
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ADS_Construction.blinding_of_list_mono",
     "(!!x y. ?bo x y --> ?bo' x y) ==>
      list_all2 ?bo ?x ?y --> list_all2 ?bo' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("ADS_Construction.merkle_sum",
     "[| merkle_interface ?rha ?boa ?ma; merkle_interface ?rhb ?bob ?mb |]
      ==> merkle_interface (map_sum ?rha ?rhb) (rel_sum ?boa ?bob)
           (merge_sum ?ma ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("ADS_Construction.merkle_product",
     "[| merkle_interface ?rha ?boa ?ma; merkle_interface ?rhb ?bob ?mb |]
      ==> merkle_interface (map_prod ?rha ?rhb) (rel_prod ?boa ?bob)
           (merge_prod ?ma ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_blindable_simps",
     "blinding_of_blindable ?h ?bo ?z (Unblinded ?x) =
      ((EX x. ?z = Unblinded x & ?bo x ?x) |
       ?z = Blinded (Content (?h ?x)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_var 3, template_var 0)))))
           ))),
    ("ADS_Construction.hash_rt_F\<^sub>m_parametric",
     "rel_fun (rel_fun ?A1.0 ?A3.0)
       (rel_fun (rel_fun ?A2.0 ?A4.0)
         (rel_fun
           (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
             (rel_prod ?A3.0 (list_all2 ?A4.0)))
           (rel_blindable\<^sub>h (rel_prod ?A3.0 (list_all2 ?A4.0)))))
       hash_rt_F\<^sub>m hash_rt_F\<^sub>m",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 3),
                           template_app (template_hole 5, template_var 1))),
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_app (template_hole 3, template_var 0)))),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app (template_hole 3, template_var 0)))))),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.blinding_of_blindable_parametric",
     "bi_unique ?A3.0 ==>
      rel_fun (rel_fun ?A1.0 ?A3.0)
       (rel_fun (rel_fun ?A2.0 (rel_fun ?A1.0 (=)))
         (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A3.0)
           (rel_fun (rel_blindable\<^sub>m ?A1.0 ?A3.0) (=))))
       blinding_of_blindable blinding_of_blindable",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_hole 5))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_var 2)),
                       template_hole 5)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("ADS_Construction.merge_sum",
     "[| merge_on UNIV ?rha ?boa ?ma; merge_on UNIV ?rhb ?bob ?mb |]
      ==> merge_on UNIV (map_sum ?rha ?rhb) (rel_sum ?boa ?bob)
           (merge_sum ?ma ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("ADS_Construction.merge_prod",
     "[| merge_on UNIV ?rha ?boa ?ma; merge_on UNIV ?rhb ?bob ?mb |]
      ==> merge_on UNIV (map_prod ?rha ?rhb) (rel_prod ?boa ?bob)
           (merge_prod ?ma ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("ADS_Construction.merge_sum_parametric",
     "rel_fun (rel_fun ?A1.0 (rel_fun ?A2.0 (rel_option ?A3.0)))
       (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (rel_option ?A6.0)))
         (rel_fun (rel_sum ?A1.0 ?A4.0)
           (rel_fun (rel_sum ?A2.0 ?A5.0)
             (rel_option (rel_sum ?A3.0 ?A6.0)))))
       merge_sum merge_sum",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 5),
                   template_app
                    (template_app (template_hole 11, template_var 4),
                     template_app (template_hole 10, template_var 3)))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app (template_hole 6, template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 5),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_var 1)),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 0)))))),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.merge_prod_parametric",
     "rel_fun (rel_fun ?A1.0 (rel_fun ?A2.0 (rel_option ?A3.0)))
       (rel_fun (rel_fun ?A4.0 (rel_fun ?A5.0 (rel_option ?A6.0)))
         (rel_fun (rel_prod ?A1.0 ?A4.0)
           (rel_fun (rel_prod ?A2.0 ?A5.0)
             (rel_option (rel_prod ?A3.0 ?A6.0)))))
       merge_prod merge_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 5),
                   template_app
                    (template_app (template_hole 11, template_var 4),
                     template_app (template_hole 10, template_var 3)))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app (template_hole 6, template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 5),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_var 1)),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 0)))))),
             template_hole 1),
           template_hole 0)
         )),
    ("ADS_Construction.blinding_of_sum_hash",
     "[| ?boa <= vimage2p ?rha ?rha (=); ?bob <= vimage2p ?rhb ?rhb (=) |]
      ==> rel_sum ?boa ?bob
          <= vimage2p (map_sum ?rha ?rhb) (map_sum ?rha ?rhb) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 2),
              template_var 2),
            template_hole 8)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 0),
            template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("ADS_Construction.blinding_of_prod_hash",
     "[| ?boa <= vimage2p ?rha ?rha (=); ?bob <= vimage2p ?rhb ?rhb (=) |]
      ==> rel_prod ?boa ?bob
          <= vimage2p (map_prod ?rha ?rhb) (map_prod ?rha ?rhb) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 2),
              template_var 2),
            template_hole 8)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_var 0),
            template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("ADS_Construction.merge_blindable_parametric",
     "bi_unique ?A1.0 ==>
      rel_fun (rel_fun ?A2.0 ?A1.0)
       (rel_fun (rel_fun ?A2.0 (rel_fun ?A2.0 (rel_option ?A2.0)))
         (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A1.0)
           (rel_fun (rel_blindable\<^sub>m ?A2.0 ?A1.0)
             (rel_option (rel_blindable\<^sub>m ?A2.0 ?A1.0)))))
       merge_blindable merge_blindable",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_app (template_hole 6, template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 1)),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 1)))))),
               template_hole 1),
             template_hole 0)
           ))),
    ("ADS_Construction.blinding_of_rt_F\<^sub>m_mono",
     "[| ?boa <= ?boa'; ?bob <= ?bob' |]
      ==> blinding_of_blindable (map_prod ?ha (map ?hb))
           (rel_prod ?boa (list_all2 ?bob))
          <= blinding_of_blindable (map_prod ?ha (map ?hb))
              (rel_prod ?boa' (list_all2 ?bob'))",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app (template_hole 0, template_var 3))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app (template_hole 0, template_var 2)))))),
    ("ADS_Construction.blinding_of_on_sum",
     "[| blinding_of_on ?A ?rha ?boa; blinding_of_on ?B ?rhb ?bob |]
      ==> blinding_of_on {x. setl x <= ?A & setr x <= ?B}
           (map_sum ?rha ?rhb) (rel_sum ?boa ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("ADS_Construction.blinding_of_on_prod",
     "[| blinding_of_on ?A ?rha ?boa; blinding_of_on ?B ?rhb ?bob |]
      ==> blinding_of_on {x. fsts x <= ?A & snds x <= ?B}
           (map_prod ?rha ?rhb) (rel_prod ?boa ?bob)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("ADS_Construction.merge_list_cong",
     "(!!a b. [| a : set ?x; b : set ?y |] ==> ?m a b = ?m' a b) ==>
      merge_list ?m ?x ?y = merge_list ?m' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 2)))),
    ("ADS_Construction.blinding_of_rt_F\<^sub>m_hash",
     "[| ?boa <= vimage2p ?ha ?ha (=); ?bob <= vimage2p ?hb ?hb (=) |]
      ==> blinding_of_blindable (map_prod ?ha (map ?hb))
           (rel_prod ?boa (list_all2 ?bob))
          <= vimage2p (hash_rt_F\<^sub>m ?ha ?hb)
              (hash_rt_F\<^sub>m ?ha ?hb) (=)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_app (template_hole 13, template_var 2),
              template_var 2),
            template_hole 12)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 10, template_var 0),
              template_var 0),
            template_hole 9))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("ADS_Construction.merge_on_sum",
     "[| merge_on ?A ?rha ?boa ?ma; merge_on ?B ?rhb ?bob ?mb |]
      ==> merge_on {x. setl x <= ?A & setr x <= ?B} (map_sum ?rha ?rhb)
           (rel_sum ?boa ?bob) (merge_sum ?ma ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("ADS_Construction.merge_on_prod",
     "[| merge_on ?A ?rha ?boa ?ma; merge_on ?B ?rhb ?bob ?mb |]
      ==> merge_on {x. fsts x <= ?A & snds x <= ?B} (map_prod ?rha ?rhb)
           (rel_prod ?boa ?bob) (merge_prod ?ma ?mb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("ADS_Construction.merge_blindable_cong",
     "(!!a b.
          [| a : set1_blindable\<^sub>m ?x; b : set1_blindable\<^sub>m ?y |]
          ==> ?m a b = ?m' a b) ==>
      merge_blindable ?h ?m ?x ?y = merge_blindable ?h ?m' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 4),
           template_var 3)))),
    ("ADS_Construction.merge_tree_cong",
     "(!!a b.
          [| a : set1_rose_tree\<^sub>m ?x; b : set1_rose_tree\<^sub>m ?y |]
          ==> ?m a b = ?m' a b) ==>
      merge_tree ?h ?m ?x ?y = merge_tree ?h ?m' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 4),
           template_var 3)))),
    ("ADS_Construction.merge_fun_cong",
     "(!!a b. [| a : range ?f; b : range ?g |] ==> ?m a b = ?m' a b) ==>
      merge_fun ?m ?f ?g = merge_fun ?m' ?f ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 2)))),
    ("ADS_Construction.set_rt_F\<^sub>m_eq",
     "{x. set1_blindable\<^sub>m x >>= fsts <= ?A &
          set1_blindable\<^sub>m x >>= snds >>= set <= ?B} =
      {x. set1_blindable\<^sub>m x
          <= {x. fsts x <= ?A & snds x <= {x. set x <= ?B}}}",
     template_equation
      (template_app (template_hole 14, t_empty),
       template_app (template_hole 14, t_empty))),
    ("ADS_Construction.blinding_of_rt_F\<^sub>m_mono_inductive",
     "[| !!x y. ?boa x y --> ?boa' x y; !!x y. ?bob x y --> ?bob' x y |]
      ==> blinding_of_blindable (map_prod ?ha (map ?hb))
           (rel_prod ?boa (list_all2 ?bob)) ?x ?y -->
          blinding_of_blindable (map_prod ?ha (map ?hb))
           (rel_prod ?boa' (list_all2 ?bob')) ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app (template_hole 2, template_var 2))),
                     template_app
                      (template_app (template_hole 1, template_var 7),
                       template_app (template_hole 0, template_var 5))),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app (template_hole 2, template_var 2))),
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_app (template_hole 0, template_var 4))),
                 template_var 1),
               template_var 0))
           ))),
    ("ADS_Construction.merge_prod_cong",
     "[| !!a b. [| a : fsts ?p1.0; b : fsts ?p2.0 |] ==> ?ma a b = ?ma' a b;
         !!a b.
            [| a : snds ?p1.0; b : snds ?p2.0 |] ==> ?mb a b = ?mb' a b |]
      ==> merge_prod ?ma ?mb ?p1.0 ?p2.0 =
          merge_prod ?ma' ?mb' ?p1.0 ?p2.0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 5),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 5),
           template_var 4)))),
    ("ADS_Construction.merge_rt_F\<^sub>m_parametric",
     "[| bi_unique ?A3.0; bi_unique ?A4.0; bi_unique ?A2.0 |]
      ==> rel_fun (rel_fun ?A1.0 ?A3.0)
           (rel_fun (rel_fun ?A1.0 (rel_fun ?A1.0 (rel_option ?A1.0)))
             (rel_fun (rel_fun ?A2.0 ?A4.0)
               (rel_fun (rel_fun ?A2.0 (rel_fun ?A2.0 (rel_option ?A2.0)))
                 (rel_fun
                   (rel_blindable\<^sub>m (rel_prod ?A1.0 (list_all2 ?A2.0))
                     (rel_prod ?A3.0 (list_all2 ?A4.0)))
                   (rel_fun
                     (rel_blindable\<^sub>m
                       (rel_prod ?A1.0 (list_all2 ?A2.0))
                       (rel_prod ?A3.0 (list_all2 ?A4.0)))
                     (rel_option
                       (rel_blindable\<^sub>m
                         (rel_prod ?A1.0 (list_all2 ?A2.0))
                         (rel_prod ?A3.0 (list_all2 ?A4.0)))))))))
           merge_rt_F\<^sub>m merge_rt_F\<^sub>m",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 3)),
        template_predicate
         (template_app (template_hole 23, template_var 2)),
        template_predicate
         (template_app (template_hole 22, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 21,
                   template_app
                    (template_app (template_hole 20, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_var 0),
                       template_app
                        (template_app (template_hole 17, template_var 0),
                         template_app (template_hole 16, template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app (template_hole 14, template_var 1),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app
                          (template_app (template_hole 12, template_var 1),
                           template_app
                            (template_app
                              (template_hole 11, template_var 1),
                             template_app
                              (template_hole 10, template_var 1)))),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_hole 7, template_var 0),
                                 template_app
                                  (template_hole 6, template_var 1))),
                             template_app
                              (template_app
                                (template_hole 5, template_var 3),
                               template_app
                                (template_hole 4, template_var 2)))),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 0),
                                   template_app
                                    (template_hole 6, template_var 1))),
                               template_app
                                (template_app
                                  (template_hole 5, template_var 3),
                                 template_app
                                  (template_hole 4, template_var 2)))),
                           template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 0),
                                   template_app
                                    (template_hole 6, template_var 1))),
                               template_app
                                (template_app
                                  (template_hole 5, template_var 3),
                                 template_app
                                  (template_hole 4,
                                   template_var 2)))))))))),
               template_hole 1),
             template_hole 0)
           ))),
    ("ADS_Construction.merge_sum_cong",
     "[| ?x = ?x'; ?y = ?y';
         !!xl yl. [| ?x = Inl xl; ?y = Inl yl |] ==> ?ma xl yl = ?ma' xl yl;
         !!xr yr.
            [| ?x = Inr xr; ?y = Inr yr |] ==> ?mb xr yr = ?mb' xr yr |]
      ==> merge_sum ?ma ?mb ?x ?y = merge_sum ?ma' ?mb' ?x' ?y'",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 7),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 6),
           template_var 4)))),
    ("ADS_Construction.merge_rt_F\<^sub>m_cong",
     "[| !!a b.
            [| a : set1_blindable\<^sub>m ?x >>= fsts;
               b : set1_blindable\<^sub>m ?y >>= fsts |]
            ==> ?ma a b = ?ma' a b;
         !!a b.
            [| a : set1_blindable\<^sub>m ?x >>= snds >>= set;
               b : set1_blindable\<^sub>m ?y >>= snds >>= set |]
            ==> ?mm a b = ?mm' a b |]
      ==> merge_rt_F\<^sub>m ?ha ?ma ?hm ?mm ?x ?y =
          merge_rt_F\<^sub>m ?ha ?ma' ?hm ?mm' ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 5),
                 template_var 0),
               template_var 3),
             template_var 7),
           template_var 6),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 7),
           template_var 6))))]:
   (string * thm * template) list
### theory "Draft.ADS_ConstructionMoreTemplates"
### 0.400s elapsed time, 0.572s cpu time, 0.000s GC time
val it = (): unit
