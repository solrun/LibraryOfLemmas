   [("Inclusion_Proof_Construction.tree_of_zipper_id",
     "tree_of_zipper (zipper_of_tree ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Inclusion_Proof_Construction.hash_blind_blindable",
     "hash_blindable ?h (blind_blindable ?h ?x) = hash_blindable ?h ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Inclusion_Proof_Construction.hash_blinded_simp",
     "hash_tree ?h' (blind_source_tree ?h ?st) = hash_source_tree ?h ?st",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Inclusion_Proof_Construction.hash_embedded_simp",
     "hash_tree ?h (embed_source_tree ?e ?st) =
      hash_source_tree (?h o ?e) ?st",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Inclusion_Proof_Construction.blinded_embedded_same_hash",
     "hash_tree ?h'' (blind_source_tree (?h o ?e) ?st) =
      hash_tree ?h (embed_source_tree ?e ?st)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Inclusion_Proof_Construction.tree_of_zipper\<^sub>m_append",
     "tree_of_zipper\<^sub>m (?p @ ?p', ?t) =
      tree_of_zipper\<^sub>m (?p', tree_of_zipper\<^sub>m (?p, ?t))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Inclusion_Proof_Construction.tree_of_embed_commute",
     "tree_of_zipper\<^sub>m (embed_path ?e ?p, embed_source_tree ?e ?t) =
      embed_source_tree ?e (tree_of_zipper (?p, ?t))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Inclusion_Proof_Construction.splits_iff",
     "((?l, ?a, ?r) : set (splits ?ll)) = (?ll = ?l @ ?a # ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Inclusion_Proof_Construction.blind_embed_path_same_hash",
     "hash_tree ?h (tree_of_zipper\<^sub>m (blind_path ?e ?h ?p, ?t)) =
      hash_tree ?h (tree_of_zipper\<^sub>m (embed_path ?e ?p, ?t))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Inclusion_Proof_Construction.hash_tree_of_zipper_same_path",
     "(hash_tree ?h (tree_of_zipper\<^sub>m (?p, ?v)) =
       hash_tree ?h (tree_of_zipper\<^sub>m (?p, ?v'))) =
      (hash_tree ?h ?v = hash_tree ?h ?v')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Inclusion_Proof_Construction.blind_source_tree_cases",
     "blind_source_tree ?x1ba ?xa =
      (case ?xa of
       Tree (x3a, x2ba) =>
         Tree\<^sub>m
          (Blinded
            (Content (?x1ba x3a, map (hash_source_tree ?x1ba) x2ba))))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 7, t_empty), template_var 0))),
    ("Inclusion_Proof_Construction.blind_path_elem_cases",
     "blind_path_elem ?x1ba ?x2ba ?xaa =
      (case ?xaa of
       (x5a, x4a, x3ba) =>
         (?x1ba x5a, map (blind_source_tree (?x2ba o ?x1ba)) x4a,
          map (blind_source_tree (?x2ba o ?x1ba)) x3ba))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 6, t_empty), template_var 0))),
    ("Inclusion_Proof_Construction.tree_of_zipper_cases",
     "tree_of_zipper ?xa =
      (case ?xa of ([], xda) => xda
       | ((x5a, x4a, x3a) # x2a, xda) =>
           tree_of_zipper (x2a, Tree (x5a, x4a @ xda # x3a)))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_app (template_hole 8, t_empty), template_var 0)))]
