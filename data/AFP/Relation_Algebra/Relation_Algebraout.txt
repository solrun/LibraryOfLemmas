Loading theory "Draft.More_Boolean_Algebra" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.Relation_Algebra")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class boolean_algebra = minus + uminus + bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. inf x (- x) = bot"
    and "sup_compl_top": "!!x. sup x (- x) = top"
  assumes "diff_eq": "!!x y. x - y = inf x (- y)"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.589s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.905s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.320s elapsed time, 1.277s cpu time, 0.103s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.More_Boolean_Algebra"
### 0.461s elapsed time, 1.840s cpu time, 0.155s GC time
Loading theory "Kleene_Algebra.Signatures" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.Relation_Algebra" via "Kleene_Algebra.Kleene_Algebra" via "Kleene_Algebra.Conway" via "Kleene_Algebra.Dioid")
class star_op = type +
  fixes star :: "'a => 'a"
class omega_op = type +
  fixes omega :: "'a => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class plus_ord = plus + ord +
  assumes "less_eq_def": "!!x y. (x <= y) = (x + y = y)"
    and "less_def": "!!x y. (x < y) = (x <= y & x ~= y)"
### theory "Kleene_Algebra.Signatures"
### 0.195s elapsed time, 0.800s cpu time, 0.044s GC time
Loading theory "Kleene_Algebra.Dioid" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.Relation_Algebra" via "Kleene_Algebra.Kleene_Algebra" via "Kleene_Algebra.Conway")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
class join_semilattice = plus_ord +
  assumes "add_assoc'": "!!x y z. x + y + z = x + (y + z)"
    and "add_comm": "!!x y. x + y = y + x"
    and "add_idem": "!!x. x + x = x"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.688s elapsed time, 2.738s cpu time, 0.264s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (+) (set (?x # ?xs)) == fold (+) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.886s elapsed time, 3.278s cpu time, 0.662s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class join_semilattice_zero = join_semilattice + zero +
  assumes "add_zero_l": "!!x. (0::'a) + x = x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class ab_near_semiring = ab_semigroup_add + semigroup_mult +
  assumes
    "distrib_right'":
      "!!x y z. (x + y) \<cdot> z = x \<cdot> z + y \<cdot> z"
Found termination order: "size <*mlex*> {}"
class ab_pre_semiring = ab_near_semiring +
  assumes
    "subdistl_eq":
      "!!z x y. z \<cdot> x + z \<cdot> (x + y) = z \<cdot> (x + y)"
### theory "HOL-Library.Tree"
### 1.727s elapsed time, 5.383s cpu time, 0.851s GC time
Loading theory "Draft.Templates" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.120s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Relation_AlgebraMoreTemplates")
class near_dioid = ab_near_semiring + plus_ord +
  assumes "add_idem'": "!!x. x + x = x"
class pre_dioid = near_dioid +
  assumes "subdistl": "!!z x y. z \<cdot> x <= z \<cdot> (x + y)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.111s cpu time, 0.102s GC time
class ab_near_semiring_one = ab_near_semiring + one +
  assumes "mult_onel": "!!x. (1::'a) \<cdot> x = x"
    and "mult_oner": "!!x. x \<cdot> (1::'a) = x"
class ab_near_semiring_one_zerol = ab_near_semiring_one + zero +
  assumes "add_zerol": "!!x. (0::'a) + x = x"
    and "annil": "!!x. (0::'a) \<cdot> x = (0::'a)"
class ab_near_semiring_one_zero = ab_near_semiring_one_zerol +
  assumes "annir": "!!x. x \<cdot> (0::'a) = (0::'a)"
class selective_near_semiring = ab_near_semiring + plus_ord +
  assumes "select": "!!x y. x + y = x | x + y = y"
### theory "Kleene_Algebra.Dioid"
### 7.219s elapsed time, 10.189s cpu time, 1.087s GC time
Loading theory "Kleene_Algebra.Conway" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.Relation_Algebra" via "Kleene_Algebra.Kleene_Algebra")
class dagger_op = type +
  fixes dagger :: "'a => 'a"
class near_conway_base = dagger_op + near_dioid_one +
  assumes
    "dagger_denest":
      "!!x y.
          (x + y)\<^sup>\<dagger> =
          (x\<^sup>\<dagger> \<cdot> y)\<^sup>\<dagger> \<cdot>
          x\<^sup>\<dagger>"
    and
    "dagger_prod_unfold":
      "!!x y.
          (1::'a) + x \<cdot> (y \<cdot> x)\<^sup>\<dagger> \<cdot> y =
          (x \<cdot> y)\<^sup>\<dagger>"
class near_conway = near_conway_base +
  assumes
    "dagger_simr":
      "!!z x y.
          z \<cdot> x <= y \<cdot> z ==>
          z \<cdot> x\<^sup>\<dagger> <= y\<^sup>\<dagger> \<cdot> z"
### theory "Kleene_Algebra.Conway"
### 4.300s elapsed time, 4.506s cpu time, 0.250s GC time
Loading theory "Kleene_Algebra.Kleene_Algebra" (required by "Draft.Relation_AlgebraMoreTemplates" via "Draft.Relation_Algebra")
class left_near_kleene_algebra = near_dioid_one + star_op +
  assumes
    "star_unfoldl":
      "!!x. (1::'a) + x \<cdot> x\<^sup>\<star> <= x\<^sup>\<star>"
    and
    "star_inductl":
      "!!z x y. z + x \<cdot> y <= y ==> x\<^sup>\<star> \<cdot> z <= y"
### Ignoring duplicate rewrite rule:
### (0::'a)\<^sup>\<star> == 1::'a
class pre_kleene_algebra = left_pre_kleene_algebra +
  assumes
    "weak_star_unfoldr":
      "!!z y x.
          z + y \<cdot> (x + (1::'a)) <= y ==>
          z \<cdot> x\<^sup>\<star> <= y"
class kleene_algebra_zerol = left_kleene_algebra_zerol +
  assumes
    "star_inductr":
      "!!z y x. z + y \<cdot> x <= y ==> z \<cdot> x\<^sup>\<star> <= y"
class kleene_algebra = left_kleene_algebra_zero +
  assumes
    "star_inductr'":
      "!!z y x. z + y \<cdot> x <= y ==> z \<cdot> x\<^sup>\<star> <= y"
class commutative_kleene_algebra = kleene_algebra +
  assumes "mult_comm": "!!x y. x \<cdot> y = y \<cdot> x"
### theory "Kleene_Algebra.Kleene_Algebra"
### 3.526s elapsed time, 3.688s cpu time, 0.230s GC time
Loading theory "Draft.Relation_Algebra" (required by "Draft.Relation_AlgebraMoreTemplates")
class relation_algebra = boolean_algebra +
  fixes composition :: "'a => 'a => 'a"
    and converse :: "'a => 'a"
    and unit :: "'a"
  assumes "comp_assoc": "!!x y z. x ; y ; z = x ; (y ; z)"
    and "comp_unitr": "!!x. x ; 1' = x"
    and "comp_distr": "!!x y z. (x + y) ; z = x ; z + y ; z"
    and "conv_invol": "!!x. (x\<^sup>\<smile>)\<^sup>\<smile> = x"
    and
    "conv_add":
      "!!x y. (x + y)\<^sup>\<smile> = x\<^sup>\<smile> + y\<^sup>\<smile>"
    and
    "conv_contrav":
      "!!x y. (x ; y)\<^sup>\<smile> = y\<^sup>\<smile> ; x\<^sup>\<smile>"
    and "comp_res": "!!x y. x\<^sup>\<smile> ; - (x ; y) <= - y"
### Partially applied constant "Relation_Algebra.relation_algebra_class.composition" on left hand side of equation, in theorem:
### monoid_mult.prod_list 1' (;) ?xs == foldr (;) ?xs 1'
class relation_algebra = boolean_algebra +
  fixes composition :: "'a => 'a => 'a"
    and converse :: "'a => 'a"
    and unit :: "'a"
  assumes "comp_assoc": "!!x y z. x ; y ; z = x ; (y ; z)"
    and "comp_unitr": "!!x. x ; 1' = x"
    and "comp_distr": "!!x y z. (x + y) ; z = x ; z + y ; z"
    and "conv_invol": "!!x. (x\<^sup>\<smile>)\<^sup>\<smile> = x"
    and
    "conv_add":
      "!!x y. (x + y)\<^sup>\<smile> = x\<^sup>\<smile> + y\<^sup>\<smile>"
    and
    "conv_contrav":
      "!!x y. (x ; y)\<^sup>\<smile> = y\<^sup>\<smile> ; x\<^sup>\<smile>"
    and "comp_res": "!!x y. x\<^sup>\<smile> ; - (x ; y) <= - y"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (+) 0 ?xs == foldr (+) ?xs 0
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (+) 0 ?g (set ?xs) ==
### relation_algebra_class.sum_list (map ?g (remdups ?xs))
class relation_algebra = boolean_algebra +
  fixes composition :: "'a => 'a => 'a"
    and converse :: "'a => 'a"
    and unit :: "'a"
  assumes "comp_assoc": "!!x y z. x ; y ; z = x ; (y ; z)"
    and "comp_unitr": "!!x. x ; 1' = x"
    and "comp_distr": "!!x y z. (x + y) ; z = x ; z + y ; z"
    and "conv_invol": "!!x. (x\<^sup>\<smile>)\<^sup>\<smile> = x"
    and
    "conv_add":
      "!!x y. (x + y)\<^sup>\<smile> = x\<^sup>\<smile> + y\<^sup>\<smile>"
    and
    "conv_contrav":
      "!!x y. (x ; y)\<^sup>\<smile> = y\<^sup>\<smile> ; x\<^sup>\<smile>"
    and "comp_res": "!!x y. x\<^sup>\<smile> ; - (x ; y) <= - y"
### theory "Draft.Relation_Algebra"
### 3.614s elapsed time, 5.004s cpu time, 1.937s GC time
Loading theory "Draft.Relation_AlgebraMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Relation_AlgebraMoreTemplates"
### 0.372s elapsed time, 0.628s cpu time, 0.053s GC time
val it = (): unit
