Loading theory "Draft.Missing_Dvd_Int_Poly" (required by "Draft.Missing_Dvd_Int_PolyTemplates")
Loading theory "Draft.Templates" (required by "Draft.Missing_Dvd_Int_PolyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.167s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Missing_Dvd_Int_PolyTemplates")
locale poly_mod
  fixes m :: "int"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.033s cpu time, 0.049s GC time
locale poly_mod_prime_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "poly_mod_prime_type TYPE('a) m"
### theory "Draft.Missing_Dvd_Int_Poly"
### 0.768s elapsed time, 1.427s cpu time, 0.128s GC time
Loading theory "Draft.Missing_Dvd_Int_PolyTemplates"
val templateLemmas =
   [("Missing_Dvd_Int_Poly.pdivmod_eq_pdivmod_monic",
     "monic ?g ==> pdivmod ?f ?g = pdivmod_monic ?f ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1),
            template_app (template_hole 6, template_var 1)),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Missing_Dvd_Int_Poly.degree_div_mod_smult",
     "[| degree ?g < ?j; degree ?r < ?d; degree ?u = ?d;
         ?g = ?q * ?u + Polynomial.smult ?m ?r; ?q ~= 0; ?m ~= 0 |]
      ==> degree ?q < ?j - ?d",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 6),
          template_var 5),
        template_inequation
         (less_than, template_app (template_hole 10, template_var 4),
          template_var 3),
        template_equation
         (template_app (template_hole 10, template_var 2), template_var 3),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 2)),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 4))),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_inequation
        (less_than, template_app (template_hole 10, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_var 3)))),
    ("Missing_Dvd_Int_Poly.uniqueness_algorithm_division_poly",
     "[| ?f = ?g * ?q1.0 + ?r1.0; ?f = ?g * ?q2.0 + ?r2.0; ?g ~= 0;
         ?r1.0 = 0 | degree ?r1.0 < degree ?g;
         ?r2.0 = 0 | degree ?r2.0 < degree ?g |]
      ==> ?q1.0 = ?q2.0 & ?r1.0 = ?r2.0",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3)),
            template_var 2)),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 1)),
            template_var 0)),
        template_negation
         (template_equation (template_var 4, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_app (template_hole 1, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0)),
                template_app (template_hole 1, template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Missing_Dvd_Int_PolyTemplates"
### 1.396s elapsed time, 1.654s cpu time, 0.195s GC time
val it = (): unit
