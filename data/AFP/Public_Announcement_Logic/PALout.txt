Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PALMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.PALMoreTemplates" via "Draft.PAL" via "Epistemic_Logic.Epistemic_Logic" via "HOL-Library.Countable")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PALMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PALMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.595s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PALMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.825s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PALMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.278s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PALMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.437s elapsed time, 1.742s cpu time, 0.115s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.PALMoreTemplates" via "Draft.PAL" via "Epistemic_Logic.Epistemic_Logic")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.803s elapsed time, 3.166s cpu time, 0.300s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.069s elapsed time, 3.903s cpu time, 0.848s GC time
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
Found termination order: "size <*mlex*> {}"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.315s elapsed time, 4.208s cpu time, 0.908s GC time
Loading theory "Epistemic_Logic.Epistemic_Logic" (required by "Draft.PALMoreTemplates" via "Draft.PAL")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.013s elapsed time, 6.232s cpu time, 1.111s GC time
Loading theory "Draft.Templates" (required by "Draft.PALMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PALMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.758s elapsed time, 1.811s cpu time, 0.755s GC time
consts
  semantics :: "('i, 'w) kripke => 'w => 'i fm => bool"
consts
  eval :: "(char list => bool) => ('i fm => bool) => 'i fm => bool"
Proofs for inductive predicate(s) "AK"
  Proving monotonicity ...
consts
  imply :: "'i fm list => 'i fm => 'i fm"
instantiation
  fm :: (countable) countable
consts
  extend ::
    "('i fm => bool) => 'i fm set => (nat => 'i fm) => nat => 'i fm set"
Proofs for inductive predicate(s) "AxT"
  Proving monotonicity ...
Proofs for inductive predicate(s) "AxB"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Ax4"
  Proving monotonicity ...
Proofs for inductive predicate(s) "SystemS5'"
  Proving monotonicity ...
### theory "Epistemic_Logic.Epistemic_Logic"
### 1.996s elapsed time, 3.701s cpu time, 1.055s GC time
Loading theory "Draft.PAL" (required by "Draft.PALMoreTemplates")
Found termination order:
  "case_sum (%p. size (snd (snd p))) (%p. size (snd p)) <*mlex*>
   case_sum (%x. 0) (%x. Suc 0) <*mlex*> {}"
consts
  static :: "'i pfm => bool"
consts
  lower :: "'i pfm => 'i fm"
consts
  lift :: "'i fm => 'i pfm"
consts
  reduce' :: "'i pfm => 'i pfm => 'i pfm"
consts
  reduce :: "'i pfm => 'i pfm"
consts
  peval :: "(char list => bool) => ('i pfm => bool) => 'i pfm => bool"
Proofs for inductive predicate(s) "PAK"
  Proving monotonicity ...
### theory "Draft.PAL"
### 1.342s elapsed time, 1.508s cpu time, 0.194s GC time
Loading theory "Draft.PALMoreTemplates"
val templateLemmas =
   [("PAL.static_reduce", "static (reduce ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PAL.lower_lift", "lower (lift ?p) = ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("PAL.lift_lower", "static ?p ==> lift (lower ?p) = ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("PAL.lift_semantics",
     "(?M, ?w \<Turnstile> ?p) = (?M, ?w \<Turnstile>\<^sub>! lift ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("PAL.reduce_semantics",
     "(?M, ?w \<Turnstile>\<^sub>! ?p) =
      (?M, ?w \<Turnstile>\<^sub>! reduce ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("PAL.ConE",
     "?A \<turnstile>\<^sub>! (?p \<^bold>\<and>\<^sub>! ?q) ==>
      ?A \<turnstile>\<^sub>! ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("PAL.ConE",
     "?A \<turnstile>\<^sub>! (?p \<^bold>\<and>\<^sub>! ?q) ==>
      ?A \<turnstile>\<^sub>! ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("PAL.Iff_reduce",
     "?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                               reduce ?p)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 0)))
         )),
    ("PAL.AK_PAK",
     "?A o lift \<turnstile> ?p ==> ?A \<turnstile>\<^sub>! lift ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("PAL.eval_peval", "eval ?h (?g o lift) ?p = peval ?h ?g (lift ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("PAL.static_reduce'",
     "[| static ?p; static ?r |] ==> static (reduce' ?r ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("PAL.completeness",
     "ALL M w. M, w \<Turnstile>\<^sub>! ?p ==> ?A \<turnstile>\<^sub>! ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("PAL.lower_semantics",
     "static ?p ==>
      (?M, ?w \<Turnstile> lower ?p) = (?M, ?w \<Turnstile>\<^sub>! ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("PAL.ptautology", "ptautology ?p ==> ?M, ?w \<Turnstile>\<^sub>! ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("PAL.K'_A2'",
     "?A \<turnstile>\<^sub>! (K\<^sub>! ?i
                                (?p \<^bold>\<longrightarrow>\<^sub>!
                                 ?q) \<^bold>\<longrightarrow>\<^sub>!
                               K\<^sub>! ?i
                                ?p \<^bold>\<longrightarrow>\<^sub>!
                               K\<^sub>! ?i ?q)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("PAL.ConI",
     "[| ?A \<turnstile>\<^sub>! ?p; ?A \<turnstile>\<^sub>! ?q |]
      ==> ?A \<turnstile>\<^sub>! (?p \<^bold>\<and>\<^sub>! ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PAL.peval_eval",
     "static ?p ==> eval ?h ?g (lower ?p) = peval ?h (?g o lower) ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 2)),
           template_var 2)))),
    ("PAL.K'_map",
     "?A \<turnstile>\<^sub>! (?p \<^bold>\<longrightarrow>\<^sub>! ?q) ==>
      ?A \<turnstile>\<^sub>! (K\<^sub>! ?i
                                ?p \<^bold>\<longrightarrow>\<^sub>!
                               K\<^sub>! ?i ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("PAL.reduce'_semantics",
     "static ?q ==>
      (?M, ?w \<Turnstile>\<^sub>! [?p]\<^sub>! ?q) =
      (?M, ?w \<Turnstile>\<^sub>! reduce' ?p ?q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("PAL.static_completeness",
     "[| static ?p; ALL M w. M, w \<Turnstile>\<^sub>! ?p |]
      ==> ?A \<turnstile>\<^sub>! ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("PAL.Iff_sym",
     "(?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                                ?q)) =
      (?A \<turnstile>\<^sub>! (?q \<^bold>\<longleftrightarrow>\<^sub>!
                                ?p))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("PAL.tautology_ptautology", "tautology ?p ==> ptautology (lift ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("PAL.peval_semantics",
     "peval (?val ?w) (psemantics (Kripke ?W ?val ?r) ?w) ?p =
      (Kripke ?W ?val ?r, ?w \<Turnstile>\<^sub>! ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 4, template_var 3)),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4),
               template_var 1)),
           template_var 3),
         template_var 0))),
    ("PAL.Iff_reduce'",
     "static ?p ==>
      ?A \<turnstile>\<^sub>! ([?r]\<^sub>! ?p \<^bold>\<longleftrightarrow>\<^sub>!
                               reduce' ?r ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))))
           ))),
    ("PAL.ptautology_tautology",
     "[| static ?p; ptautology ?p |] ==> tautology (lower ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("PAL.Iff_Ann2",
     "?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                               ?p') ==>
      ?A \<turnstile>\<^sub>! ([?r]\<^sub>! ?p \<^bold>\<longleftrightarrow>\<^sub>!
                               [?r]\<^sub>! ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           ))),
    ("PAL.Iff_wk",
     "?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                               ?q) ==>
      ?A \<turnstile>\<^sub>! ((?r \<^bold>\<longrightarrow>\<^sub>!
                                ?p) \<^bold>\<longleftrightarrow>\<^sub>!
                               ?r \<^bold>\<longrightarrow>\<^sub>! ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           ))),
    ("PAL.Iff_Iff",
     "[| ?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?p');
         ?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?q) |]
      ==> ?A \<turnstile>\<^sub>! (?p' \<^bold>\<longleftrightarrow>\<^sub>!
                                   ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 0)),
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("PAL.Iff_Ann1",
     "[| ?A \<turnstile>\<^sub>! (?r \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?r');
         static ?p |]
      ==> ?A \<turnstile>\<^sub>! ([?r]\<^sub>! ?p \<^bold>\<longleftrightarrow>\<^sub>!
                                   [?r']\<^sub>! ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))))
           ))),
    ("PAL.Iff_Con",
     "[| ?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?p');
         ?A \<turnstile>\<^sub>! (?q \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?q') |]
      ==> ?A \<turnstile>\<^sub>! (?p \<^bold>\<and>\<^sub>!
                                   ?q \<^bold>\<longleftrightarrow>\<^sub>!
                                   ?p' \<^bold>\<and>\<^sub>! ?q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2)),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0)),
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1))))
           ))),
    ("PAL.Iff_Dis",
     "[| ?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?p');
         ?A \<turnstile>\<^sub>! (?q \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?q') |]
      ==> ?A \<turnstile>\<^sub>! (?p \<^bold>\<or>\<^sub>!
                                   ?q \<^bold>\<longleftrightarrow>\<^sub>!
                                   ?p' \<^bold>\<or>\<^sub>! ?q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2)),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0)),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))))
           ))),
    ("PAL.Iff_Imp",
     "[| ?A \<turnstile>\<^sub>! (?p \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?p');
         ?A \<turnstile>\<^sub>! (?q \<^bold>\<longleftrightarrow>\<^sub>!
                                  ?q') |]
      ==> ?A \<turnstile>\<^sub>! ((?p \<^bold>\<longrightarrow>\<^sub>!
                                    ?q) \<^bold>\<longleftrightarrow>\<^sub>!
                                   ?p' \<^bold>\<longrightarrow>\<^sub>!
                                   ?q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2)),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0)),
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))))
           ))),
    ("PAL.soundness",
     "[| !!M w p. [| ?A p; ?P M |] ==> M, w \<Turnstile>\<^sub>! p;
         !!M p. ?P M ==> ?P (restrict M p); ?A \<turnstile>\<^sub>! ?p;
         ?P ?M |]
      ==> ?M, ?w \<Turnstile>\<^sub>! ?p",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 2)
            ),
        template_predicate (template_app (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.PALMoreTemplates"
### 0.363s elapsed time, 0.526s cpu time, 0.080s GC time
val it = (): unit
