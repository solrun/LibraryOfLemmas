Loading theory "HOL-Library.BNF_Corec" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Chain")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution" via "Ordered_Resolution_Prover.Inference_System" via "Ordered_Resolution_Prover.Herbrand_Interpretation" via "Ordered_Resolution_Prover.Clausal_Logic" via "Nested_Multisets_Ordinals.Multiset_More" via "HOL-Library.Multiset_Order" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Complete_Partial_Order2" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
locale cong
  fixes rel :: "('a => 'a => bool) => 'b => 'b => bool"
    and eval :: "'b => 'a"
    and retr :: "('a => 'a => bool) => 'a => 'a => bool"
  assumes "cong rel eval retr"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.178s elapsed time, 0.730s cpu time, 0.037s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List")
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.066s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.412s cpu time, 0.029s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List")
val cont_intro_tac = fn: Proof.context -> int -> tactic
val cont_intro_simproc = fn: Proof.context -> cterm -> thm option
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.406s elapsed time, 1.629s cpu time, 0.065s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution" via "Ordered_Resolution_Prover.Inference_System" via "Ordered_Resolution_Prover.Herbrand_Interpretation" via "Ordered_Resolution_Prover.Clausal_Logic" via "Nested_Multisets_Ordinals.Multiset_More" via "HOL-Library.Multiset_Order")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
signature BNF_GFP_GREC_TACTICS =
  sig
    val mk_Lam_Inl_Inr_tac: Proof.context -> thm -> thm -> tactic
    val mk_Retr_coinduct_tac: Proof.context -> thm -> thm -> tactic
    val mk_algLam_algLam_tac:
       Proof.context ->
         thm -> thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_algLam_algrho_tac: Proof.context -> thm -> thm -> tactic
    val mk_algLam_base_tac:
       Proof.context ->
         term ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm ->
                         thm list ->
                           thm ->
                             thm list -> thm list -> thm -> thm -> tactic
    val mk_algLam_step_tac: Proof.context -> thm -> thm -> thm -> tactic
    val mk_cong_locale_tac:
       Proof.context ->
         thm -> thm list -> thm -> thm -> thm list -> thm -> thm -> tactic
    val mk_corecUU_Inl_tac:
       Proof.context ->
         term ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm list ->
                     thm -> thm list -> thm -> thm -> thm -> thm -> tactic
    val mk_corecUU_pointfree_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_corecUU_unique_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_corecU_pointfree_tac:
       Proof.context ->
         thm ->
           thm ->
             thm list ->
               thm ->
                 thm list -> thm -> thm list -> thm -> thm -> thm -> tactic
    val mk_dtor_algLam_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm list ->
                       thm ->
                         thm ->
                           thm list -> thm -> thm -> thm -> thm -> tactic
    val mk_dtor_algrho_tac:
       Proof.context -> thm -> thm -> thm -> thm -> tactic
    val mk_dtor_transfer_tac: Proof.context -> thm -> tactic
    val mk_equivp_Retr_tac:
       Proof.context -> thm -> thm -> thm -> thm -> tactic
    val mk_eval_Oper_tac:
       Proof.context ->
         int ->
           thm ->
             thm -> thm -> thm -> thm -> thm list -> thm -> thm -> tactic
    val mk_eval_V_or_CLeaf_tac:
       Proof.context ->
         thm -> thm -> thm -> thm -> thm -> thm list -> thm -> tactic
    val mk_eval_core_embL_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm ->
                         thm ->
                           thm ->
                             thm list ->
                               thm list -> thm list -> thm -> tactic
    val mk_eval_core_flat_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm list ->
                         thm ->
                           thm list ->
                             thm -> thm -> thm -> thm list -> tactic
    val mk_eval_core_k_as_ssig_tac:
       Proof.context ->
         thm ->
           thm -> thm -> thm list -> thm -> thm -> thm -> thm list -> tactic
    val mk_eval_embL_tac:
       Proof.context -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_eval_flat_tac:
       Proof.context ->
         thm -> thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_eval_sctr_tac:
       Proof.context -> thm -> thm -> thm -> thm -> tactic
    val mk_extdd_mor_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_extdd_o_VLeaf_tac:
       Proof.context ->
         thm ->
           thm -> thm -> thm list -> thm list -> thm -> thm -> thm -> tactic
    val mk_flat_VLeaf_or_flat_tac:
       Proof.context -> thm -> thm -> thm list -> tactic
    val mk_flat_embL_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm list -> thm list -> thm list -> thm list -> tactic
    val mk_mor_cutSsig_flat_tac:
       Proof.context ->
         term ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm list ->
                         thm ->
                           thm ->
                             thm ->
                               thm ->
                                 thm -> thm -> thm -> thm -> thm -> tactic
    val mk_natural_by_unfolding_tac: Proof.context -> thm list -> tactic
    val mk_natural_from_transfer_tac:
       Proof.context ->
         int ->
           bool list -> thm -> thm list -> thm list -> thm list -> tactic
    val mk_sig_transfer_tac:
       Proof.context -> thm -> thm list -> thm -> tactic
    val mk_transfer_by_transfer_prover_tac:
       Proof.context -> thm list -> thm list -> thm list -> tactic
    val transfer_prover_add_tac:
       Proof.context -> thm list -> thm list -> int -> tactic
    val transfer_prover_eq_tac: Proof.context -> int -> tactic
  end
structure BNF_GFP_Grec_Tactics: BNF_GFP_GREC_TACTICS
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  enumerate :: "'a set => nat => 'a"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Infinite_Set"
### 0.302s elapsed time, 1.179s cpu time, 0.154s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
Found termination order: "size_list size <*mlex*> {}"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "compact"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.435s elapsed time, 1.610s cpu time, 0.545s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.ExtrEqs")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  shift :: "'a list => 'a stream => 'a stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  snth :: "'a stream => nat => 'a"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  cycle :: "'a list => 'a stream"
class complete_distrib_lattice = complete_lattice + distrib_lattice +
  assumes
    "Inf_Sup_le":
      "!!A. \<Sqinter> (Sup ` A)
            <= \<Squnion> (Inf ` {f ` A |f. ALL Y:A. f Y : Y})"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  mset :: "'a list => 'a multiset"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
### theory "HOL-Library.Stream"
### 0.891s elapsed time, 3.498s cpu time, 0.332s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.427s elapsed time, 1.675s cpu time, 0.140s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Complete_Partial_Order2"
### 2.521s elapsed time, 9.790s cpu time, 1.273s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution" via "Ordered_Resolution_Prover.Inference_System" via "Ordered_Resolution_Prover.Herbrand_Interpretation" via "Ordered_Resolution_Prover.Clausal_Logic" via "Nested_Multisets_Ordinals.Multiset_More")
### theory "HOL-Library.Set_Algebras"
### 0.240s elapsed time, 0.935s cpu time, 0.104s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### ML warning (line 261 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 290 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 456 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 512 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 563 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 603 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 900 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 1233 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1268 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1294 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1621 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1670 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 1808 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 1809 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2059 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2064 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2133 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2149 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2150 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2151 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2152 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2154 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2155 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2157 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2158 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2183 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2370 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2371 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2400 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2401 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2402 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2404 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2408 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2412 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2436 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2477 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2267 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 2594 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2599 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2711 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2712 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2713 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2752 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2753 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2754 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2756 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2758 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2765 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2792 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2569 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 2914 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 3014 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 3064 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3072 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3078 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3085 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Value identifier (fp_alives) has not been referenced.
### ML warning (line 3093 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3149 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3212 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
signature BNF_GFP_GREC =
  sig
    val Tsubst: typ -> typ -> typ -> typ
    val bnf_kill_all_but:
       int -> BNF_Def.bnf -> local_theory -> BNF_Def.bnf * local_theory
    type buffer =
       {CLeaf: term,
        Oper: term,
        VLeaf: term, ctr_wrapper: term, friends: (typ * term) Symtab.table}
    type corec_info =
       {Lam: term,
        Lam_pointful_natural: thm,
        Lam_transfer: thm,
        Retr: term,
        Retr_coinduct: thm,
        Y: typ,
        Z: typ,
        algLam: term,
        algLam_thm: thm,
        all_algLam_algs: thm list,
        all_dead_k_bnfs: BNF_Def.bnf list,
        buffer: buffer,
        corecUU: term,
        corecUU_thm: thm,
        corecUU_transfer: thm,
        corecUU_unique: thm,
        dtor_algLam: thm, dtor_coinduct_info: dtor_coinduct_info, ...}
    val corec_info_of: typ -> local_theory -> corec_info * local_theory
    val corec_infos_of: Proof.context -> string -> corec_info list
    val corec_infos_of_generic:
       Context.generic -> Symtab.key -> corec_info list
    val define_const:
       bool ->
         binding ->
           int ->
             string -> term -> local_theory -> (term * thm) * local_theory
    type dtor_coinduct_info =
       {cong_alg_intros: thm list,
        cong_base: thm,
        cong_def: thm,
        cong_locale: thm,
        cong_refl: thm, cong_sym: thm, cong_trans: thm, dtor_coinduct: thm}
    val dummify_atomic_types: term -> term
    val freeze_types:
       Proof.context -> (indexname * sort) list -> typ list -> typ list
    type friend_info = {algLam_algrho: thm, algrho: term, dtor_algrho: thm}
    val has_no_corec_info: Proof.context -> string -> bool
    val map_buffer: (term -> term) -> buffer -> buffer
    val maybe_corec_info_of: Proof.context -> typ -> corec_info option
    val mk_fp_binding: binding -> string -> binding
    val not_codatatype: Proof.context -> typ -> 'a
    val prepare_friend_corec:
       string ->
         typ ->
           local_theory ->
             (corec_info * binding * int * typ * typ * typ * typ * typ *
              BNF_Def.bnf * BNF_Def.bnf * BNF_FP_Def_Sugar.fp_sugar *
              BNF_FP_Def_Sugar.fp_sugar * buffer)
             *
             local_theory
    val print_corec_infos: Proof.context -> unit
    val register_friend_corec:
       string ->
         binding ->
           int ->
             typ ->
               typ ->
                 typ ->
                   BNF_Def.bnf ->
                     BNF_FP_Def_Sugar.fp_sugar ->
                       BNF_FP_Def_Sugar.fp_sugar ->
                         term ->
                           term ->
                             thm ->
                               corec_info ->
                                 local_theory -> friend_info * local_theory
    val specialize_buffer_types: buffer -> buffer
    val substT: typ -> typ -> term -> term
  end
structure BNF_GFP_Grec: BNF_GFP_GREC
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 163 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 188 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 329 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Matches are not exhaustive.
signature BNF_GFP_GREC_SUGAR_UTIL =
  sig
    exception UNNATURAL of unit
    val corec_parse_info_of:
       Proof.context ->
         typ list -> typ -> BNF_GFP_Grec.buffer -> s_parse_info
    val friend_parse_info_of:
       Proof.context ->
         typ list ->
           typ -> BNF_GFP_Grec.buffer -> s_parse_info * rho_parse_info
    val generalize_types: int -> typ -> typ -> typ
    val mk_abs_transfer: Proof.context -> string -> thm
    val mk_const_transfer_goal: Proof.context -> string * typ -> term
    val mk_curry_uncurryN_balanced: Proof.context -> int -> thm
    val mk_pointful_natural_from_transfer: Proof.context -> thm -> thm
    val mk_rep_transfer: Proof.context -> string -> thm
    type rho_parse_info =
       {discs: term Symtab.table,
        it: term,
        mk_case: typ -> term,
        pattern_ctrs: (term * term list) Symtab.table,
        sels: term Symtab.table}
    type s_parse_info =
       {ctr_guards: term Symtab.table,
        inner_buffer: BNF_GFP_Grec.buffer,
        outer_buffer: BNF_GFP_Grec.buffer}
  end
structure BNF_GFP_Grec_Sugar_Util: BNF_GFP_GREC_SUGAR_UTIL
### theory "HOL-Library.Sublist"
### 2.183s elapsed time, 8.194s cpu time, 2.627s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
signature BNF_GFP_GREC_SUGAR_TACTICS =
  sig
    val mk_case_dtor_tac:
       Proof.context ->
         term -> thm -> thm -> thm list -> thm -> thm list -> tactic
    val mk_code_tac:
       Proof.context ->
         int ->
           term list ->
             term ->
               term ->
                 thm ->
                   thm ->
                     thm list ->
                       thm list ->
                         thm list ->
                           thm list ->
                             thm ->
                               thm ->
                                 thm list ->
                                   thm list ->
                                     thm ->
                                       thm list ->
   thm list -> thm list -> thm list -> ...
    val mk_cong_intro_ctr_or_friend_tac:
       Proof.context -> thm -> thm list -> thm -> tactic
    val mk_eq_algrho_tac:
       Proof.context ->
         term list ->
           term ->
             term ->
               term ->
                 term ->
                   term ->
                     thm ->
                       thm ->
                         thm list ->
                           thm list ->
                             thm list ->
                               thm list ->
                                 thm ->
                                   thm ->
                                     thm ->
                                       thm list ->
   thm list -> thm list -> thm -> ...
    val mk_eq_corecUU_tac:
       Proof.context ->
         int ->
           term list ->
             term ->
               term ->
                 thm ->
                   thm ->
                     thm list ->
                       thm list ->
                         thm list ->
                           thm list ->
                             thm ->
                               thm ->
                                 thm list ->
                                   thm list ->
                                     thm list ->
                                       thm list ->
   thm list -> thm list -> thm list -> ...
    val mk_last_disc_tac: Proof.context -> term -> thm -> thm list -> tactic
    val mk_rho_transfer_tac:
       Proof.context -> bool -> thm -> thm list -> tactic
    val mk_unique_tac:
       Proof.context ->
         int ->
           term list ->
             term ->
               term ->
                 thm ->
                   thm ->
                     thm list ->
                       thm list ->
                         thm list ->
                           thm list ->
                             thm ->
                               thm ->
                                 thm list ->
                                   thm list ->
                                     thm list ->
                                       thm list ->
   thm list -> thm list -> thm list -> ...
    val rho_transfer_simps: thm list
  end
structure BNF_GFP_Grec_Sugar_Tactics: BNF_GFP_GREC_SUGAR_TACTICS
### theory "HOL-Library.Multiset"
### 4.429s elapsed time, 16.903s cpu time, 3.841s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution" via "Ordered_Resolution_Prover.Inference_System" via "Ordered_Resolution_Prover.Herbrand_Interpretation" via "Ordered_Resolution_Prover.Clausal_Logic" via "Nested_Multisets_Ordinals.Multiset_More")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.258s elapsed time, 1.014s cpu time, 0.091s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution" via "Ordered_Resolution_Prover.Inference_System" via "Ordered_Resolution_Prover.Herbrand_Interpretation" via "Ordered_Resolution_Prover.Clausal_Logic")
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
### theory "HOL-Library.Tree"
### 2.751s elapsed time, 10.438s cpu time, 2.925s GC time
Loading theory "Draft.Templates" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.ExtrEqs")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.794s elapsed time, 3.121s cpu time, 0.405s GC time
Loading theory "Ordered_Resolution_Prover.Clausal_Logic" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution" via "Ordered_Resolution_Prover.Inference_System" via "Ordered_Resolution_Prover.Herbrand_Interpretation")
### theory "HOL-Library.Countable"
### 1.242s elapsed time, 4.888s cpu time, 0.577s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
### ML warning (line 62 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (ctrN) has not been referenced.
### ML warning (line 63 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (discN) has not been referenced.
### ML warning (line 64 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (disc_iffN) has not been referenced.
### ML warning (line 72 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (selN) has not been referenced.
### ML warning (line 78 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (simp_attrs) has not been referenced.
### ML warning (line 218 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 223 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 254 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 256 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 316 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 319 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 321 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 360 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 362 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 417 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 439 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 442 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 445 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 541 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 542 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 561 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 562 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 595 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 597 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 621 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 623 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 626 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 643 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 660 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 652 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 713 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 785 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 786 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 799 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1091 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1092 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1150 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1151 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1187 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1219 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1214 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1243 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1316 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1368 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1399 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1658 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1692 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1737 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1806 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1807 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1817 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1853 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1862 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1825 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1875 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1878 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1880 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1938 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1918 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1955 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1970 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (transfer) has not been referenced.
### ML warning (line 1971 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2029 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2031 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2032 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2033 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2037 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2050 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2120 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2204 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2214 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2229 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2248 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2288 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2320 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2330 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2338 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
signature BNF_GFP_GREC_SUGAR =
  sig
    val build_corecUU_arg_and_goals:
       bool ->
         term ->
           term list * term ->
             local_theory ->
               (((thm list * thm list * thm list) * term list) * term) *
               local_theory
    val coinduction_upto_cmd:
       string * string -> local_theory -> local_theory
    val corec_cmd:
       bool ->
         corec_option list ->
           (binding * string option * mixfix) list * string ->
             local_theory -> local_theory
    datatype corec_option
    =
         Friend_Option
       | Plugins_Option of Proof.context -> Plugin_Name.filter
       | Transfer_Option
    val corecursive_cmd:
       bool ->
         corec_option list ->
           (binding * string option * mixfix) list * string ->
             local_theory -> Proof.state
    val derive_eq_corecUU:
       Proof.context ->
         BNF_GFP_Grec.corec_info -> term -> term -> thm -> thm
    val derive_unique:
       Proof.context ->
         morphism -> term -> BNF_GFP_Grec.corec_info -> string -> thm -> thm
    val explore_corec_equation:
       Proof.context ->
         bool ->
           bool ->
             string ->
               term ->
                 BNF_GFP_Grec_Sugar_Util.s_parse_info ->
                   typ -> term list * term -> term list * term
    val friend_of_corec_cmd:
       (string * string option) * string -> local_theory -> Proof.state
    val parse_corec_equation:
       Proof.context -> term list -> term -> term list * term
  end
structure BNF_GFP_Grec_Sugar: BNF_GFP_GREC_SUGAR
### ML warning (line 58 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_unique_sugar.ML"):
### Pattern is not exhaustive.
signature BNF_GFP_GREC_UNIQUE_SUGAR =
  sig val corec_unique_tac: Proof.context -> int -> tactic end
structure BNF_GFP_Grec_Unique_Sugar: BNF_GFP_GREC_UNIQUE_SUGAR
### theory "HOL-Library.BNF_Corec"
### 6.058s elapsed time, 23.334s cpu time, 4.477s GC time
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.BigO"
### 0.904s elapsed time, 3.553s cpu time, 0.442s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Clausal_CalculusMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.489s elapsed time, 1.853s cpu time, 0.228s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
instantiation
  literal :: (type) uminus
  uminus_literal == uminus :: 'a literal => 'a literal
instantiation
  literal :: (preorder) preorder
  less_eq_literal == less_eq :: 'a literal => 'a literal => bool
  less_literal == less :: 'a literal => 'a literal => bool
instantiation
  literal :: (order) order
instantiation
  literal :: (linorder) linorder
instantiation
  literal :: (wellorder) wellorder
### theory "Ordered_Resolution_Prover.Clausal_Logic"
### 0.670s elapsed time, 2.439s cpu time, 0.228s GC time
Loading theory "Ordered_Resolution_Prover.Herbrand_Interpretation" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution" via "Ordered_Resolution_Prover.Inference_System")
### theory "Ordered_Resolution_Prover.Herbrand_Interpretation"
### 0.144s elapsed time, 0.452s cpu time, 0.097s GC time
Loading theory "Ordered_Resolution_Prover.Ground_Resolution_Model" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution")
Loading theory "Ordered_Resolution_Prover.Inference_System" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Ordered_Resolution_Prover.Unordered_Ground_Resolution")
locale selection
  fixes S :: "'a literal multiset => 'a literal multiset"
  assumes "selection S"
locale ground_resolution_with_selection
  fixes S :: "'a literal multiset => 'a literal multiset"
  assumes "ground_resolution_with_selection S"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "Ordered_Resolution_Prover.Ground_Resolution_Model"
### 0.293s elapsed time, 1.158s cpu time, 0.116s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.669s elapsed time, 2.322s cpu time, 0.213s GC time
locale inference_system
  fixes \<Gamma> :: "'a inference set"
locale sat_preserving_inference_system
  fixes \<Gamma> :: "'a inference set"
  assumes "sat_preserving_inference_system \<Gamma>"
locale sound_inference_system
  fixes \<Gamma> :: "'a inference set"
  assumes "sound_inference_system \<Gamma>"
locale reductive_inference_system
  fixes \<Gamma> :: "'a inference set"
  assumes "reductive_inference_system \<Gamma>"
locale counterex_reducing_inference_system
  fixes \<Gamma> :: "'a inference set"
    and I_of :: "'a literal multiset set => 'a set"
  assumes "counterex_reducing_inference_system \<Gamma> I_of"
locale inference_system
  fixes \<Gamma> :: "'a inference set"
Proofs for inductive predicate(s) "saturatep"
  Proving monotonicity ...
locale sound_inference_system
  fixes \<Gamma> :: "'a inference set"
  assumes "sound_inference_system \<Gamma>"
locale sat_preserving_inference_system
  fixes \<Gamma> :: "'a inference set"
  assumes "sat_preserving_inference_system \<Gamma>"
locale sound_counterex_reducing_inference_system
  fixes \<Gamma> :: "'a inference set"
    and I_of :: "'a literal multiset set => 'a set"
  assumes "sound_counterex_reducing_inference_system \<Gamma> I_of"
### theory "Ordered_Resolution_Prover.Inference_System"
### 0.809s elapsed time, 2.237s cpu time, 0.187s GC time
Loading theory "Ordered_Resolution_Prover.Unordered_Ground_Resolution" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus")
locale ground_resolution_without_selection
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Proofs for inductive predicate(s) "unord_resolve"
  Proving monotonicity ...
### theory "Ordered_Resolution_Prover.Unordered_Ground_Resolution"
### 0.207s elapsed time, 0.432s cpu time, 0.047s GC time
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.760s elapsed time, 4.051s cpu time, 0.331s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.408s elapsed time, 0.467s cpu time, 0.057s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.456s elapsed time, 0.456s cpu time, 0.000s GC time
Loading theory "Coinductive.Coinductive_Nat" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf" via "Coinductive.Coinductive_List")
Proofs for coinductive predicate(s) "enat_setp"
  Proving monotonicity ...
locale co
Proofs for coinductive predicate(s) "Le_enatp"
  Proving monotonicity ...
### theory "Coinductive.Coinductive_Nat"
### 0.516s elapsed time, 0.594s cpu time, 0.106s GC time
Loading theory "Coinductive.Coinductive_List" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus" via "Ordered_Resolution_Prover.Lazy_List_Liminf")
consts
  unfold_llist ::
    "('a => bool) => ('a => 'b) => ('a => 'a) => 'a => 'b llist"
Proofs for inductive predicate(s) "lsetp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lfinite"
  Proving monotonicity ...
consts
  lappend :: "'a llist => 'a llist => 'a llist"
### Ignoring duplicate rewrite rule:
### lnull (lappend ?xs1 ?ys1) == lnull ?xs1 & lnull ?ys1
Proofs for coinductive predicate(s) "lprefix"
  Proving monotonicity ...
consts
  lSup :: "'a llist set => 'a llist"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
consts
  iterates :: "('a => 'a) => 'a => 'a llist"
consts
  llist_of :: "'a list => 'a llist"
consts
  ltake :: "enat => 'a llist => 'a llist"
### Ambiguous input (line 1019 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###           ("_case_syntax" ("_position" xs)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x) ("_position" xs')))
###                 ("_applC" ("_position" ldrop)
###                   ("_cargs" ("_position" n') ("_position" xs')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###             ("_case_syntax" ("_position" xs)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_applC" ("_position" ldrop)
###               ("_cargs" ("_position" n') ("_position" xs')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ltakeWhile :: "('a => bool) => 'a llist => 'a llist"
consts
  lnth :: "'a llist => nat => 'a"
consts
  lzip :: "'a llist => 'b llist => ('a * 'b) llist"
Proofs for coinductive predicate(s) "ldistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "llexord"
  Proving monotonicity ...
### Ambiguous input (line 1508 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs)))
###             ("_case_syntax" ("_position" n)
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))))
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" ltake)
###                   ("_cargs" ("_position" n) ("_position" xs)))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs)))
###           ("_case_syntax" ("_position" n)
###             ("_case2"
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))
###               ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" ltake)
###                       ("_cargs" ("_position" n) ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### lnull (lzip ?xs1 ?ys1) == lnull ?xs1 | lnull ?ys1
### Ambiguous input (line 2485 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_case_syntax" ("_position" ys)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" y) ("_position" ys')))
###             ("_applC" ("_position" LCons)
###               ("_cargs"
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###                 ("_applC" ("_position" curry)
###                   ("_cargs" ("_position" lzip)
###                     ("_cargs" ("_position" xs') ("_position" ys'))))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs')))
###           ("_case_syntax" ("_position" ys)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" y) ("_position" ys')))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" y)))
###                     ("_applC" ("_position" curry)
###                       ("_cargs" ("_position" lzip)
###                         ("_cargs" ("_position" xs')
###                           ("_position" ys'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Proofs for coinductive predicate(s) "lsorted"
  Proving monotonicity ...
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted LNil == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### subseq ?x ?y & subseq_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted LNil == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### sublist ?x ?y & sublist_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted LNil == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### suffix ?x ?y & suffix_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted LNil == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### prefix ?x ?y & prefix_order.lsorted (LCons ?y ?xs)
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "Q__"
### Introduced fixed type variable(s): 'a in "xs__"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Coinductive.Coinductive_List"
### 2.983s elapsed time, 3.450s cpu time, 0.633s GC time
Loading theory "Ordered_Resolution_Prover.Lazy_List_Liminf" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus")
### theory "Ordered_Resolution_Prover.Lazy_List_Liminf"
### 0.125s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Ordered_Resolution_Prover.Lazy_List_Chain" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness" via "Saturation_Framework.Calculus")
Proofs for coinductive predicate(s) "chain"
  Proving monotonicity ...
consts
  prepend :: "'a list => 'a llist => 'a llist"
Proofs for coinductive predicate(s) "emb"
  Proving monotonicity ...
Proofs for inductive predicate(s) "prepend_cong1"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "chain'"
  Proving monotonicity ...
consts
  wit :: "'a llist => 'a llist"
Proofs for coinductive predicate(s) "full_chain"
  Proving monotonicity ...
### theory "Ordered_Resolution_Prover.Lazy_List_Chain"
### 4.276s elapsed time, 6.067s cpu time, 2.469s GC time
Loading theory "Saturation_Framework.Calculus" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus" via "Draft.Soundness")
locale consequence_relation
  fixes Bot :: "'f set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
  assumes "consequence_relation Bot (\<Turnstile>)"
locale consequence_relation_family
  fixes Bot :: "'f set"
    and Q :: "'q set"
    and entails_q :: "'q => 'f set => 'f set => bool"
  assumes "consequence_relation_family Bot Q entails_q"
locale inference_system
  fixes Inf :: "'f inference set"
locale inference_system_family
  fixes Q :: "'q set"
    and Inf_q :: "'q => 'f inference set"
  assumes "inference_system_family Q"
locale calculus
  fixes Bot :: "'f set"
    and Inf :: "'f inference set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and Red_I :: "'f set => 'f inference set"
    and Red_F :: "'f set => 'f set"
  assumes "calculus Bot Inf (\<Turnstile>) Red_I Red_F"
Proofs for inductive predicate(s) "derive"
  Proving monotonicity ...
locale statically_complete_calculus
  fixes Bot :: "'a set"
    and Inf :: "'a inference set"
    and
    entails :: "'a set => 'a set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and Red_I :: "'a set => 'a inference set"
    and Red_F :: "'a set => 'a set"
  assumes "statically_complete_calculus Bot Inf (\<Turnstile>) Red_I Red_F"
locale dynamically_complete_calculus
  fixes Bot :: "'a set"
    and Inf :: "'a inference set"
    and
    entails :: "'a set => 'a set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and Red_I :: "'a set => 'a inference set"
    and Red_F :: "'a set => 'a set"
  assumes "dynamically_complete_calculus Bot Inf (\<Turnstile>) Red_I Red_F"
### theory "Saturation_Framework.Calculus"
### 0.559s elapsed time, 0.566s cpu time, 0.000s GC time
Loading theory "Draft.Soundness" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus")
Loading theory "Draft.Standard_Redundancy_Criterion" (required by "Draft.Clausal_CalculusMoreTemplates" via "Draft.Clausal_Calculus")
locale sound_inference_system
  fixes Inf :: "'a inference set"
    and Bot :: "'a set"
    and
    entails :: "'a set => 'a set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
  assumes "sound_inference_system Inf Bot (\<Turnstile>)"
locale calculus
  fixes Bot :: "'f set"
    and Inf :: "'f inference set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and Red_I :: "'f set => 'f inference set"
    and Red_F :: "'f set => 'f set"
  assumes "calculus Bot Inf (\<Turnstile>) Red_I Red_F"
### theory "Draft.Soundness"
### 0.071s elapsed time, 0.144s cpu time, 0.000s GC time
locale counterex_reducing_inference_system
  fixes Bot :: "'f set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and Inf :: "'f inference set"
    and I_of :: "'f set => 'f set"
  assumes "counterex_reducing_inference_system Bot (\<Turnstile>) Inf I_of"
locale counterex_reducing_inference_system_with_trivial_redundancy
  fixes Bot :: "'f set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and I_of :: "'f set => 'f set"
    and Inf :: "'f inference set"
  assumes
    "counterex_reducing_inference_system_with_trivial_redundancy Bot
      (\<Turnstile>) I_of Inf"
locale concl_compact_consequence_relation
  fixes Bot :: "'a set"
    and
    entails :: "'a set => 'a set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
  assumes "concl_compact_consequence_relation Bot (\<Turnstile>)"
locale calculus_with_finitary_standard_redundancy
  fixes Inf :: "'f inference set"
    and Bot :: "'f set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
  assumes
    "calculus_with_finitary_standard_redundancy Inf Bot (\<Turnstile>)"
locale calculus_with_standard_redundancy
  fixes Inf :: "'f inference set"
    and Bot :: "'f set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
  assumes "calculus_with_standard_redundancy Inf Bot (\<Turnstile>)"
locale calculus_with_standard_inference_redundancy
  fixes Bot :: "'f set"
    and Inf :: "'f inference set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and Red_I :: "'f set => 'f inference set"
    and Red_F :: "'f set => 'f set"
  assumes
    "calculus_with_standard_inference_redundancy Bot Inf (\<Turnstile>)
      Red_I Red_F"
locale counterex_reducing_calculus_with_standard_inferance_redundancy
  fixes Bot :: "'f set"
    and Inf :: "'f inference set"
    and
    entails :: "'f set => 'f set => bool"
      (infix \<open>\<Turnstile>\<close> 50)
    and Red_I :: "'f set => 'f inference set"
    and Red_F :: "'f set => 'f set"
    and I_of :: "'f set => 'f set"
  assumes
    "counterex_reducing_calculus_with_standard_inferance_redundancy Bot Inf
      (\<Turnstile>) Red_I Red_F I_of"
### theory "Draft.Standard_Redundancy_Criterion"
### 0.574s elapsed time, 0.712s cpu time, 0.094s GC time
Loading theory "Draft.Clausal_Calculus" (required by "Draft.Clausal_CalculusMoreTemplates")
locale clausal_counterex_reducing_inference_system
  fixes Inf :: "'a literal multiset Calculus.inference set"
    and J_of :: "'a literal multiset set => 'a set"
  assumes "clausal_counterex_reducing_inference_system Inf J_of"
locale clausal_counterex_reducing_calculus_with_standard_redundancy
  fixes Inf :: "'a literal multiset Calculus.inference set"
    and J_of :: "'a literal multiset set => 'a set"
  assumes
    "clausal_counterex_reducing_calculus_with_standard_redundancy Inf J_of"
### theory "Draft.Clausal_Calculus"
### 1.043s elapsed time, 1.112s cpu time, 0.094s GC time
Loading theory "Draft.Clausal_CalculusMoreTemplates"
val templateLemmas =
   [("Clausal_Calculus.true_clss_of_interp_iff_equal",
     "(?J \<TTurnstile>s clss_of_interp ?I) = (?J = ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Clausal_Calculus.entails_iff_models",
     "(clss_of_interp ?I \<TTurnstile>e ?CC) = (?I \<TTurnstile>s ?CC)",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Clausal_Calculus.subset_entailed",
     "?N2.0 <= ?N1.0 ==> ?N1.0 \<TTurnstile>e ?N2.0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Clausal_Calculus.bot_entails_all",
     "?B : {{#}} ==> {?B} \<TTurnstile>e ?N1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Clausal_Calculus.entail_set_all_formulas",
     "(?N1.0 \<TTurnstile>e ?N2.0) =
      (ALL C:?N2.0. ?N1.0 \<TTurnstile>e {C})",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 2, template_var 0), t_empty))),
    ("Clausal_Calculus.all_formulas_entailed",
     "ALL C:?N2.0. ?N1.0 \<TTurnstile>e {C} ==> ?N1.0 \<TTurnstile>e ?N2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Clausal_Calculus.entail_unions",
     "(ALL i:?I. ?N \<TTurnstile>e ?Ni i) =
      (?N \<TTurnstile>e \<Union> (?Ni ` ?I))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2), t_empty),
       template_app (template_hole 4, t_empty))),
    ("Clausal_Calculus.entail_union",
     "(?N \<TTurnstile>e ?N1.0 & ?N \<TTurnstile>e ?N2.0) =
      (?N \<TTurnstile>e ?N1.0 Un ?N2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 3, t_empty)),
       template_app (template_hole 3, t_empty))),
    ("Clausal_Calculus.entails_trans",
     "[| ?N1.0 \<TTurnstile>e ?N2.0; ?N2.0 \<TTurnstile>e ?N3.0 |]
      ==> ?N1.0 \<TTurnstile>e ?N3.0",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Clausal_Calculus.entails_concl_compact",
     "[| finite ?EE; ?CC \<TTurnstile>e ?EE |]
      ==> EX CC'<=?CC. finite CC' & CC' \<TTurnstile>e ?EE",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Clausal_Calculus.entails_trans_strong",
     "[| ?N1.0 \<TTurnstile>e ?N2.0; ?N1.0 Un ?N2.0 \<TTurnstile>e ?N3.0 |]
      ==> ?N1.0 \<TTurnstile>e ?N3.0",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Clausal_Calculus.entails_iff_unsatisfiable_single",
     "(?CC \<TTurnstile>e {?E}) =
      (~ satisfiable (?CC Un {{#- L#} |L. L :# ?E}))",
     template_equation
      (template_app (template_hole 16, t_empty),
       template_app
        (template_hole 11, template_app (template_hole 10, t_empty)))),
    ("Clausal_Calculus.entail_all_bot",
     "EX B:{{#}}. ?N \<TTurnstile>e {B} ==>
      ALL B':{{#}}. ?N \<TTurnstile>e {B'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_hole 4)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4)),
             t_empty)
           ))),
    ("Clausal_Calculus.entails_iff_unsatisfiable",
     "(?CC \<TTurnstile>e ?EE) =
      (ALL E:?EE. ~ satisfiable (?CC Un {{#- L#} |L. L :# E}))",
     template_equation
      (template_app (template_hole 15, t_empty),
       template_app
        (template_app (template_hole 12, template_var 0), t_empty))),
    ("Clausal_Calculus.entails_concl_compact_union",
     "[| finite ?EE; ?CC Un ?DD \<TTurnstile>e ?EE |]
      ==> EX CC'<=?CC. finite CC' & CC' Un ?DD \<TTurnstile>e ?EE",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Clausal_CalculusMoreTemplates"
### 0.539s elapsed time, 0.794s cpu time, 0.062s GC time
val it = (): unit
