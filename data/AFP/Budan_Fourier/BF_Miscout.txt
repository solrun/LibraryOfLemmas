Loading theory "HOL-Library.Cancellation" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BF_MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.545s cpu time, 0.043s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.More_List"
### 0.174s elapsed time, 0.690s cpu time, 0.055s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BF_MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Infinite_Set"
### 0.351s elapsed time, 1.403s cpu time, 0.098s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BF_MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.470s elapsed time, 1.877s cpu time, 0.157s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.188s elapsed time, 0.742s cpu time, 0.059s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BF_MiscMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.338s cpu time, 0.142s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BF_MiscMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.179s elapsed time, 4.473s cpu time, 0.821s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BF_MiscMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.Stream"
### 1.129s elapsed time, 4.254s cpu time, 0.827s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### theory "HOL-Library.BigO"
### 0.856s elapsed time, 3.142s cpu time, 0.285s GC time
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree"
### 2.387s elapsed time, 7.628s cpu time, 1.906s GC time
Loading theory "Draft.Templates" (required by "Draft.BF_MiscMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BF_MiscMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.095s cpu time, 0.089s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.512s elapsed time, 9.571s cpu time, 2.063s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.633s elapsed time, 5.616s cpu time, 1.338s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.542s elapsed time, 9.567s cpu time, 1.030s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.224s elapsed time, 0.489s cpu time, 0.093s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.740s elapsed time, 12.252s cpu time, 1.272s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "HOL-Computational_Algebra.Polynomial_Factorial")
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "Sturm_Tarski.Sturm_Tarski")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.354s elapsed time, 0.762s cpu time, 0.092s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc")
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
### Cannot skip proof of schematic goal statement
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 0.835s elapsed time, 1.804s cpu time, 0.188s GC time
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.779s elapsed time, 1.361s cpu time, 0.140s GC time
Loading theory "Sturm_Tarski.PolyMisc" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc" via "Sturm_Tarski.Sturm_Tarski")
### theory "Sturm_Tarski.PolyMisc"
### 0.056s elapsed time, 0.057s cpu time, 0.000s GC time
Loading theory "Sturm_Tarski.Sturm_Tarski" (required by "Draft.BF_MiscMoreTemplates" via "Draft.BF_Misc")
Found termination order: "length <*mlex*> {}"
### theory "Sturm_Tarski.Sturm_Tarski"
### 0.703s elapsed time, 0.836s cpu time, 0.166s GC time
Loading theory "Draft.BF_Misc" (required by "Draft.BF_MiscMoreTemplates")
### theory "Draft.BF_Misc"
### 0.516s elapsed time, 0.620s cpu time, 0.143s GC time
Loading theory "Draft.BF_MiscMoreTemplates"
val templateLemmas =
   [("BF_Misc.proots_count_emtpy", "proots_count ?p {} = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("BF_Misc.proots_within_0", "proots_within 0 ?s = ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("BF_Misc.proots_within_empty", "proots_within ?p {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("BF_Misc.degree_proots_count", "degree ?p = proots_count ?p UNIV",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("BF_Misc.fcompose_0", "fcompose 0 ?q ?r = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("BF_Misc.changes_0", "changes ((0::?'a) # ?xs) = changes ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("BF_Misc.proots_within_proots", "proots_within ?p ?s <= proots ?p",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("BF_Misc.proots_count_uminus",
     "proots_count (- ?p) ?s = proots_count ?p ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("BF_Misc.proots_within_uminus",
     "proots_within (- ?p) ?s = proots_within ?p ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("BF_Misc.of_real_poly_eq_0_iff",
     "(map_poly of_real ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("BF_Misc.smult_normalize_field_eq",
     "?p = smult (lead_coeff ?p) (normalize ?p)",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("BF_Misc.fcompose_const", "fcompose [:?a:] ?q ?r = [:?a:]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2), template_hole 0))),
    ("BF_Misc.finite_proots", "?p ~= 0 ==> finite (proots_within ?p ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("BF_Misc.of_real_poly_map_poly",
     "of_real (poly ?p ?x) = poly (map_poly of_real ?p) (of_real ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("BF_Misc.changes_filter_eq",
     "changes (filter (%x. x ~= (0::?'a)) ?xs) = changes ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 4, template_var 0))),
    ("BF_Misc.of_real_poly_eq_iff",
     "(map_poly of_real ?p = map_poly of_real ?q) = (?p = ?q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("BF_Misc.Im_poly_of_real",
     "Im (poly ?p (complex_of_real ?x)) = poly (map_poly Im ?p) ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 4),
             template_var 1)),
         template_var 0))),
    ("BF_Misc.Re_poly_of_real",
     "Re (poly ?p (complex_of_real ?x)) = poly (map_poly Re ?p) ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 4),
             template_var 1)),
         template_var 0))),
    ("BF_Misc.fcompose_uminus",
     "fcompose (- ?p) ?q ?r = - fcompose ?p ?q ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BF_Misc.of_real_poly_map_power",
     "map_poly of_real (?p ^ ?n) = map_poly of_real ?p ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_var 0))),
    ("BF_Misc.of_real_poly_map_pCons",
     "map_poly of_real (pCons ?a ?p) =
      pCons (of_real ?a) (map_poly of_real ?p)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("BF_Misc.of_real_poly_map_smult",
     "map_poly of_real (smult ?s ?p) =
      smult (of_real ?s) (map_poly of_real ?p)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("BF_Misc.proots_count_leq_degree",
     "?p ~= 0 ==> proots_count ?p ?s <= degree ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("BF_Misc.proots_within_union",
     "proots_within ?p ?A Un proots_within ?p ?B =
      proots_within ?p (?A Un ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("BF_Misc.proots_within_times",
     "proots_within (?p * ?q) ?s =
      proots_within ?p ?s Un proots_within ?q ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("BF_Misc.proots_within_gcd",
     "proots_within (gcd ?p ?q) ?s =
      proots_within ?p ?s Int proots_within ?q ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("BF_Misc.fcompose_smult",
     "fcompose (smult ?a ?p) ?q1.0 ?q2.0 =
      smult ?a (fcompose ?p ?q1.0 ?q2.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BF_Misc.of_real_poly_map_plus",
     "map_poly of_real (?p + ?q) =
      map_poly of_real ?p + map_poly of_real ?q",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("BF_Misc.of_real_poly_map_mult",
     "map_poly of_real (?p * ?q) =
      map_poly of_real ?p * map_poly of_real ?q",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("BF_Misc.fcompose_0_denominator",
     "fcompose ?p ?q1.0 0 = smult (lead_coeff ?p) (?q1.0 ^ degree ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 1, template_var 1))))),
    ("BF_Misc.proots_within_inter",
     "NO_MATCH UNIV ?s ==> proots_within ?p ?s = proots ?p Int ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)),
           template_var 1)))),
    ("BF_Misc.card_proots_within_leq",
     "?p ~= 0 ==> card (proots_within ?p ?s) <= proots_count ?p ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("BF_Misc.lead_coeff_normalize_field",
     "?p ~= 0 ==> lead_coeff (normalize ?p) = (1::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0))),
         template_hole 0))),
    ("BF_Misc.lead_coeff_pderiv",
     "lead_coeff (pderiv ?p) = of_nat (degree ?p) * lead_coeff ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 2, template_var 0))))),
    ("BF_Misc.proots_count_pCons_1_iff",
     "proots_count [:- ?a, 1::?'a:] ?s = (if ?a : ?s then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_app (template_hole 7, template_hole 5),
               template_hole 4))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("BF_Misc.order_linear",
     "order ?x [:- ?a, 1::?'a:] = (if ?x = ?a then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 0)),
                template_app
                 (template_app (template_hole 7, template_hole 5),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("BF_Misc.proots_within_iff",
     "(?x : proots_within ?p ?s) = (poly ?p ?x = (0::?'a) & ?x : ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2)),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))
           ))),
    ("BF_Misc.proots_count_smult",
     "?a ~= (0::?'a) ==>
      proots_count (smult ?a ?p) ?s = proots_count ?p ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("BF_Misc.proots_within_smult",
     "?a ~= (0::?'a) ==>
      proots_within (smult ?a ?p) ?s = proots_within ?p ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("BF_Misc.changes_filter_empty",
     "filter (%x. x ~= (0::?'a)) ?xs = [] ==> changes ?xs = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, t_empty), template_var 0),
          template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("BF_Misc.fcompose_mult",
     "fcompose (?p1.0 * ?p2.0) ?q1.0 ?q2.0 =
      fcompose ?p1.0 ?q1.0 ?q2.0 * fcompose ?p2.0 ?q1.0 ?q2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BF_Misc.map_poly_order_of_real",
     "?p ~= 0 ==> order (of_real ?t) (map_poly of_real ?p) = order ?t ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("BF_Misc.proots_within_pCons_1_iff",
     "proots_within [:?a, - (1::?'a):] ?s = (if ?a : ?s then {?a} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5)),
               template_hole 4))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_hole 0))),
    ("BF_Misc.proots_within_pCons_1_iff",
     "proots_within [:- ?a, 1::?'a:] ?s = (if ?a : ?s then {?a} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_app (template_hole 7, template_hole 5),
               template_hole 4))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_hole 0))),
    ("BF_Misc.proots_count_of_real",
     "?p ~= 0 ==>
      proots_count (map_poly of_real ?p) (of_real ` ?s) =
      proots_count ?p ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("BF_Misc.changes_filter_empty",
     "filter (%x. x ~= (0::?'a)) ?xs = [] ==> changes (?a # ?xs) = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, t_empty), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("BF_Misc.proots_withinI",
     "[| poly ?p ?x = (0::?'a); ?x : ?s |] ==> ?x : proots_within ?p ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("BF_Misc.order_multiplicity_eq",
     "?p ~= 0 ==> order ?a ?p = multiplicity [:- ?a, 1::?'a:] ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_hole 6))),
           template_var 1)))),
    ("BF_Misc.proots_count_0_imp_empty",
     "[| proots_count ?p ?s = 0; ?p ~= 0 |] ==> proots_within ?p ?s = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("BF_Misc.poly_gcd_0_iff",
     "(poly (gcd ?p ?q) ?x = (0::?'a)) =
      (poly ?p ?x = (0::?'a) & poly ?q ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 1))
           ))),
    ("BF_Misc.fcompose_add_const",
     "fcompose ([:?a:] + ?p) ?q1.0 ?q2.0 =
      smult ?a (?q2.0 ^ degree ?p) + fcompose ?p ?q1.0 ?q2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3)),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)))),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BF_Misc.proots_count_power_n_n",
     "proots_count ([:- ?a, 1::?'a:] ^ ?n) ?s =
      (if ?a : ?s & 0 < ?n then ?n else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2)),
                 template_app
                  (template_app (template_hole 8, template_hole 6),
                   template_hole 5))),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1))),
           template_var 1),
         template_hole 0))),
    ("BF_Misc.proots_count_times",
     "?p * ?q ~= 0 ==>
      proots_count (?p * ?q) ?s = proots_count ?p ?s + proots_count ?q ?s",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("BF_Misc.lead_coeff_gcd_field",
     "?p ~= 0 | ?q ~= 0 ==> lead_coeff (gcd ?p ?q) = (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_hole 5))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("BF_Misc.fcompose_pCons",
     "fcompose (pCons ?a ?p) ?q1.0 ?q2.0 =
      smult ?a (?q2.0 ^ degree (pCons ?a ?p)) +
      ?q1.0 * fcompose ?p ?q1.0 ?q2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2))))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0))))),
    ("BF_Misc.gcd_degree_le_min",
     "[| ?p ~= 0; ?q ~= 0 |]
      ==> degree (gcd ?p ?q) <= min (degree ?p) (degree ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("BF_Misc.proots_pcompose",
     "[| ?p ~= 0; degree ?q = 1 |]
      ==> proots_count (?p \<circ>\<^sub>p ?q) ?s =
          proots_count ?p (poly ?q ` ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("BF_Misc.poly_fcompose_0_denominator",
     "poly ?q2.0 ?x = (0::?'a) ==>
      poly (fcompose ?p ?q1.0 ?q2.0) ?x =
      poly ?q1.0 ?x ^ degree ?p * lead_coeff ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 2)),
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 1, template_var 1)))))),
    ("BF_Misc.order_gcd",
     "[| ?p ~= 0; ?q ~= 0 |]
      ==> order ?x (gcd ?p ?q) = min (order ?x ?p) (order ?x ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("BF_Misc.proots_count_union_disjoint",
     "[| ?A Int ?B = {}; ?p ~= 0 |]
      ==> proots_count ?p (?A Un ?B) =
          proots_count ?p ?A + proots_count ?p ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_hole 7),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("BF_Misc.changes_drop_dup",
     "[| ?xs ~= []; ?ys ~= [] --> last ?xs = hd ?ys |]
      ==> changes (?xs @ ?ys) = changes (?xs @ tl ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 0),
                    template_hole 8))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1)),
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("BF_Misc.order_pcompose",
     "?p \<circ>\<^sub>p ?q ~= 0 ==>
      order ?x (?p \<circ>\<^sub>p ?q) =
      order ?x (?q - [:poly ?q ?x:]) * order (poly ?q ?x) ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)),
                   template_hole 6)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("BF_Misc.degree_eq_oneE",
     "[| degree ?p = 1;
         !!a b. [| ?p = [:a, b:]; b ~= (0::?'a) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("BF_Misc.proots_pcompose_bij_eq",
     "[| bij_betw (poly ?q) ?A ?B; ?p ~= 0; degree ?q = 1 |]
      ==> proots_count ?p ?B = proots_count (?p \<circ>\<^sub>p ?q) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, t_empty), template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_equation
         (template_app (template_hole 3, template_var 3), template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 2)))),
    ("BF_Misc.fcompose_add_less",
     "degree ?p2.0 < degree ?p1.0 ==>
      fcompose (?p1.0 + ?p2.0) ?q1.0 ?q2.0 =
      fcompose ?p1.0 ?q1.0 ?q2.0 +
      ?q2.0 ^ (degree ?p1.0 - degree ?p2.0) * fcompose ?p2.0 ?q1.0 ?q2.0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 3),
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 6, template_var 2)),
                   template_app (template_hole 6, template_var 3)))),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1),
               template_var 0)))))),
    ("BF_Misc.poly_fcompose",
     "poly ?q2.0 ?x ~= (0::?'a) ==>
      poly (fcompose ?p ?q1.0 ?q2.0) ?x =
      poly ?p (poly ?q1.0 ?x / poly ?q2.0 ?x) * poly ?q2.0 ?x ^ degree ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2)))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2)),
             template_app (template_hole 0, template_var 1)))))),
    ("BF_Misc.fcompose_poly",
     "poly ?q2.0 ?x ~= (0::?'a) ==>
      poly ?p (poly ?q1.0 ?x / poly ?q2.0 ?x) =
      poly (fcompose ?p ?q1.0 ?q2.0) ?x / poly (?q2.0 ^ degree ?p) ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0),
                   template_var 3)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 1))),
             template_var 2))))),
    ("BF_Misc.proots_count_cong",
     "[| ALL x:?s. order x ?p = order x ?q; ?p ~= 0; ?q ~= 0 |]
      ==> proots_count ?p ?s = proots_count ?q ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("BF_Misc.proots_card_pcompose_bij_eq",
     "[| bij_betw (poly ?q) ?A ?B; ?p ~= 0; degree ?q = 1 |]
      ==> card (proots_within ?p ?B) =
          card (proots_within (?p \<circ>\<^sub>p ?q) ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, t_empty), template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_equation
         (template_app (template_hole 4, template_var 3), template_hole 3)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2))))),
    ("BF_Misc.fcompose_add_eq",
     "degree ?p1.0 = degree ?p2.0 ==>
      ?q2.0 ^ (degree ?p1.0 - degree (?p1.0 + ?p2.0)) *
      fcompose (?p1.0 + ?p2.0) ?q1.0 ?q2.0 =
      fcompose ?p1.0 ?q1.0 ?q2.0 + fcompose ?p2.0 ?q1.0 ?q2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3),
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 6, template_var 3)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))))),
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1))))),
    ("BF_Misc.changes_append",
     "?xs ~= [] & ?ys ~= [] --> last ?xs = hd ?ys & last ?xs ~= (0::?'a) ==>
      changes (?xs @ ?ys) = changes ?xs + changes ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 1),
                        template_hole 8))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 1)),
                    template_app (template_hole 5, template_var 0))),
                template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 1)),
                    template_hole 4))))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("BF_Misc.fcompose_nzero",
     "[| ?p ~= 0; ?q2.0 ~= 0; ALL c. ?q1.0 ~= smult c ?q2.0;
         infinite UNIV |]
      ==> fcompose ?p ?q1.0 ?q2.0 ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_hole 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1),
             template_hole 5)
           ))),
    ("BF_Misc.changes_Cons",
     "changes (?x # ?xs) =
      (if filter (%x. x ~= (0::?'a)) ?xs = [] then 0
       else if ?x * hd (filter (%x. x ~= (0::?'a)) ?xs) < (0::?'a)
            then 1 + changes ?xs else changes ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, t_empty),
                       template_var 0)),
                   template_hole 6)),
               template_hole 5),
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 10, t_empty),
                             template_var 0)))),
                     template_hole 7)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app (template_hole 14, template_var 0))),
               template_app (template_hole 14, template_var 0)))
           ))),
    ("BF_Misc.poly_root_induct_alt",
     "[| ?Q 0; !!p. (!!a. poly p a ~= (0::?'a)) ==> ?Q p;
         !!a p. ?Q p ==> ?Q ([:- a, 1::?'a:] * p) |]
      ==> ?Q ?p",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("BF_Misc.proots_fcompose_bij_eq",
     "[| bij_betw (%x. poly ?q1.0 x / poly ?q2.0 x) ?A ?B; ?p ~= 0;
         ALL x:?A. poly ?q2.0 x ~= (0::?'a);
         max (degree ?q1.0) (degree ?q2.0) <= 1;
         ALL c. ?q1.0 ~= smult c ?q2.0; infinite UNIV |]
      ==> proots_count ?p ?B = proots_count (fcompose ?p ?q1.0 ?q2.0) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, t_empty), template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 14)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2), t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 4)),
            template_app (template_hole 8, template_var 3)),
          template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4),
               template_var 3)),
           template_var 2)))),
    ("BF_Misc.proots_card_fcompose_bij_eq",
     "[| bij_betw (%x. poly ?q1.0 x / poly ?q2.0 x) ?A ?B; ?p ~= 0;
         ALL x:?A. poly ?q2.0 x ~= (0::?'a);
         max (degree ?q1.0) (degree ?q2.0) <= 1;
         ALL c. ?q1.0 ~= smult c ?q2.0; infinite UNIV |]
      ==> card (proots_within ?p ?B) =
          card (proots_within (fcompose ?p ?q1.0 ?q2.0) ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, t_empty), template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 15)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2), t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 4)),
            template_app (template_hole 9, template_var 3)),
          template_hole 8),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4),
                 template_var 3)),
             template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.BF_MiscMoreTemplates"
### 0.535s elapsed time, 0.764s cpu time, 0.101s GC time
val it = (): unit
