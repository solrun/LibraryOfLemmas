Loading theory "Draft.Table" (required by "Draft.MFOTLTemplates" via "Draft.MFOTL" via "Draft.Abstract_Monitor")
Loading theory "Draft.Trace" (required by "Draft.MFOTLTemplates" via "Draft.MFOTL")
Loading theory "Draft.Interval" (required by "Draft.MFOTLTemplates" via "Draft.MFOTL")
Loading theory "Draft.Templates" (required by "Draft.MFOTLTemplates" via "Draft.ExtrEqs")
Proofs for coinductive predicate(s) "ssorted"
consts
  tabulate :: "(nat => 'a) => nat => nat => 'a list"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.316s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MFOTLTemplates")
instantiation
  \<I> :: equal
  equal_\<I> == equal_class.equal :: \<I> => \<I> => bool
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  \<I> :: linorder
  less_eq_\<I> == less_eq :: \<I> => \<I> => bool
  less_\<I> == less :: \<I> => \<I> => bool
instantiation
  prefix :: (type) order
  less_eq_prefix == less_eq :: 'a prefix => 'a prefix => bool
  less_prefix == less :: 'a prefix => 'a prefix => bool
### theory "Draft.Interval"
### 0.505s elapsed time, 1.961s cpu time, 0.185s GC time
### theory "Draft.Trace"
### 0.536s elapsed time, 2.052s cpu time, 0.185s GC time
### theory "Draft.Table"
### 0.581s elapsed time, 2.145s cpu time, 0.185s GC time
Loading theory "Draft.Abstract_Monitor" (required by "Draft.MFOTLTemplates" via "Draft.MFOTL")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.597s elapsed time, 2.015s cpu time, 0.185s GC time
locale fo_spec
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
  assumes "fo_spec nfv fv sat"
locale cosafety_fo_spec
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
  assumes "cosafety_fo_spec nfv fv sat"
locale monitor
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and M :: "'a prefix => (nat * 'b option list) set"
  assumes "monitor nfv fv sat M"
locale cosafety_monitor
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and M :: "'a prefix => (nat * 'b option list) set"
  assumes "cosafety_monitor nfv fv sat M"
locale progress
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and progress :: "'a prefix => nat"
  assumes "progress nfv fv sat progress"
locale abstract_slicer
  fixes relevant_events :: "'b list set => 'a set"
locale sliceable_fo_spec
  fixes nfv :: "nat"
    and fv :: "nat set"
    and relevant_events :: "'b list set => 'a set"
    and sat :: "'a trace => 'b list => nat => bool"
  assumes "sliceable_fo_spec nfv fv relevant_events sat"
locale sliceable_monitor
  fixes nfv :: "nat"
    and fv :: "nat set"
    and relevant_events :: "'b list set => 'a set"
    and sat :: "'a trace => 'b list => nat => bool"
    and M :: "'a prefix => (nat * 'b option list) set"
  assumes "sliceable_monitor nfv fv relevant_events sat M"
locale timed_progress
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and progress :: "'a prefix => nat"
  assumes "timed_progress nfv fv sat progress"
locale sliceable_timed_progress
  fixes nfv :: "nat"
    and fv :: "nat set"
    and relevant_events :: "'a list set => 'b set"
    and sat :: "'b trace => 'a list => nat => bool"
    and progress :: "'b prefix => nat"
  assumes "sliceable_timed_progress nfv fv relevant_events sat progress"
### theory "Draft.Abstract_Monitor"
### 0.287s elapsed time, 0.417s cpu time, 0.063s GC time
Loading theory "Draft.MFOTL" (required by "Draft.MFOTLTemplates")
consts
  fvi_trm :: "nat => 'a trm => nat set"
consts
  eval_trm :: "'a list => 'a trm => 'a"
consts
  fvi :: "nat => 'a formula => nat set"
consts
  future_reach :: "'a formula => enat"
consts
  sat ::
    "(char list * 'a list) Trace.trace
     => 'a list => nat => 'a formula => bool"
Found termination order: "size <*mlex*> {}"
consts
  matches :: "'a list => 'a formula => char list * 'a list => bool"
### theory "Draft.MFOTL"
### 3.244s elapsed time, 3.981s cpu time, 0.838s GC time
Loading theory "Draft.MFOTLTemplates"
val templateLemmas =
   [("MFOTL.finite_fvi", "finite (MFOTL.fvi ?b ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MFOTL.finite_fvi_trm", "finite (MFOTL.fvi_trm ?b ?t)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MFOTL.nfv_simps",
     "MFOTL.nfv (formula.Neg ?\<phi>) = MFOTL.nfv ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("MFOTL.nfv_simps",
     "MFOTL.nfv (formula.Next ?I ?\<phi>) = MFOTL.nfv ?\<phi>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("MFOTL.nfv_simps",
     "MFOTL.nfv (formula.Prev ?I ?\<phi>) = MFOTL.nfv ?\<phi>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("MFOTL.fvi_less_nfv", "ALL i:fv ?\<phi>. i < MFOTL.nfv ?\<phi>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           t_empty)
         )),
    ("MFOTL.nfv_And",
     "MFOTL.nfv (MFOTL.And ?\<phi> ?\<psi>) =
      max (MFOTL.nfv ?\<phi>) (MFOTL.nfv ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MFOTL.nfv_And_Not",
     "MFOTL.nfv (MFOTL.And_Not ?\<phi> ?\<psi>) =
      max (MFOTL.nfv ?\<phi>) (MFOTL.nfv ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MFOTL.nfv_simps",
     "MFOTL.nfv (formula.Or ?\<phi> ?\<psi>) =
      max (MFOTL.nfv ?\<phi>) (MFOTL.nfv ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MFOTL.future_reach_And",
     "MFOTL.future_reach (MFOTL.And ?\<phi> ?\<psi>) =
      max (MFOTL.future_reach ?\<phi>) (MFOTL.future_reach ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MFOTL.future_reach_And_Not",
     "MFOTL.future_reach (MFOTL.And_Not ?\<phi> ?\<psi>) =
      max (MFOTL.future_reach ?\<phi>) (MFOTL.future_reach ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MFOTL.nfv_simps",
     "MFOTL.nfv (formula.Since ?\<phi> ?I ?\<psi>) =
      max (MFOTL.nfv ?\<phi>) (MFOTL.nfv ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 2, template_var 0)))),
    ("MFOTL.nfv_simps",
     "MFOTL.nfv (formula.Until ?\<phi> ?I ?\<psi>) =
      max (MFOTL.nfv ?\<phi>) (MFOTL.nfv ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 2, template_var 0)))),
    ("MFOTL.fvi_And",
     "MFOTL.fvi ?b (MFOTL.And ?\<phi> ?\<psi>) =
      MFOTL.fvi ?b ?\<phi> Un MFOTL.fvi ?b ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("MFOTL.fvi_And_Not",
     "MFOTL.fvi ?b (MFOTL.And_Not ?\<phi> ?\<psi>) =
      MFOTL.fvi ?b ?\<phi> Un MFOTL.fvi ?b ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("MFOTL.fvi_Suc",
     "(?x : MFOTL.fvi (Suc ?b) ?\<phi>) = (Suc ?x : MFOTL.fvi ?b ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MFOTL.fvi_trm_Suc",
     "(?x : MFOTL.fvi_trm (Suc ?b) ?t) = (Suc ?x : MFOTL.fvi_trm ?b ?t)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MFOTL.sat_And",
     "MFOTL.sat ?\<sigma> ?v ?i (MFOTL.And ?\<phi> ?\<psi>) =
      (MFOTL.sat ?\<sigma> ?v ?i ?\<phi> &
       MFOTL.sat ?\<sigma> ?v ?i ?\<psi>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2),
           template_var 0)))),
    ("MFOTL.sat_And_Not",
     "MFOTL.sat ?\<sigma> ?v ?i (MFOTL.And_Not ?\<phi> ?\<psi>) =
      (MFOTL.sat ?\<sigma> ?v ?i ?\<phi> &
       ~ MFOTL.sat ?\<sigma> ?v ?i ?\<psi>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0))))),
    ("MFOTL.fvi_Suc_bound",
     "ALL i:MFOTL.fvi (Suc ?b) ?\<phi>. i < ?n ==>
      ALL i:MFOTL.fvi ?b ?\<phi>. i < Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("MFOTL.eval_trm_cong",
     "ALL x:fv_trm ?t. ?v ! x = ?v' ! x ==>
      MFOTL.eval_trm ?v ?t = MFOTL.eval_trm ?v' ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("MFOTL.disjE_Not2",
     "[| ?P | ?Q; ?P ==> ?R; [| ~ ?P; ?Q |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_implication
           ([template_predicate (template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("MFOTL.matches_fvi_cong",
     "ALL x:fv ?\<phi>. ?v ! x = ?v' ! x ==>
      MFOTL.matches ?v ?\<phi> ?e = MFOTL.matches ?v' ?\<phi> ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0)))),
    ("MFOTL.sat_Since_0",
     "MFOTL.sat ?\<sigma> ?v 0 (formula.Since ?\<phi> ?I ?\<psi>) =
      (mem 0 ?I & MFOTL.sat ?\<sigma> ?v 0 ?\<psi>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 4),
             template_var 3),
           template_hole 7),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_hole 7)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 7)),
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_var 3),
             template_hole 7),
           template_var 0)))),
    ("MFOTL.sat_fvi_cong",
     "ALL x:fv ?\<phi>. ?v ! x = ?v' ! x ==>
      MFOTL.sat ?\<sigma> ?v ?i ?\<phi> =
      MFOTL.sat ?\<sigma> ?v' ?i ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 4)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("MFOTL.sat_Since_pointD",
     "[| MFOTL.sat ?\<sigma> ?v ?i
          (formula.Since ?\<phi> (point ?t) ?\<psi>);
         mem ?t ?I |]
      ==> MFOTL.sat ?\<sigma> ?v ?i (formula.Since ?\<phi> ?I ?\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app (template_hole 6, template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("MFOTL.sat_slice_iff",
     "?v : ?S ==>
      MFOTL.sat ?\<sigma> ?v ?i ?\<phi> =
      MFOTL.sat
       (map_\<Gamma> (%D. D Int relevant_events ?\<phi> ?S) ?\<sigma>) ?v ?i
       ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 2),
               template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, t_empty),
                   template_var 2)),
               template_var 4),
             template_var 1),
           template_var 0)))),
    ("MFOTL.sat_slice_strong",
     "[| relevant_events ?\<phi> ?S <= ?E; ?v : ?S |]
      ==> MFOTL.sat ?\<sigma> ?v ?i ?\<phi> =
          MFOTL.sat (map_\<Gamma> (%D. D Int ?E) ?\<sigma>) ?v ?i ?\<phi>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, t_empty),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 1)),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("MFOTL.slice_replace_prefix",
     "prefix_of
       (pmap_\<Gamma> (%D. D Int relevant_events ?\<phi> ?R) ?\<pi>)
       ?\<sigma> ==>
      map_\<Gamma> (%D. D Int relevant_events ?\<phi> ?R)
       (replace_prefix ?\<pi> ?\<sigma>) =
      map_\<Gamma> (%D. D Int relevant_events ?\<phi> ?R) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, t_empty),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("MFOTL.sat_Since_point",
     "[| MFOTL.sat ?\<sigma> ?v ?i (formula.Since ?\<phi> ?I ?\<psi>);
         !!j. [| j <= ?i; mem (\<tau> ?\<sigma> ?i - \<tau> ?\<sigma> j) ?I;
                 MFOTL.sat ?\<sigma> ?v ?i
                  (formula.Since ?\<phi>
                    (point (\<tau> ?\<sigma> ?i - \<tau> ?\<sigma> j))
                    ?\<psi>) |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("MFOTL.sat_Since_rec",
     "MFOTL.sat ?\<sigma> ?v ?i (formula.Since ?\<phi> ?I ?\<psi>) =
      (mem 0 ?I & MFOTL.sat ?\<sigma> ?v ?i ?\<psi> |
       0 < ?i &
       enat (\<Delta> ?\<sigma> ?i) <= Interval.right ?I &
       MFOTL.sat ?\<sigma> ?v ?i ?\<phi> &
       MFOTL.sat ?\<sigma> ?v (?i - 1)
        (formula.Since ?\<phi> (subtract (\<Delta> ?\<sigma> ?i) ?I)
          ?\<psi>))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 14, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 13, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 1)),
                     template_hole 8)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 8)),
                   template_app (template_hole 5, template_var 1)))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 14, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 4, template_hole 8),
               template_var 3)),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 5),
                           template_var 3)),
                       template_app
                        (template_app (template_hole 2, template_var 5),
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_hole 1))))),
                 template_app (template_hole 5, template_var 1))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 14, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 14, template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_hole 1)),
                 template_app
                  (template_app
                    (template_app (template_hole 13, template_var 2),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_var 5),
                               template_var 3)),
                           template_app
                            (template_app (template_hole 2, template_var 5),
                             template_app
                              (template_app
                                (template_hole 3, template_var 3),
                               template_hole 1)))),
                       template_var 1)),
                   template_var 0)))))))),
    ("MFOTL.sat_Until_rec",
     "MFOTL.sat ?\<sigma> ?v ?i (formula.Until ?\<phi> ?I ?\<psi>) =
      (mem 0 ?I & MFOTL.sat ?\<sigma> ?v ?i ?\<psi> |
       enat (\<Delta> ?\<sigma> (?i + 1)) <= Interval.right ?I &
       MFOTL.sat ?\<sigma> ?v ?i ?\<phi> &
       MFOTL.sat ?\<sigma> ?v (?i + 1)
        (formula.Until ?\<phi> (subtract (\<Delta> ?\<sigma> (?i + 1)) ?I)
          ?\<psi>))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 14, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 13, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 1)),
                     template_hole 8)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 8)),
                   template_app (template_hole 5, template_var 1)))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 14, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 5),
                         template_app
                          (template_app (template_hole 2, template_var 3),
                           template_hole 1))),
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 2, template_var 3),
                             template_hole 1)),
                         template_hole 1))))),
               template_app (template_hole 5, template_var 1))),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 14, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 14, template_var 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1)),
               template_app
                (template_app
                  (template_app (template_hole 13, template_var 2),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 5),
                             template_app
                              (template_app
                                (template_hole 2, template_var 3),
                               template_hole 1))),
                         template_app
                          (template_app (template_hole 3, template_var 5),
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_app
                                  (template_hole 2, template_var 3),
                                 template_hole 1)),
                             template_hole 1)))),
                     template_var 1)),
                 template_var 0))))))),
    ("MFOTL.safe_formula_induct",
     "[| safe_formula ?\<phi>;
         !!t1 t2. trm.is_Const t1 ==> ?P (formula.Eq t1 t2);
         !!t1 t2. trm.is_Const t2 ==> ?P (formula.Eq t1 t2);
         !!x y. ?P (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));
         !!x y.
            x = y ==> ?P (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));
         !!e ts. ?P (formula.Pred e ts);
         !!\<phi> \<psi>.
            [| ~ (safe_formula (formula.Neg \<psi>) &
                  fv \<psi> <= fv \<phi>);
               ?P \<phi>; ?P \<psi> |]
            ==> ?P (MFOTL.And \<phi> \<psi>);
         !!\<phi> \<psi>.
            [| safe_formula \<psi>; fv \<psi> <= fv \<phi>; ?P \<phi>;
               ?P \<psi> |]
            ==> ?P (MFOTL.And_Not \<phi> \<psi>);
         !!\<phi> \<psi>.
            [| fv \<psi> = fv \<phi>; ?P \<phi>; ?P \<psi> |]
            ==> ?P (formula.Or \<phi> \<psi>);
         !!\<phi>. ?P \<phi> ==> ?P (formula.Exists \<phi>);
         !!I \<phi>. ?P \<phi> ==> ?P (formula.Prev I \<phi>);
         !!I \<phi>. ?P \<phi> ==> ?P (formula.Next I \<phi>);
         !!\<phi> I \<psi>.
            [| fv \<phi> <= fv \<psi>; safe_formula \<phi>; ?P \<phi>;
               ?P \<psi> |]
            ==> ?P (formula.Since \<phi> I \<psi>);
         !!\<phi> I \<psi>.
            [| fv (formula.Neg \<phi>) <= fv \<psi>;
               ~ safe_formula (formula.Neg \<phi>); ?P \<phi>; ?P \<psi> |]
            ==> ?P (formula.Since (formula.Neg \<phi>) I \<psi>);
         !!\<phi> I \<psi>.
            [| fv \<phi> <= fv \<psi>; safe_formula \<phi>; ?P \<phi>;
               ?P \<psi> |]
            ==> ?P (formula.Until \<phi> I \<psi>);
         !!\<phi> I \<psi>.
            [| fv (formula.Neg \<phi>) <= fv \<psi>;
               ~ safe_formula (formula.Neg \<phi>); ?P \<phi>; ?P \<psi> |]
            ==> ?P (formula.Until (formula.Neg \<phi>) I \<psi>) |]
      ==> ?P ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 28, template_var 1)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (template_app (template_var 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.MFOTLTemplates"
### 0.434s elapsed time, 0.618s cpu time, 0.074s GC time
val it = (): unit
