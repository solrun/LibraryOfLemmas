Loading theory "Draft.Table" (required by "Draft.Monitor_CodeTemplates" via "Draft.Monitor_Code" via "Draft.Monitor" via "Draft.Abstract_Monitor")
Loading theory "Draft.Trace" (required by "Draft.Monitor_CodeTemplates" via "Draft.Monitor_Code" via "Draft.Monitor" via "Draft.Abstract_Monitor")
Loading theory "Draft.Interval" (required by "Draft.Monitor_CodeTemplates" via "Draft.Monitor_Code" via "Draft.Monitor" via "Draft.MFOTL")
Loading theory "Draft.Templates" (required by "Draft.Monitor_CodeTemplates" via "Draft.ExtrEqs")
consts
  tabulate :: "(nat => 'a) => nat => nat => 'a list"
Proofs for coinductive predicate(s) "ssorted"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.110s elapsed time, 0.445s cpu time, 0.037s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Monitor_CodeTemplates")
instantiation
  \<I> :: equal
  equal_\<I> == equal_class.equal :: \<I> => \<I> => bool
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  \<I> :: linorder
  less_eq_\<I> == less_eq :: \<I> => \<I> => bool
  less_\<I> == less :: \<I> => \<I> => bool
instantiation
  prefix :: (type) order
  less_eq_prefix == less_eq :: 'a prefix => 'a prefix => bool
  less_prefix == less :: 'a prefix => 'a prefix => bool
### theory "Draft.Interval"
### 0.461s elapsed time, 1.829s cpu time, 0.125s GC time
### theory "Draft.Table"
### 0.552s elapsed time, 2.097s cpu time, 0.206s GC time
### theory "Draft.Trace"
### 0.566s elapsed time, 2.127s cpu time, 0.206s GC time
Loading theory "Draft.Abstract_Monitor" (required by "Draft.Monitor_CodeTemplates" via "Draft.Monitor_Code" via "Draft.Monitor")
locale fo_spec
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
  assumes "fo_spec nfv fv sat"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
locale cosafety_fo_spec
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
  assumes "cosafety_fo_spec nfv fv sat"
### theory "Draft.ExtrEqs"
### 0.601s elapsed time, 1.989s cpu time, 0.170s GC time
locale monitor
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and M :: "'a prefix => (nat * 'b option list) set"
  assumes "monitor nfv fv sat M"
locale cosafety_monitor
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and M :: "'a prefix => (nat * 'b option list) set"
  assumes "cosafety_monitor nfv fv sat M"
locale progress
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and progress :: "'a prefix => nat"
  assumes "progress nfv fv sat progress"
locale abstract_slicer
  fixes relevant_events :: "'b list set => 'a set"
locale sliceable_fo_spec
  fixes nfv :: "nat"
    and fv :: "nat set"
    and relevant_events :: "'b list set => 'a set"
    and sat :: "'a trace => 'b list => nat => bool"
  assumes "sliceable_fo_spec nfv fv relevant_events sat"
locale sliceable_monitor
  fixes nfv :: "nat"
    and fv :: "nat set"
    and relevant_events :: "'b list set => 'a set"
    and sat :: "'a trace => 'b list => nat => bool"
    and M :: "'a prefix => (nat * 'b option list) set"
  assumes "sliceable_monitor nfv fv relevant_events sat M"
locale timed_progress
  fixes nfv :: "nat"
    and fv :: "nat set"
    and sat :: "'a trace => 'b list => nat => bool"
    and progress :: "'a prefix => nat"
  assumes "timed_progress nfv fv sat progress"
locale sliceable_timed_progress
  fixes nfv :: "nat"
    and fv :: "nat set"
    and relevant_events :: "'a list set => 'b set"
    and sat :: "'b trace => 'a list => nat => bool"
    and progress :: "'b prefix => nat"
  assumes "sliceable_timed_progress nfv fv relevant_events sat progress"
### theory "Draft.Abstract_Monitor"
### 0.305s elapsed time, 0.502s cpu time, 0.081s GC time
Loading theory "Draft.MFOTL" (required by "Draft.Monitor_CodeTemplates" via "Draft.Monitor_Code" via "Draft.Monitor")
consts
  fvi_trm :: "nat => 'a trm => nat set"
consts
  eval_trm :: "'a list => 'a trm => 'a"
consts
  fvi :: "nat => 'a formula => nat set"
consts
  future_reach :: "'a formula => enat"
consts
  sat ::
    "(char list * 'a list) Trace.trace
     => 'a list => nat => 'a formula => bool"
Found termination order: "size <*mlex*> {}"
consts
  matches :: "'a list => 'a formula => char list * 'a list => bool"
### theory "Draft.MFOTL"
### 3.190s elapsed time, 4.007s cpu time, 0.912s GC time
Loading theory "Draft.Monitor" (required by "Draft.Monitor_CodeTemplates" via "Draft.Monitor_Code")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
consts
  meval ::
    "nat
     => nat
        => (char list * 'a list) set
           => 'a mformula => 'a option list set list * 'a mformula"
consts
  progress ::
    "(char list * 'a list) trace => 'a MFOTL.formula => nat => nat"
locale future_bounded_mfotl
  fixes \<phi> :: "'a MFOTL.formula"
  assumes "future_bounded_mfotl \<phi>"
locale monitorable_mfotl
  fixes \<phi> :: "'a MFOTL.formula"
  assumes "monitorable_mfotl \<phi>"
Proofs for inductive predicate(s) "wf_mformula"
  Proving monotonicity ...
[| \<tau> \<sigma> i + m < \<tau> \<sigma> ?uu5;
   \<tau> \<sigma> ?uu5 <= \<tau> \<sigma> ?uua5 + m |]
==> \<tau> \<sigma> i + m < \<tau> \<sigma> ?uua5 + m
consts
  msteps0 ::
    "((char list * 'a list) set * nat) list
     => 'a mstate => (nat * 'a option list) set * 'a mstate"
consts
  msteps0_stateless ::
    "((char list * 'a list) set * nat) list
     => 'a mstate => (nat * 'a option list) set"
locale monitorable_mfotl
  fixes \<phi> :: "'a MFOTL.formula"
  assumes "monitorable_mfotl \<phi>"
### theory "Draft.Monitor"
### 4.544s elapsed time, 5.726s cpu time, 1.330s GC time
Loading theory "Draft.Monitor_Code" (required by "Draft.Monitor_CodeTemplates")
generating comparator for type "MFOTL.trm"
deriving "ccompare" instance for type "MFOTL.trm"
derived is_ccompare_trm-lemma
deriving "ceq" instance for type "MFOTL.trm" via "="
derived is_ceq_trm-lemma
use rbt as set_impl for type trm
registered trm in class set_impl
### ISABELLE_OCAMLFIND not set; skipped checking code for OCaml
See theory exports
### theory "Draft.Monitor_Code"
### 4.398s elapsed time, 4.589s cpu time, 0.314s GC time
Loading theory "Draft.Monitor_CodeTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Monitor_CodeTemplates"
### 0.632s elapsed time, 0.801s cpu time, 0.086s GC time
val it = (): unit
