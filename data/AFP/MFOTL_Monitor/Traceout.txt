Loading theory "Draft.Trace" (required by "Draft.TraceTemplates")
Loading theory "Draft.Templates" (required by "Draft.TraceTemplates" via "Draft.ExtrEqs")
Proofs for coinductive predicate(s) "ssorted"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.154s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TraceTemplates")
instantiation
  prefix :: (type) order
  less_eq_prefix == less_eq :: 'a prefix => 'a prefix => bool
  less_prefix == less :: 'a prefix => 'a prefix => bool
### theory "Draft.Trace"
### 0.448s elapsed time, 0.925s cpu time, 0.036s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.551s elapsed time, 0.999s cpu time, 0.104s GC time
Loading theory "Draft.TraceTemplates"
val templateLemmas =
   [("Trace.le_pnil", "pnil <= ?\<pi>",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("Trace.prefix_of_pnil", "prefix_of pnil ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Trace.ex_prefix_of", "EX s. prefix_of ?p s",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Trace.map_\<Gamma>_id", "map_\<Gamma> id ?s = ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Trace.pdrop_0", "pdrop 0 ?\<pi> = ?\<pi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Trace.prefix_of_take_prefix",
     "prefix_of (take_prefix ?i ?\<sigma>) ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Trace.plen_take_prefix", "plen (take_prefix ?i ?\<sigma>) = ?i",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Trace.pts_pmap_\<Gamma>",
     "pts (pmap_\<Gamma> ?f ?\<pi>) = pts ?\<pi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Trace.sincreasing_stl", "sincreasing ?s ==> sincreasing (stl ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Trace.sincreasing_shift",
     "sincreasing ?s ==> sincreasing (?xs @- ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trace.sincreasing_sdrop",
     "sincreasing ?s ==> sincreasing (sdrop ?n ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trace.ssorted_sdrop", "ssorted ?s ==> ssorted (sdrop ?i ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trace.\<tau>_map_\<Gamma>",
     "\<tau> (map_\<Gamma> ?f ?s) ?i = \<tau> ?s ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Trace.sorted_stake", "ssorted ?s ==> sorted (stake ?i ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trace.\<Gamma>_map_\<Gamma>",
     "\<Gamma> (map_\<Gamma> ?f ?s) ?i = ?f (\<Gamma> ?s ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trace.plen_mono", "?\<pi> <= ?\<pi>' ==> plen ?\<pi> <= plen ?\<pi>'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Trace.ex_le_\<tau>", "EX j>=?i. ?x <= \<tau> ?s j",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Trace.map_\<Gamma>_comp",
     "map_\<Gamma> ?g (map_\<Gamma> ?f ?s) = map_\<Gamma> (?g o ?f) ?s",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Trace.ssortedD", "ssorted ?s ==> ?s !! ?i <= stl ?s !! ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Trace.\<tau>_mono", "?i <= ?j ==> \<tau> ?s ?i <= \<tau> ?s ?j",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Trace.prefix_of_pmap_\<Gamma>",
     "prefix_of ?\<pi> ?\<sigma> ==>
      prefix_of (pmap_\<Gamma> ?f ?\<pi>) (map_\<Gamma> ?f ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trace.prefix_of_replace_prefix",
     "prefix_of (pmap_\<Gamma> ?f ?\<pi>) ?\<sigma> ==>
      prefix_of ?\<pi> (replace_prefix ?\<pi> ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Trace.ssorted_siterate",
     "(!!n. n <= ?f n) ==> ssorted (siterate ?f ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Trace.sincreasing_siterate_nat",
     "(!!n. n < ?f n) ==> sincreasing (siterate ?f ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Trace.less_\<tau>D",
     "\<tau> ?\<sigma> ?i < \<tau> ?\<sigma> ?j ==> ?i < ?j",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Trace.ssorted_iff_le_Suc",
     "ssorted ?s = (ALL i. ?s !! i <= ?s !! Suc i)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Trace.stream_eq_iff", "(?s = ?s') = (ALL n. ?s !! n = ?s' !! n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Trace.sincreasingI", "(!!x. EX i. x < ?s !! i) ==> sincreasing ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Trace.prefix_of_antimono",
     "[| ?\<pi> <= ?\<pi>'; prefix_of ?\<pi>' ?s |]
      ==> prefix_of ?\<pi> ?s",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Trace.sincreasing_grD", "sincreasing ?s ==> EX j>?i. ?x < ?s !! j",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Trace.plen_psnoc",
     "last_ts ?\<pi> <= snd ?x ==>
      plen (psnoc ?\<pi> ?x) = plen ?\<pi> + 1",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_hole 0)))),
    ("Trace.ssorted_monoD",
     "[| ssorted ?s; ?i <= ?j |] ==> ?s !! ?i <= ?s !! ?j",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Trace.prefix_of_imp_linear",
     "[| prefix_of ?\<pi> ?\<sigma>; prefix_of ?\<pi>' ?\<sigma> |]
      ==> ?\<pi> <= ?\<pi>' | ?\<pi>' <= ?\<pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Trace.ssorted_iff_mono",
     "ssorted ?s = (ALL i j. i <= j --> ?s !! i <= ?s !! j)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Trace.prefix_of_map_\<Gamma>_D",
     "prefix_of ?\<pi>' (map_\<Gamma> ?f ?\<sigma>) ==>
      EX \<pi>''.
         ?\<pi>' = pmap_\<Gamma> ?f \<pi>'' & prefix_of \<pi>'' ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Trace.ssorted_monoI",
     "ALL i j. i <= j --> ?s !! i <= ?s !! j ==> ssorted ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Trace.prefix_of_pmap_\<Gamma>_D",
     "prefix_of (pmap_\<Gamma> ?f ?\<pi>) ?\<sigma> ==>
      EX \<sigma>'.
         prefix_of ?\<pi> \<sigma>' &
         prefix_of (pmap_\<Gamma> ?f ?\<pi>) (map_\<Gamma> ?f \<sigma>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Trace.map_\<Gamma>_cong",
     "[| ?\<sigma>\<^sub>1 = ?\<sigma>\<^sub>2;
         !!x. ?f\<^sub>1 x = ?f\<^sub>2 x |]
      ==> map_\<Gamma> ?f\<^sub>1 ?\<sigma>\<^sub>1 =
          map_\<Gamma> ?f\<^sub>2 ?\<sigma>\<^sub>2",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Trace.le_\<tau>_less",
     "[| \<tau> ?\<sigma> ?i <= \<tau> ?\<sigma> ?j; ?j < ?i |]
      ==> \<tau> ?\<sigma> ?i = \<tau> ?\<sigma> ?j",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0)),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Trace.ssorted_shift",
     "ssorted (?xs @- ?s) =
      (sorted ?xs & ssorted ?s & (ALL x:set ?xs. ALL y:sset ?s. x <= y))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 7, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty))))),
    ("Trace.\<tau>_prefix_conv",
     "[| prefix_of ?p ?s; prefix_of ?p ?s'; ?i < plen ?p |]
      ==> \<tau> ?s ?i = \<tau> ?s' ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trace.\<Gamma>_prefix_conv",
     "[| prefix_of ?p ?s; prefix_of ?p ?s'; ?i < plen ?p |]
      ==> \<Gamma> ?s ?i = \<Gamma> ?s' ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trace.trace_eqI",
     "[| !!i. \<Gamma> ?\<sigma> i = \<Gamma> ?\<sigma>' i;
         !!i. \<tau> ?\<sigma> i = \<tau> ?\<sigma>' i |]
      ==> ?\<sigma> = ?\<sigma>'",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Trace.map_\<Gamma>_replace_prefix",
     "[| ALL x. ?f (?f x) = ?f x;
         prefix_of (pmap_\<Gamma> ?f ?\<pi>) ?\<sigma> |]
      ==> map_\<Gamma> ?f (replace_prefix ?\<pi> ?\<sigma>) =
          map_\<Gamma> ?f ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Trace.psnoc_inject",
     "[| last_ts ?p <= snd ?x; last_ts ?q <= snd ?y |]
      ==> (psnoc ?p ?x = psnoc ?q ?y) = (?p = ?q & ?x = ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))
             )))),
    ("Trace.prefix_of_psnocE",
     "[| prefix_of (psnoc ?p ?x) ?s; last_ts ?p <= snd ?x;
         [| prefix_of ?p ?s; \<Gamma> ?s (plen ?p) = fst ?x;
            \<tau> ?s (plen ?p) = snd ?x |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 3),
          template_app (template_hole 6, template_var 2)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_var 1)
               )],
          template_implication
           ([template_equation
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 3, template_var 3)),
               template_app (template_hole 2, template_var 2))],
            template_implication
             ([template_equation
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 6, template_var 2))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.TraceTemplates"
### 0.282s elapsed time, 0.370s cpu time, 0.000s GC time
val it = (): unit
