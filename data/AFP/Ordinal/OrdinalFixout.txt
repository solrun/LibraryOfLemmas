Loading theory "Draft.OrdinalDef" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont" via "Draft.OrdinalInduct")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.503s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.870s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.274s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "ord0_leqp"
  Proving monotonicity ...
instantiation
  ord0 :: ord
  less_eq_ord0 == less_eq :: ord0 => ord0 => bool
  less_ord0 == less :: ord0 => ord0 => bool
instantiation
  ordinal :: ord
  less_eq_ordinal == less_eq :: ordinal => ordinal => bool
  less_ordinal == less :: ordinal => ordinal => bool
### theory "Draft.OrdinalDef"
### 0.573s elapsed time, 2.287s cpu time, 0.196s GC time
Loading theory "Draft.OrdinalInduct" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont")
instantiation
  ordinal :: {one,zero}
  zero_ordinal == zero_class.zero :: ordinal
  one_ordinal == one_class.one :: ordinal
consts
  left :: "'a tree => 'a tree"
locale strict_mono
  fixes f :: "'a => 'b"
  assumes "OrdinalInduct.strict_mono f"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  make_mono :: "(nat => ordinal) => nat => nat"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### theory "Draft.OrdinalInduct"
### 0.178s elapsed time, 0.698s cpu time, 0.067s GC time
Loading theory "Draft.OrdinalCont" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec")
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale continuous
  fixes F :: "ordinal => ordinal"
  assumes "continuous F"
locale normal
  fixes F :: "ordinal => ordinal"
  assumes "normal F"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.OrdinalCont"
### 0.093s elapsed time, 0.362s cpu time, 0.069s GC time
Loading theory "Draft.OrdinalRec" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith")
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale porder
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
  assumes "porder (<<)"
locale omega_complete
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
    and lub :: "(nat => 'a) => 'a"
  assumes "omega_complete (<<) lub"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalRec"
### 0.309s elapsed time, 1.083s cpu time, 0.538s GC time
Loading theory "Draft.OrdinalArith" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.OrdinalFix" via "Draft.OrdinalInverse")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  ordinal :: plus
  plus_ordinal == plus :: ordinal => ordinal => ordinal
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.018s elapsed time, 3.863s cpu time, 0.868s GC time
instantiation
  ordinal :: minus
  minus_ordinal == minus :: ordinal => ordinal => ordinal
consts
  flat :: "'a list stream => 'a stream"
instantiation
  ordinal :: times
  times_ordinal == times :: ordinal => ordinal => ordinal
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.OrdinalArith"
### 0.195s elapsed time, 0.649s cpu time, 0.039s GC time
Loading theory "Draft.OrdinalInverse" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.OrdinalFix")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.080s elapsed time, 3.964s cpu time, 0.789s GC time
instantiation
  ordinal :: modulo
  modulo_ordinal == modulo :: ordinal => ordinal => ordinal
  divide_ordinal == divide :: ordinal => ordinal => ordinal
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalInverse"
### 0.162s elapsed time, 0.396s cpu time, 0.079s GC time
Loading theory "Draft.OrdinalFix" (required by "Draft.OrdinalFixMoreTemplates")
consts
  iter :: "nat => ('a => 'a) => 'a => 'a"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalFix"
### 0.066s elapsed time, 0.131s cpu time, 0.000s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.933s elapsed time, 5.704s cpu time, 1.012s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdinalFixMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.109s cpu time, 0.043s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdinalFixMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.457s cpu time, 0.000s GC time
Loading theory "Draft.OrdinalFixMoreTemplates"
val templateLemmas =
   [("OrdinalFix.normal_oDeriv", "normal (oDeriv ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("OrdinalFix.le_oFix", "?a <= oFix ?F ?a",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("OrdinalFix.le_oFix1", "?F ?a <= oFix ?F ?a",
     template_inequation
      (less_equals, template_app (template_var 1, template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalFix.oDeriv_0", "oDeriv ?F 0 = oFix ?F 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("OrdinalFix.mono_oFix", "mono ?F ==> mono (oFix ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("OrdinalFix.zero_less_oFix_eq", "(0 < oFix ?F 0) = (0 < ?F 0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_var 0, template_hole 1)))),
    ("OrdinalFix.oDeriv_increasing",
     "OrdinalCont.continuous ?F ==> ?F ?x <= oDeriv ?F ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalFix.oDeriv_oLimit",
     "oDeriv ?F (oLimit ?f) = oLimit (%n. oDeriv ?F (?f n))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("OrdinalFix.oDeriv_oSuc",
     "oDeriv ?F (oSuc ?x) = oFix ?F (oSuc (oDeriv ?F ?x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("OrdinalFix.oFix_eq_self", "?F ?a = ?a ==> oFix ?F ?a = ?a",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("OrdinalFix.less_oFixI", "?a < ?F ?a ==> ?a < oFix ?F ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_var 0, template_var 1))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OrdinalFix.oDeriv_fixed",
     "normal ?F ==> ?F (oDeriv ?F ?n) = oDeriv ?F ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalFix.range_oDeriv",
     "normal ?F ==> range (oDeriv ?F) = {x. ?F x = x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_hole 2),
         template_app (template_hole 1, t_empty)))),
    ("OrdinalFix.oDeriv_fixedD",
     "[| oDeriv ?F ?x = ?x; normal ?F |] ==> ?F ?x = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_equation
        (template_app (template_var 1, template_var 0), template_var 0))),
    ("OrdinalFix.less_oFix_0D",
     "[| ?x < oFix ?F 0; mono ?F |] ==> ?x < ?F ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_inequation
        (less_than, template_var 1,
         template_app (template_var 0, template_var 1)))),
    ("OrdinalFix.oDeriv_total",
     "[| normal ?F; ?F ?x = ?x |] ==> EX n. ?x = oDeriv ?F n",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_var 1, template_var 0), template_var 0)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdinalFix.oFix_fixed",
     "[| OrdinalCont.continuous ?F; ?a <= ?F ?a |]
      ==> ?F (oFix ?F ?a) = oFix ?F ?a",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalFix.oFix_least",
     "[| mono ?F; ?F ?x = ?x; ?a <= ?x |] ==> oFix ?F ?a <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app (template_var 2, template_var 1), template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("OrdinalFix.less_oFixD",
     "[| ?x < oFix ?F ?a; mono ?F; ?F ?x = ?x |] ==> ?x < ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app (template_var 1, template_var 2), template_var 2)],
       template_inequation (less_than, template_var 2, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.OrdinalFixMoreTemplates"
### 0.335s elapsed time, 0.462s cpu time, 0.049s GC time
val it = (): unit
