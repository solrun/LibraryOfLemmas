Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.OrdinalDef" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.OrdinalInduct")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.617s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.899s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.374s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "ord0_leqp"
  Proving monotonicity ...
instantiation
  ord0 :: ord
  less_eq_ord0 == less_eq :: ord0 => ord0 => bool
  less_ord0 == less :: ord0 => ord0 => bool
instantiation
  ordinal :: ord
  less_eq_ordinal == less_eq :: ordinal => ordinal => bool
  less_ordinal == less :: ordinal => ordinal => bool
### theory "Draft.OrdinalDef"
### 0.577s elapsed time, 2.302s cpu time, 0.232s GC time
Loading theory "Draft.OrdinalInduct" (required by "Draft.OrdinalInductMoreTemplates")
instantiation
  ordinal :: {one,zero}
  zero_ordinal == zero_class.zero :: ordinal
  one_ordinal == one_class.one :: ordinal
locale strict_mono
  fixes f :: "'a => 'b"
  assumes "OrdinalInduct.strict_mono f"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  make_mono :: "(nat => ordinal) => nat => nat"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalInduct"
### 0.177s elapsed time, 0.696s cpu time, 0.079s GC time
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.960s elapsed time, 3.414s cpu time, 0.856s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.034s elapsed time, 3.361s cpu time, 0.817s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.858s elapsed time, 4.824s cpu time, 0.974s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdinalInductMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.109s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdinalInductMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.445s elapsed time, 0.451s cpu time, 0.000s GC time
Loading theory "Draft.OrdinalInductMoreTemplates"
val templateLemmas =
   [("OrdinalInduct.ordinal_0_le", "0 <= ?x",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("OrdinalInduct.ordinal_not_less_0", "~ ?x < 0",
     template_negation
      (template_inequation (less_than, template_var 0, template_hole 0))),
    ("OrdinalInduct.limit_ordinal_not_oSuc", "~ limit_ordinal (oSuc ?p)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("OrdinalInduct.zero_less_oSuc", "0 < oSuc ?x",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("OrdinalInduct.less_oSuc", "?x < oSuc ?x",
     template_inequation
      (less_than, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("OrdinalInduct.oSuc_not_0", "oSuc ?x ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("OrdinalInduct.oLimit_const", "oLimit (%n. ?x) = ?x",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("OrdinalInduct.oLimit_le_oStrictLimit", "oLimit ?f <= oStrictLimit ?f",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("OrdinalInduct.le_oLimit", "?f ?n <= oLimit ?f",
     template_inequation
      (less_equals, template_app (template_var 1, template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("OrdinalInduct.strict_mono_mono",
     "OrdinalInduct.strict_mono ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.ordinal_le_0", "(?x <= 0) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("OrdinalInduct.zero_less_limit_ordinal", "limit_ordinal ?x ==> 0 < ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("OrdinalInduct.strict_mono_limit_ordinal",
     "OrdinalInduct.strict_mono ?f ==> limit_ordinal (oLimit ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("OrdinalInduct.ordinal_neq_0", "(?x ~= 0) = (0 < ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("OrdinalInduct.ordinal_not_0_less", "(~ 0 < ?x) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_equation (template_var 0, template_hole 1))),
    ("OrdinalInduct.less_oSuc0", "(?x < oSuc 0) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_hole 1))
            )],
       template_equation (template_var 0, template_hole 1))),
    ("OrdinalInduct.less_oSuc_eq_le", "(?x < oSuc ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalInduct.oSuc_le_eq_less", "(oSuc ?x <= ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalInduct.oSuc_eq_oSuc", "(oSuc ?x = oSuc ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("OrdinalInduct.oSuc_less_oSuc", "(oSuc ?x < oSuc ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("OrdinalInduct.oSuc_le_oSuc", "(oSuc ?x <= oSuc ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("OrdinalInduct.strict_mono_less_oLimit",
     "OrdinalInduct.strict_mono ?f ==> ?f ?n < oLimit ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_than, template_app (template_var 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("OrdinalInduct.oSuc_leI", "?x < ?y ==> oSuc ?x <= ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("OrdinalInduct.less_oLimitI", "?x < ?f ?n ==> ?x < oLimit ?f",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_var 1, template_var 0))],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("OrdinalInduct.le_oLimitI", "?x <= ?f ?n ==> ?x <= oLimit ?f",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("OrdinalInduct.oSuc_less_limit_ordinal",
     "limit_ordinal ?x ==> (oSuc ?w < ?x) = (?w < ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("OrdinalInduct.less_oLimitD", "?x < oLimit ?f ==> EX n. ?x < ?f n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("OrdinalInduct.oLimit_leI", "ALL n. ?f n <= ?x ==> oLimit ?f <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("OrdinalInduct.limit_ordinal_oLimitI",
     "ALL n. ?f n < oLimit ?f ==> limit_ordinal (oLimit ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0))
           ))),
    ("OrdinalInduct.strict_mono_natI",
     "(!!n. ?f n < ?f (Suc n)) ==> OrdinalInduct.strict_mono ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.mono_natI", "(!!n. ?f n <= ?f (Suc n)) ==> incseq ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.oLimit_shift_mono",
     "incseq ?f ==> oLimit (%n. ?f (n + ?k)) = oLimit ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, template_var 1)))),
    ("OrdinalInduct.strict_mono_cancel_eq",
     "OrdinalInduct.strict_mono ?f ==> (?f ?x = ?f ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_bimplication
        (template_equation
          (template_app (template_var 2, template_var 1),
           template_app (template_var 2, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("OrdinalInduct.strict_mono_cancel_less",
     "OrdinalInduct.strict_mono ?f ==> (?f ?x < ?f ?y) = (?x < ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalInduct.strict_mono_cancel_le",
     "OrdinalInduct.strict_mono ?f ==> (?f ?x <= ?f ?y) = (?x <= ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalInduct.strict_monoD",
     "[| OrdinalInduct.strict_mono ?f; ?A < ?B |] ==> ?f ?A < ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("OrdinalInduct.strict_mono_monoD",
     "[| OrdinalInduct.strict_mono ?f; ?A <= ?B |] ==> ?f ?A <= ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("OrdinalInduct.oLimit_Suc",
     "?f 0 < oLimit ?f ==> oLimit (%n. ?f (Suc n)) = oLimit ?f",
     template_implication
      ([template_inequation
         (less_than, template_app (template_var 0, template_hole 3),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, template_var 0)))),
    ("OrdinalInduct.strict_mono_f_make_mono",
     "ALL n. ?f n < oLimit ?f ==>
      OrdinalInduct.strict_mono (%n. ?f (make_mono ?f n))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdinalInduct.make_mono_less",
     "ALL n. ?f n < oLimit ?f ==> make_mono ?f ?n < make_mono ?f (Suc ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("OrdinalInduct.oLimit_shift",
     "ALL n. ?f n < oLimit ?f ==> oLimit (%n. ?f (n + ?k)) = oLimit ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, template_var 1)))),
    ("OrdinalInduct.oLimit_make_mono_eq",
     "ALL n. ?f n < oLimit ?f ==>
      oLimit (%n. ?f (make_mono ?f n)) = oLimit ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, template_var 0)))),
    ("OrdinalInduct.strict_monoI",
     "(!!A B. A < B ==> ?f A < ?f B) ==> OrdinalInduct.strict_mono ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.less_oLimitE",
     "[| ?x < oLimit ?f; !!n. ?x < ?f n ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.f_make_mono_less",
     "ALL n. ?f n < oLimit ?f ==>
      ?f (make_mono ?f ?n) < ?f (make_mono ?f (Suc ?n))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("OrdinalInduct.limit_ordinalI",
     "[| 0 < ?z; ALL x<?z. oSuc x < ?z |] ==> limit_ordinal ?z",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.le_f_make_mono",
     "[| ALL n. ?f n < oLimit ?f; ?m <= make_mono ?f ?n |]
      ==> ?f ?m <= ?f (make_mono ?f ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("OrdinalInduct.less_oSucE",
     "[| ?x < oSuc ?y; ?x < ?y ==> ?P; ?x = ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_inequation (less_than, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.le_oSucE",
     "[| ?x <= oSuc ?y; ?x <= ?y ==> ?R; ?x = oSuc ?y ==> ?R |] ==> ?R",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.oLimit_eqI",
     "[| !!n. EX m. ?f n <= ?g m; !!n. EX m. ?g n <= ?f m |]
      ==> oLimit ?f = oLimit ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.le_oLimitE",
     "[| ?x <= oLimit ?f; !!n. ?x <= ?f n ==> ?R; ?x = oLimit ?f ==> ?R |]
      ==> ?R",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.oLimit_induct",
     "[| ?P 0; !!x. ?P x ==> ?P (oSuc x);
         !!f. [| OrdinalInduct.strict_mono f; ALL n. ?P (f n) |]
              ==> ?P (oLimit f) |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("OrdinalInduct.ordinal_cases",
     "[| ?a = 0 ==> ?P; !!x. ?a = oSuc x ==> ?P;
         !!f. [| OrdinalInduct.strict_mono f; ?a = oLimit f |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.OrdinalInductMoreTemplates"
### 0.305s elapsed time, 0.450s cpu time, 0.074s GC time
val it = (): unit
