   [("OrdinalOmega.is_normalized2_to_cnf2", "is_normalized2 (to_cnf2 ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("OrdinalOmega.not_limit_ordinal_nat",
     "~ limit_ordinal (ordinal_of_nat ?n)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("OrdinalOmega.nat_less_omega", "ordinal_of_nat ?n < \<omega>",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("OrdinalOmega.nat_le_omega", "ordinal_of_nat ?n <= \<omega>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("OrdinalOmega.additive_principal_omega_exp",
     "additive_principal (\<omega> ** ?x)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("OrdinalOmega.to_cnf_inverse", "from_cnf (to_cnf ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("OrdinalOmega.to_cnf2_inverse", "from_cnf2 (to_cnf2 ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("OrdinalOmega.normalize_cnf_to_cnf",
     "normalize_cnf (to_cnf ?x) = to_cnf ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("OrdinalOmega.from_cnf_normalize_cnf",
     "from_cnf (normalize_cnf ?xs) = from_cnf ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_plus_omega",
     "ordinal_of_nat ?n + \<omega> = \<omega>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("OrdinalOmega.additive_principal_oSuc",
     "additive_principal (oSuc ?a) = (?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OrdinalOmega.oSuc_less_omega",
     "(oSuc ?x < \<omega>) = (?x < \<omega>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("OrdinalOmega.oSuc_plus_omega", "oSuc ?x + \<omega> = ?x + \<omega>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("OrdinalOmega.ordinal_of_nat_eq",
     "(ordinal_of_nat ?x = ordinal_of_nat ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_less",
     "(ordinal_of_nat ?x < ordinal_of_nat ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_le",
     "(ordinal_of_nat ?x <= ordinal_of_nat ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalOmega.ordinal_plus_times_omega",
     "?x + ?x * \<omega> = ?x * \<omega>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("OrdinalOmega.additive_principal_times_omega",
     "0 < ?x ==> additive_principal (?x * \<omega>)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("OrdinalOmega.additive_principal_iff",
     "additive_principal ?a = (EX x. ?a = \<omega> ** x)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("OrdinalOmega.ordinal_of_nat_plus",
     "ordinal_of_nat ?x + ordinal_of_nat ?y = ordinal_of_nat (?x + ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalOmega.ordinal_of_nat_times",
     "ordinal_of_nat ?x * ordinal_of_nat ?y = ordinal_of_nat (?x * ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalOmega.ordinal_of_nat_exp",
     "ordinal_of_nat ?x ** ordinal_of_nat ?y = ordinal_of_nat (?x ^ ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalOmega.less_omega_exp",
     "?x < \<epsilon>\<^sub>0 ==> ?x < \<omega> ** ?x",
     template_implication
      ([template_inequation (less_than, template_var 0, template_hole 2)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("OrdinalOmega.additive_principal_oLimit",
     "ALL n. additive_principal (?f n) ==> additive_principal (oLimit ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("OrdinalOmega.ordinal_plus_absorb_iff",
     "(?x + ?y = ?y) = (?x * \<omega> <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("OrdinalOmega.ordinal_less_plusL_iff",
     "(?y < ?x + ?y) = (?y < ?x * \<omega>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("OrdinalOmega.oSuc_plus_ordinal_of_nat",
     "oSuc ?x + ordinal_of_nat ?n = oSuc (?x + ordinal_of_nat ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("OrdinalOmega.ordinal_of_nat_times_omega",
     "0 < ?k ==> ordinal_of_nat ?k * \<omega> = \<omega>",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0),
         template_hole 0))),
    ("OrdinalOmega.less_omegaD",
     "?x < \<omega> ==> EX n. ?x = ordinal_of_nat n",
     template_implication
      ([template_inequation (less_than, template_var 0, template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("OrdinalOmega.omega_leI",
     "ALL n. ordinal_of_nat n <= ?x ==> \<omega> <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_of_ordinal",
     "?x < \<omega> ==> ordinal_of_nat (inv ordinal_of_nat ?x) = ?x",
     template_implication
      ([template_inequation (less_than, template_var 0, template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 2),
             template_var 0)),
         template_var 0))),
    ("OrdinalOmega.ordinal_less_plusL",
     "?y < ?x * \<omega> ==> ?y < ?x + ?y",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OrdinalOmega.ordinal_plus_absorb",
     "?x * \<omega> <= ?y ==> ?x + ?y = ?y",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_hole 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("OrdinalOmega.to_cnf_eq_Cons",
     "to_cnf ?x = ?a # ?list ==> ?a = oLog \<omega> ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 2)))),
    ("OrdinalOmega.cnf_lemma",
     "0 < ?x ==> ?x - \<omega> ** oLog \<omega> ?x < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0))),
         template_var 0))),
    ("OrdinalOmega.cnf2_lemma",
     "0 < ?x ==> ?x mod \<omega> ** oLog \<omega> ?x < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0))),
         template_var 0))),
    ("OrdinalOmega.less_ordinal_of_nat",
     "(?x < ordinal_of_nat ?n) = (EX m. ?x = ordinal_of_nat m & m < ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OrdinalOmega.le_ordinal_of_nat",
     "(?x <= ordinal_of_nat ?n) = (EX m. ?x = ordinal_of_nat m & m <= ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OrdinalOmega.to_cnf2_eq_Cons",
     "to_cnf2 ?x = (?a, ?b) # ?list ==> ?a = oLog \<omega> ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 3)))),
    ("OrdinalOmega.oLog_omega_less",
     "[| 0 < ?x; ?x < \<epsilon>\<^sub>0 |] ==> oLog \<omega> ?x < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 2)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 0))),
    ("OrdinalOmega.absorb_omega_exp2",
     "?a < ?b ==> \<omega> ** ?a + \<omega> ** ?b = \<omega> ** ?b",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("OrdinalOmega.absorb_omega_exp",
     "?x < \<omega> ** ?a ==> ?x + \<omega> ** ?a = \<omega> ** ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("OrdinalOmega.to_cnf_not_0",
     "0 < ?x ==>
      to_cnf ?x =
      oLog \<omega> ?x # to_cnf (?x - \<omega> ** oLog \<omega> ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_hole 2),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)))))))),
    ("OrdinalOmega.additive_principal_intro2",
     "[| 0 < ?a; !!x y. [| x < ?a; y < ?a |] ==> x + y < ?a |]
      ==> additive_principal ?a",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalOmega.to_cnf2_not_0",
     "0 < ?x ==>
      to_cnf2 ?x =
      (oLog \<omega> ?x,
       inv ordinal_of_nat (?x div \<omega> ** oLog \<omega> ?x)) #
      to_cnf2 (?x mod \<omega> ** oLog \<omega> ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 0)],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_hole 6),
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_var 0)))))),
           template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 6),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))))))]
