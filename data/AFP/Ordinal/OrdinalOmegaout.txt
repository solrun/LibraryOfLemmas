Loading theory "Draft.OrdinalDef" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont" via "Draft.OrdinalInduct")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.538s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 1.002s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "ord0_leqp"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.438s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.ExtrEqs")
instantiation
  ord0 :: ord
  less_eq_ord0 == less_eq :: ord0 => ord0 => bool
  less_ord0 == less :: ord0 => ord0 => bool
instantiation
  ordinal :: ord
  less_eq_ordinal == less_eq :: ordinal => ordinal => bool
  less_ordinal == less :: ordinal => ordinal => bool
### theory "Draft.OrdinalDef"
### 0.545s elapsed time, 2.167s cpu time, 0.200s GC time
Loading theory "Draft.OrdinalInduct" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont")
instantiation
  ordinal :: {one,zero}
  zero_ordinal == zero_class.zero :: ordinal
  one_ordinal == one_class.one :: ordinal
locale strict_mono
  fixes f :: "'a => 'b"
  assumes "OrdinalInduct.strict_mono f"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  make_mono :: "(nat => ordinal) => nat => nat"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalInduct"
### 0.179s elapsed time, 0.709s cpu time, 0.082s GC time
Loading theory "Draft.OrdinalCont" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec")
locale continuous
  fixes F :: "ordinal => ordinal"
  assumes "continuous F"
locale normal
  fixes F :: "ordinal => ordinal"
  assumes "normal F"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.OrdinalCont"
### 0.072s elapsed time, 0.279s cpu time, 0.000s GC time
Loading theory "Draft.OrdinalRec" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale porder
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
  assumes "porder (<<)"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale omega_complete
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
    and lub :: "(nat => 'a) => 'a"
  assumes "omega_complete (<<) lub"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.OrdinalRec"
### 0.157s elapsed time, 0.612s cpu time, 0.083s GC time
Loading theory "Draft.OrdinalArith" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse")
Found termination order: "size <*mlex*> {}"
instantiation
  ordinal :: plus
  plus_ordinal == plus :: ordinal => ordinal => ordinal
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  ordinal :: minus
  minus_ordinal == minus :: ordinal => ordinal => ordinal
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
instantiation
  ordinal :: times
  times_ordinal == times :: ordinal => ordinal => ordinal
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.881s cpu time, 0.945s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.OrdinalArith"
### 0.378s elapsed time, 1.301s cpu time, 0.623s GC time
Loading theory "Draft.OrdinalInverse" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.OrdinalOmega" via "Draft.OrdinalFix")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  ordinal :: modulo
  modulo_ordinal == modulo :: ordinal => ordinal => ordinal
  divide_ordinal == divide :: ordinal => ordinal => ordinal
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.134s elapsed time, 4.158s cpu time, 0.964s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalInverse"
### 0.181s elapsed time, 0.532s cpu time, 0.101s GC time
Loading theory "Draft.OrdinalFix" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.OrdinalOmega")
consts
  iter :: "nat => ('a => 'a) => 'a => 'a"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalFix"
### 0.069s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.OrdinalOmega" (required by "Draft.OrdinalOmegaMoreTemplates")
consts
  ordinal_of_nat :: "nat => ordinal"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale additive_principal
  fixes a :: "ordinal"
  assumes "additive_principal a"
Found termination order: "size <*mlex*> {}"
consts
  from_cnf :: "ordinal list => ordinal"
### Rewrite rule not in simpset:
### Wellfounded.accp to_cnf_rel ?x1 ==>
### to_cnf ?x1 ==
### if ?x1 = 0 then []
### else oLog \<omega> ?x1 # to_cnf (?x1 - \<omega> ** oLog \<omega> ?x1)
consts
  normalize_cnf :: "'a list => 'a list"
consts
  from_cnf2 :: "(ordinal * nat) list => ordinal"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp to_cnf2_rel ?x1 ==>
### to_cnf2 ?x1 ==
### if ?x1 = 0 then []
### else (oLog \<omega> ?x1,
###       inv ordinal_of_nat (?x1 div \<omega> ** oLog \<omega> ?x1)) #
###      to_cnf2 (?x1 mod \<omega> ** oLog \<omega> ?x1)
consts
  is_normalized2 :: "('a * 'b) list => bool"
### theory "Draft.OrdinalOmega"
### 0.245s elapsed time, 0.533s cpu time, 0.090s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.990s elapsed time, 6.147s cpu time, 1.194s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdinalOmegaMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdinalOmegaMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.509s cpu time, 0.064s GC time
Loading theory "Draft.OrdinalOmegaMoreTemplates"
val templateLemmas =
   [("OrdinalOmega.is_normalized2_to_cnf2", "is_normalized2 (to_cnf2 ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("OrdinalOmega.not_limit_ordinal_nat",
     "~ limit_ordinal (ordinal_of_nat ?n)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("OrdinalOmega.nat_less_omega", "ordinal_of_nat ?n < \<omega>",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("OrdinalOmega.nat_le_omega", "ordinal_of_nat ?n <= \<omega>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("OrdinalOmega.additive_principal_omega_exp",
     "additive_principal (\<omega> ** ?x)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("OrdinalOmega.to_cnf_inverse", "from_cnf (to_cnf ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("OrdinalOmega.to_cnf2_inverse", "from_cnf2 (to_cnf2 ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("OrdinalOmega.normalize_cnf_to_cnf",
     "normalize_cnf (to_cnf ?x) = to_cnf ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("OrdinalOmega.from_cnf_normalize_cnf",
     "from_cnf (normalize_cnf ?xs) = from_cnf ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_plus_omega",
     "ordinal_of_nat ?n + \<omega> = \<omega>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("OrdinalOmega.additive_principal_oSuc",
     "additive_principal (oSuc ?a) = (?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OrdinalOmega.oSuc_less_omega",
     "(oSuc ?x < \<omega>) = (?x < \<omega>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("OrdinalOmega.oSuc_plus_omega", "oSuc ?x + \<omega> = ?x + \<omega>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("OrdinalOmega.ordinal_of_nat_eq",
     "(ordinal_of_nat ?x = ordinal_of_nat ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_less",
     "(ordinal_of_nat ?x < ordinal_of_nat ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_le",
     "(ordinal_of_nat ?x <= ordinal_of_nat ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalOmega.ordinal_plus_times_omega",
     "?x + ?x * \<omega> = ?x * \<omega>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("OrdinalOmega.additive_principal_times_omega",
     "0 < ?x ==> additive_principal (?x * \<omega>)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("OrdinalOmega.additive_principal_iff",
     "additive_principal ?a = (EX x. ?a = \<omega> ** x)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("OrdinalOmega.ordinal_of_nat_plus",
     "ordinal_of_nat ?x + ordinal_of_nat ?y = ordinal_of_nat (?x + ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalOmega.ordinal_of_nat_times",
     "ordinal_of_nat ?x * ordinal_of_nat ?y = ordinal_of_nat (?x * ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalOmega.ordinal_of_nat_exp",
     "ordinal_of_nat ?x ** ordinal_of_nat ?y = ordinal_of_nat (?x ^ ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalOmega.less_omega_exp",
     "?x < \<epsilon>\<^sub>0 ==> ?x < \<omega> ** ?x",
     template_implication
      ([template_inequation (less_than, template_var 0, template_hole 2)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("OrdinalOmega.additive_principal_oLimit",
     "ALL n. additive_principal (?f n) ==> additive_principal (oLimit ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("OrdinalOmega.ordinal_plus_absorb_iff",
     "(?x + ?y = ?y) = (?x * \<omega> <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("OrdinalOmega.ordinal_less_plusL_iff",
     "(?y < ?x + ?y) = (?y < ?x * \<omega>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("OrdinalOmega.oSuc_plus_ordinal_of_nat",
     "oSuc ?x + ordinal_of_nat ?n = oSuc (?x + ordinal_of_nat ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("OrdinalOmega.ordinal_of_nat_times_omega",
     "0 < ?k ==> ordinal_of_nat ?k * \<omega> = \<omega>",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0),
         template_hole 0))),
    ("OrdinalOmega.less_omegaD",
     "?x < \<omega> ==> EX n. ?x = ordinal_of_nat n",
     template_implication
      ([template_inequation (less_than, template_var 0, template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("OrdinalOmega.omega_leI",
     "ALL n. ordinal_of_nat n <= ?x ==> \<omega> <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("OrdinalOmega.ordinal_of_nat_of_ordinal",
     "?x < \<omega> ==> ordinal_of_nat (inv ordinal_of_nat ?x) = ?x",
     template_implication
      ([template_inequation (less_than, template_var 0, template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 2),
             template_var 0)),
         template_var 0))),
    ("OrdinalOmega.ordinal_less_plusL",
     "?y < ?x * \<omega> ==> ?y < ?x + ?y",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OrdinalOmega.ordinal_plus_absorb",
     "?x * \<omega> <= ?y ==> ?x + ?y = ?y",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_hole 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("OrdinalOmega.to_cnf_eq_Cons",
     "to_cnf ?x = ?a # ?list ==> ?a = oLog \<omega> ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 2)))),
    ("OrdinalOmega.cnf_lemma",
     "0 < ?x ==> ?x - \<omega> ** oLog \<omega> ?x < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0))),
         template_var 0))),
    ("OrdinalOmega.cnf2_lemma",
     "0 < ?x ==> ?x mod \<omega> ** oLog \<omega> ?x < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0))),
         template_var 0))),
    ("OrdinalOmega.less_ordinal_of_nat",
     "(?x < ordinal_of_nat ?n) = (EX m. ?x = ordinal_of_nat m & m < ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OrdinalOmega.le_ordinal_of_nat",
     "(?x <= ordinal_of_nat ?n) = (EX m. ?x = ordinal_of_nat m & m <= ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OrdinalOmega.to_cnf2_eq_Cons",
     "to_cnf2 ?x = (?a, ?b) # ?list ==> ?a = oLog \<omega> ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 3)))),
    ("OrdinalOmega.oLog_omega_less",
     "[| 0 < ?x; ?x < \<epsilon>\<^sub>0 |] ==> oLog \<omega> ?x < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 2)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 0))),
    ("OrdinalOmega.absorb_omega_exp2",
     "?a < ?b ==> \<omega> ** ?a + \<omega> ** ?b = \<omega> ** ?b",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("OrdinalOmega.absorb_omega_exp",
     "?x < \<omega> ** ?a ==> ?x + \<omega> ** ?a = \<omega> ** ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("OrdinalOmega.to_cnf_not_0",
     "0 < ?x ==>
      to_cnf ?x =
      oLog \<omega> ?x # to_cnf (?x - \<omega> ** oLog \<omega> ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_hole 2),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)))))))),
    ("OrdinalOmega.additive_principal_intro2",
     "[| 0 < ?a; !!x y. [| x < ?a; y < ?a |] ==> x + y < ?a |]
      ==> additive_principal ?a",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalOmega.to_cnf2_not_0",
     "0 < ?x ==>
      to_cnf2 ?x =
      (oLog \<omega> ?x,
       inv ordinal_of_nat (?x div \<omega> ** oLog \<omega> ?x)) #
      to_cnf2 (?x mod \<omega> ** oLog \<omega> ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 0)],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_hole 6),
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_var 0)))))),
           template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 6),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))))))]:
   (string * thm * template) list
### theory "Draft.OrdinalOmegaMoreTemplates"
### 0.330s elapsed time, 0.458s cpu time, 0.057s GC time
val it = (): unit
