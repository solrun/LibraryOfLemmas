Loading theory "Draft.OrdinalDef" (required by "Draft.OrdinalDefMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdinalDefMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdinalDefMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdinalDefMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.546s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OrdinalDefMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.859s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdinalDefMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.261s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OrdinalDefMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "ord0_leqp"
  Proving monotonicity ...
instantiation
  ord0 :: ord
  less_eq_ord0 == less_eq :: ord0 => ord0 => bool
  less_ord0 == less :: ord0 => ord0 => bool
instantiation
  ordinal :: ord
  less_eq_ordinal == less_eq :: ordinal => ordinal => bool
  less_ordinal == less :: ordinal => ordinal => bool
### theory "Draft.OrdinalDef"
### 0.536s elapsed time, 2.131s cpu time, 0.187s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.757s elapsed time, 2.595s cpu time, 0.277s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.987s elapsed time, 3.033s cpu time, 0.678s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.813s elapsed time, 4.478s cpu time, 0.841s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdinalDefMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdinalDefMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.456s elapsed time, 0.496s cpu time, 0.047s GC time
Loading theory "Draft.OrdinalDefMoreTemplates"
val templateLemmas =
   [("OrdinalDef.ord0_order_refl", "?x <= ?x",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("OrdinalDef.oZero_least", "oZero <= ?x",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("OrdinalDef.ordinal_order_refl", "?x <= ?x",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("OrdinalDef.less_ord0_LimI", "?f ?n < ord0_Lim ?f",
     template_inequation
      (less_than, template_app (template_var 1, template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("OrdinalDef.oStrictLimit_ub", "?f ?n < oStrictLimit ?f",
     template_inequation
      (less_than, template_app (template_var 1, template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("OrdinalDef.ord0_leq_refl", "(?x, ?x) : ord0_leq",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 0)),
           template_hole 0)
         )),
    ("OrdinalDef.ord0_linear", "?x <= ?y | ?y <= ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("OrdinalDef.ordinal_linear", "?x <= ?y | ?y <= ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("OrdinalDef.mem_ord0rel_Image", "?x : ord0rel `` {?x}",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("OrdinalDef.ord0_less_imp_le", "?x < ?y ==> ?x <= ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("OrdinalDef.some_ord0rel", "(?x, SOME y. (?x, y) : ord0rel) : ord0rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, t_empty))),
           template_hole 0)
         )),
    ("OrdinalDef.ord0_order_less_le", "(?x < ?y) = (?x <= ?y & ~ ?y <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("OrdinalDef.ordinal_order_less_le_not_le",
     "(?x < ?y) = (?x <= ?y & ~ ?y <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("OrdinalDef.less_ord0_LimD", "?x < ord0_Lim ?f ==> EX n. ?x <= ?f n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdinalDef.less_oStrictLimitD",
     "?x < oStrictLimit ?f ==> EX n. ?x <= ?f n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdinalDef.oStrictLimit_lub",
     "ALL n. ?f n < ?x ==> oStrictLimit ?f <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("OrdinalDef.Rep_Abs_ord0rel",
     "Rep_ordinal (Abs_ordinal (ord0rel `` {?x})) = ord0rel `` {?x}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("OrdinalDef.ord0_less_trans", "[| ?x < ?y; ?y < ?z |] ==> ?x < ?z",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("OrdinalDef.ord0_less_le_trans", "[| ?x < ?y; ?y <= ?z |] ==> ?x < ?z",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("OrdinalDef.rev_ord0_le_less_trans",
     "[| ?y < ?z; ?x <= ?y |] ==> ?x < ?z",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation (less_than, template_var 0, template_var 1))),
    ("OrdinalDef.ord0_le_less_trans", "[| ?x <= ?y; ?y < ?z |] ==> ?x < ?z",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("OrdinalDef.ord0_order_trans", "[| ?x <= ?y; ?y <= ?z |] ==> ?x <= ?z",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("OrdinalDef.ordinal_order_antisym",
     "[| ?x <= ?y; ?y <= ?x |] ==> ?x = ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation (template_var 1, template_var 0))),
    ("OrdinalDef.ordinal_order_trans",
     "[| ?x <= ?y; ?y <= ?z |] ==> ?x <= ?z",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("OrdinalDef.ord0relD", "(?x, ?y) : ord0rel ==> ?x <= ?y & ?y <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("OrdinalDef.ord0_Lim_le",
     "ALL n. ?f n <= ?g n ==> ord0_Lim ?f <= ord0_Lim ?g",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("OrdinalDef.ord0_leI", "ALL a<?x. a < ?y ==> ?x <= ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("OrdinalDef.ord0_linear_lemma",
     "?m < ?n | ?n < ?m | ?m <= ?n & ?n <= ?m",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))))
         )),
    ("OrdinalDef.Abs_ordinal_cases2",
     "(!!z. ?x = Abs_ordinal (ord0rel `` {z}) ==> ?P) ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("OrdinalDef.Abs_ordinal_less",
     "(Abs_ordinal (ord0rel `` {?x}) < Abs_ordinal (ord0rel `` {?y})) =
      (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalDef.Abs_ordinal_le",
     "(Abs_ordinal (ord0rel `` {?x}) <= Abs_ordinal (ord0rel `` {?y})) =
      (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalDef.Abs_ordinal_oStrictLimit",
     "Abs_ordinal (ord0rel `` {ord0_Lim ?f}) =
      oStrictLimit (%n. Abs_ordinal (ord0rel `` {?f n}))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1))),
       template_app (template_hole 0, t_empty))),
    ("OrdinalDef.ord0_Lim_ord0rel",
     "ALL n. (?f n, ?g n) : ord0rel ==>
      (ord0_Lim ?f, ord0_Lim ?g) : ord0rel",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 0, template_var 0))),
             template_hole 1)
           ))),
    ("OrdinalDef.ord0_leq_trans",
     "[| (?x, ?y) : ord0_leq; (?y, ?z) : ord0_leq |]
      ==> (?x, ?z) : ord0_leq",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_hole 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OrdinalDef.ord0_precD",
     "(?x, ?y) : ord0_prec ==> EX f n. ?x = f n & ?y = ord0_Lim f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_hole 5)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("OrdinalDef.oStrictLimit_induct",
     "[| ?P oZero; !!f. ALL n. ?P (f n) ==> ?P (oStrictLimit f) |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("OrdinalDef.Abs_ordinal_eq",
     "(Abs_ordinal (ord0rel `` {?x}) = Abs_ordinal (ord0rel `` {?y})) =
      (?x <= ?y & ?y <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OrdinalDef.ord0_prec_induct",
     "(!!x. ALL y. (y, x) : ord0_prec^+ --> ?P y ==> ?P x) ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("OrdinalDef.ord0_leqD",
     "[| (?x, ?y) : ord0_leq; (?a, ?x) : ord0_prec^+ |]
      ==> (?a, ?y) : ord0_leq O ord0_prec^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 2)),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_app (template_hole 2, template_hole 1)))
           ))),
    ("OrdinalDef.ord0_leqI",
     "ALL a. (a, ?x) : ord0_prec^+ --> (a, ?y) : ord0_leq O ord0_prec^+ ==>
      (?x, ?y) : ord0_leq",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OrdinalDef.ord0_less_induct",
     "(!!x. ALL y. (y, x) : {(x, y). x < y} --> ?P y ==> ?P x) ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.OrdinalDefMoreTemplates"
### 0.275s elapsed time, 0.354s cpu time, 0.000s GC time
val it = (): unit
