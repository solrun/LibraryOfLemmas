Loading theory "Draft.OrdinalDef" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont" via "Draft.OrdinalInduct")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.583s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.899s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.353s cpu time, 0.117s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "ord0_leqp"
  Proving monotonicity ...
instantiation
  ord0 :: ord
  less_eq_ord0 == less_eq :: ord0 => ord0 => bool
  less_ord0 == less :: ord0 => ord0 => bool
instantiation
  ordinal :: ord
  less_eq_ordinal == less_eq :: ordinal => ordinal => bool
  less_ordinal == less :: ordinal => ordinal => bool
### theory "Draft.OrdinalDef"
### 0.581s elapsed time, 2.320s cpu time, 0.199s GC time
Loading theory "Draft.OrdinalInduct" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont")
instantiation
  ordinal :: {one,zero}
  zero_ordinal == zero_class.zero :: ordinal
  one_ordinal == one_class.one :: ordinal
consts
  left :: "'a tree => 'a tree"
locale strict_mono
  fixes f :: "'a => 'b"
  assumes "OrdinalInduct.strict_mono f"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  make_mono :: "(nat => ordinal) => nat => nat"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.OrdinalInduct"
### 0.177s elapsed time, 0.696s cpu time, 0.069s GC time
Loading theory "Draft.OrdinalCont" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale continuous
  fixes F :: "ordinal => ordinal"
  assumes "continuous F"
locale normal
  fixes F :: "ordinal => ordinal"
  assumes "normal F"
### theory "Draft.OrdinalCont"
### 0.092s elapsed time, 0.358s cpu time, 0.070s GC time
Loading theory "Draft.OrdinalRec" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.OrdinalInverse" via "Draft.OrdinalArith")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale porder
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
  assumes "porder (<<)"
locale omega_complete
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
    and lub :: "(nat => 'a) => 'a"
  assumes "omega_complete (<<) lub"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.OrdinalRec"
### 0.311s elapsed time, 1.096s cpu time, 0.544s GC time
Loading theory "Draft.OrdinalArith" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.OrdinalInverse")
instantiation
  ordinal :: plus
  plus_ordinal == plus :: ordinal => ordinal => ordinal
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.019s elapsed time, 3.867s cpu time, 0.906s GC time
instantiation
  ordinal :: minus
  minus_ordinal == minus :: ordinal => ordinal => ordinal
consts
  flat :: "'a list stream => 'a stream"
instantiation
  ordinal :: times
  times_ordinal == times :: ordinal => ordinal => ordinal
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.OrdinalArith"
### 0.197s elapsed time, 0.660s cpu time, 0.062s GC time
Loading theory "Draft.OrdinalInverse" (required by "Draft.OrdinalInverseMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.118s elapsed time, 4.097s cpu time, 0.946s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  ordinal :: modulo
  modulo_ordinal == modulo :: ordinal => ordinal => ordinal
  divide_ordinal == divide :: ordinal => ordinal => ordinal
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalInverse"
### 0.169s elapsed time, 0.441s cpu time, 0.118s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.917s elapsed time, 5.651s cpu time, 1.116s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdinalInverseMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.114s cpu time, 0.052s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdinalInverseMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.444s elapsed time, 0.451s cpu time, 0.000s GC time
Loading theory "Draft.OrdinalInverseMoreTemplates"
val templateLemmas =
   [("OrdinalInverse.ordinal_mono_oLog", "mono (oLog ?b)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("OrdinalInverse.ordinal_1_dvd", "oSuc 0 dvd ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("OrdinalInverse.ordinal_oLog_base_0", "oLog 0 ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("OrdinalInverse.ordinal_oLog_0", "oLog ?b 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("OrdinalInverse.ordinal_0_div", "0 div ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("OrdinalInverse.ordinal_div_0", "?x div 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("OrdinalInverse.ordinal_0_mod", "0 mod ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("OrdinalInverse.ordinal_mod_0", "?x mod 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("OrdinalInverse.ordinal_mod_self", "?x mod ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("OrdinalInverse.ordinal_oLog_decreasing", "oLog ?b ?x <= ?x",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 0)),
    ("OrdinalInverse.ordinal_div_decreasing", "?x div ?y <= ?x",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("OrdinalInverse.ordinal_mono_div", "mono (%x. x div ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("OrdinalInverse.ordinal_oLog_base_1", "oLog (oSuc 0) ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_hole 0)),
    ("OrdinalInverse.ordinal_div_1", "?x div oSuc 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("OrdinalInverse.ordinal_mod_1", "?x mod oSuc 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("OrdinalInverse.ordinal_times_div_le", "?y * (?x div ?y) <= ?x",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 0)),
    ("OrdinalInverse.ordinal_dvd_mod", "(?y dvd ?x) = (?x mod ?y = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("OrdinalInverse.ordinal_div_self", "0 < ?x ==> ?x div ?x = 1",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 0),
         template_hole 0))),
    ("OrdinalInverse.ordinal_mod_less", "0 < ?y ==> ?x mod ?y < ?y",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("OrdinalInverse.ordinal_div_greater", "?x < ?y ==> ?x div ?y = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("OrdinalInverse.ordinal_mod_greater", "?x < ?y ==> ?x mod ?y = ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("OrdinalInverse.ordinal_div_plus_mod",
     "?y * (?x div ?y) + ?x mod ?y = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 0)),
    ("OrdinalInverse.ordinal_div_monoL",
     "?x <= ?x' ==> ?x div ?y <= ?x' div ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalInverse.ordinal_oLog_monoR",
     "?x <= ?y ==> oLog ?b ?x <= oLog ?b ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OrdinalInverse.ordinal_dvd_times_div",
     "?y dvd ?x ==> ?y * (?x div ?y) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("OrdinalInverse.ordinal_oLog_self",
     "oSuc 0 < ?b ==> oLog ?b ?b = oSuc 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_hole 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 0),
         template_app (template_hole 3, template_hole 2)))),
    ("OrdinalInverse.ordinal_div_less", "?x < ?y * ?z ==> ?x div ?y < ?z",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("OrdinalInverse.ordinal_dvd_oLimit",
     "ALL n. ?x dvd ?f n ==> ?x dvd oLimit ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("OrdinalInverse.ordinal_oLog_exp",
     "oSuc 0 < ?b ==> oLog ?b (?b ** ?x) = ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("OrdinalInverse.ordinal_less_times_div_plus",
     "0 < ?y ==> ?x < ?y * (?x div ?y) + ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_var 1)))),
    ("OrdinalInverse.ordinal_less_exp_oLog",
     "oSuc 0 < ?b ==> ?x < ?b ** oLog ?b ?x * ?b",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 1)))),
    ("OrdinalInverse.ordinal_div_exp_oLog_less",
     "oSuc 0 < ?b ==> ?x div ?b ** oLog ?b ?x < ?b",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 1))),
    ("OrdinalInverse.ordinal_le_div",
     "[| 0 < ?y; ?y * ?z <= ?x |] ==> ?z <= ?x div ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("OrdinalInverse.ordinal_exp_oLog_le",
     "[| 0 < ?x; oSuc 0 < ?b |] ==> ?b ** oLog ?b ?x <= ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation
         (less_than, template_app (template_hole 3, template_hole 4),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("OrdinalInverse.ordinal_le_oLog",
     "[| oSuc 0 < ?b; ?b ** ?y <= ?x |] ==> ?y <= oLog ?b ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("OrdinalInverse.ordinal_divI",
     "[| ?x = ?y * ?q + ?r; ?r < ?y |] ==> ?x div ?y = ?q",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1)),
            template_var 0)),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 1))),
    ("OrdinalInverse.ordinal_modI",
     "[| ?x = ?y * ?q + ?r; ?r < ?y |] ==> ?x mod ?y = ?r",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1)),
            template_var 0)),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("OrdinalInverse.ordinal_oLogI",
     "[| ?b ** ?y <= ?x; ?x < ?b ** ?y * ?b |] ==> oLog ?b ?x = ?y",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1)),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("OrdinalInverse.ordinal_oLog_less",
     "[| 0 < ?x; oSuc 0 < ?b; ?x < ?b ** ?y |] ==> oLog ?b ?x < ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_inequation
         (less_than, template_app (template_hole 2, template_hole 3),
          template_var 1),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("OrdinalInverse.oInv_uniq",
     "[| mono ?F; ?F ?x <= ?a & ?a < ?F (oSuc ?x);
         ?F ?y <= ?a & ?a < ?F (oSuc ?y) |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_var 3, template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_var 3,
                  template_app (template_hole 1, template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_var 3, template_var 0)),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_var 3,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_equation (template_var 2, template_var 0))),
    ("OrdinalInverse.ordinal_oLogI2",
     "[| oSuc 0 < ?b; ?x = ?b ** ?y * ?q + ?r; 0 < ?q; ?q < ?b;
         ?r < ?b ** ?y |]
      ==> oLog ?b ?x = ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_var 4),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 2)),
                template_var 1)),
            template_var 0)),
        template_inequation (less_than, template_hole 5, template_var 1),
        template_inequation (less_than, template_var 1, template_var 4),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 1, template_var 4),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 3),
         template_var 2)))]:
   (string * thm * template) list
### theory "Draft.OrdinalInverseMoreTemplates"
### 0.328s elapsed time, 0.455s cpu time, 0.072s GC time
val it = (): unit
