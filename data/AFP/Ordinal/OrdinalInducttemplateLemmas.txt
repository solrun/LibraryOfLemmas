   [("OrdinalInduct.ordinal_0_le", "0 <= ?x",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("OrdinalInduct.ordinal_not_less_0", "~ ?x < 0",
     template_negation
      (template_inequation (less_than, template_var 0, template_hole 0))),
    ("OrdinalInduct.limit_ordinal_not_oSuc", "~ limit_ordinal (oSuc ?p)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("OrdinalInduct.zero_less_oSuc", "0 < oSuc ?x",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("OrdinalInduct.less_oSuc", "?x < oSuc ?x",
     template_inequation
      (less_than, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("OrdinalInduct.oSuc_not_0", "oSuc ?x ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("OrdinalInduct.oLimit_const", "oLimit (%n. ?x) = ?x",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("OrdinalInduct.oLimit_le_oStrictLimit", "oLimit ?f <= oStrictLimit ?f",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("OrdinalInduct.le_oLimit", "?f ?n <= oLimit ?f",
     template_inequation
      (less_equals, template_app (template_var 1, template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("OrdinalInduct.strict_mono_mono",
     "OrdinalInduct.strict_mono ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.ordinal_le_0", "(?x <= 0) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("OrdinalInduct.zero_less_limit_ordinal", "limit_ordinal ?x ==> 0 < ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("OrdinalInduct.strict_mono_limit_ordinal",
     "OrdinalInduct.strict_mono ?f ==> limit_ordinal (oLimit ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("OrdinalInduct.ordinal_neq_0", "(?x ~= 0) = (0 < ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("OrdinalInduct.ordinal_not_0_less", "(~ 0 < ?x) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_equation (template_var 0, template_hole 1))),
    ("OrdinalInduct.less_oSuc0", "(?x < oSuc 0) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_hole 1))
            )],
       template_equation (template_var 0, template_hole 1))),
    ("OrdinalInduct.less_oSuc_eq_le", "(?x < oSuc ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalInduct.oSuc_le_eq_less", "(oSuc ?x <= ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OrdinalInduct.oSuc_eq_oSuc", "(oSuc ?x = oSuc ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("OrdinalInduct.oSuc_less_oSuc", "(oSuc ?x < oSuc ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("OrdinalInduct.oSuc_le_oSuc", "(oSuc ?x <= oSuc ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("OrdinalInduct.strict_mono_less_oLimit",
     "OrdinalInduct.strict_mono ?f ==> ?f ?n < oLimit ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_than, template_app (template_var 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("OrdinalInduct.oSuc_leI", "?x < ?y ==> oSuc ?x <= ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("OrdinalInduct.less_oLimitI", "?x < ?f ?n ==> ?x < oLimit ?f",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_var 1, template_var 0))],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("OrdinalInduct.le_oLimitI", "?x <= ?f ?n ==> ?x <= oLimit ?f",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("OrdinalInduct.oSuc_less_limit_ordinal",
     "limit_ordinal ?x ==> (oSuc ?w < ?x) = (?w < ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("OrdinalInduct.less_oLimitD", "?x < oLimit ?f ==> EX n. ?x < ?f n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("OrdinalInduct.oLimit_leI", "ALL n. ?f n <= ?x ==> oLimit ?f <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("OrdinalInduct.limit_ordinal_oLimitI",
     "ALL n. ?f n < oLimit ?f ==> limit_ordinal (oLimit ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0))
           ))),
    ("OrdinalInduct.strict_mono_natI",
     "(!!n. ?f n < ?f (Suc n)) ==> OrdinalInduct.strict_mono ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.mono_natI", "(!!n. ?f n <= ?f (Suc n)) ==> incseq ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.oLimit_shift_mono",
     "incseq ?f ==> oLimit (%n. ?f (n + ?k)) = oLimit ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, template_var 1)))),
    ("OrdinalInduct.strict_mono_cancel_eq",
     "OrdinalInduct.strict_mono ?f ==> (?f ?x = ?f ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_bimplication
        (template_equation
          (template_app (template_var 2, template_var 1),
           template_app (template_var 2, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("OrdinalInduct.strict_mono_cancel_less",
     "OrdinalInduct.strict_mono ?f ==> (?f ?x < ?f ?y) = (?x < ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalInduct.strict_mono_cancel_le",
     "OrdinalInduct.strict_mono ?f ==> (?f ?x <= ?f ?y) = (?x <= ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("OrdinalInduct.strict_monoD",
     "[| OrdinalInduct.strict_mono ?f; ?A < ?B |] ==> ?f ?A < ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("OrdinalInduct.strict_mono_monoD",
     "[| OrdinalInduct.strict_mono ?f; ?A <= ?B |] ==> ?f ?A <= ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("OrdinalInduct.oLimit_Suc",
     "?f 0 < oLimit ?f ==> oLimit (%n. ?f (Suc n)) = oLimit ?f",
     template_implication
      ([template_inequation
         (less_than, template_app (template_var 0, template_hole 3),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, template_var 0)))),
    ("OrdinalInduct.strict_mono_f_make_mono",
     "ALL n. ?f n < oLimit ?f ==>
      OrdinalInduct.strict_mono (%n. ?f (make_mono ?f n))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OrdinalInduct.make_mono_less",
     "ALL n. ?f n < oLimit ?f ==> make_mono ?f ?n < make_mono ?f (Suc ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("OrdinalInduct.oLimit_shift",
     "ALL n. ?f n < oLimit ?f ==> oLimit (%n. ?f (n + ?k)) = oLimit ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, template_var 1)))),
    ("OrdinalInduct.oLimit_make_mono_eq",
     "ALL n. ?f n < oLimit ?f ==>
      oLimit (%n. ?f (make_mono ?f n)) = oLimit ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, template_var 0)))),
    ("OrdinalInduct.strict_monoI",
     "(!!A B. A < B ==> ?f A < ?f B) ==> OrdinalInduct.strict_mono ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.less_oLimitE",
     "[| ?x < oLimit ?f; !!n. ?x < ?f n ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.f_make_mono_less",
     "ALL n. ?f n < oLimit ?f ==>
      ?f (make_mono ?f ?n) < ?f (make_mono ?f (Suc ?n))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("OrdinalInduct.limit_ordinalI",
     "[| 0 < ?z; ALL x<?z. oSuc x < ?z |] ==> limit_ordinal ?z",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.le_f_make_mono",
     "[| ALL n. ?f n < oLimit ?f; ?m <= make_mono ?f ?n |]
      ==> ?f ?m <= ?f (make_mono ?f ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("OrdinalInduct.less_oSucE",
     "[| ?x < oSuc ?y; ?x < ?y ==> ?P; ?x = ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_inequation (less_than, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.le_oSucE",
     "[| ?x <= oSuc ?y; ?x <= ?y ==> ?R; ?x = oSuc ?y ==> ?R |] ==> ?R",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.oLimit_eqI",
     "[| !!n. EX m. ?f n <= ?g m; !!n. EX m. ?g n <= ?f m |]
      ==> oLimit ?f = oLimit ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("OrdinalInduct.le_oLimitE",
     "[| ?x <= oLimit ?f; !!n. ?x <= ?f n ==> ?R; ?x = oLimit ?f ==> ?R |]
      ==> ?R",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OrdinalInduct.oLimit_induct",
     "[| ?P 0; !!x. ?P x ==> ?P (oSuc x);
         !!f. [| OrdinalInduct.strict_mono f; ALL n. ?P (f n) |]
              ==> ?P (oLimit f) |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("OrdinalInduct.ordinal_cases",
     "[| ?a = 0 ==> ?P; !!x. ?a = oSuc x ==> ?P;
         !!f. [| OrdinalInduct.strict_mono f; ?a = oLimit f |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]
