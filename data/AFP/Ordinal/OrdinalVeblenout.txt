Loading theory "Draft.OrdinalDef" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont" via "Draft.OrdinalInduct")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.522s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.837s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.313s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "ord0_leqp"
  Proving monotonicity ...
instantiation
  ord0 :: ord
  less_eq_ord0 == less_eq :: ord0 => ord0 => bool
  less_ord0 == less :: ord0 => ord0 => bool
instantiation
  ordinal :: ord
  less_eq_ordinal == less_eq :: ordinal => ordinal => bool
  less_ordinal == less :: ordinal => ordinal => bool
### theory "Draft.OrdinalDef"
### 0.559s elapsed time, 2.228s cpu time, 0.223s GC time
Loading theory "Draft.OrdinalInduct" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec" via "Draft.OrdinalCont")
instantiation
  ordinal :: {one,zero}
  zero_ordinal == zero_class.zero :: ordinal
  one_ordinal == one_class.one :: ordinal
locale strict_mono
  fixes f :: "'a => 'b"
  assumes "OrdinalInduct.strict_mono f"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  make_mono :: "(nat => ordinal) => nat => nat"
### theory "Draft.OrdinalInduct"
### 0.176s elapsed time, 0.694s cpu time, 0.082s GC time
Loading theory "Draft.OrdinalCont" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith" via "Draft.OrdinalRec")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale continuous
  fixes F :: "ordinal => ordinal"
  assumes "continuous F"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale normal
  fixes F :: "ordinal => ordinal"
  assumes "normal F"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalCont"
### 0.096s elapsed time, 0.372s cpu time, 0.087s GC time
Loading theory "Draft.OrdinalRec" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse" via "Draft.OrdinalArith")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
locale porder
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
  assumes "porder (<<)"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale omega_complete
  fixes le :: "'a => 'a => bool"  (infixl \<open><<\<close> 55)
    and lub :: "(nat => 'a) => 'a"
  assumes "omega_complete (<<) lub"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.OrdinalRec"
### 0.305s elapsed time, 1.076s cpu time, 0.555s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Loading theory "Draft.OrdinalArith" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen" via "Draft.OrdinalOmega" via "Draft.OrdinalFix" via "Draft.OrdinalInverse")
Found termination order: "size <*mlex*> {}"
instantiation
  ordinal :: plus
  plus_ordinal == plus :: ordinal => ordinal => ordinal
consts
  cycle :: "'a list => 'a stream"
instantiation
  ordinal :: minus
  minus_ordinal == minus :: ordinal => ordinal => ordinal
### theory "HOL-Library.BigO"
### 1.022s elapsed time, 3.885s cpu time, 0.956s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  ordinal :: times
  times_ordinal == times :: ordinal => ordinal => ordinal
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.OrdinalArith"
### 0.192s elapsed time, 0.657s cpu time, 0.049s GC time
Loading theory "Draft.OrdinalInverse" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen" via "Draft.OrdinalOmega" via "Draft.OrdinalFix")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  ordinal :: modulo
  modulo_ordinal == modulo :: ordinal => ordinal => ordinal
  divide_ordinal == divide :: ordinal => ordinal => ordinal
### theory "HOL-Library.Stream"
### 1.128s elapsed time, 4.125s cpu time, 0.960s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalInverse"
### 0.172s elapsed time, 0.477s cpu time, 0.095s GC time
Loading theory "Draft.OrdinalFix" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen" via "Draft.OrdinalOmega")
Found termination order: "size <*mlex*> {}"
consts
  iter :: "nat => ('a => 'a) => 'a => 'a"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OrdinalFix"
### 0.069s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "Draft.OrdinalOmega" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.OrdinalVeblen")
consts
  ordinal_of_nat :: "nat => ordinal"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale additive_principal
  fixes a :: "ordinal"
  assumes "additive_principal a"
consts
  from_cnf :: "ordinal list => ordinal"
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp to_cnf_rel ?x1 ==>
### to_cnf ?x1 ==
### if ?x1 = 0 then []
### else oLog \<omega> ?x1 # to_cnf (?x1 - \<omega> ** oLog \<omega> ?x1)
consts
  normalize_cnf :: "'a list => 'a list"
consts
  from_cnf2 :: "(ordinal * nat) list => ordinal"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp to_cnf2_rel ?x1 ==>
### to_cnf2 ?x1 ==
### if ?x1 = 0 then []
### else (oLog \<omega> ?x1,
###       inv ordinal_of_nat (?x1 div \<omega> ** oLog \<omega> ?x1)) #
###      to_cnf2 (?x1 mod \<omega> ** oLog \<omega> ?x1)
consts
  is_normalized2 :: "('a * 'b) list => bool"
### theory "Draft.OrdinalOmega"
### 0.241s elapsed time, 0.527s cpu time, 0.095s GC time
Loading theory "Draft.OrdinalVeblen" (required by "Draft.OrdinalVeblenMoreTemplates")
locale normal_set
  fixes A :: "ordinal set"
  assumes "normal_set A"
### theory "Draft.OrdinalVeblen"
### 0.133s elapsed time, 0.299s cpu time, 0.075s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.011s elapsed time, 6.215s cpu time, 1.222s GC time
Loading theory "Draft.Templates" (required by "Draft.OrdinalVeblenMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OrdinalVeblenMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.462s elapsed time, 0.505s cpu time, 0.052s GC time
Loading theory "Draft.OrdinalVeblenMoreTemplates"
val templateLemmas =
   [("OrdinalVeblen.critical_set_0", "critical_set ?A 0 = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("OrdinalVeblen.oDeriv_plus", "oDeriv ((+) ?a) = (+) (?a * \<omega>)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("OrdinalVeblen.normal_set_critical_set",
     "normal_set ?A ==> normal_set (critical_set ?A ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("OrdinalVeblen.oVeblen_1_plus",
     "oVeblen ((+) 1) ?x = (+) (\<omega> ** ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("OrdinalVeblen.ordering_0",
     "OrdinalVeblen.ordering ?A 0 = (LEAST z. z : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app (template_hole 1, t_empty))),
    ("OrdinalVeblen.oFix_plus", "oFix ((+) ?a) 0 = ?a * \<omega>",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("OrdinalVeblen.critical_set_mono",
     "?x <= ?y ==> critical_set ?A ?y <= critical_set ?A ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("OrdinalVeblen.critical_set_oLimit",
     "critical_set ?A (oLimit ?f) = (INT n. critical_set ?A (?f n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("OrdinalVeblen.critical_set_oSuc_lemma",
     "critical_set ?A (oSuc ?n) =
      critical_set ?A ?n Int
      range (oDeriv (OrdinalVeblen.ordering (critical_set ?A ?n)))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0)))),
           template_hole 0)))),
    ("OrdinalVeblen.ordering_oSuc",
     "OrdinalVeblen.ordering ?A (oSuc ?x) =
      (LEAST z. z : ?A & OrdinalVeblen.ordering ?A ?x < z)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OrdinalVeblen.critical_set_oSuc",
     "normal_set ?A ==>
      critical_set ?A (oSuc ?x) =
      range (oDeriv (OrdinalVeblen.ordering (critical_set ?A ?x)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)))),
           template_hole 0)))),
    ("OrdinalVeblen.normal_set_INTER",
     "[| ALL n. normal_set (?A n); ALL n. ?A (Suc n) <= ?A n |]
      ==> normal_set (\<Inter> (range ?A))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_hole 0)))
           ))),
    ("OrdinalVeblen.ordering_INTER_0",
     "[| ALL n. normal_set (?A n); ALL n. ?A (Suc n) <= ?A n |]
      ==> OrdinalVeblen.ordering (\<Inter> (range ?A)) 0 =
          oLimit (%n. OrdinalVeblen.ordering (?A n) 0)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty),
                 template_hole 2))),
           template_hole 1),
         template_app (template_hole 0, t_empty)))),
    ("OrdinalVeblen.oLimit_mem_INTER",
     "[| ALL n. normal_set (?A n); ALL n. ?A (Suc n) <= ?A n;
         ALL n. ?f n : ?A n; incseq ?f |]
      ==> oLimit ?f : \<Inter> (range ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_hole 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.OrdinalVeblenMoreTemplates"
### 0.356s elapsed time, 0.507s cpu time, 0.059s GC time
val it = (): unit
