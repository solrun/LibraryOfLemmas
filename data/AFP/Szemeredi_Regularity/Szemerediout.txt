Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SzemerediMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SzemerediMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.FuncSet" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "HOL-Library.Disjoint_Sets")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.505s cpu time, 0.041s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.289s elapsed time, 1.159s cpu time, 0.121s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SzemerediMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.315s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SzemerediMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.FuncSet"
### 0.421s elapsed time, 1.677s cpu time, 0.208s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi")
### theory "HOL-Library.Set_Algebras"
### 0.186s elapsed time, 0.735s cpu time, 0.088s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SzemerediMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.377s elapsed time, 1.481s cpu time, 0.168s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Disjoint_Sets"
### 0.255s elapsed time, 1.000s cpu time, 0.162s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SzemerediMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.962s elapsed time, 3.672s cpu time, 0.848s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.861s elapsed time, 3.287s cpu time, 0.733s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.169s elapsed time, 4.404s cpu time, 0.956s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Liminf_Limsup"
### 0.438s elapsed time, 1.566s cpu time, 0.196s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.331s elapsed time, 0.764s cpu time, 0.077s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.779s elapsed time, 5.806s cpu time, 1.130s GC time
Loading theory "Draft.Templates" (required by "Draft.SzemerediMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SzemerediMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.523s elapsed time, 1.083s cpu time, 0.086s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.544s elapsed time, 2.513s cpu time, 0.239s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.382s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.487s elapsed time, 0.568s cpu time, 0.112s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs" via "Girth_Chromatic.Girth_Chromatic_Misc")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Library.Extended_Real"
### 2.170s elapsed time, 3.123s cpu time, 1.316s GC time
Loading theory "Girth_Chromatic.Girth_Chromatic_Misc" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi" via "Girth_Chromatic.Ugraphs")
### theory "Girth_Chromatic.Girth_Chromatic_Misc"
### 0.080s elapsed time, 0.321s cpu time, 0.000s GC time
Loading theory "Girth_Chromatic.Ugraphs" (required by "Draft.SzemerediMoreTemplates" via "Draft.Szemeredi")
"- \<infinity>"
  :: "ereal"
"True"
  :: "bool"
Found termination order: "{}"
"True"
  :: "bool"
"\<infinity>"
  :: "ereal"
Found termination order: "size_list size <*mlex*> {}"
### theory "Girth_Chromatic.Ugraphs"
### 0.232s elapsed time, 0.696s cpu time, 0.059s GC time
Loading theory "Draft.Szemeredi" (required by "Draft.SzemerediMoreTemplates")
"ereal (13 / 4)"
  :: "ereal"
[| inj ?f; ?A <= range ?f |] ==> card (?f -` ?A) = card ?A
### theory "Draft.Szemeredi"
### 0.587s elapsed time, 0.723s cpu time, 0.102s GC time
Loading theory "Draft.SzemerediMoreTemplates"
val templateLemmas =
   [("Szemeredi.all_edges_between_empty", "all_edges_between {} ?Z ?G = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.all_edges_between_empty", "all_edges_between ?Z {} ?G = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.energy_graph_subsets_0",
     "energy_graph_subsets ?A {} ?G = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.energy_graph_subsets_0",
     "energy_graph_subsets {} ?B ?G = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.edge_density_ge0", "0 <= edge_density ?X ?Y ?G",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Szemeredi.energy_graph_partitions_subsets_ge0",
     "0 <= energy_graph_partitions_subsets ?G ?U ?W",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Szemeredi.energy_graph_subsets_ge0",
     "0 <= energy_graph_subsets ?\<U> ?\<W> ?G",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Szemeredi.card_P2", "card (P2 ?X ?Y) <= 2",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("Szemeredi.edge_density_commute",
     "edge_density ?X ?Y ?G = edge_density ?Y ?X ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Szemeredi.energy_graph_partitions_subsets_commute",
     "energy_graph_partitions_subsets ?G ?W ?U =
      energy_graph_partitions_subsets ?G ?U ?W",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Szemeredi.energy_graph_subsets_commute",
     "energy_graph_subsets ?\<U> ?\<W> ?G =
      energy_graph_subsets ?\<W> ?\<U> ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Szemeredi.all_edges_between_subset",
     "all_edges_between ?X ?Y ?G <= ?X \<times> ?Y",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Szemeredi.irregular_set_subset",
     "irregular_set ?\<epsilon> ?G ?P <= ?P \<times> ?P",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Szemeredi.finite_irregular_set",
     "finite ?P ==> finite (irregular_set ?\<epsilon> ?G ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Szemeredi.finite_graph_partition_equals",
     "finite_graph_partition ?V ?P ?n ==> \<Union> ?P = ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("Szemeredi.card_all_edges_between_commute",
     "card (all_edges_between ?X ?Y ?G) =
      card (all_edges_between ?Y ?X ?G)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Szemeredi.regular_pair_commute",
     "regular_pair ?X ?Y ?G ?\<epsilon> =
      regular_pair ?Y ?X ?G ?\<epsilon>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("Szemeredi.finite_graph_partition_empty",
     "finite_graph_partition {} ?P ?n = (?P = {} & ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Szemeredi.finite_graph_partition_0",
     "finite_graph_partition ?V ?P 0 = (?V = {} & ?P = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Szemeredi.trivial_graph_partition_exists",
     "?V ~= {} ==> finite_graph_partition ?V {?V} (Suc 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Szemeredi.finite_all_edges_between",
     "[| finite ?X; finite ?Y |] ==> finite (all_edges_between ?X ?Y ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Szemeredi.all_edges_between_disjnt1",
     "disjnt ?X ?Y ==>
      disjnt (all_edges_between ?X ?Z ?G) (all_edges_between ?Y ?Z ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Szemeredi.all_edges_between_disjnt2",
     "disjnt ?Y ?Z ==>
      disjnt (all_edges_between ?X ?Y ?G) (all_edges_between ?X ?Z ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Szemeredi.edge_density_le1",
     "[| finite ?X; finite ?Y |] ==> edge_density ?X ?Y ?G <= 1",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Szemeredi.finite_graph_partition_subset",
     "[| finite_graph_partition ?V ?P ?n; ?X : ?P |] ==> ?X <= ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_inequation (less_equals, template_var 0, template_var 3))),
    ("Szemeredi.all_edges_between_swap",
     "all_edges_between ?X ?Y ?G =
      (%(x, y). (y, x)) ` all_edges_between ?Y ?X ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Szemeredi.all_edges_between_Un2",
     "all_edges_between ?X (?Y Un ?Z) ?G =
      all_edges_between ?X ?Y ?G Un all_edges_between ?X ?Z ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Szemeredi.all_edges_between_Un1",
     "all_edges_between (?X Un ?Y) ?Z ?G =
      all_edges_between ?X ?Z ?G Un all_edges_between ?Y ?Z ?G",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Szemeredi.partition_P2",
     "[| ?A <= ?B; ?A ~= {} |] ==> partition_on ?B (P2 ?A ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Szemeredi.irregular_set_swap",
     "((?i, ?j) : irregular_set ?\<epsilon> ?G ?P) =
      ((?j, ?i) : irregular_set ?\<epsilon> ?G ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 4)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Szemeredi.finite_graph_partition_finite",
     "[| finite_graph_partition ?V ?P ?k; finite ?V; ?X : ?P |]
      ==> finite ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Szemeredi.le_tower_2", "?k * 2 ^ Suc ?k <= 2 ^ 2 ^ ?k",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)))),
    ("Szemeredi.card_vimage_inj_on_le",
     "[| inj_on ?f ?D; finite ?A |] ==> card (?f -` ?A Int ?D) <= card ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Szemeredi.card_finite_graph_partition",
     "[| finite_graph_partition ?V ?P ?k; finite ?V |]
      ==> sum card ?P = card ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("Szemeredi.mean_square_density_bounded",
     "[| finite_graph_partition (uverts ?G) ?P ?k; finite (uverts ?G) |]
      ==> mean_square_density ?G ?P <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 1),
         template_hole 0))),
    ("Szemeredi.max_all_edges_between",
     "[| finite ?X; finite ?Y |]
      ==> card (all_edges_between ?X ?Y ?G) <= card ?X * card ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 0, template_var 1))))),
    ("Szemeredi.mean_square_density_increase",
     "[| refines ?V ?Y ?X; finite ?V |]
      ==> mean_square_density ?G ?X <= mean_square_density ?G ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 2)))),
    ("Szemeredi.finite_graph_partition_gt0",
     "[| finite_graph_partition ?V ?P ?k; finite ?V; ?X : ?P |]
      ==> 0 < card ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Szemeredi.finite_graph_partition_le",
     "[| finite_graph_partition ?V ?P ?k; finite ?V; ?X : ?P |]
      ==> card ?X <= card ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 3)))),
    ("Szemeredi.sum_P2",
     "[| ?X <= ?Y; ?f {} = (0::?'b) |]
      ==> sum ?f (P2 ?X ?Y) = ?f ?X + ?f (?Y - ?X)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app (template_var 0, template_hole 5), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("Szemeredi.finite_graph_partition_obtain",
     "[| finite_graph_partition ?V ?P ?k; ?x : ?V;
         !!X. [| X : ?P; ?x : X |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.energy_graph_partition_increase",
     "[| finite ?\<U>; finite ?\<W>; finite_graph_partition ?\<U> ?U ?k;
         finite_graph_partition ?\<W> ?W ?l |]
      ==> energy_graph_subsets ?\<U> ?\<W> ?G
          <= energy_graph_partitions_subsets ?G ?U ?W",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 6)),
        template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 5),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 2)))),
    ("Szemeredi.energy_graph_partitions_subsets_increase",
     "[| refines ?V ?Y ?X; refines ?V' ?W ?U; finite ?V; finite ?V' |]
      ==> energy_graph_partitions_subsets ?G ?X ?U
          <= energy_graph_partitions_subsets ?G ?Y ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 6)),
        template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 5),
           template_var 2)))),
    ("Szemeredi.sum_partition_le",
     "[| finite_graph_partition ?V ?P ?k; finite ?V |]
      ==> (SUM R:?P. SUM S:?P. real (card R * card S))
          <= (real (card ?V))\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 7, t_empty), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 6,
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Szemeredi.Szemeredi_Regularity_Lemma",
     "[| 0 < ?\<epsilon>;
         !!M. (!!G. 0 < card (uverts G) ==>
                    EX P. regular_partition ?\<epsilon> G P &
                          card P <= M) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 1),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.edge_density_partition",
     "[| finite ?U; finite_graph_partition ?U ?P ?n; finite ?W |]
      ==> edge_density ?U ?W ?G =
          (SUM X:?P. edge_density X ?W ?G * real (card X)) /
          real (card ?U)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 3)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 4)))))),
    ("Szemeredi.energy_graph_partitions_subsets_increase_half",
     "[| refines ?V ?Y ?X; finite ?V; partition_on ?V ?X; {} ~: ?U;
         finite (\<Union> ?U) |]
      ==> energy_graph_partitions_subsets ?G ?X ?U
          <= energy_graph_partitions_subsets ?G ?Y ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 2, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 1)))),
    ("Szemeredi.energy_graph_partition_half",
     "[| finite ?\<U>; finite ?\<W>; finite_graph_partition ?\<U> ?U ?n |]
      ==> real (card ?\<U>) * (edge_density ?\<U> ?\<W> ?G)\<^sup>2
          <= (SUM R:?U. real (card R) * (edge_density R ?\<W> ?G)\<^sup>2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 4))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Szemeredi.sum_products_le",
     "(!!i. i : ?I ==> (0::?'b) <= ?a i) ==>
      (SUM i:?I. ?a i * ?b i)\<^sup>2
      <= sum ?a ?I * (SUM i:?I. ?a i * (?b i)\<^sup>2)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 2)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 4, t_empty), template_var 2))))),
    ("Szemeredi.edge_density_Un",
     "[| disjnt ?X1.0 ?X2.0; finite ?X1.0; finite ?X2.0; finite ?Y |]
      ==> edge_density (?X1.0 Un ?X2.0) ?Y ?G =
          (edge_density ?X1.0 ?Y ?G * real (card ?X1.0) +
           edge_density ?X2.0 ?Y ?G * real (card ?X2.0)) /
          real (card ?X1.0 + card ?X2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 3),
                         template_var 1),
                       template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2))))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 3)),
               template_app (template_hole 1, template_var 2))))))),
    ("Szemeredi.irregular_pair_I",
     "[| ?A <= ?X; ?B <= ?Y; ?\<epsilon> * real (card ?X) <= real (card ?A);
         ?\<epsilon> * real (card ?Y) <= real (card ?B);
         ?\<epsilon>
         < \<bar>edge_density ?A ?B ?G - edge_density ?X ?Y ?G\<bar> |]
      ==> irregular_pair ?X ?Y ?G ?\<epsilon>",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 4))),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 5))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 3))),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 3),
                  template_var 0)),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2),
                template_var 0))))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("Szemeredi.irregular_pair_E",
     "[| irregular_pair ?X ?Y ?G ?\<epsilon>;
         !!A B.
            [| A <= ?X &
               B <= ?Y &
               ?\<epsilon> * real (card ?X) <= real (card A) &
               ?\<epsilon> * real (card ?Y) <= real (card B);
               ?\<epsilon>
               < \<bar>edge_density A B ?G - edge_density ?X ?Y ?G\<bar> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.exists_refinement",
     "[| finite_graph_partition (uverts ?G) ?P ?k; finite (uverts ?G);
         ~ regular_partition ?\<epsilon> ?G ?P; 0 < ?\<epsilon>;
         !!Q. [| refines (uverts ?G) Q ?P;
                 mean_square_density ?G ?P + ?\<epsilon> ^ 5
                 <= mean_square_density ?G Q;
                 !!R. R : ?P ==> card {S: Q. S <= R} <= 2 ^ Suc ?k;
                 card Q <= ?k * 2 ^ Suc ?k |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 25, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 25, template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 1),
                    template_var 4),
                  template_var 3)
                )
            ),
        template_inequation (less_than, template_hole 20, template_var 1),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.energy_boost",
     "[| finite ?\<U>; finite ?\<W>; ?U1.0 <= ?\<U>; ?W1.0 <= ?\<W>;
         0 < ?\<epsilon>;
         ?\<epsilon> * real (card ?\<U>) <= real (card ?U1.0);
         ?\<epsilon> * real (card ?\<W>) <= real (card ?W1.0);
         ?\<epsilon>
         < \<bar>edge_density ?U1.0 ?W1.0 ?G -
                 edge_density ?\<U> ?\<W> ?G\<bar> |]
      ==> energy_graph_subsets ?\<U> ?\<W> ?G +
          ?\<epsilon> ^ 4 * real (card ?\<U> * card ?\<W>) /
          real ((card (uverts ?G))\<^sup>2)
          <= (SUM A:P2 ?U1.0 ?\<U>.
                 SUM B:P2 ?W1.0 ?\<W>. energy_graph_subsets A B ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 5)),
        template_predicate
         (template_app (template_hole 22, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 5),
        template_inequation (less_equals, template_var 2, template_var 4),
        template_inequation (less_than, template_hole 19, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 17, template_var 1),
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 5))),
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_var 3))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 17, template_var 1),
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 4))),
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_var 2))),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 14,
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 3),
                    template_var 2),
                  template_var 0)),
              template_app
               (template_app
                 (template_app (template_hole 12, template_var 5),
                  template_var 4),
                template_var 0))))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 5),
                 template_var 4),
               template_var 0)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 6, template_hole 5))))),
                 template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 15, template_var 5)),
                     template_app (template_hole 15, template_var 4))))),
             template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 15,
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)))))),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 5)))))]:
   (string * thm * template) list
### theory "Draft.SzemerediMoreTemplates"
### 0.406s elapsed time, 0.569s cpu time, 0.077s GC time
val it = (): unit
