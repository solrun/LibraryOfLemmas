   [("Szemeredi.all_edges_between_empty", "all_edges_between {} ?Z ?G = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.all_edges_between_empty", "all_edges_between ?Z {} ?G = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.energy_graph_subsets_0",
     "energy_graph_subsets ?A {} ?G = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.energy_graph_subsets_0",
     "energy_graph_subsets {} ?B ?G = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Szemeredi.edge_density_ge0", "0 <= edge_density ?X ?Y ?G",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Szemeredi.energy_graph_partitions_subsets_ge0",
     "0 <= energy_graph_partitions_subsets ?G ?U ?W",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Szemeredi.energy_graph_subsets_ge0",
     "0 <= energy_graph_subsets ?\<U> ?\<W> ?G",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Szemeredi.card_P2", "card (P2 ?X ?Y) <= 2",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("Szemeredi.edge_density_commute",
     "edge_density ?X ?Y ?G = edge_density ?Y ?X ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Szemeredi.energy_graph_partitions_subsets_commute",
     "energy_graph_partitions_subsets ?G ?W ?U =
      energy_graph_partitions_subsets ?G ?U ?W",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Szemeredi.energy_graph_subsets_commute",
     "energy_graph_subsets ?\<U> ?\<W> ?G =
      energy_graph_subsets ?\<W> ?\<U> ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Szemeredi.all_edges_between_subset",
     "all_edges_between ?X ?Y ?G <= ?X \<times> ?Y",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Szemeredi.irregular_set_subset",
     "irregular_set ?\<epsilon> ?G ?P <= ?P \<times> ?P",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Szemeredi.finite_irregular_set",
     "finite ?P ==> finite (irregular_set ?\<epsilon> ?G ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Szemeredi.finite_graph_partition_equals",
     "finite_graph_partition ?V ?P ?n ==> \<Union> ?P = ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("Szemeredi.card_all_edges_between_commute",
     "card (all_edges_between ?X ?Y ?G) =
      card (all_edges_between ?Y ?X ?G)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Szemeredi.regular_pair_commute",
     "regular_pair ?X ?Y ?G ?\<epsilon> =
      regular_pair ?Y ?X ?G ?\<epsilon>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("Szemeredi.finite_graph_partition_empty",
     "finite_graph_partition {} ?P ?n = (?P = {} & ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Szemeredi.finite_graph_partition_0",
     "finite_graph_partition ?V ?P 0 = (?V = {} & ?P = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Szemeredi.trivial_graph_partition_exists",
     "?V ~= {} ==> finite_graph_partition ?V {?V} (Suc 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Szemeredi.finite_all_edges_between",
     "[| finite ?X; finite ?Y |] ==> finite (all_edges_between ?X ?Y ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Szemeredi.all_edges_between_disjnt1",
     "disjnt ?X ?Y ==>
      disjnt (all_edges_between ?X ?Z ?G) (all_edges_between ?Y ?Z ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Szemeredi.all_edges_between_disjnt2",
     "disjnt ?Y ?Z ==>
      disjnt (all_edges_between ?X ?Y ?G) (all_edges_between ?X ?Z ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Szemeredi.edge_density_le1",
     "[| finite ?X; finite ?Y |] ==> edge_density ?X ?Y ?G <= 1",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Szemeredi.finite_graph_partition_subset",
     "[| finite_graph_partition ?V ?P ?n; ?X : ?P |] ==> ?X <= ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_inequation (less_equals, template_var 0, template_var 3))),
    ("Szemeredi.all_edges_between_swap",
     "all_edges_between ?X ?Y ?G =
      (%(x, y). (y, x)) ` all_edges_between ?Y ?X ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Szemeredi.all_edges_between_Un2",
     "all_edges_between ?X (?Y Un ?Z) ?G =
      all_edges_between ?X ?Y ?G Un all_edges_between ?X ?Z ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Szemeredi.all_edges_between_Un1",
     "all_edges_between (?X Un ?Y) ?Z ?G =
      all_edges_between ?X ?Z ?G Un all_edges_between ?Y ?Z ?G",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Szemeredi.partition_P2",
     "[| ?A <= ?B; ?A ~= {} |] ==> partition_on ?B (P2 ?A ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Szemeredi.irregular_set_swap",
     "((?i, ?j) : irregular_set ?\<epsilon> ?G ?P) =
      ((?j, ?i) : irregular_set ?\<epsilon> ?G ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 4)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Szemeredi.finite_graph_partition_finite",
     "[| finite_graph_partition ?V ?P ?k; finite ?V; ?X : ?P |]
      ==> finite ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Szemeredi.le_tower_2", "?k * 2 ^ Suc ?k <= 2 ^ 2 ^ ?k",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)))),
    ("Szemeredi.card_vimage_inj_on_le",
     "[| inj_on ?f ?D; finite ?A |] ==> card (?f -` ?A Int ?D) <= card ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Szemeredi.card_finite_graph_partition",
     "[| finite_graph_partition ?V ?P ?k; finite ?V |]
      ==> sum card ?P = card ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("Szemeredi.mean_square_density_bounded",
     "[| finite_graph_partition (uverts ?G) ?P ?k; finite (uverts ?G) |]
      ==> mean_square_density ?G ?P <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 1),
         template_hole 0))),
    ("Szemeredi.max_all_edges_between",
     "[| finite ?X; finite ?Y |]
      ==> card (all_edges_between ?X ?Y ?G) <= card ?X * card ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 0, template_var 1))))),
    ("Szemeredi.mean_square_density_increase",
     "[| refines ?V ?Y ?X; finite ?V |]
      ==> mean_square_density ?G ?X <= mean_square_density ?G ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 2)))),
    ("Szemeredi.finite_graph_partition_gt0",
     "[| finite_graph_partition ?V ?P ?k; finite ?V; ?X : ?P |]
      ==> 0 < card ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Szemeredi.finite_graph_partition_le",
     "[| finite_graph_partition ?V ?P ?k; finite ?V; ?X : ?P |]
      ==> card ?X <= card ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 3)))),
    ("Szemeredi.sum_P2",
     "[| ?X <= ?Y; ?f {} = (0::?'b) |]
      ==> sum ?f (P2 ?X ?Y) = ?f ?X + ?f (?Y - ?X)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app (template_var 0, template_hole 5), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("Szemeredi.finite_graph_partition_obtain",
     "[| finite_graph_partition ?V ?P ?k; ?x : ?V;
         !!X. [| X : ?P; ?x : X |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.energy_graph_partition_increase",
     "[| finite ?\<U>; finite ?\<W>; finite_graph_partition ?\<U> ?U ?k;
         finite_graph_partition ?\<W> ?W ?l |]
      ==> energy_graph_subsets ?\<U> ?\<W> ?G
          <= energy_graph_partitions_subsets ?G ?U ?W",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 6)),
        template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 5),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 2)))),
    ("Szemeredi.energy_graph_partitions_subsets_increase",
     "[| refines ?V ?Y ?X; refines ?V' ?W ?U; finite ?V; finite ?V' |]
      ==> energy_graph_partitions_subsets ?G ?X ?U
          <= energy_graph_partitions_subsets ?G ?Y ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 6)),
        template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 5),
           template_var 2)))),
    ("Szemeredi.sum_partition_le",
     "[| finite_graph_partition ?V ?P ?k; finite ?V |]
      ==> (SUM R:?P. SUM S:?P. real (card R * card S))
          <= (real (card ?V))\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 7, t_empty), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 6,
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Szemeredi.Szemeredi_Regularity_Lemma",
     "[| 0 < ?\<epsilon>;
         !!M. (!!G. 0 < card (uverts G) ==>
                    EX P. regular_partition ?\<epsilon> G P &
                          card P <= M) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 1),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.edge_density_partition",
     "[| finite ?U; finite_graph_partition ?U ?P ?n; finite ?W |]
      ==> edge_density ?U ?W ?G =
          (SUM X:?P. edge_density X ?W ?G * real (card X)) /
          real (card ?U)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 3)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 4)))))),
    ("Szemeredi.energy_graph_partitions_subsets_increase_half",
     "[| refines ?V ?Y ?X; finite ?V; partition_on ?V ?X; {} ~: ?U;
         finite (\<Union> ?U) |]
      ==> energy_graph_partitions_subsets ?G ?X ?U
          <= energy_graph_partitions_subsets ?G ?Y ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 2, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 1)))),
    ("Szemeredi.energy_graph_partition_half",
     "[| finite ?\<U>; finite ?\<W>; finite_graph_partition ?\<U> ?U ?n |]
      ==> real (card ?\<U>) * (edge_density ?\<U> ?\<W> ?G)\<^sup>2
          <= (SUM R:?U. real (card R) * (edge_density R ?\<W> ?G)\<^sup>2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 4))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Szemeredi.sum_products_le",
     "(!!i. i : ?I ==> (0::?'b) <= ?a i) ==>
      (SUM i:?I. ?a i * ?b i)\<^sup>2
      <= sum ?a ?I * (SUM i:?I. ?a i * (?b i)\<^sup>2)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 2)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 4, t_empty), template_var 2))))),
    ("Szemeredi.edge_density_Un",
     "[| disjnt ?X1.0 ?X2.0; finite ?X1.0; finite ?X2.0; finite ?Y |]
      ==> edge_density (?X1.0 Un ?X2.0) ?Y ?G =
          (edge_density ?X1.0 ?Y ?G * real (card ?X1.0) +
           edge_density ?X2.0 ?Y ?G * real (card ?X2.0)) /
          real (card ?X1.0 + card ?X2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 3),
                         template_var 1),
                       template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2))))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 3)),
               template_app (template_hole 1, template_var 2))))))),
    ("Szemeredi.irregular_pair_I",
     "[| ?A <= ?X; ?B <= ?Y; ?\<epsilon> * real (card ?X) <= real (card ?A);
         ?\<epsilon> * real (card ?Y) <= real (card ?B);
         ?\<epsilon>
         < \<bar>edge_density ?A ?B ?G - edge_density ?X ?Y ?G\<bar> |]
      ==> irregular_pair ?X ?Y ?G ?\<epsilon>",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 4))),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 5))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 3))),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 3),
                  template_var 0)),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2),
                template_var 0))))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("Szemeredi.irregular_pair_E",
     "[| irregular_pair ?X ?Y ?G ?\<epsilon>;
         !!A B.
            [| A <= ?X &
               B <= ?Y &
               ?\<epsilon> * real (card ?X) <= real (card A) &
               ?\<epsilon> * real (card ?Y) <= real (card B);
               ?\<epsilon>
               < \<bar>edge_density A B ?G - edge_density ?X ?Y ?G\<bar> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.exists_refinement",
     "[| finite_graph_partition (uverts ?G) ?P ?k; finite (uverts ?G);
         ~ regular_partition ?\<epsilon> ?G ?P; 0 < ?\<epsilon>;
         !!Q. [| refines (uverts ?G) Q ?P;
                 mean_square_density ?G ?P + ?\<epsilon> ^ 5
                 <= mean_square_density ?G Q;
                 !!R. R : ?P ==> card {S: Q. S <= R} <= 2 ^ Suc ?k;
                 card Q <= ?k * 2 ^ Suc ?k |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 25, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 25, template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 1),
                    template_var 4),
                  template_var 3)
                )
            ),
        template_inequation (less_than, template_hole 20, template_var 1),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_var 0))),
    ("Szemeredi.energy_boost",
     "[| finite ?\<U>; finite ?\<W>; ?U1.0 <= ?\<U>; ?W1.0 <= ?\<W>;
         0 < ?\<epsilon>;
         ?\<epsilon> * real (card ?\<U>) <= real (card ?U1.0);
         ?\<epsilon> * real (card ?\<W>) <= real (card ?W1.0);
         ?\<epsilon>
         < \<bar>edge_density ?U1.0 ?W1.0 ?G -
                 edge_density ?\<U> ?\<W> ?G\<bar> |]
      ==> energy_graph_subsets ?\<U> ?\<W> ?G +
          ?\<epsilon> ^ 4 * real (card ?\<U> * card ?\<W>) /
          real ((card (uverts ?G))\<^sup>2)
          <= (SUM A:P2 ?U1.0 ?\<U>.
                 SUM B:P2 ?W1.0 ?\<W>. energy_graph_subsets A B ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 5)),
        template_predicate
         (template_app (template_hole 22, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 5),
        template_inequation (less_equals, template_var 2, template_var 4),
        template_inequation (less_than, template_hole 19, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 17, template_var 1),
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 5))),
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_var 3))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 17, template_var 1),
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 4))),
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_var 2))),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 14,
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 3),
                    template_var 2),
                  template_var 0)),
              template_app
               (template_app
                 (template_app (template_hole 12, template_var 5),
                  template_var 4),
                template_var 0))))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 5),
                 template_var 4),
               template_var 0)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 6, template_hole 5))))),
                 template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 15, template_var 5)),
                     template_app (template_hole 15, template_var 4))))),
             template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 15,
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)))))),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 5)))))]
