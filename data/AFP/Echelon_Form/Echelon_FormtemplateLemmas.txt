   [("Echelon_Form.echelon_form_echelon_form_of_euclidean",
     "echelon_form (echelon_form_of_euclidean ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Echelon_Form.echelon_form_upt_k_0", "echelon_form_upt_k ?A 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Echelon_Form.echelon_form_imp_upper_triagular",
     "echelon_form ?A ==> upper_triangular ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Echelon_Form.rref_imp_ef",
     "reduced_row_echelon_form ?A ==> echelon_form ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Echelon_Form.echelon_form_imp_upper_triagular_upt",
     "echelon_form ?A ==> upper_triangular_upt_k ?A ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Echelon_Form.echelon_form_implies_echelon_form_upt",
     "echelon_form ?A ==> echelon_form_upt_k ?A ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Echelon_Form.echelon_form_echelon_form_of",
     "is_bezout_ext ?bezout ==> echelon_form (echelon_form_of ?A ?bezout)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Echelon_Form.echelon_form_of_column_k_efficient",
     "echelon_form_of_column_k ?bezout (?A, ?i) ?k =
      echelon_form_of_column_k_efficient ?bezout (?A, ?i) ?k",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Echelon_Form.echelon_form_of_euclidean_invertible",
     "EX P. invertible P &
            P ** ?A = echelon_form_of ?A euclid_ext2 &
            echelon_form (echelon_form_of ?A euclid_ext2)",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Echelon_Form.echelon_form_of_upt_k_invertible",
     "is_bezout_ext ?bezout ==>
      EX P. invertible P & P ** ?A = echelon_form_of_upt_k ?A ?k ?bezout",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Echelon_Form.echelon_echelon_form_of_upt_k",
     "[| ?k < ncols ?A; is_bezout_ext ?bezout |]
      ==> echelon_form_upt_k (echelon_form_of_upt_k ?A ?k ?bezout)
           (Suc ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Echelon_Form.echelon_form_of_column_k_invertible",
     "is_bezout_ext ?bezout ==>
      EX P. invertible P &
            P ** ?A = fst (echelon_form_of_column_k ?bezout (?A, ?i) ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 3))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Echelon_Form.echelon_form_upt_k_condition1'",
     "[| echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?i ?k ?A; ?i < ?j |]
      ==> is_zero_row_upt_k ?j ?k ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 2),
              template_var 3)
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 3)
           ))),
    ("Echelon_Form.echelon_form_condition1",
     "echelon_form ?A ==>
      ALL i. is_zero_row i ?A --> ~ (EX j>i. ~ is_zero_row j ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Echelon_Form.echelon_form_of_invertible",
     "is_bezout_ext ?bezout ==>
      EX P. invertible P &
            P ** ?A = echelon_form_of ?A ?bezout &
            echelon_form (echelon_form_of ?A ?bezout)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Echelon_Form.echelon_form_upt_k_condition1",
     "[| echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?i ?k ?A |]
      ==> ~ (EX j>?i. ~ is_zero_row_upt_k j ?k ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1),
              template_var 2)
            )],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("Echelon_Form.invertible_bezout_matrix",
     "[| is_bezout_ext ?bezout; ?a < ?b; ?A $ ?a $ ?j ~= (0::?'a) |]
      ==> invertible (bezout_matrix ?A ?a ?b ?j ?bezout)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 3)),
                template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 4))
           ))),
    ("Echelon_Form.det_bezout_matrix",
     "[| is_bezout_ext ?bezout; ?a < ?b; ?A $ ?a $ ?j ~= (0::?'a) |]
      ==> det (bezout_matrix ?A ?a ?b ?j ?bezout) = (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 3)),
                template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 4)),
         template_hole 0))),
    ("Echelon_Form.greatest_less_zero_row",
     "[| echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?i ?k ?A;
         ~ (ALL a. is_zero_row_upt_k a ?k ?A) |]
      ==> (GREATEST m. ~ is_zero_row_upt_k m ?k ?A) < ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1),
              template_var 2)
            ),
        template_negation
         (template_predicate (template_app (template_hole 2, t_empty)))],
       template_inequation
        (less_than, template_app (template_hole 0, t_empty),
         template_var 0))),
    ("Echelon_Form.greatest_ge_nonzero_row'",
     "[| echelon_form_upt_k ?A ?k;
         ?i <= (GREATEST m. ~ is_zero_row_upt_k m ?k ?A);
         ~ (ALL a. is_zero_row_upt_k a ?k ?A) |]
      ==> ~ is_zero_row_upt_k ?i ?k ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, t_empty)),
        template_negation
         (template_predicate (template_app (template_hole 0, t_empty)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1),
                 template_var 2)
               )
           ))),
    ("Echelon_Form.condition1_index_le_zero_row",
     "[| echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?a (Suc ?k) ?A |]
      ==> mod_type_class.from_nat
           (if ALL m. is_zero_row_upt_k m ?k ?A then 0
            else mod_type_class.to_nat
                  (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                 1)
          <= ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 0),
                template_app (template_hole 10, template_var 1)),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty))),
               template_hole 0))),
         template_var 0))),
    ("Echelon_Form.echelon_foldl_condition5",
     "[| ~ is_zero_row_upt_k ?mb ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
         nrows ?A |]
      ==> nrows ?A =
          Suc (mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n (Suc ?k) ?A))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            ),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_hole 2, template_app (template_hole 1, t_empty))),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty)))))),
    ("Echelon_Form.bezout_matrix_not_zero",
     "[| is_bezout_ext ?bezout; ?a ~= ?b; ?A $ ?a $ ?j ~= (0::?'a) |]
      ==> (bezout_matrix ?A ?a ?b ?j ?bezout ** ?A) $ ?a $ ?j ~= (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 3)),
                template_var 0),
              template_hole 2)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 0, template_var 1),
                                 template_var 3),
                               template_var 2),
                             template_var 0),
                           template_var 4)),
                       template_var 1)),
                   template_var 3)),
               template_var 0),
             template_hole 2)
           ))),
    ("Echelon_Form.ua_vb_0",
     "[| is_bezout_ext ?bezout;
         snd (snd (snd (snd (?bezout ?a ?b)))) ~= (0::?'a) |]
      ==> fst (snd (snd (?bezout ?a ?b))) * ?a +
          fst (snd (snd (snd (?bezout ?a ?b)))) * ?b =
          (0::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_var 2, template_var 1),
                        template_var 0))))),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_var 2, template_var 1),
                         template_var 0))))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_var 2, template_var 1),
                         template_var 0)))))),
             template_var 0)),
         template_hole 4))),
    ("Echelon_Form.echelon_form_upt_k_if_equal",
     "[| echelon_form_upt_k ?A ?k;
         ALL a b.
            b < mod_type_class.from_nat ?k --> ?A $ a $ b = ?B $ a $ b;
         ?k < ncols ?A |]
      ==> echelon_form_upt_k ?B ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 0),
             template_var 1)
           ))),
    ("Echelon_Form.bezout_matrix_works1",
     "[| is_bezout_ext ?bezout; ?a ~= ?b |]
      ==> (bezout_matrix ?A ?a ?b ?j ?bezout ** ?A) $ ?a $ ?j =
          snd (snd (snd (snd (?bezout (?A $ ?a $ ?j) (?A $ ?b $ ?j)))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 3),
                           template_var 2),
                         template_var 0),
                       template_var 4)),
                   template_var 1)),
               template_var 3)),
           template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_var 4,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 1),
                           template_var 3)),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_var 2)),
                     template_var 0))))))))),
    ("Echelon_Form.condition1_part4",
     "[| echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?a (Suc ?k) ?A;
         (if ALL m. is_zero_row_upt_k m ?k ?A then 0
          else mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
               1) =
         nrows ?A |]
      ==> is_zero_row_upt_k ?b (Suc ?k) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_app (template_hole 10, template_var 2)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 8, template_app (template_hole 7, t_empty)),
              template_hole 6),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, t_empty))),
              template_hole 1)),
          template_app (template_hole 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_var 0),
               template_app (template_hole 10, template_var 2)),
             template_var 3)
           ))),
    ("Echelon_Form.echelon_form_condition2",
     "echelon_form ?A ==>
      ALL i.
         i < ?j & ~ is_zero_row i ?A & ~ is_zero_row ?j ?A -->
         (LEAST n. ?A $ i $ n ~= (0::?'a))
         < (LEAST n. ?A $ ?j $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Echelon_Form.bezout_iterate_invertible",
     "[| is_bezout_ext ?bezout; ?n < nrows ?A;
         mod_type_class.to_nat ?i <= ?n; ?A $ ?i $ ?j ~= (0::?'a) |]
      ==> EX P. invertible P &
                P ** ?A = bezout_iterate ?A ?n ?i ?j ?bezout",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_var 3),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1)),
                template_var 0),
              template_hole 6)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Echelon_Form.echelon_echelon_form_column_k",
     "[| is_bezout_ext ?bezout; echelon_form_upt_k ?A ?k; ?k < ncols ?A |]
      ==> echelon_form_upt_k
           (fst (echelon_form_of_column_k ?bezout
                  (?A,
                   if ALL m. is_zero_row_upt_k m ?k ?A then 0
                   else mod_type_class.to_nat
                         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                        1)
                  ?k))
           (Suc ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 13, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_app (template_hole 11, template_var 2),
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 9,
                             template_app (template_hole 8, t_empty)),
                           template_hole 6),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app (template_hole 3, t_empty))),
                           template_hole 1)))),
                   template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Echelon_Form.echelon_form_condition2_explicit",
     "[| echelon_form ?A; ?i < ?j; ~ is_zero_row ?i ?A;
         ~ is_zero_row ?j ?A |]
      ==> (LEAST n. ?A $ ?i $ n ~= (0::?'a))
          < (LEAST n. ?A $ ?j $ n ~= (0::?'a))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 2)
                )
            )],
       template_inequation
        (less_than, template_app (template_hole 4, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Echelon_Form.bezout_iterate_not_zero",
     "[| ?A $ ?i $ mod_type_class.from_nat ?k ~= (0::?'a); ?n < nrows ?A;
         mod_type_class.to_nat ?i <= ?n; is_bezout_ext ?bezout |]
      ==> bezout_iterate ?A ?n ?i (mod_type_class.from_nat ?k) ?bezout $
          ?i $
          mod_type_class.from_nat ?k ~=
          (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3)),
                template_app (template_hole 7, template_var 2)),
              template_hole 6)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 3),
          template_var 1),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 4),
                             template_var 1),
                           template_var 3),
                         template_app (template_hole 7, template_var 2)),
                       template_var 0)),
                   template_var 3)),
               template_app (template_hole 7, template_var 2)),
             template_hole 6)
           ))),
    ("Echelon_Form.bezout_matrix_works2",
     "[| is_bezout_ext ?bezout; ?a ~= ?b;
         ?A $ ?a $ ?j ~= (0::?'a) | ?A $ ?b $ ?j ~= (0::?'a) |]
      ==> (bezout_matrix ?A ?a ?b ?j ?bezout ** ?A) $ ?b $ ?j = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 1),
                            template_var 3)),
                        template_var 0)),
                    template_hole 2))),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 1),
                          template_var 2)),
                      template_var 0)),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 1),
                             template_var 3),
                           template_var 2),
                         template_var 0),
                       template_var 4)),
                   template_var 1)),
               template_var 2)),
           template_var 0),
         template_hole 2))),
    ("Echelon_Form.echelon_form_upt_k_condition2",
     "[| echelon_form_upt_k ?A ?k; ?i < ?j; ~ is_zero_row_upt_k ?i ?k ?A;
         ~ is_zero_row_upt_k ?j ?k ?A |]
      ==> (LEAST n. ?A $ ?i $ n ~= (0::?'a))
          < (LEAST n. ?A $ ?j $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 2),
                  template_var 3)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 0),
                    template_var 2),
                  template_var 3)
                )
            )],
       template_inequation
        (less_than, template_app (template_hole 4, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Echelon_Form.echelon_foldl_condition2",
     "[| ~ is_zero_row_upt_k ?ma ?k ?A;
         ALL m>=(GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) =
          (GREATEST n. ~ is_zero_row_upt_k n (Suc ?k) ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 8, t_empty)))),
    ("Echelon_Form.echelon_form_upt_k_bezout_matrix",
     "[| echelon_form_upt_k ?A ?k; is_bezout_ext ?bezout;
         ?A $ ?i $ mod_type_class.from_nat ?k ~= (0::?'a);
         is_zero_row_upt_k ?i ?k ?A; ?i < ?n; ?k < ncols ?A |]
      ==> echelon_form_upt_k
           (bezout_matrix ?A ?i ?n (mod_type_class.from_nat ?k) ?bezout **
            ?A)
           ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 1)),
                template_app (template_hole 7, template_var 3)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 3),
              template_var 4)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 2, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 1),
                         template_var 0),
                       template_app (template_hole 7, template_var 3)),
                     template_var 2)),
                 template_var 4)),
             template_var 3)
           ))),
    ("Echelon_Form.condition2_part4",
     "[| echelon_form_upt_k ?A ?k; ?a < ?b;
         (if ALL m. is_zero_row_upt_k m ?k ?A then 0
          else mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
               1) =
         nrows ?A |]
      ==> (LEAST n. ?A $ ?a $ n ~= (0::?'a))
          < (LEAST n. ?A $ ?b $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 15, template_app (template_hole 14, t_empty)),
              template_hole 12),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, t_empty))),
              template_hole 7)),
          template_app (template_hole 6, template_var 3))],
       template_inequation
        (less_than, template_app (template_hole 4, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Echelon_Form.echelon_foldl_condition1",
     "[| is_bezout_ext ?bezout;
         ?A $ ?ma $ mod_type_class.from_nat (Suc ?k) ~= (0::?'a);
         ?k < ncols ?A |]
      ==> EX m. ~ is_zero_row_upt_k m (Suc (Suc ?k))
                   (bezout_iterate
                     (interchange_rows ?A (0::?'c)
                       (LEAST n.
                           ?A $ n $ mod_type_class.from_nat (Suc ?k) ~=
                           (0::?'a)))
                     (nrows ?A - Suc 0) (0::?'c)
                     (mod_type_class.from_nat (Suc ?k)) ?bezout)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_var 2),
                    template_var 1)),
                template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 0))),
              template_hole 11)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 9, template_var 2))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Echelon_Form.condition1_part1",
     "[| echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?a (Suc ?k) ?A;
         ?a < ?b;
         ALL m>=mod_type_class.from_nat
                 (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'b) |]
      ==> is_zero_row_upt_k ?b (Suc ?k) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 1),
                template_app (template_hole 17, template_var 2)),
              template_var 3)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 18, template_var 0),
               template_app (template_hole 17, template_var 2)),
             template_var 3)
           ))),
    ("Echelon_Form.echelon_form_upt_k_interchange",
     "[| echelon_form_upt_k ?A ?k;
         is_zero_row_upt_k (mod_type_class.from_nat ?i) ?k ?A;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a);
         mod_type_class.from_nat ?i <= ?m; ?k < ncols ?A |]
      ==> echelon_form_upt_k
           (interchange_rows ?A (mod_type_class.from_nat ?i)
             (LEAST n.
                 ?A $ n $ mod_type_class.from_nat ?k ~= (0::?'a) &
                 mod_type_class.from_nat ?i <= n))
           ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_var 2),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 0)),
                template_app (template_hole 7, template_var 2)),
              template_hole 6)
            ),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 12, template_var 1)),
                 template_app (template_hole 1, t_empty))),
             template_var 2)
           ))),
    ("Echelon_Form.bezout_matrix_preserves_rest",
     "[| is_bezout_ext ?bezout; ?a ~= ?n; ?i ~= ?n; ?a ~= ?i;
         ?A $ ?i $ ?k ~= (0::?'a);
         is_zero_row_upt_k ?i (mod_type_class.to_nat ?k) ?A |]
      ==> (bezout_matrix ?A ?i ?n ?k ?bezout ** ?A) $ ?a $ ?b =
          ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 6)),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 4)),
        template_negation
         (template_equation (template_var 5, template_var 3)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 3)),
                template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 1)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 2),
                             template_var 3),
                           template_var 4),
                         template_var 1),
                       template_var 6)),
                   template_var 2)),
               template_var 5)),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 5)),
           template_var 0)))),
    ("Echelon_Form.bezout_matrix_preserves_previous_columns",
     "[| is_bezout_ext ?bezout; ?i ~= ?j; ?A $ ?i $ ?k ~= (0::?'a); ?b < ?k;
         is_zero_row_upt_k ?i (mod_type_class.to_nat ?k) ?A;
         is_zero_row_upt_k ?j (mod_type_class.to_nat ?k) ?A |]
      ==> (bezout_matrix ?A ?i ?j ?k ?bezout ** ?A) $ ?a $ ?b =
          ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 6)),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 5)),
                template_var 2),
              template_hole 5)
            ),
        template_inequation (less_than, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app (template_hole 2, template_var 2)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app (template_hole 2, template_var 2)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 3),
                             template_var 5),
                           template_var 4),
                         template_var 2),
                       template_var 6)),
                   template_var 3)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 0)),
           template_var 1)))),
    ("Echelon_Form.echelon_form_intro",
     "[| ALL i. is_zero_row i ?A --> ~ (EX j>i. ~ is_zero_row j ?A);
         ALL i j.
            i < j & ~ is_zero_row i ?A & ~ is_zero_row j ?A -->
            (LEAST n. ?A $ i $ n ~= (0::?'b))
            < (LEAST n. ?A $ j $ n ~= (0::?'b)) |]
      ==> echelon_form ?A",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Echelon_Form.condition1_part2",
     "[| echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?a (Suc ?k) ?A;
         ?a < ?b;
         (if ALL m. is_zero_row_upt_k m ?k ?A then 0
          else mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
               1) =
         nrows ?A;
         ALL m>mod_type_class.from_nat (nrows ?A).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'b) |]
      ==> is_zero_row_upt_k ?b (Suc ?k) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 1),
                template_app (template_hole 18, template_var 2)),
              template_var 3)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 15, template_app (template_hole 14, t_empty)),
              template_hole 13),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, t_empty))),
              template_hole 8)),
          template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 19, template_var 0),
               template_app (template_hole 18, template_var 2)),
             template_var 3)
           ))),
    ("Echelon_Form.bezout_iterate_zero_column_k",
     "[| echelon_form_upt_k ?A ?k; is_bezout_ext ?bezout;
         ?A $ ?i $ mod_type_class.from_nat ?k ~= (0::?'a); ?n < nrows ?A;
         ?i < ?a; ?k < ncols ?A; mod_type_class.to_nat ?a <= ?n;
         is_zero_row_upt_k ?i ?k ?A |]
      ==> bezout_iterate ?A ?n ?i (mod_type_class.from_nat ?k) ?bezout $
          ?a $
          mod_type_class.from_nat ?k =
          (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 5),
                    template_var 2)),
                template_app (template_hole 9, template_var 4)),
              template_hole 8)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 5)),
        template_inequation (less_than, template_var 2, template_var 0),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 4, template_var 5)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 0),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 4),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 1),
                       template_var 2),
                     template_app (template_hole 9, template_var 4)),
                   template_var 3)),
               template_var 0)),
           template_app (template_hole 9, template_var 4)),
         template_hole 8))),
    ("Echelon_Form.echelon_form_upt_k_intro",
     "[| ALL i.
            is_zero_row_upt_k i ?k ?A -->
            ~ (EX j>i. ~ is_zero_row_upt_k j ?k ?A);
         ALL i j.
            i < j &
            ~ is_zero_row_upt_k i ?k ?A & ~ is_zero_row_upt_k j ?k ?A -->
            (LEAST n. ?A $ i $ n ~= (0::?'b))
            < (LEAST n. ?A $ j $ n ~= (0::?'b)) |]
      ==> echelon_form_upt_k ?A ?k",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Echelon_Form.bezout_iterate_preserves_below_n",
     "[| echelon_form_upt_k ?A ?k; is_bezout_ext ?bezout;
         ?A $ ?i $ mod_type_class.from_nat ?k ~= (0::?'a); ?n < nrows ?A;
         ?n < mod_type_class.to_nat ?a; ?k < ncols ?A;
         mod_type_class.to_nat ?i <= ?n; is_zero_row_upt_k ?i ?k ?A |]
      ==> bezout_iterate ?A ?n ?i (mod_type_class.from_nat ?k) ?bezout $
          ?a $
          ?b =
          ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 6),
              template_var 5)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 6),
                    template_var 3)),
                template_app (template_hole 8, template_var 5)),
              template_hole 7)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 6)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 5,
          template_app (template_hole 3, template_var 6)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 5),
              template_var 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 2),
                       template_var 3),
                     template_app (template_hole 8, template_var 5)),
                   template_var 4)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 6),
               template_var 1)),
           template_var 0)))),
    ("Echelon_Form.bezout_iterate_preserves",
     "[| echelon_form_upt_k ?A ?k; is_bezout_ext ?bezout;
         ?A $ ?i $ mod_type_class.from_nat ?k ~= (0::?'a); ?n < nrows ?A;
         ?b < mod_type_class.from_nat ?k; mod_type_class.to_nat ?i <= ?n;
         ?k < ncols ?A; is_zero_row_upt_k ?i ?k ?A |]
      ==> bezout_iterate ?A ?n ?i (mod_type_class.from_nat ?k) ?bezout $
          ?a $
          ?b =
          ?A $ ?a $ ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 6),
              template_var 5)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 6),
                    template_var 3)),
                template_app (template_hole 9, template_var 5)),
              template_hole 8)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 6)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 5)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2),
        template_inequation
         (less_than, template_var 5,
          template_app (template_hole 2, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 5),
              template_var 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 2),
                       template_var 3),
                     template_app (template_hole 9, template_var 5)),
                   template_var 4)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 6),
               template_var 0)),
           template_var 1)))),
    ("Echelon_Form.echelon_foldl_condition3",
     "[| is_bezout_ext ?bezout;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a);
         ALL m. is_zero_row_upt_k m ?k ?A; echelon_form_upt_k ?A ?k;
         ?k < ncols ?A |]
      ==> mod_type_class.to_nat
           (GREATEST n.
               ~ is_zero_row_upt_k n (Suc ?k)
                  (bezout_iterate
                    (interchange_rows ?A (0::?'rows)
                      (LEAST n.
                          ?A $ n $ mod_type_class.from_nat ?k ~= (0::?'a)))
                    (nrows ?A - Suc 0) (0::?'rows)
                    (mod_type_class.from_nat ?k) ?bezout)) =
          0",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 3)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app (template_hole 18, template_var 2),
                    template_var 1)),
                template_app (template_hole 17, template_var 0)),
              template_hole 16)
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_hole 0))),
    ("Echelon_Form.condition2_part2",
     "[| echelon_form_upt_k ?A ?k; ?a < ?b;
         ALL m>mod_type_class.from_nat (nrows ?A).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a);
         (if ALL m. is_zero_row_upt_k m ?k ?A then 0
          else mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
               1) =
         nrows ?A |]
      ==> (LEAST n. ?A $ ?a $ n ~= (0::?'a))
          < (LEAST n. ?A $ ?b $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 9, template_app (template_hole 19, t_empty)),
              template_hole 7),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, t_empty))),
              template_hole 2)),
          template_app (template_hole 16, template_var 3))],
       template_inequation
        (less_than, template_app (template_hole 0, t_empty),
         template_app (template_hole 0, t_empty)))),
    ("Echelon_Form.bezout_matrix_row_code",
     "($) (bezout_matrix_row ?A ?a ?b ?j ?bezout ?x) =
      (let (p, q, u, v, d) = ?bezout (?A $ ?a $ ?j) (?A $ ?b $ ?j)
       in (%y. if ?x = ?a & y = ?a then p
               else if ?x = ?a & y = ?b then q
                    else if ?x = ?b & y = ?a then u
                         else if ?x = ?b & y = ?b then v
                              else if ?x = y then 1::?'b else (0::?'b)))",
     template_equation
      (template_app
        (template_hole 13,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 12, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_var 1,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 5),
                     template_var 4)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 5),
                   template_var 3)),
               template_var 2))),
         template_app (template_hole 8, t_empty)))),
    ("Echelon_Form.echelon_foldl_condition4",
     "[| ALL m>(GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a);
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) ~=
         nrows ?A;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?mb;
         ?A $ ?mb $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Suc (mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
          mod_type_class.to_nat
           (GREATEST n. ~ is_zero_row_upt_k n (Suc ?k) ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 13, t_empty))),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14, template_app (template_hole 13, t_empty)),
            template_hole 10),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_app (template_hole 6, template_var 2)),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2, template_app (template_hole 13, t_empty))),
         template_app
          (template_hole 2, template_app (template_hole 13, t_empty))))),
    ("Echelon_Form.echelon_foldl_condition6",
     "[| is_bezout_ext ?bezout;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?mc;
         ?A $ ?mc $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> EX m. ~ is_zero_row_upt_k m (Suc ?k)
                   (bezout_iterate
                     (interchange_rows ?A
                       ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                        (1::?'rows))
                       (LEAST n.
                           ?A $ n $ mod_type_class.from_nat ?k ~= (0::?'a) &
                           (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                           (1::?'rows)
                           <= n))
                     (nrows ?A - Suc 0)
                     ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                      (1::?'rows))
                     (mod_type_class.from_nat ?k) ?bezout)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 18, template_app (template_hole 17, t_empty)),
            template_hole 14),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 0)),
                template_app (template_hole 10, template_var 2)),
              template_hole 9)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Echelon_Form.condition2_part1",
     "[| echelon_form_upt_k ?A ?k; ?a < ?b;
         ~ is_zero_row_upt_k ?a (Suc ?k)
            (fst (echelon_form_of_column_k ?bezout
                   (?A,
                    if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1)
                   ?k));
         ~ is_zero_row_upt_k ?b (Suc ?k)
            (fst (echelon_form_of_column_k ?bezout
                   (?A,
                    if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1)
                   ?k));
         ALL m>=mod_type_class.from_nat
                 (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> (LEAST n. ?A $ ?a $ n ~= (0::?'a))
          < (LEAST n. ?A $ ?b $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 4),
              template_var 3)
            ),
        template_inequation (less_than, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 2),
                    template_app (template_hole 20, template_var 3)),
                  template_app
                   (template_hole 19,
                    template_app
                     (template_app
                       (template_app (template_hole 18, template_var 0),
                        template_app
                         (template_app (template_hole 17, template_var 4),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 16,
                                template_app (template_hole 15, t_empty)),
                              template_hole 14),
                            template_app
                             (template_app
                               (template_hole 13,
                                template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11, t_empty))),
                              template_hole 10)))),
                      template_var 3)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 1),
                    template_app (template_hole 20, template_var 3)),
                  template_app
                   (template_hole 19,
                    template_app
                     (template_app
                       (template_app (template_hole 18, template_var 0),
                        template_app
                         (template_app (template_hole 17, template_var 4),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 16,
                                template_app (template_hole 15, t_empty)),
                              template_hole 14),
                            template_app
                             (template_app
                               (template_hole 13,
                                template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11, t_empty))),
                              template_hole 10)))),
                      template_var 3)))
                )
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_inequation
        (less_than, template_app (template_hole 0, t_empty),
         template_app (template_hole 0, t_empty)))),
    ("Echelon_Form.echelon_foldl_condition7",
     "[| is_bezout_ext ?bezout; echelon_form_upt_k ?A ?k; ?k < ncols ?A;
         ~ is_zero_row_upt_k ?mb ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) ~=
         nrows ?A;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?mc;
         ?A $ ?mc $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Suc (mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
          mod_type_class.to_nat
           (GREATEST n.
               ~ is_zero_row_upt_k n (Suc ?k)
                  (bezout_iterate
                    (interchange_rows ?A
                      ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       (1::?'rows))
                      (LEAST n.
                          ?A $ n $ mod_type_class.from_nat ?k ~= (0::?'a) &
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                          (1::?'rows)
                          <= n))
                    (nrows ?A - Suc 0)
                    ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                     (1::?'rows))
                    (mod_type_class.from_nat ?k) ?bezout))",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 21, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 19, template_var 1),
                    template_var 2),
                  template_var 3)
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 17,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, t_empty))),
              template_app (template_hole 14, template_var 3))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 12, template_app (template_hole 15, t_empty)),
            template_hole 11),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 0)),
                template_app (template_hole 7, template_var 2)),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_hole 17,
           template_app
            (template_hole 16, template_app (template_hole 15, t_empty))),
         template_app
          (template_hole 16, template_app (template_hole 15, t_empty))))),
    ("Echelon_Form.condition1_part3",
     "[| echelon_form_upt_k ?A ?k; is_bezout_ext ?bezout;
         is_zero_row_upt_k ?a (Suc ?k)
          (fst (echelon_form_of_column_k ?bezout
                 (?A,
                  if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1)
                 ?k));
         ?a < ?b;
         ALL m>mod_type_class.from_nat
                (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                 else mod_type_class.to_nat
                       (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                      1).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'b);
         (if ALL m. is_zero_row_upt_k m ?k ?A then 0
          else mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
               1) ~=
         nrows ?A;
         mod_type_class.from_nat
          (if ALL m. is_zero_row_upt_k m ?k ?A then 0
           else mod_type_class.to_nat
                 (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                1)
         <= ?m;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'b) |]
      ==> is_zero_row_upt_k ?b (Suc ?k) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 5),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 24, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 23, template_var 2),
                template_app (template_hole 22, template_var 4)),
              template_app
               (template_hole 21,
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 3),
                    template_app
                     (template_app (template_hole 19, template_var 5),
                      template_app
                       (template_app
                         (template_app
                           (template_hole 18,
                            template_app (template_hole 17, t_empty)),
                          template_hole 16),
                        template_app
                         (template_app
                           (template_hole 15,
                            template_app
                             (template_hole 14,
                              template_app (template_hole 13, t_empty))),
                          template_hole 11)))),
                  template_var 4)))
            ),
        template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_hole 18,
                    template_app (template_hole 17, t_empty)),
                  template_hole 16),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, t_empty))),
                  template_hole 11)),
              template_app (template_hole 1, template_var 5))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 17, t_empty)),
                template_hole 16),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, t_empty))),
                template_hole 11))),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 0)),
                template_app (template_hole 4, template_var 4)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 23, template_var 1),
               template_app (template_hole 22, template_var 4)),
             template_var 5)
           ))),
    ("Echelon_Form.condition2_part3",
     "[| echelon_form_upt_k ?A ?k; ?k < ncols ?A; ?a < ?b;
         ~ is_zero_row_upt_k ?a (Suc ?k)
            (fst (echelon_form_of_column_k ?bezout
                   (?A,
                    if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1)
                   ?k));
         ~ is_zero_row_upt_k ?b (Suc ?k)
            (fst (echelon_form_of_column_k ?bezout
                   (?A,
                    if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1)
                   ?k));
         ALL m>mod_type_class.from_nat
                (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                 else mod_type_class.to_nat
                       (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                      1).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a);
         mod_type_class.from_nat
          (if ALL m. is_zero_row_upt_k m ?k ?A then 0
           else mod_type_class.to_nat
                 (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                1)
         <= ?ma;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> (LEAST n. ?A $ ?a $ n ~= (0::?'a))
          < (LEAST n. ?A $ ?b $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 26, template_var 5),
              template_var 4)
            ),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 24, template_var 5)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 3),
                    template_app (template_hole 20, template_var 4)),
                  template_app
                   (template_hole 19,
                    template_app
                     (template_app
                       (template_app (template_hole 18, template_var 1),
                        template_app
                         (template_app (template_hole 17, template_var 5),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 16,
                                template_app (template_hole 15, t_empty)),
                              template_hole 14),
                            template_app
                             (template_app
                               (template_hole 13,
                                template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11, t_empty))),
                              template_hole 10)))),
                      template_var 4)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 2),
                    template_app (template_hole 20, template_var 4)),
                  template_app
                   (template_hole 19,
                    template_app
                     (template_app
                       (template_app (template_hole 18, template_var 1),
                        template_app
                         (template_app (template_hole 17, template_var 5),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 16,
                                template_app (template_hole 15, t_empty)),
                              template_hole 14),
                            template_app
                             (template_app
                               (template_hole 13,
                                template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11, t_empty))),
                              template_hole 10)))),
                      template_var 4)))
                )
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, t_empty)),
                template_hole 14),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, t_empty))),
                template_hole 10))),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 0)),
                template_app (template_hole 4, template_var 4)),
              template_hole 3)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, t_empty),
         template_app (template_hole 0, t_empty)))),
    ("Echelon_Form.condition1_part5",
     "[| is_bezout_ext ?bezout; echelon_form_upt_k ?A ?k;
         is_zero_row_upt_k ?a (Suc ?k)
          (fst (echelon_form_of_column_k ?bezout
                 (?A,
                  if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1)
                 ?k));
         ?a < ?b;
         mod_type_class.from_nat
          (if ALL m. is_zero_row_upt_k m ?k ?A then 0
           else mod_type_class.to_nat
                 (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                1)
         < ?m;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a);
         (if ALL m. is_zero_row_upt_k m ?k ?A then 0
          else mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
               1) ~=
         nrows ?A;
         ?k < ncols ?A |]
      ==> is_zero_row_upt_k ?b (Suc ?k)
           (bezout_iterate
             (interchange_rows ?A
               (mod_type_class.from_nat
                 (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1))
               (LEAST n.
                   ?A $ n $ mod_type_class.from_nat ?k ~= (0::?'a) &
                   mod_type_class.from_nat
                    (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                     else mod_type_class.to_nat
                           (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                          1)
                   <= n))
             (nrows ?A - Suc 0)
             (mod_type_class.from_nat
               (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                else mod_type_class.to_nat
                      (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                     1))
             (mod_type_class.from_nat ?k) ?bezout)",
     template_implication
      ([template_predicate
         (template_app (template_hole 31, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 29, template_var 2),
                template_app (template_hole 28, template_var 3)),
              template_app
               (template_hole 27,
                template_app
                 (template_app
                   (template_app (template_hole 26, template_var 5),
                    template_app
                     (template_app (template_hole 25, template_var 4),
                      template_app
                       (template_app
                         (template_app
                           (template_hole 24,
                            template_app (template_hole 23, t_empty)),
                          template_hole 22),
                        template_app
                         (template_app
                           (template_hole 21,
                            template_app
                             (template_hole 20,
                              template_app (template_hole 19, t_empty))),
                          template_hole 17)))),
                  template_var 3)))
            ),
        template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_hole 15,
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 23, t_empty)),
                template_hole 22),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 19, t_empty))),
                template_hole 17))),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 0)),
                template_app (template_hole 11, template_var 3)),
              template_hole 10)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_hole 24,
                    template_app (template_hole 23, t_empty)),
                  template_hole 22),
                template_app
                 (template_app
                   (template_hole 21,
                    template_app
                     (template_hole 20,
                      template_app (template_hole 19, t_empty))),
                  template_hole 17)),
              template_app (template_hole 8, template_var 4))
            ),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 29, template_var 1),
               template_app (template_hole 28, template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 4),
                           template_app
                            (template_hole 15,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 24,
                                   template_app
                                    (template_hole 23, t_empty)),
                                 template_hole 22),
                               template_app
                                (template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 20,
                                     template_app
(template_hole 19, t_empty))),
                                 template_hole 17)))),
                         template_app (template_hole 3, t_empty))),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 8, template_var 4)),
                       template_app (template_hole 28, template_hole 22))),
                   template_app
                    (template_hole 15,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 24,
                           template_app (template_hole 23, t_empty)),
                         template_hole 22),
                       template_app
                        (template_app
                          (template_hole 21,
                           template_app
                            (template_hole 20,
                             template_app (template_hole 19, t_empty))),
                         template_hole 17)))),
                 template_app (template_hole 11, template_var 3)),
               template_var 5))
           ))),
    ("Echelon_Form.condition2_part5",
     "[| is_bezout_ext ?bezout; echelon_form_upt_k ?A ?k; ?k < ncols ?A;
         ?a < ?b;
         ~ is_zero_row_upt_k ?a (Suc ?k)
            (fst (echelon_form_of_column_k ?bezout
                   (?A,
                    if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1)
                   ?k));
         ~ is_zero_row_upt_k ?b (Suc ?k)
            (fst (echelon_form_of_column_k ?bezout
                   (?A,
                    if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1)
                   ?k));
         mod_type_class.from_nat
          (if ALL m. is_zero_row_upt_k m ?k ?A then 0
           else mod_type_class.to_nat
                 (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                1)
         < ?m;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a);
         (if ALL m. is_zero_row_upt_k m ?k ?A then 0
          else mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
               1) ~=
         nrows ?A |]
      ==> (LEAST n.
              fst (echelon_form_of_column_k ?bezout
                    (?A,
                     if ALL m. is_zero_row_upt_k m ?k ?A then 0
                     else mod_type_class.to_nat
                           (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                          1)
                    ?k) $
              ?a $
              n ~=
              (0::?'a))
          < (LEAST n.
                fst (echelon_form_of_column_k ?bezout
                      (?A,
                       if ALL m. is_zero_row_upt_k m ?k ?A then 0
                       else mod_type_class.to_nat
                             (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                            1)
                      ?k) $
                ?b $
                n ~=
                (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 27, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 26, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 24, template_var 4)),
        template_inequation (less_than, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 2),
                    template_app (template_hole 20, template_var 3)),
                  template_app
                   (template_hole 19,
                    template_app
                     (template_app
                       (template_app (template_hole 18, template_var 5),
                        template_app
                         (template_app (template_hole 17, template_var 4),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 16,
                                template_app (template_hole 15, t_empty)),
                              template_hole 14),
                            template_app
                             (template_app
                               (template_hole 13,
                                template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11, t_empty))),
                              template_hole 10)))),
                      template_var 3)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 1),
                    template_app (template_hole 20, template_var 3)),
                  template_app
                   (template_hole 19,
                    template_app
                     (template_app
                       (template_app (template_hole 18, template_var 5),
                        template_app
                         (template_app (template_hole 17, template_var 4),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 16,
                                template_app (template_hole 15, t_empty)),
                              template_hole 14),
                            template_app
                             (template_app
                               (template_hole 13,
                                template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11, t_empty))),
                              template_hole 10)))),
                      template_var 3)))
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 9,
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, t_empty)),
                template_hole 14),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, t_empty))),
                template_hole 10))),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 0)),
                template_app (template_hole 5, template_var 3)),
              template_hole 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 15, t_empty)),
                  template_hole 14),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, t_empty))),
                  template_hole 10)),
              template_app (template_hole 2, template_var 4))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, t_empty),
         template_app (template_hole 0, t_empty))))]
