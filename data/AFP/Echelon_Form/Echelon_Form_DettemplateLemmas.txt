   [("Echelon_Form_Det.echelon_form_of_unit",
     "is_unit (fst (echelon_form_of_det ?A ?k))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_hole 0)
         )),
    ("Echelon_Form_Det.echelon_form_of_upt_k_det_unit",
     "is_unit (fst (echelon_form_of_upt_k_det ?bezout (1::?'a, ?A) ?k))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1)),
                 template_var 0))),
           template_hole 0)
         )),
    ("Echelon_Form_Det.ef_echelon_form_of_det",
     "is_bezout_ext ?bezout ==>
      echelon_form (snd (echelon_form_of_det ?A ?bezout))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Echelon_Form_Det.snd_echelon_form_of_upt_k_det_eq",
     "snd (echelon_form_of_upt_k_det ?bezout (?n, ?A) ?k) =
      echelon_form_of_upt_k ?A ?k ?bezout",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 3))),
    ("Echelon_Form_Det.det_echelon_form",
     "echelon_form ?A ==> det ?A = (PROD i:UNIV. ?A $ i $ i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)))),
    ("Echelon_Form_Det.snd_echelon_form_of_column_k_det_eq",
     "snd (echelon_form_of_column_k_det ?bezout (?n, ?A, ?i) ?k) =
      echelon_form_of_column_k ?bezout (?A, ?i) ?k",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Echelon_Form_Det.echelon_form_of_column_k_det_unit",
     "is_unit ?det_P ==>
      is_unit
       (fst (echelon_form_of_column_k_det ?bezout (?det_P, ?A, ?i) ?k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1))),
                   template_var 0))),
             template_hole 4)
           ))),
    ("Echelon_Form_Det.det_echelon_form_of_det",
     "is_bezout_ext ?bezout ==>
      fst (echelon_form_of_det ?A ?bezout) * det ?A =
      det (snd (echelon_form_of_det ?A ?bezout))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("Echelon_Form_Det.det_echelon_form_of_det'",
     "is_bezout_ext ?bezout ==>
      det ?A =
      (1::?'a) div fst (echelon_form_of_det ?A ?bezout) *
      det (snd (echelon_form_of_det ?A ?bezout))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)))),
           template_app
            (template_hole 6,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))))))),
    ("Echelon_Form_Det.det_echelon_form_of_euclidean",
     "det ?A =
      (1::?'a) div fst (echelon_form_of_det ?A euclid_ext2) *
      (PROD i:UNIV. snd (echelon_form_of_det ?A euclid_ext2) $ i $ i)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)))),
         template_app
          (template_app (template_hole 4, t_empty), template_hole 0)))),
    ("Echelon_Form_Det.snd_foldl_ef_det_eq",
     "snd (foldl (echelon_form_of_column_k_det ?bezout) (?n, ?A, 0)
            [0..<?k]) =
      foldl (echelon_form_of_column_k ?bezout) (?A, 0) [0..<?k]",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3))),
           template_app
            (template_app (template_hole 2, template_hole 3),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_app
          (template_app (template_hole 2, template_hole 3),
           template_var 0)))),
    ("Echelon_Form_Det.det_echelon_form_of_upt_k_det",
     "is_bezout_ext ?bezout ==>
      fst (echelon_form_of_upt_k_det ?bezout (1::?'a, ?A) ?k) * det ?A =
      det (snd (echelon_form_of_upt_k_det ?bezout (1::?'a, ?A) ?k))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 1)),
                 template_var 0))),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 1)),
               template_var 0)))))),
    ("Echelon_Form_Det.det_echelon_form_of_det_prod",
     "is_bezout_ext ?bezout ==>
      det ?A =
      (1::?'a) div fst (echelon_form_of_det ?A ?bezout) *
      (PROD i:UNIV. snd (echelon_form_of_det ?A ?bezout) $ i $ i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1))],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)))),
           template_app
            (template_app (template_hole 4, t_empty), template_hole 0))))),
    ("Echelon_Form_Det.det_bezout_iterate",
     "[| is_bezout_ext ?bezout;
         ?A $ ?i $ mod_type_class.from_nat ?k ~= (0::?'a); ?n < ncols ?A |]
      ==> det (bezout_iterate ?A ?n ?i (mod_type_class.from_nat ?k)
                ?bezout) =
          det ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_app (template_hole 5, template_var 1)),
              template_hole 4)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 2),
               template_app (template_hole 5, template_var 1)),
             template_var 4)),
         template_app (template_hole 1, template_var 3)))),
    ("Echelon_Form_Det.det_echelon_form_of_column_k_det",
     "[| is_bezout_ext ?bezout; ?det_P * det ?B = det ?A |]
      ==> fst (echelon_form_of_column_k_det ?bezout (?det_P, ?A, ?i) ?k) *
          det ?B =
          det (fst (snd (echelon_form_of_column_k_det ?bezout
                          (?det_P, ?A, ?i) ?k)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 4),
            template_app (template_hole 7, template_var 3)),
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))),
                 template_var 0))),
           template_app (template_hole 7, template_var 3)),
         template_app
          (template_hole 6,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))),
                 template_var 0)))))))]
