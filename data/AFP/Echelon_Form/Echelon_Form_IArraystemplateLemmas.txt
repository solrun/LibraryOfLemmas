   [("Echelon_Form_IArrays.matrix_to_iarray_echelon_form_of",
     "matrix_to_iarray (echelon_form_of ?A ?bezout) =
      echelon_form_of_iarrays (matrix_to_iarray ?A) ?bezout",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Echelon_Form_IArrays.snd_snd_foldl_echelon_form_of_column_k_iarrays",
     "snd (snd (foldl echelon_form_of_column_k_iarrays
                 (matrix_to_iarray ?A, 0, ?bezout) [0..<?k])) =
      ?bezout",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0)))),
       template_var 1)),
    ("Echelon_Form_IArrays.matrix_to_iarray_echelon_form_of_upt_k",
     "?k < ncols ?A ==>
      matrix_to_iarray (echelon_form_of_upt_k ?A ?k ?bezout) =
      echelon_form_of_upt_k_iarrays (matrix_to_iarray ?A) ?k ?bezout",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 2),
           template_var 0)))),
    ("Echelon_Form_IArrays.matrix_to_iarray_bezout_matrix",
     "matrix_to_iarray (bezout_matrix ?A ?a ?b ?j ?bezout) =
      bezout_matrix_iarrays (matrix_to_iarray ?A) (mod_type_class.to_nat ?a)
       (mod_type_class.to_nat ?b) (mod_type_class.to_nat ?j) ?bezout",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 4)),
               template_app (template_hole 1, template_var 3)),
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Echelon_Form_IArrays.fst_foldl_ef_k_less",
     "?k < ncols ?A ==>
      snd (foldl (echelon_form_of_column_k ?bezout) (?A, 0) [0..<Suc ?k])
      <= nrows ?A",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 9, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3)),
             template_app
              (template_app (template_hole 2, template_hole 3),
               template_app (template_hole 1, template_var 2)))),
         template_app (template_hole 0, template_var 1)))),
    ("Echelon_Form_IArrays.matrix_to_iarray_bezout_iterate",
     "?n < nrows ?A ==>
      matrix_to_iarray (bezout_iterate ?A ?n ?i ?j ?bezout) =
      bezout_iterate_iarrays (matrix_to_iarray ?A) ?n
       (mod_type_class.to_nat ?i) (mod_type_class.to_nat ?j) ?bezout",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 3)),
                 template_var 4),
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Echelon_Form_IArrays.matrix_vector_all_zero_from_index2",
     "(ALL m>?i. ?A $ m $ ?k = (0::?'a)) =
      vector_all_zero_from_index
       (mod_type_class.to_nat ?i + 1, vec_to_iarray (column ?k ?A))",
     template_equation
      (template_app (template_hole 13, t_empty),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_hole 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Echelon_Form_IArrays.snd_matrix_to_iarray_echelon_form_of_column_k",
     "[| ?k < ncols ?A; ?i <= nrows ?A |]
      ==> snd (echelon_form_of_column_k ?bezout (?A, ?i) ?k) =
          fst (snd (echelon_form_of_column_k_iarrays
                     (matrix_to_iarray ?A, ?i, ?bezout) ?k))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 10, template_var 2))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_var 3)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))),
               template_var 3)))))),
    ("Echelon_Form_IArrays.matrix_to_iarray_echelon_form_of_column_k",
     "[| ?k < ncols ?A; ?i <= nrows ?A |]
      ==> matrix_to_iarray
           (fst (echelon_form_of_column_k ?bezout (?A, ?i) ?k)) =
          fst (echelon_form_of_column_k_iarrays
                (matrix_to_iarray ?A, ?i, ?bezout) ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 3))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 7, template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 3))))),
    ("Echelon_Form_IArrays.fst_foldl_ef_k_eq",
     "?k < ncols ?A ==>
      fst (snd (foldl echelon_form_of_column_k_iarrays
                 (matrix_to_iarray ?A, 0, ?bezout) [0..<Suc ?k])) =
      snd (foldl (echelon_form_of_column_k ?bezout) (?A, 0) [0..<Suc ?k])",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 15, template_var 1))],
       template_equation
        (template_app
          (template_hole 13,
           template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1)),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 0))),
               template_app
                (template_app (template_hole 5, template_hole 6),
                 template_app (template_hole 4, template_var 2))))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 6)),
             template_app
              (template_app (template_hole 5, template_hole 6),
               template_app (template_hole 4, template_var 2)))))))]
