   [("Epistemic_Logic.Extend_subset", "?S <= Extend ?A ?S ?f",
     template_inequation
      (less_equals, template_var 2,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Epistemic_Logic.K_imply_head", "?A \<turnstile> imply (?p # ?ps) ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1))
         )),
    ("Epistemic_Logic.S5'_L",
     "\<turnstile>\<^sub>S\<^sub>5' (?p \<^bold>\<longrightarrow> L ?i ?p)",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 0))),
               template_hole 0)))
         )),
    ("Epistemic_Logic.S5'_4",
     "\<turnstile>\<^sub>S\<^sub>5' (K ?i ?p \<^bold>\<longrightarrow>
                                     K ?i (K ?i ?p))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("Epistemic_Logic.K_mp",
     "?A \<turnstile> imply (?p # (?p \<^bold>\<longrightarrow> ?q) # ?G)
                       ?q",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0))),
             template_var 1))
         )),
    ("Epistemic_Logic.imply_append",
     "imply (?ps @ ?ps') ?q = imply ?ps (imply ?ps' ?q)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Epistemic_Logic.consistent_Extend",
     "consistent ?A ?S ==> consistent ?A (Extend ?A ?S ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Epistemic_Logic.S5'_B",
     "\<turnstile>\<^sub>S\<^sub>5' (?p \<^bold>\<longrightarrow>
                                     K ?i (L ?i ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 0))),
                 template_hole 0))))
         )),
    ("Epistemic_Logic.S5'_trans",
     "\<turnstile>\<^sub>S\<^sub>5' ((?p \<^bold>\<longrightarrow>
?q) \<^bold>\<longrightarrow>
                                     (?q \<^bold>\<longrightarrow>
?r) \<^bold>\<longrightarrow>
                                     ?p \<^bold>\<longrightarrow> ?r)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("Epistemic_Logic.S5'_KL",
     "\<turnstile>\<^sub>S\<^sub>5' (K ?i ?p \<^bold>\<longrightarrow>
                                     L ?i ?p)",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 0))),
               template_hole 0)))
         )),
    ("Epistemic_Logic.consistent_extend",
     "consistent ?A ?S ==> consistent ?A (extend ?A ?S ?f ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Epistemic_Logic.maximal_Extend",
     "surj ?f ==> maximal ?A (Extend ?A ?S ?f)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Epistemic_Logic.S5'_map_K",
     "\<turnstile>\<^sub>S\<^sub>5' (?p \<^bold>\<longrightarrow> ?q) ==>
      \<turnstile>\<^sub>S\<^sub>5' (K ?i ?p \<^bold>\<longrightarrow>
                                     K ?i ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Epistemic_Logic.K_imply_Cons",
     "?A \<turnstile> imply ?ps ?q ==> ?A \<turnstile> imply (?p # ?ps) ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("Epistemic_Logic.tautology", "tautology ?p ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.K_A2'",
     "?A \<turnstile> (K ?i
                        (?p \<^bold>\<longrightarrow>
                         ?q) \<^bold>\<longrightarrow>
                       K ?i ?p \<^bold>\<longrightarrow> K ?i ?q)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("Epistemic_Logic.main\<^sub>K",
     "valid\<^sub>K ?p = (\<turnstile>\<^sub>K ?p)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Epistemic_Logic.S5'_S5",
     "\<turnstile>\<^sub>S\<^sub>5' ?p ==> AxTB4 \<turnstile> ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)
           ))),
    ("Epistemic_Logic.completeness",
     "ALL M. ALL w:\<W> M. M, w \<Turnstile> ?p ==> ?A \<turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Epistemic_Logic.S5_S5'",
     "AxTB4 \<turnstile> ?p ==> \<turnstile>\<^sub>S\<^sub>5' ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Epistemic_Logic.S5'_L_dual",
     "\<turnstile>\<^sub>S\<^sub>5' (\<^bold>\<not> L ?i
               (\<^bold>\<not> ?p) \<^bold>\<longrightarrow>
                                     K ?i ?p)",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 2, template_var 0),
                               template_hole 0)),
                           template_hole 0))),
                     template_hole 0)),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))
         )),
    ("Epistemic_Logic.distribution",
     "?M, ?w \<Turnstile> K ?i ?p \<^bold>\<and>
                          K ?i
                           (?p \<^bold>\<longrightarrow>
                            ?q) \<^bold>\<longrightarrow>
                          K ?i ?q",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))
         )),
    ("Epistemic_Logic.extend_bound",
     "\<Union> (extend ?A ?S ?f ` {..?m}) = extend ?A ?S ?f ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Epistemic_Logic.K_map",
     "?A \<turnstile> (?p \<^bold>\<longrightarrow> ?q) ==>
      ?A \<turnstile> (K ?i ?p \<^bold>\<longrightarrow> K ?i ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Epistemic_Logic.K_ImpI",
     "?A \<turnstile> imply (?p # ?G) ?q ==>
      ?A \<turnstile> imply ?G (?p \<^bold>\<longrightarrow> ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Epistemic_Logic.generalization",
     "ALL M w. M, w \<Turnstile> ?p ==> ?M, ?w \<Turnstile> K ?i ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Epistemic_Logic.K_Boole",
     "?A \<turnstile> imply ((\<^bold>\<not> ?p) # ?G) \<^bold>\<bottom> ==>
      ?A \<turnstile> imply ?G ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_hole 0)),
                    template_var 0)),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))
           ))),
    ("Epistemic_Logic.canonical_model",
     "[| consistent ?A ?S; ?p : ?S |]
      ==> consistent ?A (Extend ?A ?S from_nat)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_hole 0))
           ))),
    ("Epistemic_Logic.canonical_model",
     "[| consistent ?A ?S; ?p : ?S |]
      ==> maximal ?A (Extend ?A ?S from_nat)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_hole 0))
           ))),
    ("Epistemic_Logic.soundness\<^sub>K",
     "[| \<turnstile>\<^sub>K ?p; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("Epistemic_Logic.K_LK",
     "?A \<turnstile> (L ?i (\<^bold>\<not> ?p) \<^bold>\<longrightarrow>
                       \<^bold>\<not> K ?i ?p)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_hole 0)),
                       template_hole 0))),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_hole 0)))
         )),
    ("Epistemic_Logic.main\<^sub>T",
     "valid\<^sub>T ?p = (\<turnstile>\<^sub>T ?p)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Epistemic_Logic.main\<^sub>K\<^sub>B",
     "valid\<^sub>K\<^sub>B ?p = (\<turnstile>\<^sub>K\<^sub>B ?p)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Epistemic_Logic.main\<^sub>K\<^sub>4",
     "valid\<^sub>K\<^sub>4 ?p = (\<turnstile>\<^sub>K\<^sub>4 ?p)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Epistemic_Logic.consistent_deriv",
     "[| consistent ?A ?V; ?A \<turnstile> ?p |]
      ==> consistent ?A ({?p} Un ?V)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 1))
           ))),
    ("Epistemic_Logic.ax_in_maximal",
     "[| consistent ?A ?V; maximal ?A ?V; ?A ?p |] ==> ?p : ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Epistemic_Logic.Imp_intro",
     "(?M, ?w \<Turnstile> ?p ==> ?M, ?w \<Turnstile> ?q) ==>
      ?M, ?w \<Turnstile> ?p \<^bold>\<longrightarrow> ?q",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Epistemic_Logic.inconsistent_imply",
     "~ consistent ?A ({\<^bold>\<not> ?p} Un set ?G) ==>
      ?A \<turnstile> imply ?G ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 1),
                            template_hole 4)),
                        template_hole 3)),
                    template_app (template_hole 2, template_var 0)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Epistemic_Logic.completeness\<^sub>T",
     "ALL M. ALL w:\<W> M. reflexive M --> M, w \<Turnstile> ?p ==>
      \<turnstile>\<^sub>T ?p",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Epistemic_Logic.completeness\<^sub>K\<^sub>B",
     "ALL M. ALL w:\<W> M. symmetric M --> M, w \<Turnstile> ?p ==>
      \<turnstile>\<^sub>K\<^sub>B ?p",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Epistemic_Logic.completeness\<^sub>K\<^sub>4",
     "ALL M. ALL w:\<W> M. transitive M --> M, w \<Turnstile> ?p ==>
      \<turnstile>\<^sub>K\<^sub>4 ?p",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Epistemic_Logic.truth",
     "[| reflexive ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> K ?i ?p \<^bold>\<longrightarrow> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 0))
           ))),
    ("Epistemic_Logic.soundness_Ax4",
     "[| Ax4 ?p; transitive ?M; ?w : \<W> ?M |] ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.soundness_AxB",
     "[| AxB ?p; symmetric ?M; ?w : \<W> ?M |] ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.soundness_AxT",
     "[| AxT ?p; reflexive ?M; ?w : \<W> ?M |] ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.deriv_in_maximal",
     "[| consistent ?A ?V; maximal ?A ?V; ?A \<turnstile> ?p |]
      ==> ?p : ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Epistemic_Logic.K_distrib_K_imp",
     "?A \<turnstile> K ?i (imply ?G ?q) ==>
      ?A \<turnstile> imply (map (K ?i) ?G) (K ?i ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 2, template_var 2)),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)))
           ))),
    ("Epistemic_Logic.K_imply_weaken",
     "[| ?A \<turnstile> imply ?ps ?q; set ?ps <= set ?ps' |]
      ==> ?A \<turnstile> imply ?ps' ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))
           ))),
    ("Epistemic_Logic.soundness\<^sub>K\<^sub>4",
     "[| \<turnstile>\<^sub>K\<^sub>4 ?p; transitive ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.soundness\<^sub>K\<^sub>B",
     "[| \<turnstile>\<^sub>K\<^sub>B ?p; symmetric ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.soundness\<^sub>T",
     "[| \<turnstile>\<^sub>T ?p; reflexive ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.eval_semantics",
     "eval (?pi ?w) (semantics (Kripke ?W ?pi ?r) ?w) ?p =
      (Kripke ?W ?pi ?r, ?w \<Turnstile> ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 4, template_var 3)),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4),
               template_var 1)),
           template_var 3),
         template_var 0))),
    ("Epistemic_Logic.K_swap",
     "?A \<turnstile> imply (?p # ?q # ?G) ?r ==>
      ?A \<turnstile> imply (?q # ?p # ?G) ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1))),
               template_var 0))
           ))),
    ("Epistemic_Logic.exactly_one_in_maximal",
     "[| consistent ?A ?V; maximal ?A ?V |]
      ==> (?p : ?V) = ((\<^bold>\<not> ?p) ~: ?V)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1))))),
    ("Epistemic_Logic.tautology_imply_superset",
     "set ?ps <= set ?qs ==>
      tautology (imply ?ps ?r \<^bold>\<longrightarrow> imply ?qs ?r)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Epistemic_Logic.K_right_mp",
     "[| ?A \<turnstile> imply ?ps ?p;
         ?A \<turnstile> imply ?ps (?p \<^bold>\<longrightarrow> ?q) |]
      ==> ?A \<turnstile> imply ?ps ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("Epistemic_Logic.main\<^sub>S\<^sub>5'",
     "valid\<^sub>S\<^sub>5 ?p = (\<turnstile>\<^sub>S\<^sub>5' ?p)",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Epistemic_Logic.S5'_map_L",
     "\<turnstile>\<^sub>S\<^sub>5' (?p \<^bold>\<longrightarrow> ?q) ==>
      \<turnstile>\<^sub>S\<^sub>5' (L ?i ?p \<^bold>\<longrightarrow>
                                     L ?i ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_hole 0))),
                   template_hole 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 0))),
                 template_hole 0)))
           ))),
    ("Epistemic_Logic.pos_introspection",
     "[| transitive ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> K ?i ?p \<^bold>\<longrightarrow>
                              K ?i (K ?i ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Epistemic_Logic.consistent_consequent",
     "[| consistent ?A ?V; ?p : ?V;
         ?A \<turnstile> (?p \<^bold>\<longrightarrow> ?q) |]
      ==> consistent ?A ({?q} Un ?V)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 2))
           ))),
    ("Epistemic_Logic.soundness_AxT4",
     "[| (AxT \<oplus> Ax4) ?p; reflexive ?M & transitive ?M;
         ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.main\<^sub>S\<^sub>4",
     "valid\<^sub>S\<^sub>4 ?p = (\<turnstile>\<^sub>S\<^sub>4 ?p)",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("Epistemic_Logic.UN_finite_bound",
     "[| finite ?A; ?A <= \<Union> (range ?f) |]
      ==> EX m. ?A <= \<Union> (?f ` {..m})",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, t_empty), template_hole 2)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Epistemic_Logic.consequent_in_maximal",
     "[| consistent ?A ?V; maximal ?A ?V; ?p : ?V;
         (?p \<^bold>\<longrightarrow> ?q) : ?V |]
      ==> ?q : ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 2)
           ))),
    ("Epistemic_Logic.completeness\<^sub>S\<^sub>4",
     "ALL M.
         ALL w:\<W> M.
            reflexive M --> transitive M --> M, w \<Turnstile> ?p ==>
      \<turnstile>\<^sub>S\<^sub>4 ?p",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)
           ))),
    ("Epistemic_Logic.maximal_extension",
     "[| consistent ?A ?V;
         !!W. [| ?V <= W; consistent ?A W; maximal ?A W |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Epistemic_Logic.consistent_disjuncts",
     "[| consistent ?A ?V; (?p \<^bold>\<or> ?q) : ?V |]
      ==> consistent ?A ({?p} Un ?V) | consistent ?A ({?q} Un ?V)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0)),
                   template_var 2))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)),
                 template_var 2)))
           ))),
    ("Epistemic_Logic.K_DisL",
     "[| ?A \<turnstile> imply (?p # ?ps) ?q;
         ?A \<turnstile> imply (?p' # ?ps) ?q |]
      ==> ?A \<turnstile> imply ((?p \<^bold>\<or> ?p') # ?ps) ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 2)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0)),
                   template_var 2)),
               template_var 1))
           ))),
    ("Epistemic_Logic.soundness\<^sub>S\<^sub>4",
     "[| \<turnstile>\<^sub>S\<^sub>4 ?p; reflexive ?M & transitive ?M;
         ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.consistent_consequent'",
     "[| consistent ?A ?V; ?p : ?V;
         tautology (?p \<^bold>\<longrightarrow> ?q) |]
      ==> consistent ?A ({?q} Un ?V)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 2))
           ))),
    ("Epistemic_Logic.neg_introspection",
     "[| symmetric ?M; transitive ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> \<^bold>\<not> K ?i
        ?p \<^bold>\<longrightarrow>
                              K ?i (\<^bold>\<not> K ?i ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_hole 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_hole 0))))
           ))),
    ("Epistemic_Logic.soundness_AxTB4",
     "[| AxTB4 ?p; equivalence ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 2)),
                  template_app (template_hole 8, template_var 2))),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 3, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.main\<^sub>S\<^sub>5",
     "valid\<^sub>S\<^sub>5 ?p = (AxTB4 \<turnstile> ?p)",
     template_equation
      (template_app (template_hole 13, t_empty),
       template_app
        (template_app (template_hole 4, t_empty), template_var 0))),
    ("Epistemic_Logic.imply_completeness",
     "ALL M.
         ALL w:\<W> M.
            (ALL q:?G. M, w \<Turnstile> q) --> M, w \<Turnstile> ?p ==>
      EX qs. set qs <= ?G & ?A \<turnstile> imply qs ?p",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Epistemic_Logic.completeness\<^sub>S\<^sub>5",
     "ALL M. ALL w:\<W> M. equivalence M --> M, w \<Turnstile> ?p ==>
      AxTB4 \<turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)
           ))),
    ("Epistemic_Logic.K_DisE",
     "[| ?A \<turnstile> imply (?p # ?G) ?r;
         ?A \<turnstile> imply (?q # ?G) ?r;
         ?A \<turnstile> imply ?G (?p \<^bold>\<or> ?q) |]
      ==> ?A \<turnstile> imply ?G ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("Epistemic_Logic.AxT_reflexive",
     "[| ALL p. AxT p --> ?A p; consistent ?A ?V; maximal ?A ?V |]
      ==> ?V : {W. known ?V ?i <= W}",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, t_empty))
           ))),
    ("Epistemic_Logic.soundness\<^sub>S\<^sub>5",
     "[| AxTB4 \<turnstile> ?p; equivalence ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 3, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.imply_completeness_T",
     "ALL M.
         ALL w:\<W> M.
            reflexive M -->
            (ALL q:?G. M, w \<Turnstile> q) --> M, w \<Turnstile> ?p ==>
      EX qs. set qs <= ?G & \<turnstile>\<^sub>T imply qs ?p",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Epistemic_Logic.imply_completeness_KB",
     "ALL M.
         ALL w:\<W> M.
            symmetric M -->
            (ALL q:?G. M, w \<Turnstile> q) --> M, w \<Turnstile> ?p ==>
      EX qs. set qs <= ?G & \<turnstile>\<^sub>K\<^sub>B imply qs ?p",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Epistemic_Logic.imply_completeness_K4",
     "ALL M.
         ALL w:\<W> M.
            transitive M -->
            (ALL q:?G. M, w \<Turnstile> q) --> M, w \<Turnstile> ?p ==>
      EX qs. set qs <= ?G & \<turnstile>\<^sub>K\<^sub>4 imply qs ?p",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Epistemic_Logic.inconsistent_subset",
     "[| consistent ?A ?V; ~ consistent ?A ({?p} Un ?V);
         !!V'. [| set V' <= ?V;
                  ?A \<turnstile> imply (?p # V') \<^bold>\<bottom> |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 1),
                        template_hole 7)),
                    template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Epistemic_Logic.mcs\<^sub>K\<^sub>4_transitive",
     "ALL p. Ax4 p --> ?A p ==>
      transitive
       (Kripke (mcss ?A) Epistemic_Logic.pi (%i V. {W. known V i <= W}))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 t_empty),
               t_empty))
           ))),
    ("Epistemic_Logic.mcs\<^sub>K\<^sub>B_symmetric",
     "ALL p. AxB p --> ?A p ==>
      symmetric
       (Kripke (mcss ?A) Epistemic_Logic.pi (%i V. {W. known V i <= W}))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 t_empty),
               t_empty))
           ))),
    ("Epistemic_Logic.mcs\<^sub>T_reflexive",
     "ALL p. AxT p --> ?A p ==>
      reflexive
       (Kripke (mcss ?A) Epistemic_Logic.pi (%i V. {W. known V i <= W}))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 t_empty),
               t_empty))
           ))),
    ("Epistemic_Logic.imply_completeness_S4",
     "ALL M.
         ALL w:\<W> M.
            reflexive M -->
            transitive M -->
            (ALL q:?G. M, w \<Turnstile> q) --> M, w \<Turnstile> ?p ==>
      EX qs. set qs <= ?G & \<turnstile>\<^sub>S\<^sub>4 imply qs ?p",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Epistemic_Logic.canonical_model",
     "[| consistent ?A ?S; ?p : ?S |]
      ==> Kripke (mcss ?A) Epistemic_Logic.pi
           (%i V. {W. known V i
                      <= W}), Extend ?A ?S from_nat \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, t_empty)),
                     t_empty),
                   t_empty)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_hole 0)),
             template_var 0)
           ))),
    ("Epistemic_Logic.soundness",
     "[| !!M w p. [| ?A p; ?P M; w : \<W> M |] ==> M, w \<Turnstile> p;
         ?A \<turnstile> ?p; ?P ?M; ?w : \<W> ?M |]
      ==> ?M, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 2)
            ),
        template_predicate (template_app (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Epistemic_Logic.imply_completeness_S5",
     "ALL M.
         ALL w:\<W> M.
            equivalence M -->
            (ALL q:?G. M, w \<Turnstile> q) --> M, w \<Turnstile> ?p ==>
      EX qs. set qs <= ?G & AxTB4 \<turnstile> imply qs ?p",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Epistemic_Logic.AxB_symmetric",
     "[| ALL p. AxB p --> ?A p; consistent ?A ?V; maximal ?A ?V;
         consistent ?A ?W; maximal ?A ?W |]
      ==> (?W : {W. known ?V ?i <= W}) = (?V : {W. known ?W ?i <= W})",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 4, t_empty)),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, t_empty))))),
    ("Epistemic_Logic.AxB_symmetric'",
     "[| ALL p. AxB p --> ?A p; consistent ?A ?V; maximal ?A ?V;
         consistent ?A ?W; maximal ?A ?W; ?W : {W. known ?V ?i <= W} |]
      ==> ?V : {W. known ?W ?i <= W}",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 4, t_empty))
           ))),
    ("Epistemic_Logic.exists_finite_inconsistent",
     "[| ~ consistent ?A ({\<^bold>\<not> ?p} Un ?V);
         !!W. [| {\<^bold>\<not> ?p} Un W <= {\<^bold>\<not> ?p} Un ?V;
                 (\<^bold>\<not> ?p) ~: W; finite W;
                 ~ consistent ?A ({\<^bold>\<not> ?p} Un W) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_app (template_hole 6, template_var 2),
                            template_hole 5)),
                        template_hole 4)),
                    template_var 1))
                )
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Epistemic_Logic.Ax4_transitive",
     "[| ALL p. Ax4 p --> ?A p; consistent ?A ?V; maximal ?A ?V;
         ?W : {W. known ?V ?i <= W}; ?U : {W. known ?W ?i <= W} |]
      ==> ?U : {W. known ?V ?i <= W}",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app (template_hole 4, t_empty))
           ))),
    ("Epistemic_Logic.truth_lemma",
     "[| consistent ?A ?V; maximal ?A ?V |]
      ==> (?p : ?V) =
          (Kripke (mcss ?A) Epistemic_Logic.pi
            (%i V. {W. known V i <= W}), ?V \<Turnstile> ?p) &
          ((\<^bold>\<not> ?p) : ?V) =
          (Kripke (mcss ?A) Epistemic_Logic.pi
            (%i V. {W. known V i
                       <= W}), ?V \<Turnstile> \<^bold>\<not> ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 7,
                             template_app (template_hole 6, t_empty)),
                           t_empty),
                         t_empty)),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0)),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 7,
                           template_app (template_hole 6, t_empty)),
                         t_empty),
                       t_empty)),
                   template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           )))]
