Loading theory "Draft.Algorithm" (required by "Draft.SortingMoreTemplates" via "Draft.Sorting" via "Draft.Conservation")
Loading theory "HOL-Library.Cancellation" (required by "Draft.SortingMoreTemplates" via "Draft.Sorting" via "Draft.Conservation" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SortingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SortingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.591s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SortingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.300s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SortingMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.828s cpu time, 0.078s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SortingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "{}"
consts
  mini :: "'a list => ('a => 'b) => nat"
consts
  maxi :: "'a list => ('a => 'b) => nat"
consts
  enum ::
    "'a list
     => (('a => 'b) => 'a => nat => 'b => 'b => nat)
        => ('a => 'b) => nat => 'b => 'b => nat list"
consts
  offs :: "nat list => nat => nat list"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.442s elapsed time, 1.765s cpu time, 0.112s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SortingMoreTemplates" via "Draft.Sorting" via "Draft.Conservation")
consts
  fill ::
    "'a list
     => nat list
        => (('a => 'b) => 'a => nat => 'b => 'b => nat)
           => ('a => 'b) => nat => 'b => 'b => 'a option list"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order:
  "(%p. size_list size (fst (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.121s elapsed time, 4.265s cpu time, 0.870s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SortingMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "gcsort_setp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "{}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "Draft.Algorithm"
### 1.894s elapsed time, 7.296s cpu time, 1.230s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.856s elapsed time, 3.035s cpu time, 0.426s GC time
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.416s elapsed time, 8.448s cpu time, 2.110s GC time
Loading theory "Draft.Templates" (required by "Draft.SortingMoreTemplates" via "Draft.ExtrEqs")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SortingMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.562s elapsed time, 1.182s cpu time, 0.141s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.492s elapsed time, 9.851s cpu time, 2.228s GC time
Loading theory "Draft.Conservation" (required by "Draft.SortingMoreTemplates" via "Draft.Sorting")
Found termination order: "{}"
### theory "Draft.Conservation"
### 0.549s elapsed time, 0.720s cpu time, 0.133s GC time
Loading theory "Draft.Sorting" (required by "Draft.SortingMoreTemplates")
Found termination order: "{}"
### theory "Draft.Sorting"
### 0.226s elapsed time, 0.285s cpu time, 0.081s GC time
Loading theory "Draft.SortingMoreTemplates"
val templateLemmas =
   [("Sorting.gcsort_sort_input", "sort_inv ?key (0, [length ?xs], ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0)),
               template_var 0)))
         )),
    ("Sorting.gcsort_sort_form",
     "find ((<) (Suc 0)) (fst (snd (gcsort_aux ?index ?key ?p ?t))) = None",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)))),
       template_hole 0)),
    ("Sorting.offs_append",
     "offs (?ms @ ?ns) ?k = offs ?ms ?k @ offs ?ns (foldl (+) ?k ?ms)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0),
             template_var 2))))),
    ("Sorting.offs_base_zero",
     "?i < length ?ns ==> offs ?ns ?k ! ?i = offs ?ns 0 ! ?i + ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0)),
               template_var 2)),
           template_var 0)))),
    ("Sorting.offs_suc",
     "?i < length ?ns ==> offs ?ns (Suc ?k) ! ?i = Suc (offs ?ns ?k ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("Sorting.mini_maxi_keys_le",
     "?x : set ?xs ==>
      ?key (?xs ! mini ?xs ?key) <= ?key (?xs ! maxi ?xs ?key)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Sorting.gcsort_sorted",
     "[| index_less ?index ?key; index_mono ?index ?key; length ?xs <= ?p |]
      ==> sorted (map ?key (gcsort ?index ?key ?p ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 0),
                 template_var 1)))
           ))),
    ("Sorting.gcsort_sort_intro",
     "[| sort_inv ?key ?t; add_inv ?n ?t;
         find ((<) (Suc 0)) (fst (snd ?t)) = None |]
      ==> sorted (map ?key (gcsort_out ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, t_empty),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Sorting.mini_maxi_keys_eq",
     "[| ?key (?xs ! mini ?xs ?key) = ?key (?xs ! maxi ?xs ?key);
         ?x : set ?xs |]
      ==> ?key ?x = ?key (?xs ! maxi ?xs ?key)",
     template_implication
      ([template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2))),
          template_app
           (template_var 2,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 2)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)))))),
    ("Sorting.offs_pred_ub_less",
     "[| offs_pred ?ns ?ub ?xs ?index ?key ?mi ?ma; ?i < length ?ns;
         0 < offs_num (length ?ns) ?xs ?index ?key ?mi ?ma ?i |]
      ==> ?ns ! ?i < ?ub",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 7)),
        template_inequation
         (less_than, template_hole 2,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 1,
                        template_app (template_hole 3, template_var 7)),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 7), template_var 0),
         template_var 6))),
    ("Sorting.round_sort_inv",
     "[| index_less ?index ?key; index_mono ?index ?key; bn_inv ?p ?q ?t;
         add_inv ?n ?t; sort_inv ?key ?t |]
      ==> sort_inv ?key (Algorithm.round ?index ?key ?p ?q ?r ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 5),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 0),
               template_var 2))
           ))),
    ("Sorting.gcsort_sort_inv",
     "[| index_less ?index ?key; index_mono ?index ?key; add_inv ?n ?t;
         ?n <= ?p; ?t' : gcsort_set ?index ?key ?p ?t; sort_inv ?key ?t |]
      ==> sort_inv ?key ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 0)
           ))),
    ("Sorting.offs_nth",
     "[| find ((<) (Suc 0)) ?ns = None; foldl (+) 0 ?ns = ?n; ?k < ?n |]
      ==> EX i<length ?ns. offs ?ns 0 ! i = ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, t_empty), template_var 2),
          template_hole 8),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 5),
              template_hole 9),
            template_var 2),
          template_var 1),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Sorting.fill_offs_enum_count_none",
     "[| index_less ?index ?key; !!x. x : set ?xs ==> ?key x : {?mi..?ma};
         0 < ?n |]
      ==> count
           (mset
             (fill ?xs (offs (enum ?xs ?index ?key ?n ?mi ?ma) 0) ?index
               ?key (length ?xs) ?mi ?ma))
           None =
          0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 4, template_var 3),
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 2, template_var 3), template_var 5),
 template_var 4),
                                     template_var 0),
                                   template_var 2),
                                 template_var 1)),
                             template_hole 8)),
                         template_var 5),
                       template_var 4),
                     template_app (template_hole 1, template_var 3)),
                   template_var 2),
                 template_var 1))),
           template_hole 0),
         template_hole 8))),
    ("Sorting.fill_sort_inv",
     "[| index_less ?index ?key; index_mono ?index ?key;
         !!x. x : set ?xs ==> ?key x : {?mi..?ma} |]
      ==> sort_inv ?key
           (?u, enum ?xs ?index ?key ?n ?mi ?ma,
            map the
             (fill ?xs (offs (enum ?xs ?index ?key ?n ?mi ?ma) 0) ?index
               ?key (length ?xs) ?mi ?ma))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 5),
             template_app
              (template_app (template_hole 8, template_var 1),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 6, template_var 4),
                             template_var 6),
                           template_var 5),
                         template_var 0),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_var 4),
                               template_app
                                (template_app
                                  (template_hole 2,
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 6, template_var 4), template_var 6),
     template_var 5),
   template_var 0),
 template_var 3),
                                     template_var 2)),
                                 template_hole 1)),
                             template_var 6),
                           template_var 5),
                         template_app (template_hole 0, template_var 4)),
                       template_var 3),
                     template_var 2)))))
           ))),
    ("Sorting.fill_count_none",
     "[| index_less ?index ?key; !!x. x : set ?xs ==> ?key x : {?mi..?ma};
         ?ns ~= []; offs_pred ?ns ?ub ?xs ?index ?key ?mi ?ma;
         length ?xs <= ?ub |]
      ==> count (mset (fill ?xs ?ns ?index ?key ?ub ?mi ?ma)) None =
          ?ub - length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 1),
                        template_var 0),
                      template_var 4),
                    template_var 6),
                  template_var 5),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 4),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_var 4),
                           template_var 1),
                         template_var 6),
                       template_var 5),
                     template_var 0),
                   template_var 3),
                 template_var 2))),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 6, template_var 4))))),
    ("Sorting.offs_enum_next_le",
     "[| index_less ?index ?key; ?i < ?j; ?j < ?n;
         !!x. x : set ?xs ==> ?key x : {?mi..?ma} |]
      ==> offs_next (offs (enum ?xs ?index ?key ?n ?mi ?ma) ?k)
           (length ?xs + ?k) ?xs ?index ?key ?mi ?ma ?i
          <= offs (enum ?xs ?index ?key ?n ?mi ?ma) ?k ! ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 8),
              template_var 7)
            ),
        template_inequation (less_than, template_var 6, template_var 5),
        template_inequation (less_than, template_var 5, template_var 4),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 3, template_var 3), template_var 8),
                                     template_var 7),
                                   template_var 4),
                                 template_var 2),
                               template_var 1)),
                           template_var 0)),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 3)),
                         template_var 0)),
                     template_var 3),
                   template_var 8),
                 template_var 7),
               template_var 2),
             template_var 1),
           template_var 6),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 8),
                         template_var 7),
                       template_var 4),
                     template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 5)))),
    ("Sorting.fill_index",
     "[| index_less ?index ?key; !!x. x : set ?xs ==> ?key x : {?mi..?ma};
         offs_pred ?ns ?ub ?xs ?index ?key ?mi ?ma; ?i < length ?ns;
         0 < offs_num (length ?ns) ?xs ?index ?key ?mi ?ma ?i;
         ?j : {?ns ! ?i..<offs_next ?ns ?ub ?xs ?index ?key ?mi ?ma ?i};
         fill ?xs ?ns ?index ?key ?ub ?mi ?ma ! ?j = Some ?x |]
      ==> ?index ?key ?x (length ?ns) ?mi ?ma = ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 9),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 4),
                        template_var 3),
                      template_var 7),
                    template_var 9),
                  template_var 8),
                template_var 6),
              template_var 5)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 11, template_var 4)),
        template_inequation
         (less_than, template_hole 10,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 11, template_var 4)),
                      template_var 7),
                    template_var 9),
                  template_var 8),
                template_var 6),
              template_var 5),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 2)),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 5, template_var 4),
                              template_var 3),
                            template_var 7),
                          template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 2)))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 7),
                          template_var 4),
                        template_var 9),
                      template_var 8),
                    template_var 3),
                  template_var 6),
                template_var 5)),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_var 9, template_var 8),
                 template_var 0),
               template_app (template_hole 11, template_var 4)),
             template_var 6),
           template_var 5),
         template_var 2))),
    ("Sorting.fill_offs_enum_index",
     "[| index_less ?index ?key; !!x. x : set ?xs ==> ?key x : {?mi..?ma};
         ?i < ?n; 0 < offs_num ?n ?xs ?index ?key ?mi ?ma ?i;
         ?j : {offs (enum ?xs ?index ?key ?n ?mi ?ma) 0 !
               ?i..<offs_next (offs (enum ?xs ?index ?key ?n ?mi ?ma) 0)
                     (length ?xs) ?xs ?index ?key ?mi ?ma ?i};
         fill ?xs (offs (enum ?xs ?index ?key ?n ?mi ?ma) 0) ?index ?key
          (length ?xs) ?mi ?ma !
         ?j =
         Some ?x |]
      ==> ?index ?key ?x ?n ?mi ?ma = ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 8),
              template_var 7)
            ),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_hole 13,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 2),
                      template_var 6),
                    template_var 8),
                  template_var 7),
                template_var 5),
              template_var 4),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_hole 7, template_var 6),
                                    template_var 8),
                                  template_var 7),
                                template_var 2),
                              template_var 5),
                            template_var 4)),
                        template_hole 13)),
                    template_var 3)),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 6,
                                template_app
                                 (template_app
                                   (template_hole 8,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 7, template_var 6), template_var 8),
      template_var 7),
    template_var 2),
  template_var 5),
template_var 4)),
                                  template_hole 13)),
                              template_app
                               (template_hole 5, template_var 6)),
                            template_var 6),
                          template_var 8),
                        template_var 7),
                      template_var 5),
                    template_var 4),
                  template_var 3)))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 6),
                          template_app
                           (template_app
                             (template_hole 8,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 7, template_var 6), template_var 8),
template_var 7),
                                    template_var 2),
                                  template_var 5),
                                template_var 4)),
                            template_hole 13)),
                        template_var 8),
                      template_var 7),
                    template_app (template_hole 5, template_var 6)),
                  template_var 5),
                template_var 4)),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_var 8, template_var 7),
                 template_var 0),
               template_var 2),
             template_var 5),
           template_var 4),
         template_var 3)))]:
   (string * thm * template) list
### theory "Draft.SortingMoreTemplates"
### 0.651s elapsed time, 1.586s cpu time, 1.062s GC time
val it = (): unit
