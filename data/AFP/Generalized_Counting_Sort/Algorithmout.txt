Loading theory "Draft.Algorithm" (required by "Draft.AlgorithmMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.592s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.939s cpu time, 0.035s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AlgorithmMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
consts
  mini :: "'a list => ('a => 'b) => nat"
consts
  maxi :: "'a list => ('a => 'b) => nat"
### theory "HOL-Library.Nat_Bijection"
### 0.388s elapsed time, 1.554s cpu time, 0.107s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AlgorithmMoreTemplates" via "Draft.ExtrEqs")
consts
  enum ::
    "'a list
     => (('a => 'b) => 'a => nat => 'b => 'b => nat)
        => ('a => 'b) => nat => 'b => 'b => nat list"
consts
  offs :: "nat list => nat => nat list"
consts
  fill ::
    "'a list
     => nat list
        => (('a => 'b) => 'a => nat => 'b => 'b => nat)
           => ('a => 'b) => nat => 'b => 'b => 'a option list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.966s elapsed time, 3.639s cpu time, 0.798s GC time
Found termination order:
  "(%p. size_list size (fst (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.068s elapsed time, 3.825s cpu time, 0.798s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "gcsort_setp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Algorithm"
### 1.731s elapsed time, 5.922s cpu time, 0.974s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.961s elapsed time, 5.833s cpu time, 0.995s GC time
Loading theory "Draft.Templates" (required by "Draft.AlgorithmMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AlgorithmMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.459s elapsed time, 0.495s cpu time, 0.042s GC time
Loading theory "Draft.AlgorithmMoreTemplates"
val templateLemmas =
   [("Algorithm.add_le", "?m <= foldl (+) ?m ?ns",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("Algorithm.bn_count_le", "bn_count ?ns <= foldl (+) 0 ?ns",
     template_inequation
      (less_equals, template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0))),
    ("Algorithm.add_zeros", "foldl (+) ?m (replicate ?n 0) = ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 1)),
    ("Algorithm.enum_length",
     "length (enum ?xs ?index ?key ?n ?mi ?ma) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("Algorithm.gcsort_add_input",
     "add_inv (length ?xs) (0, [length ?xs], ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 5, template_var 0)),
                   template_hole 0)),
               template_var 0)))
         )),
    ("Algorithm.add_base_zero", "foldl (+) ?k ?ns = foldl (+) 0 ?ns + ?k",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 0)),
         template_var 1))),
    ("Algorithm.add_suc", "foldl (+) (Suc ?m) ?ns = Suc (foldl (+) ?m ?ns)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)))),
    ("Algorithm.fill_length",
     "length (fill ?xs ?ns ?index ?key ?n ?mi ?ma) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("Algorithm.gcsort_aux_set",
     "gcsort_aux ?index ?key ?p ?t : gcsort_set ?index ?key ?p ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Algorithm.add_replicate",
     "foldl (+) ?k (replicate ?m ?n) = ?k + ?m * ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algorithm.maxi_less", "0 < length ?xs ==> maxi ?xs ?key < length ?xs",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Algorithm.mini_less", "0 < length ?xs ==> mini ?xs ?key < length ?xs",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Algorithm.add_base",
     "foldl (+) (?k + ?m) ?ns = foldl (+) ?m ?ns + ?k",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0)),
         template_var 2))),
    ("Algorithm.enum_add_le",
     "foldl (+) 0 (enum ?xs ?index ?key ?n ?mi ?ma) <= length ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 5))),
    ("Algorithm.bn_comp_snd_less",
     "?r < ?q ==> snd (bn_comp ?n ?p ?q ?r) < ?q",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2),
             template_var 3)),
         template_var 2))),
    ("Algorithm.gcsort_setp_gcsort_set_eq",
     "gcsort_setp ?index ?key ?p ?t =
      (%x. x : gcsort_set ?index ?key ?p ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       t_empty)),
    ("Algorithm.add_mono",
     "?m <= ?n ==> foldl (+) ?m ?ns <= foldl (+) ?n ?ns",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)))),
    ("Algorithm.bn_comp_fst_ge",
     "bn_valid ?n ?p ?q ==> ?n <= fst (bn_comp ?n ?p ?q ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))))),
    ("Algorithm.add_max", "?ns ~= [] ==> Max (set ?ns) <= foldl (+) 0 ?ns",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)))),
    ("Algorithm.maxi_ub",
     "?x : set ?xs ==> ?key ?x <= ?key (?xs ! maxi ?xs ?key)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Algorithm.mini_lb",
     "?x : set ?xs ==> ?key (?xs ! mini ?xs ?key) <= ?key ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_var 0, template_var 2)))),
    ("Algorithm.mini_maxi_neq",
     "Suc 0 < length ?xs ==> mini ?xs ?key ~= maxi ?xs ?key",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algorithm.enum_max_le",
     "0 < ?n ==> Max (set (enum ?xs ?index ?key ?n ?mi ?ma)) <= length ?xs",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 5)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 5),
                 template_var 1),
               template_var 0))),
         template_app (template_hole 0, template_var 4)))),
    ("Algorithm.bn_comp_fst_nonzero",
     "[| bn_valid ?n ?p ?q; 0 < ?n |] ==> 0 < fst (bn_comp ?n ?p ?q ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 2, template_var 3)],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))))),
    ("Algorithm.gcsort_subset",
     "?t' : gcsort_set ?index ?key ?p ?t ==>
      gcsort_set ?index ?key ?p ?t' <= gcsort_set ?index ?key ?p ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Algorithm.round_nil",
     "(fst (snd (Algorithm.round ?index ?key ?p ?q ?r ?t)) ~= []) =
      (EX n:set (fst (snd ?t)). 0 < n)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 5, template_var 5),
                           template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0)))),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)))),
         t_empty))),
    ("Algorithm.add_update",
     "?i < length ?ns ==>
      foldl (+) ?m (?ns[?i := Suc (?ns ! ?i)]) = Suc (foldl (+) ?m ?ns)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0),
             template_var 1))))),
    ("Algorithm.mini_maxi_nths_le",
     "length ?xs <= Suc (Suc ?n) ==>
      length (nths ?xs (- {mini ?xs ?key, maxi ?xs ?key})) <= ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_hole 6,
            template_app (template_hole 6, template_var 1)))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0)),
                   template_hole 0))))),
         template_var 1))),
    ("Algorithm.mini_maxi_nths",
     "length (nths ?xs (- {mini ?xs ?key, maxi ?xs ?key})) =
      (case length ?xs of 0 => 0 | Suc 0 => 0 | Suc (Suc n) => n)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_hole 2))))),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), t_empty),
         template_app (template_hole 8, template_var 1)))),
    ("Algorithm.bn_inv_intro",
     "foldl (+) 0 ?ns <= ?p ==>
      bn_inv (?p - bn_count ?ns) (foldl (+) 0 ?ns - bn_count ?ns)
       (?u, ?ns, ?xs)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 7, template_hole 6),
              template_hole 5),
            template_var 3),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app (template_hole 2, template_var 3))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_hole 5),
                     template_var 3)),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Algorithm.round_add_inv",
     "[| index_less ?index ?key; bn_inv ?p ?q ?t; add_inv ?n ?t |]
      ==> add_inv ?n (Algorithm.round ?index ?key ?p ?q ?r ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 0),
               template_var 2))
           ))),
    ("Algorithm.gcsort_add_inv",
     "[| index_less ?index ?key; ?t' : gcsort_set ?index ?key ?p ?t;
         add_inv ?n ?t; ?n <= ?p |]
      ==> add_inv ?n ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 3)
           ))),
    ("Algorithm.round_len_eq",
     "bn_count (fst (snd ?t)) = foldl (+) 0 (fst (snd ?t)) ==>
      length (fst (snd (Algorithm.round ?index ?key ?p ?q ?r ?t))) =
      foldl (+) 0 (fst (snd ?t))",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 5))),
          template_app
           (template_app
             (template_app (template_hole 4, template_hole 3),
              template_hole 2),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 5))))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0),
                 template_var 5)))),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 5)))))),
    ("Algorithm.round_max_eq",
     "[| fst (snd ?t) ~= []; Max (set (fst (snd ?t))) = Suc 0 |]
      ==> Max (set (fst (snd (Algorithm.round ?index ?key ?p ?q ?r ?t)))) =
          Suc 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 5)),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 5)))),
          template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0),
                   template_var 5))))),
         template_app (template_hole 2, template_hole 1)))),
    ("Algorithm.round_max_less",
     "[| fst (snd ?t) ~= []; Suc 0 < Max (set (fst (snd ?t))) |]
      ==> Max (set (fst (snd (Algorithm.round ?index ?key ?p ?q ?r ?t))))
          < Max (set (fst (snd ?t)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 5)),
              template_hole 6)
            ),
        template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_app
           (template_hole 2,
            template_app
             (template_hole 1,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 5)))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0),
                   template_var 5))))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 5))))))),
    ("Algorithm.enum_add",
     "[| index_less ?index ?key; 0 < ?n;
         !!x. x : set ?xs ==> ?key x : {?mi..?ma} |]
      ==> foldl (+) 0 (enum ?xs ?index ?key ?n ?mi ?ma) = length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4)
            ),
        template_inequation (less_than, template_hole 10, template_var 3),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 10),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("Algorithm.round_len_less",
     "[| bn_inv ?p ?q ?t; ?r < ?q;
         (?r +
          (foldl (+) 0 (fst (snd ?t)) - bn_count (fst (snd ?t))) * ?p) mod
         ?q =
         0 |]
      ==> (fst (Algorithm.round ?index ?key ?p ?q ?r ?t) +
           length (fst (snd (Algorithm.round ?index ?key ?p ?q ?r ?t)))) *
          ?q =
          (fst ?t + bn_count (fst (snd ?t))) * ?q +
          (foldl (+) 0 (fst (snd ?t)) - bn_count (fst (snd ?t))) * ?p +
          ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation (less_than, template_var 2, template_var 4),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 7, template_hole 10),
                            template_hole 6),
                          template_app
                           (template_hole 5,
                            template_app
                             (template_hole 4, template_var 3)))),
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 4, template_var 3))))),
                  template_var 5))),
            template_var 4),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 0),
                           template_var 5),
                         template_var 4),
                       template_var 2),
                     template_var 3))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 1),
                               template_var 0),
                             template_var 5),
                           template_var 4),
                         template_var 2),
                       template_var 3)))))),
           template_var 4),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app (template_hole 2, template_var 3)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4, template_var 3))))),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_app (template_hole 7, template_hole 10),
                           template_hole 6),
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4, template_var 3)))),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 3))))),
                 template_var 5))),
           template_var 2)))),
    ("Algorithm.round_len",
     "[| length ?xs = foldl (+) 0 ?ns; length ?xs <= ?p |]
      ==> if bn_count ?ns < length ?xs
          then fst (gcsort_round ?index ?key ?p ?ns ?xs) +
               length (fst (snd (gcsort_round ?index ?key ?p ?ns ?xs))) =
               ?p
          else length (fst (snd (gcsort_round ?index ?key ?p ?ns ?xs))) =
               length ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 4),
          template_app
           (template_app
             (template_app (template_hole 14, template_hole 13),
              template_hole 12),
            template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 4),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 3)),
                   template_app (template_hole 15, template_var 4))),
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 6, template_var 1),
                                   template_var 0),
                                 template_app
                                  (template_app
                                    (template_hole 5, template_var 2),
                                   template_app
                                    (template_hole 8, template_var 3))),
                               template_app
                                (template_app
                                  (template_hole 5,
                                   template_app
                                    (template_hole 15, template_var 4)),
                                 template_app
                                  (template_hole 8, template_var 3))),
                             template_hole 12),
                           template_app
                            (template_app
                              (template_hole 4, template_hole 12),
                             template_app
                              (template_app
                                (template_hole 3, template_var 3),
                               template_var 4))))),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 6, template_var 1),
                                     template_var 0),
                                   template_app
                                    (template_app
(template_hole 5, template_var 2),
                                     template_app
(template_hole 8, template_var 3))),
                                 template_app
                                  (template_app
                                    (template_hole 5,
                                     template_app
(template_hole 15, template_var 4)),
                                   template_app
                                    (template_hole 8, template_var 3))),
                               template_hole 12),
                             template_app
                              (template_app
                                (template_hole 4, template_hole 12),
                               template_app
                                (template_app
                                  (template_hole 3, template_var 3),
                                 template_var 4)))))))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_var 1),
                                 template_var 0),
                               template_app
                                (template_app
                                  (template_hole 5, template_var 2),
                                 template_app
                                  (template_hole 8, template_var 3))),
                             template_app
                              (template_app
                                (template_hole 5,
                                 template_app
                                  (template_hole 15, template_var 4)),
                               template_app
                                (template_hole 8, template_var 3))),
                           template_hole 12),
                         template_app
                          (template_app (template_hole 4, template_hole 12),
                           template_app
                            (template_app (template_hole 3, template_var 3),
                             template_var 4))))))),
               template_app (template_hole 15, template_var 4)))
           )))]:
   (string * thm * template) list
### theory "Draft.AlgorithmMoreTemplates"
### 0.295s elapsed time, 0.446s cpu time, 0.051s GC time
val it = (): unit
