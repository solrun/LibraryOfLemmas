   [("Closures2.SUPSEQ_subset", "?A <= SUPSEQ ?A",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Closures2.SUPSEQ_star", "SUPSEQ (?A\<star>) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Closures2.closure_SUBSEQ", "regular (SUBSEQ ?A)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Closures2.closure_SUPSEQ", "regular (SUPSEQ ?A)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Closures2.lang_UP", "lang (UP ?r) = SUPSEQ (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Closures2.subseq_good", "good subseq ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)
         )),
    ("Closures2.SUBSEQ_complement", "- SUBSEQ ?A = SUPSEQ (- SUBSEQ ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Closures2.main_lemma", "EX M. finite M & SUPSEQ ?A = SUPSEQ M",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Closures2.SUPSEQ_union", "SUPSEQ (?A Un ?B) = SUPSEQ ?A Un SUPSEQ ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Closures2.SUPSEQ_conc",
     "SUPSEQ (?A \<cdot> ?B) = SUPSEQ ?A \<cdot> SUPSEQ ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Closures2.SUPSEQ_regular", "regular ?A ==> regular (SUPSEQ ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Closures2.SUPSEQ_atom",
     "SUPSEQ {[?c]} = UNIV \<cdot> {[?c]} \<cdot> UNIV",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_hole 2)),
           template_hole 0)))),
    ("Closures2.subseq_strict_length",
     "[| subseq ?x ?y; ?x ~= ?y |] ==> length ?x < length ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Closures2.subseq_Higman_antichains",
     "ALL x:?A. ALL y:?A. x ~= y --> incomparable subseq x y ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0), t_empty)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0))))]
