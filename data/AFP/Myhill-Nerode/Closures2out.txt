Loading theory "Draft.Folds" (required by "Draft.Closures2Templates" via "Draft.Closures2" via "Draft.Closures" via "Draft.Myhill" via "Draft.Myhill_2" via "Draft.Myhill_1")
Loading theory "Draft.Templates" (required by "Draft.Closures2Templates" via "Draft.ExtrEqs")
### theory "Draft.Folds"
### 0.045s elapsed time, 0.132s cpu time, 0.000s GC time
Loading theory "Draft.Myhill_1" (required by "Draft.Closures2Templates" via "Draft.Closures2" via "Draft.Closures" via "Draft.Myhill" via "Draft.Myhill_2")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Closures2Templates")
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.116s cpu time, 0.097s GC time
Found termination order: "{}"
### theory "Draft.Myhill_1"
### 0.761s elapsed time, 1.357s cpu time, 0.097s GC time
Loading theory "Draft.Myhill_2" (required by "Draft.Closures2Templates" via "Draft.Closures2" via "Draft.Closures" via "Draft.Myhill")
### Ambiguous input (line 18 of "$AFP/Myhill-Nerode/Myhill_2.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>tag_eq_applied" ("_position" x) ("_position" tag)
###     ("_position" y))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###     ("\<^const>Myhill_2.tag_eq" ("_position" tag))))
### ("\<^const>Pure.eq"
###   ("\<^const>HOL.eq" ("\<^const>HOL.eq" ("_position" x) ("_position" tag))
###     ("_position" y))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###     ("\<^const>Myhill_2.tag_eq" ("_position" tag))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x)
###     ("_cargs" ("\<^const>Myhill_2.tag_eq" ("_position" tag))
###       ("_position" y)))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###     ("\<^const>Myhill_2.tag_eq" ("_position" tag))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Myhill-Nerode/Myhill_2.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###       ("_Finset" ("_position" x)))
###     ("\<^const>Myhill_1.str_eq_applied"
###       ("\<^const>HOL.iff"
###         ("\<^const>Relation.Image"
###           ("\<^const>Myhill_1.str_eq" ("_position" A))
###           ("_Finset" ("_position" y)))
###         ("_position" x))
###       ("_position" A) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###       ("_Finset" ("_position" x)))
###     ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###       ("\<^const>Myhill_1.str_eq_applied"
###         ("\<^const>HOL.iff" ("_Finset" ("_position" y)) ("_position" x))
###         ("_position" A) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###     ("\<^const>Myhill_1.str_eq_applied"
###       ("\<^const>HOL.iff"
###         ("\<^const>HOL.eq" ("_Finset" ("_position" x))
###           ("\<^const>Relation.Image"
###             ("\<^const>Myhill_1.str_eq" ("_position" A))
###             ("_Finset" ("_position" y))))
###         ("_position" x))
###       ("_position" A) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relation.Image"
###         ("\<^const>Myhill_1.str_eq" ("_position" A))
###         ("_Finset" ("_position" x)))
###       ("\<^const>Relation.Image"
###         ("\<^const>Myhill_1.str_eq" ("_position" A))
###         ("_Finset" ("_position" y))))
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###       ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied"
###     ("\<^const>HOL.iff"
###       ("\<^const>HOL.eq"
###         ("\<^const>Relation.Image"
###           ("\<^const>Myhill_1.str_eq" ("_position" A))
###           ("_Finset" ("_position" x)))
###         ("\<^const>Relation.Image"
###           ("\<^const>Myhill_1.str_eq" ("_position" A))
###           ("_Finset" ("_position" y))))
###       ("_position" x))
###     ("_position" A) ("_position" y)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Myhill-Nerode/Myhill_2.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" x)
###           ("_cargs" ("\<^const>Myhill_2.tag_eq" ("_position" tag))
###             ("_position" y))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>List.append" ("_position" x) ("_position" z))
###             ("_position" A)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("\<^const>List.append" ("_position" y) ("_position" z))
###         ("_position" A)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq" ("_position" x) ("_position" tag))
###           ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>List.append" ("_position" x) ("_position" z))
###             ("_position" A)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("\<^const>List.append" ("_position" y) ("_position" z))
###         ("_position" A)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Myhill_2.tag_eq_applied" ("_position" x)
###           ("_position" tag) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>List.append" ("_position" x) ("_position" z))
###             ("_position" A)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("\<^const>List.append" ("_position" y) ("_position" z))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Myhill_2"
### 0.245s elapsed time, 0.306s cpu time, 0.086s GC time
Loading theory "Draft.Myhill" (required by "Draft.Closures2Templates" via "Draft.Closures2" via "Draft.Closures")
### Ambiguous input (line 23 of "$AFP/Myhill-Nerode/Myhill.thy") produces 19 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###       ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###         ("_applC" ("_position" Derivs) ("_position" x)))
###       ("_position" A))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###     ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###       ("_applC" ("_position" Derivs) ("_position" x)))
###     ("\<^const>HOL.eq" ("_position" A)
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" y) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###         ("\<^const>HOL.iff" ("_position" y)
###           ("_applC" ("_position" Derivs) ("_position" x))))
###       ("_position" A))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###     ("\<^const>HOL.iff" ("_position" y)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" Derivs)
###           ("_cargs" ("_position" x) ("_position" A)))
###         ("_applC" ("_position" Derivs)
###           ("_cargs" ("_position" y) ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###       ("_position" y))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" x) ("_position" A)))
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" y) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###       ("\<^const>HOL.iff" ("_position" y)
###         ("_applC" ("_position" Derivs)
###           ("_cargs" ("_position" x) ("_position" A)))))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###         ("\<^const>HOL.iff" ("_position" y) ("_position" Derivs)))
###       ("_cargs" ("_position" x) ("_position" A)))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###         ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###           ("_position" Derivs))
###         ("_position" x))
###       ("_position" A))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###     ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###       ("_position" Derivs))
###     ("\<^const>HOL.eq" ("_applC" ("_position" x) ("_position" A))
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" y) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###       ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###         ("_position" Derivs))
###       ("_applC" ("_position" x) ("_position" A)))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Myhill"
### 0.109s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.Closures" (required by "Draft.Closures2Templates" via "Draft.Closures2")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 218 of "$AFP/Myhill-Nerode/Closures.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" x) ("_position" B)
###     ("_Bex" ("_position" y) ("_position" B)
###       ("\<^const>HOL.not_equal" ("_position" x)
###         ("\<^const>Myhill_1.str_eq_applied"
###           ("\<^const>HOL.conj" ("_position" y) ("_position" x))
###           ("_position" A) ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" x) ("_position" B)
###     ("_Bex" ("_position" y) ("_position" B)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" y))
###         ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" x) ("_position" B)
###     ("_Bex" ("_position" y) ("_position" B)
###       ("\<^const>Myhill_1.str_eq_applied"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" y))
###           ("_position" x))
###         ("_position" A) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied"
###     ("_Bex" ("_position" x) ("_position" B)
###       ("_Bex" ("_position" y) ("_position" B)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" y))
###           ("_position" x))))
###     ("_position" A) ("_position" y)))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" x) ("_position" B)
###     ("\<^const>Myhill_1.str_eq_applied"
###       ("_Bex" ("_position" y) ("_position" B)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" y))
###           ("_position" x)))
###       ("_position" A) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Closures"
### 0.209s elapsed time, 0.213s cpu time, 0.000s GC time
Loading theory "Draft.Closures2" (required by "Draft.Closures2Templates")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Closures2"
### 0.297s elapsed time, 0.370s cpu time, 0.095s GC time
Loading theory "Draft.Closures2Templates"
val templateLemmas =
   [("Closures2.SUPSEQ_subset", "?A <= SUPSEQ ?A",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Closures2.SUPSEQ_star", "SUPSEQ (?A\<star>) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Closures2.closure_SUBSEQ", "regular (SUBSEQ ?A)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Closures2.closure_SUPSEQ", "regular (SUPSEQ ?A)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Closures2.lang_UP", "lang (UP ?r) = SUPSEQ (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Closures2.subseq_good", "good subseq ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)
         )),
    ("Closures2.SUBSEQ_complement", "- SUBSEQ ?A = SUPSEQ (- SUBSEQ ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Closures2.main_lemma", "EX M. finite M & SUPSEQ ?A = SUPSEQ M",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Closures2.SUPSEQ_union", "SUPSEQ (?A Un ?B) = SUPSEQ ?A Un SUPSEQ ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Closures2.SUPSEQ_conc",
     "SUPSEQ (?A \<cdot> ?B) = SUPSEQ ?A \<cdot> SUPSEQ ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Closures2.SUPSEQ_regular", "regular ?A ==> regular (SUPSEQ ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Closures2.SUPSEQ_atom",
     "SUPSEQ {[?c]} = UNIV \<cdot> {[?c]} \<cdot> UNIV",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_hole 2)),
           template_hole 0)))),
    ("Closures2.subseq_strict_length",
     "[| subseq ?x ?y; ?x ~= ?y |] ==> length ?x < length ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Closures2.subseq_Higman_antichains",
     "ALL x:?A. ALL y:?A. x ~= y --> incomparable subseq x y ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0), t_empty)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Closures2Templates"
### 0.374s elapsed time, 0.552s cpu time, 0.100s GC time
val it = (): unit
