Loading theory "Draft.Templates" (required by "Draft.Non_Regular_LanguagesTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Folds" (required by "Draft.Non_Regular_LanguagesTemplates" via "Draft.Non_Regular_Languages" via "Draft.Myhill" via "Draft.Myhill_2" via "Draft.Myhill_1")
### theory "Draft.Folds"
### 0.036s elapsed time, 0.103s cpu time, 0.000s GC time
Loading theory "Draft.Myhill_1" (required by "Draft.Non_Regular_LanguagesTemplates" via "Draft.Non_Regular_Languages" via "Draft.Myhill" via "Draft.Myhill_2")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.167s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Non_Regular_LanguagesTemplates")
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.134s cpu time, 0.099s GC time
Found termination order: "{}"
### theory "Draft.Myhill_1"
### 0.766s elapsed time, 1.384s cpu time, 0.099s GC time
Loading theory "Draft.Myhill_2" (required by "Draft.Non_Regular_LanguagesTemplates" via "Draft.Non_Regular_Languages" via "Draft.Myhill")
### Ambiguous input (line 18 of "$AFP/Myhill-Nerode/Myhill_2.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>tag_eq_applied" ("_position" x) ("_position" tag)
###     ("_position" y))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###     ("\<^const>Myhill_2.tag_eq" ("_position" tag))))
### ("\<^const>Pure.eq"
###   ("\<^const>HOL.eq" ("\<^const>HOL.eq" ("_position" x) ("_position" tag))
###     ("_position" y))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###     ("\<^const>Myhill_2.tag_eq" ("_position" tag))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x)
###     ("_cargs" ("\<^const>Myhill_2.tag_eq" ("_position" tag))
###       ("_position" y)))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###     ("\<^const>Myhill_2.tag_eq" ("_position" tag))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Myhill-Nerode/Myhill_2.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###       ("_Finset" ("_position" x)))
###     ("\<^const>Myhill_1.str_eq_applied"
###       ("\<^const>HOL.iff"
###         ("\<^const>Relation.Image"
###           ("\<^const>Myhill_1.str_eq" ("_position" A))
###           ("_Finset" ("_position" y)))
###         ("_position" x))
###       ("_position" A) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###       ("_Finset" ("_position" x)))
###     ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###       ("\<^const>Myhill_1.str_eq_applied"
###         ("\<^const>HOL.iff" ("_Finset" ("_position" y)) ("_position" x))
###         ("_position" A) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relation.Image" ("\<^const>Myhill_1.str_eq" ("_position" A))
###     ("\<^const>Myhill_1.str_eq_applied"
###       ("\<^const>HOL.iff"
###         ("\<^const>HOL.eq" ("_Finset" ("_position" x))
###           ("\<^const>Relation.Image"
###             ("\<^const>Myhill_1.str_eq" ("_position" A))
###             ("_Finset" ("_position" y))))
###         ("_position" x))
###       ("_position" A) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relation.Image"
###         ("\<^const>Myhill_1.str_eq" ("_position" A))
###         ("_Finset" ("_position" x)))
###       ("\<^const>Relation.Image"
###         ("\<^const>Myhill_1.str_eq" ("_position" A))
###         ("_Finset" ("_position" y))))
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###       ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied"
###     ("\<^const>HOL.iff"
###       ("\<^const>HOL.eq"
###         ("\<^const>Relation.Image"
###           ("\<^const>Myhill_1.str_eq" ("_position" A))
###           ("_Finset" ("_position" x)))
###         ("\<^const>Relation.Image"
###           ("\<^const>Myhill_1.str_eq" ("_position" A))
###           ("_Finset" ("_position" y))))
###       ("_position" x))
###     ("_position" A) ("_position" y)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Myhill-Nerode/Myhill_2.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" x)
###           ("_cargs" ("\<^const>Myhill_2.tag_eq" ("_position" tag))
###             ("_position" y))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>List.append" ("_position" x) ("_position" z))
###             ("_position" A)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("\<^const>List.append" ("_position" y) ("_position" z))
###         ("_position" A)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq" ("_position" x) ("_position" tag))
###           ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>List.append" ("_position" x) ("_position" z))
###             ("_position" A)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("\<^const>List.append" ("_position" y) ("_position" z))
###         ("_position" A)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Myhill_2.tag_eq_applied" ("_position" x)
###           ("_position" tag) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("\<^const>List.append" ("_position" x) ("_position" z))
###             ("_position" A)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("\<^const>List.append" ("_position" y) ("_position" z))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Myhill_2"
### 0.235s elapsed time, 0.285s cpu time, 0.072s GC time
Loading theory "Draft.Myhill" (required by "Draft.Non_Regular_LanguagesTemplates" via "Draft.Non_Regular_Languages")
### Ambiguous input (line 23 of "$AFP/Myhill-Nerode/Myhill.thy") produces 19 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###       ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###         ("_applC" ("_position" Derivs) ("_position" x)))
###       ("_position" A))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###     ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###       ("_applC" ("_position" Derivs) ("_position" x)))
###     ("\<^const>HOL.eq" ("_position" A)
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" y) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###         ("\<^const>HOL.iff" ("_position" y)
###           ("_applC" ("_position" Derivs) ("_position" x))))
###       ("_position" A))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###     ("\<^const>HOL.iff" ("_position" y)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" Derivs)
###           ("_cargs" ("_position" x) ("_position" A)))
###         ("_applC" ("_position" Derivs)
###           ("_cargs" ("_position" y) ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###       ("_position" y))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" x) ("_position" A)))
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" y) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###       ("\<^const>HOL.iff" ("_position" y)
###         ("_applC" ("_position" Derivs)
###           ("_cargs" ("_position" x) ("_position" A)))))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Myhill_1.str_eq_applied" ("_position" x) ("_position" A)
###         ("\<^const>HOL.iff" ("_position" y) ("_position" Derivs)))
###       ("_cargs" ("_position" x) ("_position" A)))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###         ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###           ("_position" Derivs))
###         ("_position" x))
###       ("_position" A))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###     ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###       ("_position" Derivs))
###     ("\<^const>HOL.eq" ("_applC" ("_position" x) ("_position" A))
###       ("_applC" ("_position" Derivs)
###         ("_cargs" ("_position" y) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Myhill_1.str_eq_applied" ("_position" x)
###       ("\<^const>HOL.iff" ("_applC" ("_position" A) ("_position" y))
###         ("_position" Derivs))
###       ("_applC" ("_position" x) ("_position" A)))
###     ("_applC" ("_position" Derivs)
###       ("_cargs" ("_position" y) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Myhill"
### 0.106s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.Non_Regular_Languages" (required by "Draft.Non_Regular_LanguagesTemplates")
consts
  repeat :: "nat => 'a list => 'a list"
### Ambiguous input (line 217 of "$AFP/Myhill-Nerode/Non_Regular_Languages.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_position" xs)
###       ("_applC" ("_position" replicate)
###         ("_cargs" ("_position" n) ("_position" x))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" set) ("_position" xs))
###         ("_Finset" ("_position" x)))
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###         ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Myhill_2.tag_eq_applied" ("_position" xs)
###     ("\<^const>HOL.iff"
###       ("_applC" ("_position" replicate)
###         ("_cargs" ("_position" n) ("_position" x)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" xs))
###           ("_Finset" ("_position" x)))
###         ("_applC" ("_position" length) ("_position" xs))))
###     ("_position" n)))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" xs)
###     ("_cargs"
###       ("\<^const>Myhill_2.tag_eq"
###         ("\<^const>HOL.iff"
###           ("_applC" ("_position" replicate)
###             ("_cargs" ("_position" n) ("_position" x)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" set) ("_position" xs))
###               ("_Finset" ("_position" x)))
###             ("_applC" ("_position" length) ("_position" xs)))))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Non_Regular_Languages"
### 0.079s elapsed time, 0.079s cpu time, 0.000s GC time
Loading theory "Draft.Non_Regular_LanguagesTemplates"
val templateLemmas =
   [("Non_Regular_Languages.repeat_Nil", "repeat ?n [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Non_Regular_Languages.regular_Derivs_finite",
     "finite (range (%w. Derivs w (lang ?r)))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0))
         )),
    ("Non_Regular_Languages.repeat_conv_replicate",
     "repeat ?n ?xs = concat (replicate ?n ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.Nil_in_Derivs_iff",
     "([] : Derivs ?w ?A) = (?w : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Non_Regular_Languages.repeat_Cons_left",
     "repeat (Suc ?n) ?xs = ?xs @ repeat ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.repeat_Cons_right",
     "repeat (Suc ?n) ?xs = repeat ?n ?xs @ ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Non_Regular_Languages.repeat_Cons_append_commute",
     "repeat ?n ?xs @ ?xs = ?xs @ repeat ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.repeat_Cons_add",
     "repeat (?m + ?n) ?xs = repeat ?m ?xs @ repeat ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.length_take_prefixes",
     "?xs : set (take ?n (prefixes ?ys)) ==> length ?xs < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Non_Regular_Languages.nth_prefixes",
     "?n <= length ?xs ==> prefixes ?xs ! ?n = take ?n ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.eq_replicate_iff",
     "(?xs = replicate ?n ?x) = (set ?xs <= {?x} & length ?xs = ?n)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1))
           ))),
    ("Non_Regular_Languages.nth_suffixes",
     "?n <= length ?xs ==> suffixes ?xs ! ?n = drop (length ?xs - ?n) ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 5, template_var 0)),
               template_var 1)),
           template_var 0)))),
    ("Non_Regular_Languages.bij_betw_image_quotient",
     "bij_betw (%y. ?f -` {y}) (?f ` ?A) (?A // {(a, b). ?f a = ?f b})",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty))))
         )),
    ("Non_Regular_Languages.replicate_eq_appendE",
     "[| ?xs @ ?ys = replicate ?n ?x;
         !!i j.
            [| ?n = i + j; ?xs = replicate i ?x; ?ys = replicate j ?x |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Non_Regular_Languages.not_regular_langI",
     "[| infinite ?B;
         !!x y.
            [| x : ?B; y : ?B; x ~= y |]
            ==> EX w. (x @ w : ?A) ~= (y @ w : ?A) |]
      ==> \<nexists>r. lang r = ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("Non_Regular_Languages.not_regular_langI'",
     "[| infinite ?B;
         !!x y.
            [| x : ?B; y : ?B; x ~= y |]
            ==> EX w. (?f x @ w : ?A) ~= (?f y @ w : ?A) |]
      ==> \<nexists>r. lang r = ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 2))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("Non_Regular_Languages.pumping_lemma",
     "(!!n. (!!z. [| z : lang ?r; n <= length z |]
                  ==> EX u v w.
                         z = u @ v @ w &
                         length (u @ v) <= n &
                         v ~= [] &
                         (ALL i. u @ repeat i v @ w : lang ?r)) ==>
            ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("Non_Regular_Languages.pumping_lemma_aux",
     "[| ?z : ?A; finite (range (%w. Derivs w ?A));
         card (range (%w. Derivs w ?A)) <= length ?z |]
      ==> EX u v w.
             ?z = u @ v @ w &
             length (u @ v) <= card (range (%w. Derivs w ?A)) &
             v ~= [] & (ALL i. u @ repeat i v @ w : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, t_empty), template_hole 11))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 13, t_empty), template_hole 11)),
          template_app (template_hole 8, template_var 1))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Non_Regular_Languages.pumping_lemma_not_regular_lang",
     "[| !!n. n <= length (?z n); !!n. ?z n : ?A;
         !!n u v w.
            [| ?z n = u @ v @ w; length (u @ v) <= n; v ~= [] |]
            ==> u @ repeat (?i n u v w) v @ w ~: ?A |]
      ==> \<nexists>r. lang r = ?A",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.Non_Regular_LanguagesTemplates"
### 0.351s elapsed time, 0.502s cpu time, 0.081s GC time
val it = (): unit
