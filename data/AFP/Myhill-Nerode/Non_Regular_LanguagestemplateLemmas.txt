   [("Non_Regular_Languages.repeat_Nil", "repeat ?n [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Non_Regular_Languages.regular_Derivs_finite",
     "finite (range (%w. Derivs w (lang ?r)))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0))
         )),
    ("Non_Regular_Languages.repeat_conv_replicate",
     "repeat ?n ?xs = concat (replicate ?n ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.Nil_in_Derivs_iff",
     "([] : Derivs ?w ?A) = (?w : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Non_Regular_Languages.repeat_Cons_left",
     "repeat (Suc ?n) ?xs = ?xs @ repeat ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.repeat_Cons_right",
     "repeat (Suc ?n) ?xs = repeat ?n ?xs @ ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Non_Regular_Languages.repeat_Cons_append_commute",
     "repeat ?n ?xs @ ?xs = ?xs @ repeat ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.repeat_Cons_add",
     "repeat (?m + ?n) ?xs = repeat ?m ?xs @ repeat ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.length_take_prefixes",
     "?xs : set (take ?n (prefixes ?ys)) ==> length ?xs < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Non_Regular_Languages.nth_prefixes",
     "?n <= length ?xs ==> prefixes ?xs ! ?n = take ?n ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Non_Regular_Languages.eq_replicate_iff",
     "(?xs = replicate ?n ?x) = (set ?xs <= {?x} & length ?xs = ?n)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1))
           ))),
    ("Non_Regular_Languages.nth_suffixes",
     "?n <= length ?xs ==> suffixes ?xs ! ?n = drop (length ?xs - ?n) ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 5, template_var 0)),
               template_var 1)),
           template_var 0)))),
    ("Non_Regular_Languages.bij_betw_image_quotient",
     "bij_betw (%y. ?f -` {y}) (?f ` ?A) (?A // {(a, b). ?f a = ?f b})",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty))))
         )),
    ("Non_Regular_Languages.replicate_eq_appendE",
     "[| ?xs @ ?ys = replicate ?n ?x;
         !!i j.
            [| ?n = i + j; ?xs = replicate i ?x; ?ys = replicate j ?x |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Non_Regular_Languages.not_regular_langI",
     "[| infinite ?B;
         !!x y.
            [| x : ?B; y : ?B; x ~= y |]
            ==> EX w. (x @ w : ?A) ~= (y @ w : ?A) |]
      ==> \<nexists>r. lang r = ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("Non_Regular_Languages.not_regular_langI'",
     "[| infinite ?B;
         !!x y.
            [| x : ?B; y : ?B; x ~= y |]
            ==> EX w. (?f x @ w : ?A) ~= (?f y @ w : ?A) |]
      ==> \<nexists>r. lang r = ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 2))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("Non_Regular_Languages.pumping_lemma",
     "(!!n. (!!z. [| z : lang ?r; n <= length z |]
                  ==> EX u v w.
                         z = u @ v @ w &
                         length (u @ v) <= n &
                         v ~= [] &
                         (ALL i. u @ repeat i v @ w : lang ?r)) ==>
            ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("Non_Regular_Languages.pumping_lemma_aux",
     "[| ?z : ?A; finite (range (%w. Derivs w ?A));
         card (range (%w. Derivs w ?A)) <= length ?z |]
      ==> EX u v w.
             ?z = u @ v @ w &
             length (u @ v) <= card (range (%w. Derivs w ?A)) &
             v ~= [] & (ALL i. u @ repeat i v @ w : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, t_empty), template_hole 11))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 13, t_empty), template_hole 11)),
          template_app (template_hole 8, template_var 1))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Non_Regular_Languages.pumping_lemma_not_regular_lang",
     "[| !!n. n <= length (?z n); !!n. ?z n : ?A;
         !!n u v w.
            [| ?z n = u @ v @ w; length (u @ v) <= n; v ~= [] |]
            ==> u @ repeat (?i n u v w) v @ w ~: ?A |]
      ==> \<nexists>r. lang r = ?A",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty)))))]
