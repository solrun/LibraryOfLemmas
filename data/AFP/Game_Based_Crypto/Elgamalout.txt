Loading theory "Draft.Diffie_Hellman" (required by "Draft.ElgamalTemplates" via "Draft.Elgamal")
Loading theory "Draft.IND_CPA_PK_Single" (required by "Draft.ElgamalTemplates" via "Draft.Elgamal")
Loading theory "HOL-Library.BigO" (required by "Draft.ElgamalTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.ElgamalTemplates" via "Draft.ExtrEqs")
locale ind_cpa
  fixes key_gen :: "('pub_key * 'priv_key) spmf"
    and aencrypt :: "'pub_key => 'plain => 'cipher spmf"
    and adecrypt :: "'priv_key => 'cipher => 'plain option"
    and valid_plains :: "'plain => 'plain => bool"
### Ambiguous input (line 30 of "$AFP/Game_Based_Crypto/IND_CPA_PK_Single.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" pk) ("_position" sk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" pk)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" m0) ("_position" m1)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" b) ("_position" coin_spmf))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cipher)
###                     ("_applC" ("_position" aencrypt)
###                       ("_cargs" ("_position" pk)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" b')
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" cipher)
###                           ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("\<^const>HOL.eq" ("_position" b)
###                           ("_position" b')))))))))))
###       ("_position" coin_spmf))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" pk) ("_position" sk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" pk)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" m0) ("_position" m1)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" b) ("_position" coin_spmf))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cipher)
###                     ("_applC" ("_position" aencrypt)
###                       ("_cargs" ("_position" pk)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" b')
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" cipher)
###                           ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("\<^const>HOL.eq" ("_position" b)
###                           ("_position" b')))))))))))
###       ("_position" coin_spmf))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.098s elapsed time, 0.435s cpu time, 0.000s GC time
consts
  ind_cpa ::
    "('pub_key => (('plain * 'plain) * 'state) spmf) *
     ('cipher => 'state => bool spmf)
     => bool spmf"
### theory "Draft.IND_CPA_PK_Single"
### 0.178s elapsed time, 0.674s cpu time, 0.033s GC time
### theory "HOL-Library.BigO"
### 0.691s elapsed time, 1.706s cpu time, 0.116s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ElgamalTemplates")
locale ddh
  fixes \<G> :: "'grp cyclic_group"  (structure)
locale lcdh
  fixes \<G> :: "'grp cyclic_group"  (structure)
### theory "Draft.Diffie_Hellman"
### 1.197s elapsed time, 2.791s cpu time, 0.265s GC time
Loading theory "Draft.Elgamal" (required by "Draft.ElgamalTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.515s elapsed time, 1.078s cpu time, 0.149s GC time
locale elgamal_base
  fixes \<G> :: "'grp cyclic_group"  (structure)
### Ambiguous input (line 59 of "$AFP/Game_Based_Crypto/Elgamal.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elgamal_adversary)
###       ("_cargs"
###         ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2)))
###         ("_cargs" ("_position" \<alpha>)
###           ("_cargs" ("_position" \<beta>) ("_position" \<gamma>)))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons" ("_do_bind" ("_position" b) ("_position" coin_spmf))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" msg1) ("_position" msg2))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" \<alpha>)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" msg1) ("_position" msg2)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" guess)
###                   ("_applC" ("_position" \<A>2)
###                     ("_cargs"
###                       ("_tuple" ("_position" \<beta>)
###                         ("_tuple_arg"
###                           ("\<^const>Group.monoid.mult_indexed"
###                             ("_position" \<gamma>) ("_indexdefault")
###                             ("\<^const>HOL.If" ("_position" b)
###                               ("_position" msg1) ("_position" msg2)))))
###                       ("_position" \<sigma>))))
###                 ("_do_final"
###                   ("_applC" ("_position" return_spmf)
###                     ("\<^const>HOL.eq" ("_position" guess)
###                       ("_position" b)))))))))
###       ("_position" coin_spmf))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elgamal_adversary)
###       ("_cargs"
###         ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2)))
###         ("_cargs" ("_position" \<alpha>)
###           ("_cargs" ("_position" \<beta>) ("_position" \<gamma>)))))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons" ("_do_bind" ("_position" b) ("_position" coin_spmf))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" msg1) ("_position" msg2))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" \<alpha>)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" msg1) ("_position" msg2)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" guess)
###                   ("_applC" ("_position" \<A>2)
###                     ("_cargs"
###                       ("_tuple" ("_position" \<beta>)
###                         ("_tuple_arg"
###                           ("\<^const>Group.monoid.mult_indexed"
###                             ("_position" \<gamma>) ("_indexdefault")
###                             ("\<^const>HOL.If" ("_position" b)
###                               ("_position" msg1) ("_position" msg2)))))
###                       ("_position" \<sigma>))))
###                 ("_do_final"
###                   ("_applC" ("_position" return_spmf)
###                     ("\<^const>HOL.eq" ("_position" guess)
###                       ("_position" b)))))))))
###       ("_position" coin_spmf))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
locale elgamal
  fixes \<G> :: "'a cyclic_group"  (structure)
  assumes "elgamal \<G>"
locale elgamal_asymp
  fixes \<G> :: "nat => 'grp cyclic_group"
  assumes "elgamal_asymp \<G>"
locale elgamal_base
  fixes \<G> :: "'grp cyclic_group"  (structure)
### theory "Draft.Elgamal"
### 1.111s elapsed time, 1.208s cpu time, 0.084s GC time
Loading theory "Draft.ElgamalTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ElgamalTemplates"
### 1.995s elapsed time, 2.696s cpu time, 0.664s GC time
val it = (): unit
