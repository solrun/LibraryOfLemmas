Loading theory "HOL-Library.BigO" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Diffie_Hellman" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.Elgamal")
Loading theory "Draft.Guessing_Many_One" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.PRF_UPF_IND_CCA" via "Draft.Unpredictable_Function")
locale guessing_many_one
  fixes init :: "('c_o * 'c_a * 's) spmf"
    and "oracle" :: "'c_o => 's => 'call => ('ret * 's) spmf"
    and eval :: "'c_o => 'c_a => 's => 'guess => bool spmf"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.106s elapsed time, 0.440s cpu time, 0.039s GC time
Loading theory "Draft.IND_CCA2_sym" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.PRF_UPF_IND_CCA")
locale ind_cca
  fixes key_gen :: "'key spmf"
    and encrypt :: "'key => 'message => 'cipher spmf"
    and decrypt :: "'key => 'cipher => 'message option"
    and msg_predicate :: "'message => bool"
consts
  process_call ::
    "'guess + nat
     => 'call => ('ret option * ('guess + nat), 'call, 'ret) gpv"
consts
  process_guess ::
    "'guess + nat
     => 'guess => (unit option * ('guess + nat), 'call, 'ret) gpv"
### theory "Draft.IND_CCA2_sym"
### 0.163s elapsed time, 0.669s cpu time, 0.000s GC time
Loading theory "Draft.IND_CPA_PK_Single" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.Elgamal")
### theory "Draft.Guessing_Many_One"
### 0.313s elapsed time, 1.284s cpu time, 0.039s GC time
Loading theory "Draft.Unpredictable_Function" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.PRF_UPF_IND_CCA")
locale ind_cpa
  fixes key_gen :: "('pub_key * 'priv_key) spmf"
    and aencrypt :: "'pub_key => 'plain => 'cipher spmf"
    and adecrypt :: "'priv_key => 'cipher => 'plain option"
    and valid_plains :: "'plain => 'plain => bool"
### Ambiguous input (line 30 of "$AFP/Game_Based_Crypto/IND_CPA_PK_Single.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" pk) ("_position" sk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" pk)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" m0) ("_position" m1)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" b) ("_position" coin_spmf))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cipher)
###                     ("_applC" ("_position" aencrypt)
###                       ("_cargs" ("_position" pk)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" b')
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" cipher)
###                           ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("\<^const>HOL.eq" ("_position" b)
###                           ("_position" b')))))))))))
###       ("_position" coin_spmf))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" pk) ("_position" sk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" pk)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" m0) ("_position" m1)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" b) ("_position" coin_spmf))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cipher)
###                     ("_applC" ("_position" aencrypt)
###                       ("_cargs" ("_position" pk)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" b')
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" cipher)
###                           ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("\<^const>HOL.eq" ("_position" b)
###                           ("_position" b')))))))))))
###       ("_position" coin_spmf))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ind_cpa ::
    "('pub_key => (('plain * 'plain) * 'state) spmf) *
     ('cipher => 'state => bool spmf)
     => bool spmf"
locale upf
  fixes key_gen :: "'key spmf"
    and hash :: "'key => 'x => 'hash"
### theory "Draft.IND_CPA_PK_Single"
### 0.182s elapsed time, 0.703s cpu time, 0.054s GC time
Loading theory "Draft.Pseudo_Random_Function" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.RP_RF")
locale random_function
  fixes p :: "'a spmf"
### theory "Draft.Unpredictable_Function"
### 0.201s elapsed time, 0.771s cpu time, 0.054s GC time
Loading theory "Draft.Pseudo_Random_Permutation" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.RP_RF")
locale prf
  fixes key_gen :: "'key spmf"
    and "prf" :: "'key => 'domain => 'range"
    and rand :: "'range spmf"
locale random_permutation
  fixes A :: "'b set"
### theory "Draft.Pseudo_Random_Permutation"
### 0.120s elapsed time, 0.442s cpu time, 0.078s GC time
Loading theory "Draft.IND_CPA" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.PRF_IND_CPA")
### theory "Draft.Pseudo_Random_Function"
### 0.206s elapsed time, 0.787s cpu time, 0.078s GC time
Loading theory "Draft.PRF_UHF" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions")
### theory "HOL-Library.BigO"
### 0.722s elapsed time, 2.846s cpu time, 0.172s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Cryptographic_ConstructionsTemplates")
locale hash
  fixes seed_gen :: "'seed spmf"
    and hash :: "'seed => 'domain => 'range"
locale prf_hash
  fixes f :: "'key => '\<alpha> => '\<gamma>"
    and h :: "'seed => '\<beta> => '\<alpha>"
    and key_gen :: "'key spmf"
    and seed_gen :: "'seed spmf"
    and range_f :: "'\<gamma> set"
  assumes "prf_hash seed_gen range_f"
Found termination order: "{}"
locale ind_cpa
  fixes key_gen :: "'key spmf"
    and encrypt :: "'key => 'plain => 'cipher spmf"
    and decrypt :: "'key => 'cipher => 'plain option"
    and valid_plain :: "'plain => bool"
locale ddh
  fixes \<G> :: "'grp cyclic_group"  (structure)
### theory "Draft.PRF_UHF"
### 0.832s elapsed time, 3.137s cpu time, 0.684s GC time
Loading theory "Draft.RP_RF" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions")
locale lcdh
  fixes \<G> :: "'grp cyclic_group"  (structure)
### theory "Draft.IND_CPA"
### 0.912s elapsed time, 3.454s cpu time, 0.684s GC time
Loading theory "Draft.PRF_IND_CPA" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions")
### theory "Draft.Diffie_Hellman"
### 1.610s elapsed time, 6.186s cpu time, 0.889s GC time
Loading theory "Draft.Elgamal" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.878s elapsed time, 3.278s cpu time, 0.717s GC time
Loading theory "Draft.IND_CPA_PK" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions" via "Draft.Hashed_Elgamal")
locale rp_rf
  fixes A :: "'a set"
  assumes "rp_rf A"
### theory "Draft.RP_RF"
### 0.761s elapsed time, 3.012s cpu time, 0.083s GC time
Loading theory "Draft.PRF_UPF_IND_CCA" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions")
locale ind_cpa_pk
  fixes key_gen :: "('pubkey * 'privkey, 'call, 'ret) gpv"
    and aencrypt :: "'pubkey => 'plain => ('cipher, 'call, 'ret) gpv"
    and adecrypt :: "'privkey => 'cipher => ('plain, 'call, 'ret) gpv"
    and valid_plains :: "'plain => 'plain => bool"
### Ambiguous input (line 31 of "$AFP/Game_Based_Crypto/IND_CPA_PK.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" pk) ("_position" sk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind" ("_position" b)
###               ("_applC" ("_position" lift_spmf) ("_position" coin_spmf)))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                   ("_position" \<sigma>))
###                 ("_applC" ("_position" \<A>1) ("_position" pk)))
###               ("_do_cons"
###                 ("_do_then"
###                   ("_applC" ("_position" assert_gpv)
###                     ("_applC" ("_position" valid_plains)
###                       ("_cargs" ("_position" m0) ("_position" m1)))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cipher)
###                     ("_applC" ("_position" aencrypt)
###                       ("_cargs" ("_position" pk)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" guess)
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" cipher)
###                           ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" Done)
###                         ("\<^const>HOL.eq" ("_position" guess)
###                           ("_position" b)))))))))))
###       ("_applC" ("_position" lift_spmf) ("_position" coin_spmf)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ind_cpa)
###       ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2))))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_position" pk) ("_position" sk))
###             ("_position" key_gen))
###           ("_do_cons"
###             ("_do_bind" ("_position" b)
###               ("_applC" ("_position" lift_spmf) ("_position" coin_spmf)))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_pattern" ("_position" m0) ("_position" m1))
###                   ("_position" \<sigma>))
###                 ("_applC" ("_position" \<A>1) ("_position" pk)))
###               ("_do_cons"
###                 ("_do_then"
###                   ("_applC" ("_position" assert_gpv)
###                     ("_applC" ("_position" valid_plains)
###                       ("_cargs" ("_position" m0) ("_position" m1)))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cipher)
###                     ("_applC" ("_position" aencrypt)
###                       ("_cargs" ("_position" pk)
###                         ("\<^const>HOL.If" ("_position" b) ("_position" m0)
###                           ("_position" m1)))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" guess)
###                       ("_applC" ("_position" \<A>2)
###                         ("_cargs" ("_position" cipher)
###                           ("_position" \<sigma>))))
###                     ("_do_final"
###                       ("_applC" ("_position" Done)
###                         ("\<^const>HOL.eq" ("_position" guess)
###                           ("_position" b)))))))))))
###       ("_applC" ("_position" lift_spmf) ("_position" coin_spmf)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.IND_CPA_PK"
### 1.020s elapsed time, 4.026s cpu time, 0.173s GC time
Loading theory "Draft.Hashed_Elgamal" (required by "Draft.Cryptographic_ConstructionsTemplates" via "Draft.Cryptographic_Constructions")
locale elgamal_base
  fixes \<G> :: "'grp cyclic_group"  (structure)
### Ambiguous input (line 59 of "$AFP/Game_Based_Crypto/Elgamal.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elgamal_adversary)
###       ("_cargs"
###         ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2)))
###         ("_cargs" ("_position" \<alpha>)
###           ("_cargs" ("_position" \<beta>) ("_position" \<gamma>)))))
###     ("\<^const>Generative_Probabilistic_Value.try_gpv"
###       ("_do_block"
###         ("_do_cons" ("_do_bind" ("_position" b) ("_position" coin_spmf))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" msg1) ("_position" msg2))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" \<alpha>)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" msg1) ("_position" msg2)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" guess)
###                   ("_applC" ("_position" \<A>2)
###                     ("_cargs"
###                       ("_tuple" ("_position" \<beta>)
###                         ("_tuple_arg"
###                           ("\<^const>Group.monoid.mult_indexed"
###                             ("_position" \<gamma>) ("_indexdefault")
###                             ("\<^const>HOL.If" ("_position" b)
###                               ("_position" msg1) ("_position" msg2)))))
###                       ("_position" \<sigma>))))
###                 ("_do_final"
###                   ("_applC" ("_position" return_spmf)
###                     ("\<^const>HOL.eq" ("_position" guess)
###                       ("_position" b)))))))))
###       ("_position" coin_spmf))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elgamal_adversary)
###       ("_cargs"
###         ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2)))
###         ("_cargs" ("_position" \<alpha>)
###           ("_cargs" ("_position" \<beta>) ("_position" \<gamma>)))))
###     ("\<^const>SPMF.try_spmf"
###       ("_do_block"
###         ("_do_cons" ("_do_bind" ("_position" b) ("_position" coin_spmf))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_pattern" ("_position" msg1) ("_position" msg2))
###                 ("_position" \<sigma>))
###               ("_applC" ("_position" \<A>1) ("_position" \<alpha>)))
###             ("_do_cons"
###               ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                 ("_applC" ("_position" assert_spmf)
###                   ("_applC" ("_position" valid_plains)
###                     ("_cargs" ("_position" msg1) ("_position" msg2)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" guess)
###                   ("_applC" ("_position" \<A>2)
###                     ("_cargs"
###                       ("_tuple" ("_position" \<beta>)
###                         ("_tuple_arg"
###                           ("\<^const>Group.monoid.mult_indexed"
###                             ("_position" \<gamma>) ("_indexdefault")
###                             ("\<^const>HOL.If" ("_position" b)
###                               ("_position" msg1) ("_position" msg2)))))
###                       ("_position" \<sigma>))))
###                 ("_do_final"
###                   ("_applC" ("_position" return_spmf)
###                     ("\<^const>HOL.eq" ("_position" guess)
###                       ("_position" b)))))))))
###       ("_position" coin_spmf))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
locale otp
  fixes f :: "bool list => bool list => bool list"
    and len :: "nat"
  assumes "otp f len"
locale elgamal
  fixes \<G> :: "'a cyclic_group"  (structure)
  assumes "elgamal \<G>"
locale elgamal_asymp
  fixes \<G> :: "nat => 'grp cyclic_group"
  assumes "elgamal_asymp \<G>"
Found termination order: "{}"
locale elgamal_base
  fixes \<G> :: "'grp cyclic_group"  (structure)
### theory "Draft.Elgamal"
### 1.678s elapsed time, 6.554s cpu time, 0.328s GC time
locale otp_\<eta>
  fixes f :: "nat => bool list => bool list => bool list"
    and len :: "nat => nat"
  assumes "otp_\<eta> f len"
### theory "Draft.PRF_IND_CPA"
### 1.905s elapsed time, 7.277s cpu time, 0.328s GC time
locale simple_cipher
  fixes prf_key_gen :: "'prf_key spmf"
    and prf_fun :: "'prf_key => bool list => bool list"
    and prf_domain :: "bool list set"
    and prf_range :: "bool list set"
    and prf_dlen :: "nat"
    and prf_clen :: "nat"
    and upf_key_gen :: "'upf_key spmf"
    and upf_fun :: "'upf_key => bool list => 'hash"
  assumes
    "simple_cipher prf_key_gen prf_fun prf_domain prf_dlen prf_clen
      upf_key_gen"
Found termination order: "{}"
locale hash_oracle
  fixes len :: "nat"
Found termination order: "{}"
Proofs for inductive predicate(s) "invariant"
  Proving monotonicity ...
locale elgamal_base
  fixes \<G> :: "'grp cyclic_group"  (structure)
    and len_plain :: "nat"
### Ambiguous input (line 123 of "$AFP/Game_Based_Crypto/Hashed_Elgamal.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elgamal_adversary)
###       ("_cargs"
###         ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2)))
###         ("_cargs" ("_position" \<alpha>) ("_position" \<beta>))))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind"
###           ("_pattern"
###             ("_pattern" ("_pattern" ("_position" msg1) ("_position" msg2))
###               ("_position" \<sigma>))
###             ("_position" s))
###           ("_applC" ("_position" exec_gpv)
###             ("_cargs" ("_position" hash.oracle)
###               ("_cargs"
###                 ("_applC" ("_position" \<A>1) ("_position" \<alpha>))
###                 ("_position" hash.initial)))))
###         ("_do_final"
###           ("\<^const>SPMF.try_spmf"
###             ("_do_block"
###               ("_do_cons"
###                 ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                   ("_applC" ("_position" assert_spmf)
###                     ("_applC" ("_position" valid_plains)
###                       ("_cargs" ("_position" msg1) ("_position" msg2)))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" h')
###                     ("_applC" ("_position" spmf_of_set)
###                       ("_applC" ("_position" nlists)
###                         ("_cargs" ("_position" UNIV)
###                           ("_position" len_plain)))))
###                   ("_do_cons"
###                     ("_do_bind"
###                       ("_pattern" ("_position" guess) ("_position" s'))
###                       ("_applC" ("_position" exec_gpv)
###                         ("_cargs" ("_position" hash.oracle)
###                           ("_cargs"
###                             ("_applC" ("_position" \<A>2)
###                               ("_cargs"
###                                 ("_tuple" ("_position" \<beta>)
###                                   ("_tuple_arg" ("_position" h')))
###                                 ("_position" \<sigma>)))
###                             ("_position" s)))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("_applC" ("_position" dom) ("_position" s'))))))))
###             ("_applC" ("_position" return_spmf)
###               ("_applC" ("_position" dom) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elgamal_adversary)
###       ("_cargs"
###         ("_tuple" ("_position" \<A>1) ("_tuple_arg" ("_position" \<A>2)))
###         ("_cargs" ("_position" \<alpha>) ("_position" \<beta>))))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind"
###           ("_pattern"
###             ("_pattern" ("_pattern" ("_position" msg1) ("_position" msg2))
###               ("_position" \<sigma>))
###             ("_position" s))
###           ("_applC" ("_position" exec_gpv)
###             ("_cargs" ("_position" hash.oracle)
###               ("_cargs"
###                 ("_applC" ("_position" \<A>1) ("_position" \<alpha>))
###                 ("_position" hash.initial)))))
###         ("_do_final"
###           ("\<^const>Generative_Probabilistic_Value.try_gpv"
###             ("_do_block"
###               ("_do_cons"
###                 ("_do_bind" ("_idtypdummy" ("_type_name" unit))
###                   ("_applC" ("_position" assert_spmf)
###                     ("_applC" ("_position" valid_plains)
###                       ("_cargs" ("_position" msg1) ("_position" msg2)))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" h')
###                     ("_applC" ("_position" spmf_of_set)
###                       ("_applC" ("_position" nlists)
###                         ("_cargs" ("_position" UNIV)
###                           ("_position" len_plain)))))
###                   ("_do_cons"
###                     ("_do_bind"
###                       ("_pattern" ("_position" guess) ("_position" s'))
###                       ("_applC" ("_position" exec_gpv)
###                         ("_cargs" ("_position" hash.oracle)
###                           ("_cargs"
###                             ("_applC" ("_position" \<A>2)
###                               ("_cargs"
###                                 ("_tuple" ("_position" \<beta>)
###                                   ("_tuple_arg" ("_position" h')))
###                                 ("_position" \<sigma>)))
###                             ("_position" s)))))
###                     ("_do_final"
###                       ("_applC" ("_position" return_spmf)
###                         ("_applC" ("_position" dom) ("_position" s'))))))))
###             ("_applC" ("_position" return_spmf)
###               ("_applC" ("_position" dom) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
locale elgamal
  fixes \<G> :: "'a cyclic_group"  (structure)
    and len_plain :: "nat"
  assumes "elgamal \<G>"
Found termination order: "{}"
locale elgamal_base
  fixes \<G> :: "'grp cyclic_group"  (structure)
    and len_plain :: "nat"
### theory "Draft.Hashed_Elgamal"
### 2.344s elapsed time, 6.430s cpu time, 1.027s GC time
locale simple_cipher'
  fixes prf_key_gen :: "nat => 'prf_key spmf"
    and prf_fun :: "nat => 'prf_key => bool list => bool list"
    and prf_domain :: "nat => bool list set"
    and prf_range :: "nat => bool list set"
    and prf_dlen :: "nat => nat"
    and prf_clen :: "nat => nat"
    and upf_key_gen :: "nat => 'upf_key spmf"
    and upf_fun :: "nat => 'upf_key => bool list => 'hash"
  assumes
    "simple_cipher' prf_key_gen prf_fun prf_domain prf_dlen prf_clen
      upf_key_gen"
### theory "Draft.PRF_UPF_IND_CCA"
### 2.974s elapsed time, 8.080s cpu time, 1.130s GC time
Loading theory "Draft.Cryptographic_Constructions" (required by "Draft.Cryptographic_ConstructionsTemplates")
### theory "Draft.Cryptographic_Constructions"
### 1.578s elapsed time, 1.596s cpu time, 0.025s GC time
Loading theory "Draft.Cryptographic_ConstructionsTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Cryptographic_ConstructionsTemplates"
### 1.996s elapsed time, 2.962s cpu time, 1.053s GC time
val it = (): unit
