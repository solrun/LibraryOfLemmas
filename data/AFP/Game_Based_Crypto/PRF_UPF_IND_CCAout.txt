Loading theory "Draft.Guessing_Many_One" (required by "Draft.PRF_UPF_IND_CCATemplates" via "Draft.PRF_UPF_IND_CCA" via "Draft.Unpredictable_Function")
Loading theory "HOL-Library.BigO" (required by "Draft.PRF_UPF_IND_CCATemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.PRF_UPF_IND_CCATemplates" via "Draft.ExtrEqs")
Loading theory "Draft.IND_CCA2_sym" (required by "Draft.PRF_UPF_IND_CCATemplates" via "Draft.PRF_UPF_IND_CCA")
locale ind_cca
  fixes key_gen :: "'key spmf"
    and encrypt :: "'key => 'message => 'cipher spmf"
    and decrypt :: "'key => 'cipher => 'message option"
    and msg_predicate :: "'message => bool"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.341s cpu time, 0.000s GC time
Loading theory "Draft.Pseudo_Random_Function" (required by "Draft.PRF_UPF_IND_CCATemplates" via "Draft.PRF_UPF_IND_CCA")
locale guessing_many_one
  fixes init :: "('c_o * 'c_a * 's) spmf"
    and "oracle" :: "'c_o => 's => 'call => ('ret * 's) spmf"
    and eval :: "'c_o => 'c_a => 's => 'guess => bool spmf"
locale random_function
  fixes p :: "'a spmf"
### theory "Draft.IND_CCA2_sym"
### 0.160s elapsed time, 0.680s cpu time, 0.026s GC time
consts
  process_call ::
    "'guess + nat
     => 'call => ('ret option * ('guess + nat), 'call, 'ret) gpv"
locale prf
  fixes key_gen :: "'key spmf"
    and "prf" :: "'key => 'domain => 'range"
    and rand :: "'range spmf"
consts
  process_guess ::
    "'guess + nat
     => 'guess => (unit option * ('guess + nat), 'call, 'ret) gpv"
### theory "Draft.Guessing_Many_One"
### 0.236s elapsed time, 0.901s cpu time, 0.026s GC time
Loading theory "Draft.Unpredictable_Function" (required by "Draft.PRF_UPF_IND_CCATemplates" via "Draft.PRF_UPF_IND_CCA")
### theory "Draft.Pseudo_Random_Function"
### 0.176s elapsed time, 0.604s cpu time, 0.026s GC time
locale upf
  fixes key_gen :: "'key spmf"
    and hash :: "'key => 'x => 'hash"
### theory "Draft.Unpredictable_Function"
### 0.145s elapsed time, 0.300s cpu time, 0.000s GC time
Loading theory "Draft.PRF_UPF_IND_CCA" (required by "Draft.PRF_UPF_IND_CCATemplates")
### theory "HOL-Library.BigO"
### 0.652s elapsed time, 1.740s cpu time, 0.065s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PRF_UPF_IND_CCATemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.495s elapsed time, 1.024s cpu time, 0.090s GC time
locale simple_cipher
  fixes prf_key_gen :: "'prf_key spmf"
    and prf_fun :: "'prf_key => bool list => bool list"
    and prf_domain :: "bool list set"
    and prf_range :: "bool list set"
    and prf_dlen :: "nat"
    and prf_clen :: "nat"
    and upf_key_gen :: "'upf_key spmf"
    and upf_fun :: "'upf_key => bool list => 'hash"
  assumes
    "simple_cipher prf_key_gen prf_fun prf_domain prf_dlen prf_clen
      upf_key_gen"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale simple_cipher'
  fixes prf_key_gen :: "nat => 'prf_key spmf"
    and prf_fun :: "nat => 'prf_key => bool list => bool list"
    and prf_domain :: "nat => bool list set"
    and prf_range :: "nat => bool list set"
    and prf_dlen :: "nat => nat"
    and prf_clen :: "nat => nat"
    and upf_key_gen :: "nat => 'upf_key spmf"
    and upf_fun :: "nat => 'upf_key => bool list => 'hash"
  assumes
    "simple_cipher' prf_key_gen prf_fun prf_domain prf_dlen prf_clen
      upf_key_gen"
### theory "Draft.PRF_UPF_IND_CCA"
### 2.378s elapsed time, 3.537s cpu time, 0.617s GC time
Loading theory "Draft.PRF_UPF_IND_CCATemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.PRF_UPF_IND_CCATemplates"
### 1.826s elapsed time, 2.221s cpu time, 0.250s GC time
val it = (): unit
