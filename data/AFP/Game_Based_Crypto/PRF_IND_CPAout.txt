Loading theory "Draft.Templates" (required by "Draft.PRF_IND_CPATemplates" via "Draft.ExtrEqs")
Loading theory "Draft.IND_CPA" (required by "Draft.PRF_IND_CPATemplates" via "Draft.PRF_IND_CPA")
Loading theory "Draft.Pseudo_Random_Function" (required by "Draft.PRF_IND_CPATemplates" via "Draft.PRF_IND_CPA")
Loading theory "HOL-Library.BigO" (required by "Draft.PRF_IND_CPATemplates" via "Draft.ExtrEqs")
locale random_function
  fixes p :: "'a spmf"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.096s elapsed time, 0.429s cpu time, 0.000s GC time
locale prf
  fixes key_gen :: "'key spmf"
    and "prf" :: "'key => 'domain => 'range"
    and rand :: "'range spmf"
### theory "Draft.Pseudo_Random_Function"
### 0.211s elapsed time, 0.775s cpu time, 0.033s GC time
locale ind_cpa
  fixes key_gen :: "'key spmf"
    and encrypt :: "'key => 'plain => 'cipher spmf"
    and decrypt :: "'key => 'cipher => 'plain option"
    and valid_plain :: "'plain => bool"
### theory "Draft.IND_CPA"
### 0.638s elapsed time, 1.653s cpu time, 0.095s GC time
Loading theory "Draft.PRF_IND_CPA" (required by "Draft.PRF_IND_CPATemplates")
### theory "HOL-Library.BigO"
### 0.659s elapsed time, 1.672s cpu time, 0.095s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PRF_IND_CPATemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.493s elapsed time, 1.008s cpu time, 0.070s GC time
locale otp
  fixes f :: "bool list => bool list => bool list"
    and len :: "nat"
  assumes "otp f len"
Found termination order: "{}"
locale otp_\<eta>
  fixes f :: "nat => bool list => bool list => bool list"
    and len :: "nat => nat"
  assumes "otp_\<eta> f len"
### theory "Draft.PRF_IND_CPA"
### 1.231s elapsed time, 1.861s cpu time, 0.166s GC time
Loading theory "Draft.PRF_IND_CPATemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.PRF_IND_CPATemplates"
### 1.864s elapsed time, 2.455s cpu time, 0.587s GC time
val it = (): unit
