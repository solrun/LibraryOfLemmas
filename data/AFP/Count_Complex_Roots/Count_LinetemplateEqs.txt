   [("Count_Line.proots_line_commute",
     "proots_line ?p ?st ?tt = proots_line ?p ?tt ?st",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Count_Line.dvd_divide_Ints_iff",
     "(?b dvd ?a | ?b = 0) = (of_int ?a / of_int ?b : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Count_Line.no_proots_line_code",
     "no_proots_line ?p ?st ?tt =
      (if poly ?p ?st ~= 0 & poly ?p ?tt ~= 0
       then let pc = ?p \<circ>\<^sub>p [:?st, ?tt - ?st:];
                pR = map_poly Re pc; pI = map_poly Im pc; g = gcd pR pI
            in if changes_itv_smods 0 1 g (pderiv g) = 0 then True
               else False
       else False)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 24, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Count_Line.proots_line_code",
     "proots_line ?p ?st ?tt =
      (if poly ?p ?st ~= 0 & poly ?p ?tt ~= 0
       then if ?st ~= ?tt
            then let pc = ?p \<circ>\<^sub>p [:?st, ?tt - ?st:];
                     pR = map_poly Re pc; pI = map_poly Im pc; g = gcd pR pI
                 in nat (changes_itv_smods_ext 0 1 g (pderiv g))
            else 0
       else Code.abort
             STR ''prootsline does not handle vanishing endpoints for now''
             (%_. proots_line ?p ?st ?tt))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 27, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Count_Line.proots_unbounded_line_card_code",
     "proots_unbounded_line_card ?p ?st ?tt =
      (if ?st ~= ?tt
       then let pc = ?p \<circ>\<^sub>p [:?st, ?tt - ?st:];
                pR = map_poly Re pc; pI = map_poly Im pc; g = gcd pR pI
            in nat (changes_R_smods g (pderiv g))
       else Code.abort
             STR ''proots_unbounded_line_card fails due to invalid hyperplanes.''
             (%_. proots_unbounded_line_card ?p ?st ?tt))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Count_Line.proots_unbounded_line_code",
     "proots_unbounded_line ?p ?st ?tt =
      (if ?st ~= ?tt
       then if ?p ~= 0
            then let pc = ?p \<circ>\<^sub>p [:?st, ?tt - ?st:];
                     pR = map_poly Re pc; pI = map_poly Im pc; g = gcd pR pI
                 in nat (changes_R_smods_ext g (pderiv g))
            else Code.abort STR ''proots_unbounded_line fails due to p=0''
                  (%_. proots_unbounded_line ?p ?st ?tt)
       else Code.abort
             STR ''proots_unbounded_line fails due to invalid hyperplanes.''
             (%_. proots_unbounded_line ?p ?st ?tt))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno))]
