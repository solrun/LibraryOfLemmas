Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Density_Predicates" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.PDF_Target_Density_Contexts" via "Draft.PDF_Density_Contexts" via "Draft.PDF_Semantics" via "Draft.PDF_Values")
Loading theory "Draft.Templates" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.240s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.318s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.ExtrEqs")
### theory "Draft.Density_Predicates"
### 0.322s elapsed time, 0.760s cpu time, 0.051s GC time
Loading theory "Draft.PDF_Values" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.PDF_Target_Density_Contexts" via "Draft.PDF_Density_Contexts" via "Draft.PDF_Semantics")
### theory "HOL-Library.BigO"
### 0.607s elapsed time, 1.244s cpu time, 0.064s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PDF_Target_Density_ContextsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 1.084s cpu time, 0.145s GC time
### No equation for constructor "UnitVal"
### No equation for constructor "BoolVal"
### No equation for constructor "IntVal"
### No equation for constructor "RealVal"
consts
  extract_pair' :: "(val => 'a) => (val => 'b) => val => 'a * 'b"
Found termination order: "size <*mlex*> {}"
consts
  stock_measure :: "pdf_type => val measure"
### theory "Draft.PDF_Values"
### 1.898s elapsed time, 3.220s cpu time, 0.659s GC time
Loading theory "Draft.PDF_Semantics" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.PDF_Target_Density_Contexts" via "Draft.PDF_Density_Contexts")
class expr = type +
  fixes free_vars :: "'a => nat set"
instantiation
  expr :: expr
  free_vars_expr == free_vars :: expr => nat set
consts
  free_vars_expr :: "expr => nat set"
consts
  free_vars_expr_code :: "expr => nat set"
consts
  dist_param_type :: "pdf_dist => pdf_type"
consts
  dist_result_type :: "pdf_dist => pdf_type"
consts
  dist_measure :: "pdf_dist => val => val measure"
consts
  dist_dens :: "pdf_dist => val => val => ennreal"
consts
  op_type :: "pdf_operator => pdf_type => pdf_type option"
### Ambiguous input (line 414 of "$AFP/Density_Compiler/PDF_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>expr_typing" ("_position" \<Gamma>) ("_position" e1)
###       ("_position" t1)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing"
###         ("\<^const>PDF_Semantics.de_bruijn_insert" ("_position" t1)
###           ("_position" \<Gamma>))
###         ("_position" e2) ("_position" t2)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing" ("_position" \<Gamma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" t2)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>expr_typing" ("_position" \<Gamma>) ("_position" e1)
###       ("_position" t1)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing"
###         ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt"
###           ("_position" t1) ("_position" \<Gamma>))
###         ("_position" e2) ("_position" t2)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing" ("_position" \<Gamma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" t2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "expr_typing"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  countable_type :: "pdf_type => bool"
Found termination order: "{}"
### Ambiguous input (line 607 of "$AFP/Density_Compiler/PDF_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem)
###       ("_cargs" ("_position" \<sigma>)
###         ("\<^const>PDF_Semantics.expr.LetVar" ("_position" e1)
###           ("_position" e2))))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind" ("_position" v)
###           ("_applC" ("_position" expr_sem)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1))))
###         ("_do_final"
###           ("_applC" ("_position" expr_sem)
###             ("_cargs"
###               ("\<^const>PDF_Semantics.de_bruijn_insert" ("_position" v)
###                 ("_position" \<sigma>))
###               ("_position" e2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem)
###       ("_cargs" ("_position" \<sigma>)
###         ("\<^const>PDF_Semantics.expr.LetVar" ("_position" e1)
###           ("_position" e2))))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind" ("_position" v)
###           ("_applC" ("_position" expr_sem)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1))))
###         ("_do_final"
###           ("_applC" ("_position" expr_sem)
###             ("_cargs"
###               ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt"
###                 ("_position" v) ("_position" \<sigma>))
###               ("_position" e2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  expr_sem :: "(nat => val) => expr => val measure"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 965 of "$AFP/Density_Compiler/PDF_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs" ("_position" \<sigma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))))
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs"
###         ("\<^const>PDF_Semantics.de_bruijn_insert"
###           ("_applC" ("_position" expr_sem_rf)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1)))
###           ("_position" \<sigma>))
###         ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs" ("_position" \<sigma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))))
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs"
###         ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt"
###           ("_applC" ("_position" expr_sem_rf)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1)))
###           ("_position" \<sigma>))
###         ("_position" e2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  expr_sem_rf :: "(nat => val) => expr => val"
### theory "Draft.PDF_Semantics"
### 4.611s elapsed time, 5.408s cpu time, 1.025s GC time
Loading theory "Draft.PDF_Density_Contexts" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.PDF_Target_Density_Contexts")
Loading theory "Draft.PDF_Target_Semantics" (required by "Draft.PDF_Target_Density_ContextsTemplates" via "Draft.PDF_Target_Density_Contexts")
locale density_context
  fixes V :: "nat set"
    and V' :: "nat set"
    and \<Gamma> :: "nat => pdf_type"
    and \<delta> :: "(nat => val) => ennreal"
  assumes "density_context V V' \<Gamma> \<delta>"
### theory "Draft.PDF_Density_Contexts"
### 0.462s elapsed time, 0.960s cpu time, 0.080s GC time
instantiation
  cexpr :: expr
  free_vars_cexpr == free_vars :: cexpr => nat set
consts
  free_vars_cexpr :: "cexpr => nat set"
### Ambiguous input (line 86 of "$AFP/Density_Compiler/PDF_Target_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cexpr_typing"
###       ("\<^const>PDF_Semantics.de_bruijn_insert" ("_position" t)
###         ("_position" \<Gamma>))
###       ("_position" e) ("_position" REAL)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cexpr_typing" ("_position" \<Gamma>)
###       ("\<^const>PDF_Target_Semantics.cexpr.CIntegral" ("_position" e)
###         ("_position" t))
###       ("_position" REAL))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cexpr_typing"
###       ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt" ("_position" t)
###         ("_position" \<Gamma>))
###       ("_position" e) ("_position" REAL)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cexpr_typing" ("_position" \<Gamma>)
###       ("\<^const>PDF_Target_Semantics.cexpr.CIntegral" ("_position" e)
###         ("_position" t))
###       ("_position" REAL))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "cexpr_typing"
  Proving monotonicity ...
consts
  cexpr_type :: "(nat => pdf_type) => cexpr => pdf_type option"
### Ambiguous input (line 215 of "$AFP/Density_Compiler/PDF_Target_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cexpr_sem)
###       ("_cargs" ("_position" \<sigma>)
###         ("\<^const>PDF_Target_Semantics.cexpr.CIntegral" ("_position" e)
###           ("_position" t))))
###     ("_applC" ("_position" RealVal)
###       ("_lebesgue_integral" ("_position" x)
###         ("_applC" ("_position" extract_real)
###           ("_applC" ("_position" cexpr_sem)
###             ("_cargs"
###               ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt"
###                 ("_position" x) ("_position" \<sigma>))
###               ("_position" e))))
###         ("_applC" ("_position" stock_measure) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cexpr_sem)
###       ("_cargs" ("_position" \<sigma>)
###         ("\<^const>PDF_Target_Semantics.cexpr.CIntegral" ("_position" e)
###           ("_position" t))))
###     ("_applC" ("_position" RealVal)
###       ("_lebesgue_integral" ("_position" x)
###         ("_applC" ("_position" extract_real)
###           ("_applC" ("_position" cexpr_sem)
###             ("_cargs"
###               ("\<^const>PDF_Semantics.de_bruijn_insert" ("_position" x)
###                 ("_position" \<sigma>))
###               ("_position" e))))
###         ("_applC" ("_position" stock_measure) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cexpr_sem :: "(nat => val) => cexpr => val"
consts
  map_vars :: "(nat => nat) => cexpr => cexpr"
consts
  cexpr_subst :: "nat => cexpr => cexpr => cexpr"
consts
  cexpr_comp_aux :: "nat => cexpr => cexpr => cexpr"
consts
  cexpr_subst_val_aux :: "nat => cexpr => val => cexpr"
consts
  expr_rf_to_cexpr :: "expr => cexpr"
consts
  dist_dens_cexpr :: "pdf_dist => cexpr => cexpr => cexpr"
### theory "Draft.PDF_Target_Semantics"
### 1.797s elapsed time, 2.412s cpu time, 0.265s GC time
Loading theory "Draft.PDF_Target_Density_Contexts" (required by "Draft.PDF_Target_Density_ContextsTemplates")
### theory "Draft.PDF_Target_Density_Contexts"
### 0.397s elapsed time, 0.427s cpu time, 0.045s GC time
Loading theory "Draft.PDF_Target_Density_ContextsTemplates"
val templateLemmas =
   [("PDF_Target_Density_Contexts.set_shift_vars",
     "set (shift_vars ?vs) = shift_var_set (set ?vs)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("PDF_Target_Density_Contexts.free_vars_branch_prob_cexpr",
     "free_vars (branch_prob_cexpr (?vs, ?vs', ?\<Gamma>, ?\<delta>)) =
      free_vars ?\<delta> - set ?vs",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 0, template_var 3)))),
    ("PDF_Target_Density_Contexts.cexpr_typing_branch_prob_cexpr",
     "?\<Gamma> \<turnstile>\<^sub>c ?\<delta> : REAL ==>
      ?\<Gamma> \<turnstile>\<^sub>c
       branch_prob_cexpr (?vs, ?vs', ?\<Gamma>, ?\<delta>) : REAL",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2))))),
             template_hole 4)
           ))),
    ("PDF_Target_Density_Contexts.cexpr_typing_marg_dens_cexpr",
     "?\<Gamma> \<turnstile>\<^sub>c ?\<delta> : REAL ==>
      case_nat (?\<Gamma> ?x) ?\<Gamma> \<turnstile>\<^sub>c
       marg_dens_cexpr ?\<Gamma> ?vs ?x ?\<delta> : REAL",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_var 3, template_var 1)),
                   template_var 3)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 1),
                 template_var 2)),
             template_hole 2)
           ))),
    ("PDF_Target_Density_Contexts.free_vars_marg_dens_cexpr",
     "cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta> ==>
      free_vars (marg_dens_cexpr ?\<Gamma> ?vs ?x ?\<delta>)
      <= shift_var_set (set ?vs')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 4),
               template_var 0),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 3))))),
    ("PDF_Target_Density_Contexts.subprob_imp_subprob_cexpr",
     "density_context ?V ?V' ?\<Gamma>
       (%x. ennreal (extract_real (cexpr_sem x ?\<delta>))) ==>
      subprob_cexpr ?V ?V' ?\<Gamma> ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("PDF_Target_Density_Contexts.free_vars_marg_dens2_cexpr",
     "cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta> ==>
      free_vars (marg_dens2_cexpr ?\<Gamma> ?vs ?x ?y ?\<delta>)
      <= shift_var_set (set ?vs')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 5),
                 template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 4))))),
    ("PDF_Target_Density_Contexts.is_density_exprD",
     "is_density_expr (?vs, ?vs', ?\<Gamma>, ?\<delta>) ?t ?e ==>
      free_vars ?e <= shift_var_set (set ?vs')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2)))),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 4))))),
    ("PDF_Target_Density_Contexts.is_density_exprD",
     "is_density_expr (?vs, ?vs', ?\<Gamma>, ?\<delta>) ?t ?e ==>
      case_nat ?t ?\<Gamma> \<turnstile>\<^sub>c ?e : REAL",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2)))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3)),
               template_var 0),
             template_hole 0)
           ))),
    ("PDF_Target_Density_Contexts.density_context_\<alpha>",
     "cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta> ==>
      density_context (set ?vs) (set ?vs') ?\<Gamma>
       (%x. ennreal (extract_real (cexpr_sem x ?\<delta>)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 3, template_var 2)),
               template_var 1),
             t_empty)
           ))),
    ("PDF_Target_Density_Contexts.is_density_exprD_nonneg",
     "is_density_expr (?vs, ?vs', ?\<Gamma>, ?\<delta>) ?t ?e ==>
      nonneg_cexpr (shift_var_set (set ?vs')) (case_nat ?t ?\<Gamma>) ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2)))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("PDF_Target_Density_Contexts.cexpr_typing_marg_dens2_cexpr",
     "?\<Gamma> \<turnstile>\<^sub>c ?\<delta> : REAL ==>
      case_nat (PRODUCT (?\<Gamma> ?x) (?\<Gamma> ?y)) ?\<Gamma>
       \<turnstile>\<^sub>c
       marg_dens2_cexpr ?\<Gamma> ?vs ?x ?y ?\<delta> : REAL",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_var 4, template_var 2)),
                       template_app (template_var 4, template_var 1))),
                   template_var 4)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 0),
                     template_var 2),
                   template_var 1),
                 template_var 3)),
             template_hole 3)
           ))),
    ("PDF_Target_Density_Contexts.is_density_exprI",
     "[| case_nat ?t ?\<Gamma> \<turnstile>\<^sub>c ?e : REAL;
         free_vars ?e <= shift_var_set (set ?vs');
         nonneg_cexpr (shift_var_set (set ?vs')) (case_nat ?t ?\<Gamma>)
          ?e |]
      ==> is_density_expr (?vs, ?vs', ?\<Gamma>, ?\<delta>) ?t ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 5),
                    template_var 4)),
                template_var 3),
              template_hole 9)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 3),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 2))),
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 0)))),
               template_var 5),
             template_var 3)
           ))),
    ("PDF_Target_Density_Contexts.cexpr_sem_branch_prob",
     "[| cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta>;
         ?\<rho> : space (state_measure (set ?vs') ?\<Gamma>) |]
      ==> ennreal
           (extract_real
             (cexpr_sem ?\<rho>
               (branch_prob_cexpr (?vs, ?vs', ?\<Gamma>, ?\<delta>)))) =
          branch_prob (dens_ctxt_\<alpha> (?vs, ?vs', ?\<Gamma>, ?\<delta>))
           ?\<rho>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 3)),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1))))),
           template_var 0)))),
    ("PDF_Target_Density_Contexts.nonneg_cexpr_sem_marg_dens",
     "[| cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta>; ?x : set ?vs;
         ?\<rho> : space (state_measure (set ?vs') ?\<Gamma>);
         ?v : type_universe (?\<Gamma> ?x) |]
      ==> 0 <= extract_real
                (cexpr_sem (case_nat ?v ?\<rho>)
                  (marg_dens_cexpr ?\<Gamma> ?vs ?x ?\<delta>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 11, template_var 5)),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_var 4, template_var 2)))
            )],
       template_inequation
        (less_equals, template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 6),
                 template_var 2),
               template_var 3)))))),
    ("PDF_Target_Density_Contexts.nonneg_cexpr_sem_marg_dens2",
     "[| cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta>; ?x : set ?vs;
         ?y : set ?vs; ?\<rho> : space (state_measure (set ?vs') ?\<Gamma>);
         ?v : type_universe (PRODUCT (?\<Gamma> ?x) (?\<Gamma> ?y)) |]
      ==> 0 <= extract_real
                (cexpr_sem (case_nat ?v ?\<rho>)
                  (marg_dens2_cexpr ?\<Gamma> ?vs ?x ?y ?\<delta>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app (template_hole 12, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app (template_hole 12, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 12, template_var 6)),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_var 5, template_var 3)),
                  template_app (template_var 5, template_var 2))))
            )],
       template_inequation
        (less_equals, template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 7),
                   template_var 3),
                 template_var 2),
               template_var 4)))))),
    ("PDF_Target_Density_Contexts.cexpr_sem_marg_dens",
     "[| cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta>; ?x : set ?vs;
         ?\<rho> : space (state_measure (set ?vs') ?\<Gamma>) |]
      ==> AE v in stock_measure
                   (?\<Gamma>
                     ?x). ennreal
                           (extract_real
                             (cexpr_sem (case_nat v ?\<rho>)
                               (marg_dens_cexpr ?\<Gamma> ?vs ?x
                                 ?\<delta>))) =
                          marg_dens
                           (dens_ctxt_\<alpha>
                             (?vs, ?vs', ?\<Gamma>, ?\<delta>))
                           ?x ?\<rho> v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app (template_hole 17, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0),
              template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 17, template_var 4)),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 13, t_empty),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 1))))
           ))),
    ("PDF_Target_Density_Contexts.cexpr_sem_marg_dens2",
     "[| cdens_ctxt_invar ?vs ?vs' ?\<Gamma> ?\<delta>; ?x : set ?vs;
         ?y : set ?vs; ?x ~= ?y;
         ?\<rho> : space (state_measure (set ?vs') ?\<Gamma>) |]
      ==> AE z in stock_measure
                   (PRODUCT (?\<Gamma> ?x)
                     (?\<Gamma>
                       ?y)). ennreal
                              (extract_real
                                (cexpr_sem (case_nat z ?\<rho>)
                                  (marg_dens2_cexpr ?\<Gamma> ?vs ?x ?y
                                    ?\<delta>))) =
                             marg_dens2
                              (dens_ctxt_\<alpha>
                                (?vs, ?vs', ?\<Gamma>, ?\<delta>))
                              ?x ?y ?\<rho> z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 22, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 2),
              template_app (template_hole 20, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 1),
              template_app (template_hole 20, template_var 6))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 0),
              template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 20, template_var 5)),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 14, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 4, template_var 2)),
                   template_app (template_var 4, template_var 1)))))
           )))]:
   (string * thm * template) list
### theory "Draft.PDF_Target_Density_ContextsTemplates"
### 1.604s elapsed time, 2.543s cpu time, 1.078s GC time
val it = (): unit
