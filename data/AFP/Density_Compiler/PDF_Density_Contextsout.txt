Loading theory "Draft.Density_Predicates" (required by "Draft.PDF_Density_ContextsTemplates" via "Draft.PDF_Density_Contexts" via "Draft.PDF_Semantics" via "Draft.PDF_Values")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PDF_Density_ContextsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.PDF_Density_ContextsTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.272s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.112s elapsed time, 0.333s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PDF_Density_ContextsTemplates" via "Draft.ExtrEqs")
### theory "Draft.Density_Predicates"
### 0.313s elapsed time, 0.756s cpu time, 0.043s GC time
Loading theory "Draft.PDF_Values" (required by "Draft.PDF_Density_ContextsTemplates" via "Draft.PDF_Density_Contexts" via "Draft.PDF_Semantics")
### theory "HOL-Library.BigO"
### 0.581s elapsed time, 1.189s cpu time, 0.056s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PDF_Density_ContextsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.499s elapsed time, 1.033s cpu time, 0.119s GC time
### No equation for constructor "UnitVal"
### No equation for constructor "BoolVal"
### No equation for constructor "IntVal"
### No equation for constructor "RealVal"
consts
  extract_pair' :: "(val => 'a) => (val => 'b) => val => 'a * 'b"
Found termination order: "size <*mlex*> {}"
consts
  stock_measure :: "pdf_type => val measure"
### theory "Draft.PDF_Values"
### 1.671s elapsed time, 2.688s cpu time, 0.255s GC time
Loading theory "Draft.PDF_Semantics" (required by "Draft.PDF_Density_ContextsTemplates" via "Draft.PDF_Density_Contexts")
class expr = type +
  fixes free_vars :: "'a => nat set"
instantiation
  expr :: expr
  free_vars_expr == free_vars :: expr => nat set
consts
  free_vars_expr :: "expr => nat set"
consts
  free_vars_expr_code :: "expr => nat set"
consts
  dist_param_type :: "pdf_dist => pdf_type"
consts
  dist_result_type :: "pdf_dist => pdf_type"
consts
  dist_measure :: "pdf_dist => val => val measure"
consts
  dist_dens :: "pdf_dist => val => val => ennreal"
consts
  op_type :: "pdf_operator => pdf_type => pdf_type option"
### Ambiguous input (line 414 of "$AFP/Density_Compiler/PDF_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>expr_typing" ("_position" \<Gamma>) ("_position" e1)
###       ("_position" t1)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing"
###         ("\<^const>PDF_Semantics.de_bruijn_insert" ("_position" t1)
###           ("_position" \<Gamma>))
###         ("_position" e2) ("_position" t2)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing" ("_position" \<Gamma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" t2)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>expr_typing" ("_position" \<Gamma>) ("_position" e1)
###       ("_position" t1)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing"
###         ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt"
###           ("_position" t1) ("_position" \<Gamma>))
###         ("_position" e2) ("_position" t2)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>expr_typing" ("_position" \<Gamma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" t2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "expr_typing"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  countable_type :: "pdf_type => bool"
Found termination order: "{}"
### Ambiguous input (line 607 of "$AFP/Density_Compiler/PDF_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem)
###       ("_cargs" ("_position" \<sigma>)
###         ("\<^const>PDF_Semantics.expr.LetVar" ("_position" e1)
###           ("_position" e2))))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind" ("_position" v)
###           ("_applC" ("_position" expr_sem)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1))))
###         ("_do_final"
###           ("_applC" ("_position" expr_sem)
###             ("_cargs"
###               ("\<^const>PDF_Semantics.de_bruijn_insert" ("_position" v)
###                 ("_position" \<sigma>))
###               ("_position" e2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem)
###       ("_cargs" ("_position" \<sigma>)
###         ("\<^const>PDF_Semantics.expr.LetVar" ("_position" e1)
###           ("_position" e2))))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind" ("_position" v)
###           ("_applC" ("_position" expr_sem)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1))))
###         ("_do_final"
###           ("_applC" ("_position" expr_sem)
###             ("_cargs"
###               ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt"
###                 ("_position" v) ("_position" \<sigma>))
###               ("_position" e2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  expr_sem :: "(nat => val) => expr => val measure"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 965 of "$AFP/Density_Compiler/PDF_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs" ("_position" \<sigma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))))
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs"
###         ("\<^const>PDF_Semantics.de_bruijn_insert"
###           ("_applC" ("_position" expr_sem_rf)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1)))
###           ("_position" \<sigma>))
###         ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs" ("_position" \<sigma>)
###         ("_applC" ("_position" LetVar)
###           ("_cargs" ("_position" e1) ("_position" e2)))))
###     ("_applC" ("_position" expr_sem_rf)
###       ("_cargs"
###         ("\<^const>Linear_Temporal_Logic_on_Streams.HLD_nxt"
###           ("_applC" ("_position" expr_sem_rf)
###             ("_cargs" ("_position" \<sigma>) ("_position" e1)))
###           ("_position" \<sigma>))
###         ("_position" e2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  expr_sem_rf :: "(nat => val) => expr => val"
### theory "Draft.PDF_Semantics"
### 4.498s elapsed time, 5.518s cpu time, 1.334s GC time
Loading theory "Draft.PDF_Density_Contexts" (required by "Draft.PDF_Density_ContextsTemplates")
locale density_context
  fixes V :: "nat set"
    and V' :: "nat set"
    and \<Gamma> :: "nat => pdf_type"
    and \<delta> :: "(nat => val) => ennreal"
  assumes "density_context V V' \<Gamma> \<delta>"
### theory "Draft.PDF_Density_Contexts"
### 0.386s elapsed time, 0.429s cpu time, 0.052s GC time
Loading theory "Draft.PDF_Density_ContextsTemplates"
val templateLemmas =
   [("PDF_Density_Contexts.dens_ctxt_measure_nonempty",
     "space (dens_ctxt_measure ?\<Y> ?\<rho>) ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("PDF_Density_Contexts.measurable_remove_var",
     "remove_var
      : state_measure (shift_var_set ?V)
         (case_nat ?t ?\<Gamma>) \<rightarrow>\<^sub>M
        state_measure ?V ?\<Gamma>",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))
         )),
    ("PDF_Density_Contexts.measurable_case_nat_undefined",
     "case_nat undefined
      : state_measure ?A ?\<Gamma> \<rightarrow>\<^sub>M
        state_measure (Suc ` ?A) (case_nat ?t ?\<Gamma>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))))
         )),
    ("PDF_Density_Contexts.measurable_case_nat_Suc_PiM",
     "(%\<sigma>. \<sigma> o Suc)
      : Pi\<^sub>M (Suc ` ?A) (case_nat ?M ?N) \<rightarrow>\<^sub>M
        Pi\<^sub>M ?A ?N",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 4),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))
         )),
    ("PDF_Density_Contexts.measurable_case_nat_Suc",
     "(%\<sigma>. \<sigma> o Suc)
      : state_measure (Suc ` ?A)
         (case_nat ?t ?\<Gamma>) \<rightarrow>\<^sub>M
        state_measure ?A ?\<Gamma>",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 4),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))
         )),
    ("PDF_Density_Contexts.measurable_proj_state_measure",
     "?i : ?V ==>
      (%x. x ?i)
      : state_measure ?V ?\<Gamma> \<rightarrow>\<^sub>M
        stock_measure (?\<Gamma> ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 2))))
           ))),
    ("PDF_Density_Contexts.measurable_dens_ctxt_measure_eq",
     "(\<rightarrow>\<^sub>M)
       (dens_ctxt_measure (?V, ?V', ?\<Gamma>, ?\<delta>) ?\<rho>) =
      (\<rightarrow>\<^sub>M) (state_measure (?V Un ?V') ?\<Gamma>)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)))),
           template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2)))),
    ("PDF_Density_Contexts.space_dens_ctxt_measure",
     "space (dens_ctxt_measure (?V, ?V', ?\<Gamma>, ?\<delta>) ?\<rho>) =
      space (state_measure (?V Un ?V') ?\<Gamma>)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)))),
           template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2)))),
    ("PDF_Density_Contexts.sets_dens_ctxt_measure_eq",
     "sets (dens_ctxt_measure (?V, ?V', ?\<Gamma>, ?\<delta>) ?\<rho>) =
      sets (state_measure (?V Un ?V') ?\<Gamma>)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)))),
           template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2)))),
    ("PDF_Density_Contexts.measurable_if_dens",
     "[| ?\<delta> : borel_measurable ?M;
         (%(x, y). ?f x y)
         : borel_measurable
            (?M \<Otimes>\<^sub>M count_space (range BoolVal)) |]
      ==> if_dens ?\<delta> ?f ?b : borel_measurable ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_hole 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_hole 2),
                        template_hole 1)))),
                template_hole 9))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 10, template_var 2),
               template_hole 9))
           ))),
    ("PDF_Density_Contexts.measurable_if_dens_det",
     "[| ?\<Gamma> \<turnstile> ?e : BOOL; randomfree ?e;
         free_vars ?e <= ?V;
         ?\<delta> : borel_measurable (state_measure ?V ?\<Gamma>) |]
      ==> if_dens_det ?\<delta> ?e ?b
          : borel_measurable (state_measure ?V ?\<Gamma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 4)),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 4)),
               template_hole 1))
           ))),
    ("PDF_Density_Contexts.measurable_dens_ctxt_fun_upd",
     "[| ?f : ?N \<rightarrow>\<^sub>M state_measure ?V' ?\<Gamma>;
         ?V = ?V' Un {?x};
         ?g : ?N \<rightarrow>\<^sub>M stock_measure (?\<Gamma> ?x) |]
      ==> (%\<omega>. (?f \<omega>)(?x := ?g \<omega>))
          : ?N \<rightarrow>\<^sub>M state_measure ?V ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_app
               (template_app (template_hole 9, template_var 5),
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4))),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_app
                 (template_hole 1,
                  template_app (template_var 3, template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_app (template_hole 9, template_var 5),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 3)))
           ))),
    ("PDF_Density_Contexts.density_context_equiv",
     "[| !!\<sigma>.
            \<sigma> : space (state_measure (?V Un ?V') ?\<Gamma>) ==>
            ?\<delta> \<sigma> = ?\<delta>' \<sigma>;
         ?\<delta>'
         : borel_measurable (state_measure (?V Un ?V') ?\<Gamma>);
         density_context ?V ?V' ?\<Gamma> ?\<delta> |]
      ==> density_context ?V ?V' ?\<Gamma> ?\<delta>'",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3)),
                    template_var 2)),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.PDF_Density_ContextsTemplates"
### 1.478s elapsed time, 2.353s cpu time, 1.010s GC time
val it = (): unit
