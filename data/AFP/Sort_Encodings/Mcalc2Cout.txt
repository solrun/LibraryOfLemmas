Loading theory "HOL-Cardinals.Fun_More" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
Loading theory "HOL-Cardinals.Order_Relation_More" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation" via "HOL-Cardinals.Wellfounded_More")
Loading theory "HOL-Cardinals.Order_Union" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Cardinals.Fun_More"
### 0.115s elapsed time, 0.463s cpu time, 0.057s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type" via "HOL-Library.Countable_Set")
### theory "HOL-Cardinals.Order_Union"
### 0.142s elapsed time, 0.585s cpu time, 0.057s GC time
Loading theory "HOL-Cardinals.Wellorder_Extension" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals")
### theory "HOL-Library.Function_Algebras"
### 0.157s elapsed time, 0.626s cpu time, 0.057s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Cardinals.Wellorder_Extension"
### 0.069s elapsed time, 0.274s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Cardinals.Order_Relation_More"
### 0.298s elapsed time, 1.190s cpu time, 0.161s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Loading theory "HOL-Cardinals.Wellfounded_More" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation")
### theory "HOL-Cardinals.Wellfounded_More"
### 0.038s elapsed time, 0.156s cpu time, 0.000s GC time
Loading theory "HOL-Cardinals.Wellorder_Relation" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
### theory "HOL-Library.Infinite_Set"
### 0.268s elapsed time, 1.054s cpu time, 0.104s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Cardinals.Wellorder_Relation"
### 0.137s elapsed time, 0.538s cpu time, 0.064s GC time
Loading theory "HOL-Cardinals.Wellorder_Embedding" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
### theory "HOL-Library.Nat_Bijection"
### 0.364s elapsed time, 1.433s cpu time, 0.168s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.856s cpu time, 0.150s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.416s elapsed time, 1.632s cpu time, 0.253s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type" via "HOL-Library.Countable_Set")
### theory "HOL-Cardinals.Wellorder_Embedding"
### 0.181s elapsed time, 0.715s cpu time, 0.085s GC time
Loading theory "HOL-Cardinals.Wellorder_Constructions" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Cardinals.Wellorder_Constructions"
### 0.822s elapsed time, 3.097s cpu time, 0.776s GC time
Loading theory "HOL-Cardinals.Cardinal_Order_Relation" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Cardinal_Arithmetic")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.131s elapsed time, 4.309s cpu time, 0.956s GC time
Loading theory "HOL-Cardinals.Ordinal_Arithmetic" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.402s elapsed time, 5.365s cpu time, 1.126s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type")
Found termination order: "size <*mlex*> {}"
locale wo_rel2
  fixes r :: "('a * 'a) set"
    and s :: "('b * 'b) set"
  assumes "wo_rel2 r s"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Cardinal_Order_Relation"
### 0.832s elapsed time, 3.254s cpu time, 0.508s GC time
Loading theory "HOL-Cardinals.Cardinal_Arithmetic" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.801s elapsed time, 2.974s cpu time, 1.275s GC time
Loading theory "HOL-Library.Countable_Set_Type" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries")
### theory "HOL-Cardinals.Cardinal_Arithmetic"
### 0.517s elapsed time, 1.867s cpu time, 1.117s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Cardinals.Ordinal_Arithmetic"
### 1.198s elapsed time, 4.527s cpu time, 1.531s GC time
Loading theory "HOL-Cardinals.Cardinals" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries")
instantiation
  cset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_cset == inf :: 'a cset => 'a cset => 'a cset
  bot_cset == bot :: 'a cset
  sup_cset == sup :: 'a cset => 'a cset => 'a cset
  less_eq_cset == less_eq :: 'a cset => 'a cset => bool
  less_cset == less :: 'a cset => 'a cset => bool
  minus_cset == minus :: 'a cset => 'a cset => 'a cset
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Cardinals"
### 0.253s elapsed time, 0.997s cpu time, 0.079s GC time
### theory "HOL-Library.Tree"
### 2.623s elapsed time, 9.930s cpu time, 2.481s GC time
Loading theory "Draft.Templates" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.274s cpu time, 0.057s GC time
### theory "HOL-Library.BigO"
### 0.745s elapsed time, 2.234s cpu time, 0.198s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Mcalc2CMoreTemplates")
### theory "HOL-Library.Countable_Set_Type"
### 1.295s elapsed time, 3.441s cpu time, 0.308s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.124s cpu time, 0.109s GC time
Found termination order: "(%p. length (snd3 p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 0.787s elapsed time, 0.890s cpu time, 0.116s GC time
Loading theory "Draft.Sig" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M")
Loading theory "Draft.TermsAndClauses" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM" via "Draft.M")
locale Signature
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
  assumes "Signature TYPE('tp) wtFsym wtPsym"
### Additional type variable(s) in specification of "tpart1": 'tp
### Additional type variable(s) in specification of "tpart2": 'tp
### Additional type variable(s) in specification of "tinfinite": 'tp
Found termination order: "length <*mlex*> {}"
### theory "Draft.Sig"
### 0.131s elapsed time, 0.260s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.TermsAndClauses"
### 1.829s elapsed time, 2.942s cpu time, 1.357s GC time
Loading theory "Draft.M" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono" via "Draft.CM")
locale Signature
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
  assumes "Signature TYPE('tp) wtFsym wtPsym"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale Tstruct
  fixes intT :: "'tp => 'univ => bool"
  assumes "Tstruct intT"
locale Struct
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and intT :: "'tp => 'univ => bool"
    and intF :: "'fsym => 'univ list => 'univ"
    and intP :: "'psym => 'univ list => bool"
  assumes "Struct wtFsym wtPsym arOf resOf intT intF intP"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale Signature
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
  assumes "Signature TYPE('tp) wtFsym wtPsym"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale Problem
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
  assumes "Problem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale Model
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
    and intT :: "'c => 'd => bool"
    and intF :: "'a => 'd list => 'd"
    and intP :: "'b => 'd list => bool"
  assumes "Model wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
### theory "Draft.M"
### 1.273s elapsed time, 1.423s cpu time, 0.180s GC time
Loading theory "Draft.CM" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2" via "Draft.Mono")
locale CM.Tstruct
  fixes intT :: "'tp => univ => bool"
  assumes "CM.Tstruct intT"
locale CM.Struct
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "CM.Struct wtFsym wtPsym arOf resOf intT intF intP"
locale CM.Model
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "CM.Model wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
### theory "Draft.CM"
### 1.082s elapsed time, 2.048s cpu time, 1.351s GC time
Loading theory "Draft.Mono" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C" via "Draft.Mcalc2")
locale FullStruct
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "FullStruct wtFsym wtPsym arOf resOf intT intF intP"
locale FullModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "FullModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale InfStruct
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "InfStruct wtFsym wtPsym arOf resOf intT intF intP"
locale InfModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "InfModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale Problem
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
  assumes "Problem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale ProblemIk
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
  assumes "ProblemIk wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
locale ModelIk
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIk wtFsym wtPsym arOf resOf parOf \<Phi> infTp intT intF intP"
locale Problem
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
  assumes "Problem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale MonotProblem
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
  assumes "MonotProblem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale MonotProblemIk
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
  assumes "MonotProblemIk wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
locale MonotProblem
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
  assumes "MonotProblem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale MonotModel
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "MonotModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale MonotModel
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "MonotModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale InfModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "IInfModel intT intF intP"
locale InfModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "IInfModel intT intF intP"
locale MonotProblem
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
  assumes "MonotProblem wtFsym wtPsym arOf resOf parOf \<Phi>"
### theory "Draft.Mono"
### 4.101s elapsed time, 4.457s cpu time, 0.489s GC time
Loading theory "Draft.Mcalc2" (required by "Draft.Mcalc2CMoreTemplates" via "Draft.Mcalc2C")
locale ProblemIkPol
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
  assumes "ProblemIkPol wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
locale ProblemIkPol
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
  assumes "ProblemIkPol wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "mcalc2"
  Proving monotonicity ...
locale ProblemIkPolMcalc2
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
  assumes
    "ProblemIkPolMcalc2 wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol
      grdOf"
locale ModelIkPolMcalc2
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIkPolMcalc2 wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol grdOf
      intT intF intP"
### theory "Draft.Mcalc2"
### 1.199s elapsed time, 1.415s cpu time, 0.242s GC time
Loading theory "Draft.Mcalc2C" (required by "Draft.Mcalc2CMoreTemplates")
locale ProblemIkPolMcalc2C
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
  assumes
    "ProblemIkPolMcalc2C wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol
      grdOf"
locale ProblemIkPolMcalc2C
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
  assumes
    "ProblemIkPolMcalc2C wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol
      grdOf"
locale ModelIkPolMcalc2C
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIkPolMcalc2C wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol grdOf
      intT intF intP"
locale ModelIkPolMcalc2C
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIkPolMcalc2C wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol grdOf
      intT intF intP"
locale ModelIkPolMcalc2C
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIkPolMcalc2C wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol grdOf
      intT intF intP"
locale ProblemIkPolMcalc2C
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and pol :: "'tp => 'psym => epol"
    and
    grdOf ::
      "('fsym, 'psym) lit list
       => ('fsym, 'psym) lit => Preliminaries.var => ('fsym, 'psym) lit"
  assumes
    "ProblemIkPolMcalc2C wtFsym wtPsym arOf resOf parOf \<Phi> infTp pol
      grdOf"
### theory "Draft.Mcalc2C"
### 1.942s elapsed time, 2.079s cpu time, 0.188s GC time
Loading theory "Draft.Mcalc2CMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Mcalc2CMoreTemplates"
### 0.400s elapsed time, 0.564s cpu time, 0.063s GC time
val it = (): unit
