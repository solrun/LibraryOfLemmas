   [("Groups.mono_add", "mono ((+) ?a)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("GCD.Gcd_int_greater_eq_0", "0 <= Gcd ?K",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("GCD.Lcm_int_greater_eq_0", "0 <= Lcm ?K",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("GCD.coprime_Suc_right_nat", "coprime ?n (Suc ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("GCD.coprime_Suc_left_nat", "coprime (Suc ?n) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Groebner_Basis.bool_simps", "?P ~= (~ ?P)",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 1, template_var 0))
         )),
    ("Groebner_Basis.bool_simps", "(~ ?P) ~= ?P",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_var 0)
         )),
    ("Groups.add_0", "(0::?'a) + ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Groups.mult_1", "(1::?'a) * ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.algebra", "(0::?'a) div ?a = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Groebner_Basis.algebra", "?a div (1::?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Groebner_Basis.algebra", "?a div (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Groebner_Basis.algebra", "(0::?'a) mod ?a = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Groebner_Basis.algebra", "?a mod (1::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Groebner_Basis.algebra", "?a mod (0::?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("GCD.gcd_1_int", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_left_nat", "gcd 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("GCD.gcd_1_nat", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_nat", "gcd ?x 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("GCD.gcd_idem_nat", "gcd ?x ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.nnf_simps", "(~ ~ ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(False & ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(True & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(?P & False) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(?P & True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(?P & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(False | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(True | ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(?P | False) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(?P | True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(?P | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(?x = ?x) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(True = ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(?P = True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(False --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(True --> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Groebner_Basis.bool_simps", "(?P --> True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(?P --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("GCD.gcd_ge_0_int", "0 <= gcd ?x ?y",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.lcm_ge_0_int", "0 <= lcm ?x ?y",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Groups.Let_1", "Let (1::?'b) ?f = ?f (1::?'b)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("Groups.Let_0", "Let (0::?'b) ?f = ?f (0::?'b)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("Groups.ab_left_minus", "- ?a + ?a = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Groups.field_simps", "inverse ?a = (1::?'a) / ?a",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Groups_List.sum_list_rev", "sum_list (rev ?xs) = sum_list ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Groebner_Basis.algebra", "?a mod - (1::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("GCD.gcd_0_left_int", "gcd 0 ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_0_int", "gcd ?x 0 = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_idem_int", "gcd ?x ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.abs_Gcd_eq", "\<bar>Gcd ?K\<bar> = Gcd ?K",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.abs_Lcm_eq", "\<bar>Lcm ?K\<bar> = Lcm ?K",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Groebner_Basis.bool_simps", "(False = ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Groebner_Basis.bool_simps", "(?P = False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Groebner_Basis.bool_simps", "(?P --> False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Groebner_Basis.bool_simps", "(?P & ~ ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(~ ?P & ?P) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(?P | ~ ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Groebner_Basis.bool_simps", "(~ ?P | ?P) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Groups.ac_simps", "gcd ?a ?b = gcd ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "lcm ?a ?b = lcm ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "max ?a ?b = max ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "min ?a ?b = min ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.add_ac", "?a + ?b = ?b + ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.mult_ac", "?a * ?b = ?b * ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "inf ?a ?b = inf ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "sup ?a ?b = sup ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "and ?a ?b = and ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "or ?a ?b = or ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "xor ?a ?b = xor ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groebner_Basis.algebra", "?a div - (1::?'a) = - ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_var 0))),
    ("Groebner_Basis.algebra", "?a mod ?b div ?b = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Groebner_Basis.algebra", "?a * ?b mod ?b = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Groebner_Basis.algebra", "?b * ?a mod ?b = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_hole 0)),
    ("Groups_Big.card_eq_sum", "card ?A = (SUM x:?A. 1)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("GCD.gcd_Suc_0", "gcd ?m (Suc 0) = Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Groebner_Basis.dnf", "(?P & ?Q) = (?Q & ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "(?a & ?b) = (?b & ?a)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groebner_Basis.dnf", "(?P | ?Q) = (?Q | ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.ac_simps", "(?a | ?b) = (?b | ?a)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groups.one_reorient", "((1::?'a) = ?x) = (?x = (1::?'a))",
     template_bimplication
      (template_equation (template_hole 0, template_var 0),
       template_equation (template_var 0, template_hole 0))),
    ("Groups.zero_reorient", "((0::?'a) = ?x) = (?x = (0::?'a))",
     template_bimplication
      (template_equation (template_hole 0, template_var 0),
       template_equation (template_var 0, template_hole 0))),
    ("Groups.ac_simps", "coprime ?b ?a = coprime ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Groebner_Basis.algebra", "((0::?'a) dvd ?a) = (?a = (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Groebner_Basis.bool_simps", "(?P --> ~ ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.bezw_0", "bezw ?x 0 = (1, 0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("GCD.Gcd_int_set_eq_fold", "Gcd (set ?xs) = fold gcd ?xs 0",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.Lcm_int_set_eq_fold", "Lcm (set ?xs) = fold lcm ?xs 1",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.gcd_abs2_int", "gcd ?x \<bar>?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg2_int", "gcd ?x (- ?y) = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_abs1_int", "gcd \<bar>?x\<bar> ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg1_int", "gcd (- ?x) ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_abs2_int", "lcm ?x \<bar>?y\<bar> = lcm ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_neg2_int", "lcm ?x (- ?y) = lcm ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_abs1_int", "lcm \<bar>?x\<bar> ?y = lcm ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_neg1_int", "lcm (- ?x) ?y = lcm ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.abs_gcd_int", "\<bar>gcd ?x ?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.abs_lcm_int", "\<bar>lcm ?i ?j\<bar> = lcm ?i ?j",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.Gcd_nat_set_eq_fold", "Gcd (set ?xs) = fold gcd ?xs 0",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.Lcm_nat_set_eq_fold", "Lcm (set ?xs) = fold lcm ?xs 1",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Groebner_Basis.nnf_simps", "(?P --> ?Q) = (~ ?P | ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Groebner_Basis.algebra", "is_unit ?x = (\<bar>?x\<bar> = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("Groebner_Basis.algebra", "(of_int ?z = (1::?'a)) = (?z = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Groebner_Basis.algebra", "(of_int ?z = (0::?'a)) = (?z = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Groebner_Basis.algebra", "((1::?'a) < of_int ?z) = (1 < ?z)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Groebner_Basis.algebra", "((0::?'a) < of_int ?z) = (0 < ?z)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Groebner_Basis.algebra", "(of_int ?z < (1::?'a)) = (?z < 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Groebner_Basis.algebra", "(of_int ?z < (0::?'a)) = (?z < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Groebner_Basis.algebra", "((1::?'a) <= of_int ?z) = (1 <= ?z)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Groebner_Basis.algebra", "((0::?'a) <= of_int ?z) = (0 <= ?z)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Groebner_Basis.algebra", "(of_int ?z <= (1::?'a)) = (?z <= 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Groebner_Basis.algebra", "(of_int ?z <= (0::?'a)) = (?z <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Groebner_Basis.algebra", "(csqrt ?z)\<^sup>2 = ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("Groups_Big.sum_abs_ge_zero",
     "(0::?'b) <= (SUM i:?A. \<bar>?f i\<bar>)",
     template_inequation
      (less_equals, template_hole 2,
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Groups_List.distinct_n_lists",
     "distinct ?xs ==> distinct (List.n_lists ?n ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Quotient.relcompp_eq_Grp_neq_bot",
     "(=) OO (BNF_Def.Grp UNIV ?f)^--1 ~= bot",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0))),
           template_hole 0)
         )),
    ("Groups_List.sum_list_replicate",
     "sum_list (replicate ?n ?c) = of_nat ?n * ?c",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Groups_List.sum_list_simps",
     "sum_list (?x # ?xs) = ?x + sum_list ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Groups.field_simps", "inverse ?x powi ?n = inverse (?x powi ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Groups.field_simps", "inverse ?a ^ ?n = inverse (?a ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Groups_Big.prod_constant", "(PROD x:?A. ?y) = ?y ^ card ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Groebner_Basis.algebra", "?a div - ?b = - ?a div ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Groebner_Basis.algebra", "- ?a div - ?b = ?a div ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Groebner_Basis.algebra", "?a mod ?b mod ?b = ?a mod ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Filter.rel_filter_Grp",
     "rel_filter (BNF_Def.Grp UNIV ?f) = BNF_Def.Grp UNIV (filtermap ?f)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_red_int", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Gcd_abs_eq", "Gcd (abs ` ?K) = Gcd ?K",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("GCD.Lcm_abs_eq", "Lcm (abs ` ?K) = Lcm ?K",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("GCD.gcd_red_nat", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Lcm_nat_insert", "Lcm (insert ?n ?M) = lcm ?n (Lcm ?M)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Groups_List.length_n_lists",
     "length (List.n_lists ?n ?xs) = length ?xs ^ ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Groebner_Basis.bool_simps", "(?P ~= ?Q) = (?P = (~ ?Q))",
     template_bimplication
      (template_negation
        (template_equation (template_var 1, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Groups_List.prod_list_zero_iff",
     "(prod_list ?xs = (0::?'a)) = ((0::?'a) : set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app (template_hole 0, template_var 0)))),
    ("Groebner_Basis.bool_simps", "(?P & ?P & ?Q) = (?P & ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Groebner_Basis.bool_simps", "(?P | ?P | ?Q) = (?P | ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Groebner_Basis.algebra", "(of_int ?w = of_int ?z) = (?w = ?z)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Groebner_Basis.algebra", "(?a mod ?b = (0::?'a)) = (?b dvd ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj1_iff_nat", "(lcm ?m ?n = ?m) = (?n dvd ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj2_iff_nat", "(lcm ?m ?n = ?n) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Groebner_Basis.bool_simps", "((~ ?P) = (~ ?Q)) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Groebner_Basis.algebra", "(of_int ?w < of_int ?z) = (?w < ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Groebner_Basis.algebra", "(of_int ?w <= of_int ?z) = (?w <= ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.Lcm_nat_infinite", "infinite ?M ==> Lcm ?M = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("GCD.Gcd_dvd_int", "?a : ?A ==> Gcd ?A dvd ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("GCD.dvd_Lcm_int", "?m : ?M ==> ?m dvd Lcm ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("GCD.Gcd_nat_eq_one", "1 : ?N ==> Gcd ?N = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("GCD.Lcm_eq_0_I_nat", "0 : ?A ==> Lcm ?A = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("GCD.Gcd_dvd_nat", "?a : ?A ==> Gcd ?A dvd ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("GCD.dvd_Lcm_nat", "?m : ?M ==> ?m dvd Lcm ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Groups_List.sum_list_append",
     "sum_list (?xs @ ?ys) = sum_list ?xs + sum_list ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Groups_List.sum_code",
     "sum ?g (set ?xs) = sum_list (map ?g (remdups ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Groebner_Basis.algebra", "?a mod - ?b = - (- ?a mod ?b)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Groebner_Basis.algebra", "- ?a mod - ?b = - (?a mod ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("GCD.gcd_neg_numeral_2_int",
     "gcd ?x (- numeral ?n) = gcd ?x (numeral ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_int_int_eq", "gcd (int ?m) (int ?n) = int (gcd ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_neg_numeral_1_int",
     "gcd (- numeral ?n) ?x = gcd (numeral ?n) ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("GCD.lcm_int_int_eq", "lcm (int ?m) (int ?n) = int (lcm ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Gcd_int_eq", "Gcd (int ` ?N) = int (Gcd ?N)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("GCD.Lcm_int_eq", "Lcm (int ` ?N) = int (Lcm ?N)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Groups_Big.card_cartesian_product_singleton",
     "card ({?x} \<times> ?A) = card ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Groebner_Basis.nnf_simps", "(~ (?P & ?Q)) = (~ ?P | ~ ?Q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Groebner_Basis.nnf_simps", "(~ (?P | ?Q)) = (~ ?P & ~ ?Q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("GCD.lcm_proj1_iff_int", "(lcm ?m ?n = \<bar>?m\<bar>) = (?n dvd ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj2_iff_int", "(lcm ?m ?n = \<bar>?n\<bar>) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.gcd_le1_int", "0 < ?a ==> gcd ?a ?b <= ?a",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.gcd_le2_int", "0 < ?b ==> gcd ?a ?b <= ?b",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("GCD.coprime_diff_one_right_nat", "0 < ?n ==> coprime ?n (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("GCD.coprime_diff_one_left_nat", "0 < ?n ==> coprime (?n - 1) ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 0)
           ))),
    ("GCD.dvd_lcm_I1_int", "?i dvd ?m ==> ?i dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("GCD.dvd_lcm_I2_int", "?i dvd ?n ==> ?i dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("GCD.dvd_lcm_I1_nat", "?k dvd ?m ==> ?k dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("GCD.dvd_lcm_I2_nat", "?k dvd ?n ==> ?k dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("GCD.gcd_proj1_if_dvd_nat", "?x dvd ?y ==> gcd ?x ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.lcm_proj2_if_dvd_nat", "?x dvd ?y ==> lcm ?x ?y = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("GCD.lcm_proj1_if_dvd_nat", "?x dvd ?y ==> lcm ?y ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("GCD.gcd_proj2_if_dvd_nat", "?y dvd ?x ==> gcd ?x ?y = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Quotient.Grp_conversep_nonempty",
     "(BNF_Def.Grp UNIV ?f)^--1 OO BNF_Def.Grp UNIV ?f ~= bot",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Groups.ac_simps", "gcd ?b (gcd ?a ?c) = gcd ?a (gcd ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "gcd (gcd ?a ?b) ?c = gcd ?a (gcd ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.ac_simps", "lcm ?b (lcm ?a ?c) = lcm ?a (lcm ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "lcm (lcm ?a ?b) ?c = lcm ?a (lcm ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.field_simps", "?a - (?b - ?c) = ?a + ?c - ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Groups.field_simps", "?a + (?b - ?c) = ?a + ?b - ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Groups.ac_simps", "max ?b (max ?a ?c) = max ?a (max ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "max (max ?a ?b) ?c = max ?a (max ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.ac_simps", "min ?b (min ?a ?c) = min ?a (min ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "min (min ?a ?b) ?c = min ?a (min ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.field_simps", "?a - ?b + ?c = ?a + ?c - ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Groups.field_simps",
     "((1::?'a) / ?x) powi ?n = (1::?'a) / ?x powi ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Groups.field_simps", "((1::?'a) / ?a) ^ ?n = (1::?'a) / ?a ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Groups.add_ac", "?a + ?b + ?c = ?a + (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.mult_ac", "?a * ?b * ?c = ?a * (?b * ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groebner_Basis.algebra", "?b * (?a div ?b) + ?a mod ?b = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 0)),
    ("Groups.add_ac", "?b + (?a + ?c) = ?a + (?b + ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.mult_ac", "?b * (?a * ?c) = ?a * (?b * ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "inf ?b (inf ?a ?c) = inf ?a (inf ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "inf (inf ?a ?b) ?c = inf ?a (inf ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.ac_simps", "sup ?b (sup ?a ?c) = sup ?a (sup ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "sup (sup ?a ?b) ?c = sup ?a (sup ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.diff_diff_eq", "?a - ?b - ?c = ?a - (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.ac_simps", "and ?b (and ?a ?c) = and ?a (and ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "and (and ?a ?b) ?c = and ?a (and ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.ac_simps", "or ?b (or ?a ?c) = or ?a (or ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "or (or ?a ?b) ?c = or ?a (or ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.ac_simps", "xor ?b (xor ?a ?c) = xor ?a (xor ?b ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "xor (xor ?a ?b) ?c = xor ?a (xor ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.prod_gcd_lcm_nat", "?m * ?n = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups_Big.card_cartesian_product",
     "card (?A \<times> ?B) = card ?A * card ?B",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_nat_abs_right_eq",
     "gcd ?n (nat \<bar>?k\<bar>) = nat (gcd (int ?n) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("GCD.gcd_nat_abs_left_eq",
     "gcd (nat \<bar>?k\<bar>) ?n = nat (gcd ?k (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("GCD.lcm_nat_abs_right_eq",
     "lcm ?n (nat \<bar>?k\<bar>) = nat (lcm (int ?n) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("GCD.lcm_nat_abs_left_eq",
     "lcm (nat \<bar>?k\<bar>) ?n = nat (lcm ?k (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("GCD.Gcd_nat_abs_eq",
     "(GCD k\<in>?K. nat \<bar>k\<bar>) = nat (Gcd ?K)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("GCD.Lcm_nat_abs_eq",
     "(LCM k\<in>?K. nat \<bar>k\<bar>) = nat (Lcm ?K)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Groebner_Basis.algebra", "(?b dvd ?a) = (EX k. ?a = ?b * k)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Groups.ac_simps", "(?b & ?a & ?c) = (?a & ?b & ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "((?a & ?b) & ?c) = (?a & ?b & ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.ac_simps", "(?b | ?a | ?c) = (?a | ?b | ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.ac_simps", "((?a | ?b) | ?c) = (?a | ?b | ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.field_simps", "(?a = ?c - ?b) = (?a + ?b = ?c)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Groups.field_simps", "(?a - ?b = ?c) = (?a = ?c + ?b)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Groups.field_simps", "(?a < ?c - ?b) = (?a + ?b < ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Groups.field_simps", "(?a - ?b < ?c) = (?a < ?c + ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Groups.field_simps", "(?a <= ?c - ?b) = (?a + ?b <= ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Groups.field_simps", "(?a - ?b <= ?c) = (?a <= ?c + ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Groups.ac_simps", "(?a dvd ?c - ?b) = (?a dvd ?b - ?c)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Groups.ac_simps", "(?a @ ?b) @ ?c = ?a @ ?b @ ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups_Big.sum_abs",
     "\<bar>sum ?f ?A\<bar> <= (SUM i:?A. \<bar>?f i\<bar>)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Groups_List.sum_list_filter_le_nat",
     "sum_list (map ?f (filter ?P ?xs)) <= sum_list (map ?f ?xs)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("GCD.finite_divisors_nat", "0 < ?m ==> finite {d. d dvd ?m}",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("GCD.gcd_proj1_if_dvd_int", "?x dvd ?y ==> gcd ?x ?y = \<bar>?x\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("GCD.lcm_proj2_if_dvd_int", "?x dvd ?y ==> lcm ?x ?y = \<bar>?y\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.lcm_proj1_if_dvd_int", "?x dvd ?y ==> lcm ?y ?x = \<bar>?y\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_proj2_if_dvd_int", "?y dvd ?x ==> gcd ?x ?y = \<bar>?y\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("GCD.gcd_le1_nat", "?a ~= 0 ==> gcd ?a ?b <= ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.gcd_le2_nat", "?b ~= 0 ==> gcd ?a ?b <= ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Groebner_Basis.algebra", "even (- ?a) = even ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_var 0))),
    ("GCD.Lcm_0_iff_nat", "finite ?A ==> (Lcm ?A = 0) = (0 : ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)))),
    ("GCD.finite_divisors_int", "?i ~= 0 ==> finite {d. d dvd ?i}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("GCD.Lcm_dvd_nat", "ALL m:?M. m dvd ?n ==> Lcm ?M dvd ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Groups.algebra_simps", "?a * (?b - ?c) = ?a * ?b - ?a * ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groups.algebra_simps", "(?a - ?b) * ?c = ?a * ?c - ?b * ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Groups.field_simps", "(?a / ?b) ^ ?n = ?a ^ ?n / ?b ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Groups_Big.sum_divide_distrib",
     "sum ?f ?A / ?r = (SUM n:?A. ?f n / ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Groups.algebra_simps", "?a * (?b + ?c) = ?a * ?b + ?a * ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groups.algebra_simps", "(?a + ?b) * ?c = ?a * ?c + ?b * ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Groups_Big.sum_negf", "(SUM x:?A. - ?f x) = - sum ?f ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Groups_List.sum_set_upto_conv_sum_list_int",
     "sum ?f (set [?i..?j]) = sum_list (map ?f [?i..?j])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Groups_List.sum_set_upt_conv_sum_list_nat",
     "sum ?f (set [?m..<?n]) = sum_list (map ?f [?m..<?n])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Groups.field_simps", "(?a * ?b) ^ ?n = ?a ^ ?n * ?b ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Groups.algebra_simps", "?a * (?b - ?c) = ?a * ?b - ?a * ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groups.algebra_simps", "(?b - ?c) * ?a = ?b * ?a - ?c * ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Groups.algebra_simps",
     "?a *\<^sub>R (?x - ?y) = ?a *\<^sub>R ?x - ?a *\<^sub>R ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groups.algebra_simps",
     "?a *\<^sub>R (?x + ?y) = ?a *\<^sub>R ?x + ?a *\<^sub>R ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groups.algebra_simps",
     "(?a - ?b) *\<^sub>R ?x = ?a *\<^sub>R ?x - ?b *\<^sub>R ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Groups.algebra_simps",
     "(?a + ?b) *\<^sub>R ?x = ?a *\<^sub>R ?x + ?b *\<^sub>R ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Groups_Big.prod_power_distrib",
     "prod ?f ?A ^ ?n = (PROD x:?A. ?f x ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("GCD.lcm_altdef_int",
     "lcm ?a ?b = \<bar>?a\<bar> * \<bar>?b\<bar> div gcd ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.prod_gcd_lcm_int",
     "\<bar>?m\<bar> * \<bar>?n\<bar> = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_mult_distrib_nat", "?k * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groups_Big.sum_Suc", "(SUM x:?A. Suc (?f x)) = sum ?f ?A + card ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Groebner_Basis.nnf_simps", "(?P = ?Q) = (?P & ?Q | ~ ?P & ~ ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Groebner_Basis.dnf", "(?P & (?Q | ?R)) = (?P & ?Q | ?P & ?R)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groebner_Basis.dnf", "((?Q | ?R) & ?P) = (?Q & ?P | ?R & ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("GCD.lcm_0_iff_int", "(lcm ?m ?n = 0) = (?m = 0 | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Groebner_Basis.algebra", "(?m mod ?d = 0) = (EX q. ?m = ?d * q)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app (template_hole 1, t_empty))),
    ("GCD.lcm_0_iff_nat", "(lcm ?m ?n = 0) = (?m = 0 | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Groebner_Basis.algebra", "even (Suc ?n) = odd ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Groebner_Basis.algebra", "(?a mod ?c = ?b mod ?c) = (?c dvd ?a - ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("GCD.lcm_code_integer",
     "lcm ?a ?b = \<bar>?a\<bar> * \<bar>?b\<bar> div gcd ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Gcd_remove0_nat", "finite ?M ==> Gcd ?M = Gcd (?M - {0})",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)))))),
    ("Lifting.NEG_trans",
     "[| Lifting.NEG ?A ?B; Lifting.NEG ?B ?C |] ==> Lifting.NEG ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("GCD.dvd_pos_nat", "[| 0 < ?n; ?m dvd ?n |] ==> 0 < ?m",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_hole 1, template_var 0))),
    ("Groups_Big.abs_sum_abs",
     "\<bar>SUM a:?A. \<bar>?f a\<bar>\<bar> =
      (SUM a:?A. \<bar>?f a\<bar>)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("GCD.gcd_mult_distrib_int",
     "\<bar>?k\<bar> * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Groebner_Basis.algebra", "(?m mod 2 = 1) = odd ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0)))),
    ("Groebner_Basis.algebra", "(?m mod Suc (Suc 0) = 1) = odd ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app
              (template_hole 7,
               template_app (template_hole 7, template_hole 6)))),
         template_hole 5),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Groebner_Basis.algebra", "(?m mod 2 = 1) = odd ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0)))),
    ("GCD.gcd_non_0_int", "0 < ?y ==> gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("GCD.gcd_diff2_nat", "?m <= ?n ==> gcd (?n - ?m) ?n = gcd ?m ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("GCD.gcd_diff1_nat", "?n <= ?m ==> gcd (?m - ?n) ?n = gcd ?m ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("GCD.Max_divisors_self_nat", "?n ~= 0 ==> Max {d. d dvd ?n} = ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Groups_Big.card_Union_le_sum_card",
     "ALL u:?U. finite u ==> card (\<Union> ?U) <= sum card ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("GCD.bezout_int", "EX u v. u * ?x + v * ?y = gcd ?x ?y",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Groups_Big.power_sum", "?c ^ sum ?f ?A = (PROD a:?A. ?c ^ ?f a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Groups_List.sum_list_map_eq_sum_count",
     "sum_list (map ?f ?xs) = (SUM x:set ?xs. count_list ?xs x * ?f x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Groups_List.sum_list_Suc",
     "(SUM x<-?xs. Suc (?f x)) = sum_list (map ?f ?xs) + length ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_pos_int", "(0 < gcd ?m ?n) = (?m ~= 0 | ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 4)))
           ))),
    ("GCD.gcd_pos_nat", "(0 < gcd ?m ?n) = (?m ~= 0 | ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 4)))
           ))),
    ("Groebner_Basis.algebra", "(?m mod Suc (Suc 0) = Suc 0) = odd ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 6, template_hole 5)))),
         template_app (template_hole 6, template_hole 5)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Groebner_Basis.algebra", "(?m mod 2 = Suc 0) = odd ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)))),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)))),
    ("GCD.Max_divisors_self_int",
     "?n ~= 0 ==> Max {d. d dvd ?n} = \<bar>?n\<bar>",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_non_0_nat", "?y ~= 0 ==> gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Groups_Big.sum_SucD", "sum ?f ?A = Suc ?n ==> EX a:?A. 0 < ?f a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), t_empty)
           ))),
    ("GCD.lcm_pos_nat", "[| 0 < ?m; 0 < ?n |] ==> 0 < lcm ?m ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Quotient.Grp_conversep_eq_onp",
     "(BNF_Def.Grp UNIV ?f)^--1 OO BNF_Def.Grp UNIV ?f =
      eq_onp (%x. x : range ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("GCD.lcm_1_iff_nat", "(lcm ?m ?n = Suc 0) = (?m = Suc 0 & ?n = Suc 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 2, template_hole 1)))
           ))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (?a < ?b / ?c) = (?a * ?c < ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (?b / ?c < ?a) = (?b < ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (?a <= ?b / ?c) = (?a * ?c <= ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (?b / ?c <= ?a) = (?b <= ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (?a < ?b / ?c) = (?b < ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (?b / ?c < ?a) = (?a * ?c < ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (?a <= ?b / ?c) = (?b <= ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (?b / ?c <= ?a) = (?a * ?c <= ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("Groups_List.sum_list_upt",
     "?m <= ?n ==> sum_list [?m..<?n] = \<Sum> {?m..<?n}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Lifting.NEG_pcr_rule",
     "Lifting.NEG (?A OO ?B) ?C ==>
      Lifting.NEG (?A OO ?B OO ?X) (?C OO ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Groups.add_mono_thms_linordered_semiring",
     "?i = ?j & ?k = ?l ==> ?i + ?k = ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_semiring",
     "?i = ?j & ?k <= ?l ==> ?i + ?k <= ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_field",
     "?i = ?j & ?k < ?l ==> ?i + ?k < ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_field",
     "?i < ?j & ?k = ?l ==> ?i + ?k < ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_field",
     "?i < ?j & ?k < ?l ==> ?i + ?k < ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_field",
     "?i < ?j & ?k <= ?l ==> ?i + ?k < ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_semiring",
     "?i <= ?j & ?k = ?l ==> ?i + ?k <= ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_semiring",
     "?i <= ?j & ?k <= ?l ==> ?i + ?k <= ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Groups.add_mono_thms_linordered_field",
     "?i <= ?j & ?k < ?l ==> ?i + ?k < ?j + ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("GCD.Lcm_least_int", "(!!b. b : ?A ==> b dvd ?a) ==> Lcm ?A dvd ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("GCD.Gcd_greatest_int", "(!!b. b : ?A ==> ?a dvd b) ==> ?a dvd Gcd ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("GCD.Gcd_greatest_nat", "(!!b. b : ?A ==> ?a dvd b) ==> ?a dvd Gcd ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Groups.dense_eq0_I",
     "(!!e. (0::?'a) < e ==> \<bar>?x\<bar> <= e) ==> ?x = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 0, template_hole 3))),
    ("GCD.gcd_code_int",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1)),
                 template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("Groebner_Basis.algebra", "even (?a ^ ?n) = (even ?a & 0 < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4))),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("GCD.gcd_code_integer",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1)),
                 template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("Groups_Big.prod_eq_1_iff",
     "finite ?A ==> (prod ?f ?A = 1) = (ALL a:?A. ?f a = 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Groups_Big.prod_pos_nat_iff",
     "finite ?A ==> (0 < prod ?f ?A) = (ALL a:?A. 0 < ?f a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Groups.field_simps",
     "0 < ?c ==> (?a < ?b /\<^sub>R ?c) = (?c *\<^sub>R ?a < ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Groups.field_simps",
     "0 < ?c ==> (?b /\<^sub>R ?c < ?a) = (?b < ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Groups.field_simps",
     "0 < ?c ==> (?a <= ?b /\<^sub>R ?c) = (?c *\<^sub>R ?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Groups.field_simps",
     "0 < ?c ==> (?b /\<^sub>R ?c <= ?a) = (?b <= ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Groups.field_simps",
     "?c < 0 ==> (?a < ?b /\<^sub>R ?c) = (?b < ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Groups.field_simps",
     "?c < 0 ==> (?b /\<^sub>R ?c < ?a) = (?c *\<^sub>R ?a < ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Groups.field_simps",
     "?c < 0 ==> (?a <= ?b /\<^sub>R ?c) = (?b <= ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Groups.field_simps",
     "?c < 0 ==> (?b /\<^sub>R ?c <= ?a) = (?c *\<^sub>R ?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Groups.field_simps",
     "?c ~= (0::?'a) ==> (?a = ?b / ?c) = (?a * ?c = ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Groups.field_simps",
     "?c ~= (0::?'a) ==> (?b / ?c = ?a) = (?b = ?a * ?c)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Groups_List.sum_list_nonneg",
     "(!!x. x : set ?xs ==> (0::?'a) <= x) ==> (0::?'a) <= sum_list ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("GCD.lcm_pos_int", "[| ?m ~= 0; ?n ~= 0 |] ==> 0 < lcm ?m ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Groups.field_split_simps",
     "?a - ?b / ?z = (if ?z = (0::?'a) then ?a else (?a * ?z - ?b) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Groups.field_split_simps",
     "?a + ?b / ?z = (if ?z = (0::?'a) then ?a else (?a * ?z + ?b) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Groups.field_split_simps",
     "?a / ?z + ?b = (if ?z = (0::?'a) then ?b else (?a + ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Groups_Big.card_UN_le",
     "finite ?I ==> card (\<Union> (?A ` ?I)) <= (SUM i:?I. card (?A i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (?a < - (?b / ?c)) = (?a * ?c < - ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (- (?b / ?c) < ?a) = (- ?b < ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (?a <= - (?b / ?c)) = (?a * ?c <= - ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Groups.field_simps",
     "(0::?'a) < ?c ==> (- (?b / ?c) <= ?a) = (- ?b <= ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (?a < - (?b / ?c)) = (- ?b < ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (- (?b / ?c) < ?a) = (?a * ?c < - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app (template_hole 2, template_var 1))))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (?a <= - (?b / ?c)) = (- ?b <= ?a * ?c)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Groups.field_simps",
     "?c < (0::?'a) ==> (- (?b / ?c) <= ?a) = (?a * ?c <= - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app (template_hole 2, template_var 1))))),
    ("Groups.field_simps",
     "?c ~= 0 ==> (?a = ?b /\<^sub>R ?c) = (?c *\<^sub>R ?a = ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Groups.field_simps",
     "?c ~= 0 ==> (?b /\<^sub>R ?c = ?a) = (?b = ?c *\<^sub>R ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Nat.GreatestI_nat",
     "[| ?P ?k; !!y. ?P y ==> y <= ?b |] ==> ?P (Greatest ?P)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2, template_app (template_hole 0, template_var 2))
           ))),
    ("Groups.field_split_simps",
     "?a / ?z - ?b = (if ?z = (0::?'a) then - ?b else (?a - ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 2)),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Groups_Big.sum_product",
     "sum ?f ?A * sum ?g ?B = (SUM i:?A. SUM j:?B. ?f i * ?g j)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 2))),
    ("Groups.field_split_simps",
     "(?a = ?b / ?c) =
      (if ?c ~= (0::?'a) then ?a * ?c = ?b else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_hole 1))
           ))),
    ("Groups.field_split_simps",
     "(?b / ?c = ?a) =
      (if ?c ~= (0::?'a) then ?b = ?a * ?c else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 1))),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))
           ))),
    ("Groups.field_split_simps",
     "(?a = ?b /\<^sub>R ?c) =
      (if ?c = 0 then ?a = (0::?'a) else ?c *\<^sub>R ?a = ?b)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("Groups.field_split_simps",
     "(?b /\<^sub>R ?c = ?a) =
      (if ?c = 0 then ?a = (0::?'a) else ?b = ?c *\<^sub>R ?a)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Groebner_Basis.algebra", "even (?a * ?b) = (even ?a | even ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Groebner_Basis.algebra",
     "even (?m - ?n) = (?m < ?n | even (?m + ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4))),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("GCD.gcd_is_Max_divisors_nat",
     "0 < ?n ==> gcd ?m ?n = Max {d. d dvd ?m & d dvd ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Groups.field_simps",
     "0 < ?c ==> (?a < - (?b /\<^sub>R ?c)) = (?c *\<^sub>R ?a < - ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Groups.field_simps",
     "0 < ?c ==> (- (?b /\<^sub>R ?c) < ?a) = (- ?b < ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Groups.field_simps",
     "0 < ?c ==> (?a <= - (?b /\<^sub>R ?c)) = (?c *\<^sub>R ?a <= - ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Groups.field_simps",
     "0 < ?c ==> (- (?b /\<^sub>R ?c) <= ?a) = (- ?b <= ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Groups.field_simps",
     "?c < 0 ==> (?a < - (?b /\<^sub>R ?c)) = (- ?b < ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Groups.field_simps",
     "?c < 0 ==> (- (?b /\<^sub>R ?c) < ?a) = (?c *\<^sub>R ?a < - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Groups.field_simps",
     "?c < 0 ==> (?a <= - (?b /\<^sub>R ?c)) = (- ?b <= ?c *\<^sub>R ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Groups.field_simps",
     "?c < 0 ==> (- (?b /\<^sub>R ?c) <= ?a) = (?c *\<^sub>R ?a <= - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Groups.field_simps",
     "?b ~= (0::?'a) ==> (?c = - (?a / ?b)) = (?c * ?b = - ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_app (template_hole 2, template_var 0))))),
    ("Groups.field_simps",
     "?b ~= (0::?'a) ==> (- (?a / ?b) = ?c) = (- ?a = ?c * ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_equation
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Groups.field_simps",
     "?z ~= (0::?'a) ==> ?x - ?y / ?z = (?x * ?z - ?y) / ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 2)))),
    ("Groups.field_simps",
     "?z ~= (0::?'a) ==> ?x / ?z - ?y = (?x - ?y * ?z) / ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("Groups.field_simps",
     "?z ~= (0::?'a) ==> ?x + ?y / ?z = (?x * ?z + ?y) / ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 2)))),
    ("Groups.field_simps",
     "?z ~= (0::?'a) ==> ?x / ?z + ?y = (?x + ?y * ?z) / ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("Nat.Greatest_le_nat",
     "[| ?P ?k; !!y. ?P y ==> y <= ?b |] ==> ?k <= Greatest ?P",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 2)))),
    ("Groups_Big.sum_subtractf",
     "(SUM x:?A. ?f x - ?g x) = sum ?f ?A - sum ?g ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Groups.field_split_simps",
     "- (?a / ?z) + ?b =
      (if ?z = (0::?'a) then ?b else (- ?a + ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Groups_Big.sum_zero_power",
     "(SUM i:?A. ?c i * (0::?'a) ^ i) =
      (if finite ?A & 0 : ?A then ?c 0 else (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))),
           template_app (template_var 1, template_hole 0)),
         template_hole 5))),
    ("Groups.field_split_simps",
     "?a - ?b /\<^sub>R ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>R ?a - ?b) /\<^sub>R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Groups.field_split_simps",
     "?a + ?b /\<^sub>R ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>R ?a + ?b) /\<^sub>R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Groups.field_split_simps",
     "?a /\<^sub>R ?c + ?b =
      (if ?c = 0 then ?b else (?a + ?c *\<^sub>R ?b) /\<^sub>R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("GCD.bezw_aux",
     "int (gcd ?x ?y) =
      fst (bezw ?x ?y) * int ?x + snd (bezw ?x ?y) * int ?y",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app (template_hole 6, template_var 0))))),
    ("GCD.gcd_is_Max_divisors_int",
     "?n ~= 0 ==> gcd ?m ?n = Max {d. d dvd ?m & d dvd ?n}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?c ==>
      (?a - ?b) *\<^sub>R ?x = ?a *\<^sub>R ?x - ?b *\<^sub>R ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 4)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 4))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?c ==>
      (?a + ?b) *\<^sub>R ?x = ?a *\<^sub>R ?x + ?b *\<^sub>R ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 4)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 4))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?a ==>
      ?a *\<^sub>R (?x - ?y) = ?a *\<^sub>R ?x - ?a *\<^sub>R ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?a ==>
      ?a *\<^sub>R (?x + ?y) = ?a *\<^sub>R ?x + ?a *\<^sub>R ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?a ==> ?a * (?b - ?c) = ?a * ?b - ?a * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?c ==> (?a - ?b) * ?c = ?a * ?c - ?b * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?a ==> ?a * (?b + ?c) = ?a * ?b + ?a * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Groups.field_simps",
     "NO_MATCH (?x div ?y) ?c ==> (?a + ?b) * ?c = ?a * ?c + ?b * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Groups_List.sum_list_transfer",
     "[| ?A (0::?'a) (0::?'b); rel_fun ?A (rel_fun ?A ?A) (+) (+) |]
      ==> rel_fun (list_all2 ?A) ?A sum_list sum_list",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 9),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_var 0)),
                template_hole 5),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Groups_List.prod_list_transfer",
     "[| ?A (1::?'a) (1::?'b); rel_fun ?A (rel_fun ?A ?A) (*) (*) |]
      ==> rel_fun (list_all2 ?A) ?A prod_list prod_list",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 9),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_var 0)),
                template_hole 5),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Fun_More.bij_betw_inv_into_RIGHT",
     "[| bij_betw ?f ?A ?A'; ?B' <= ?A' |]
      ==> ?f ` inv_into ?A ?f ` ?B' = ?B'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 0)),
         template_var 0))),
    ("Nat.GreatestI_ex_nat",
     "[| EX k. ?P k; !!y. ?P y ==> y <= ?b |] ==> ?P (Greatest ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1, template_app (template_hole 0, template_var 1))
           ))),
    ("Groups.field_split_simps",
     "- (?a / ?z) - ?b =
      (if ?z = (0::?'a) then - ?b else (- ?a - ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 1)),
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Groups.field_split_simps",
     "?a /\<^sub>R ?c - ?b =
      (if ?c = 0 then - ?b else (?a - ?c *\<^sub>R ?b) /\<^sub>R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Groups_Big.sum_diff1_nat",
     "sum ?f (?A - {?a}) =
      (if ?a : ?A then sum ?f ?A - ?f ?a else sum ?f ?A)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_app (template_var 2, template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 1)))),
    ("Groups.field_split_simps",
     "((0::?'a) < ?a * ?b) =
      ((0::?'a) < ?a & (0::?'a) < ?b | ?a < (0::?'a) & ?b < (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))))),
    ("Groups.field_split_simps",
     "(?a * ?b < (0::?'a)) =
      ((0::?'a) < ?a & ?b < (0::?'a) | ?a < (0::?'a) & (0::?'a) < ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 2)),
           template_app
            (template_app (template_hole 4, template_hole 2),
             template_var 0))))),
    ("Groups.field_split_simps",
     "((0::?'a) <= ?a * ?b) =
      ((0::?'a) <= ?a & (0::?'a) <= ?b | ?a <= (0::?'a) & ?b <= (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))))),
    ("Groups.field_split_simps",
     "(?a * ?b <= (0::?'a)) =
      ((0::?'a) <= ?a & ?b <= (0::?'a) | ?a <= (0::?'a) & (0::?'a) <= ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 2)),
           template_app
            (template_app (template_hole 4, template_hole 2),
             template_var 0))))),
    ("Groups.field_split_simps",
     "(?a = - (?b / ?c)) =
      (if ?c ~= (0::?'a) then ?a * ?c = - ?b else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app (template_hole 5, template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_hole 1))
           ))),
    ("Groups.field_split_simps",
     "(- (?b / ?c) = ?a) =
      (if ?c ~= (0::?'a) then - ?b = ?a * ?c else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 1))
           ))),
    ("Groups.field_simps",
     "?z ~= (0::?'a) ==> - (?x / ?z) - ?y = (- ?x - ?y * ?z) / ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("Groups.field_simps",
     "?z ~= (0::?'a) ==> - (?x / ?z) + ?y = (- ?x + ?y * ?z) / ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 2)))),
    ("GCD.bezout_nat", "?a ~= 0 ==> EX x y. ?a * x = ?b * y + gcd ?a ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Groups.field_simps",
     "?c ~= 0 ==>
      ?a - ?b /\<^sub>R ?c = (?c *\<^sub>R ?a - ?b) /\<^sub>R ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Groups.field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>R ?c - ?b = (?a - ?c *\<^sub>R ?b) /\<^sub>R ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Groups.field_simps",
     "?c ~= 0 ==>
      ?a + ?b /\<^sub>R ?c = (?c *\<^sub>R ?a + ?b) /\<^sub>R ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Groups.field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>R ?c + ?b = (?a + ?c *\<^sub>R ?b) /\<^sub>R ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Groups.field_split_simps",
     "- (?a /\<^sub>R ?c) + ?b =
      (if ?c = 0 then ?b else (- ?a + ?c *\<^sub>R ?b) /\<^sub>R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Groups_Big.sum_bounded_below",
     "(!!i. i : ?A ==> ?K <= ?f i) ==> of_nat (card ?A) * ?K <= sum ?f ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2))),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Groups_Big.sum_bounded_above",
     "(!!i. i : ?A ==> ?f i <= ?K) ==> sum ?f ?A <= of_nat (card ?A) * ?K",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))),
           template_var 0)))),
    ("Countable_Set.countable_SIGMA",
     "[| countable ?I; !!i. i : ?I ==> countable (?A i) |]
      ==> countable (Sigma ?I ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Groups_Big.sum_diff_nat",
     "[| finite ?B; ?B <= ?A |]
      ==> sum ?f (?A - ?B) = sum ?f ?A - sum ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("Groups_Big.sum_diff",
     "[| finite ?A; ?B <= ?A |]
      ==> sum ?f (?A - ?B) = sum ?f ?A - sum ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Groups.field_split_simps",
     "- (?a /\<^sub>R ?c) - ?b =
      (if ?c = 0 then - ?b else (- ?a - ?c *\<^sub>R ?b) /\<^sub>R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("GCD.lcm_1_iff_int",
     "(lcm ?m ?n = 1) = ((?m = 1 | ?m = - 1) & (?n = 1 | ?n = - 1))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app (template_hole 0, template_hole 3)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 3)),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("Groebner_Basis.algebra",
     "(?x mod ?n = ?y mod ?n) = (EX q1 q2. ?x + ?n * q1 = ?y + ?n * q2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app (template_hole 2, t_empty))),
    ("Groups.field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>R ?c) - ?b = (- ?a - ?c *\<^sub>R ?b) /\<^sub>R ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Groups.field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>R ?c) + ?b = (- ?a + ?c *\<^sub>R ?b) /\<^sub>R ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Groups_Big.card_Union_disjoint",
     "[| pairwise disjnt ?C; !!A. A : ?C ==> finite A |]
      ==> card (\<Union> ?C) = sum card ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Order_Relation_More.Under_Above_Galois",
     "[| ?B <= Field ?r; ?C <= Field ?r |]
      ==> (?B <= Above ?r ?C) = (?C <= Under ?r ?B)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Order_Relation_More.UnderS_AboveS_Galois",
     "[| ?B <= Field ?r; ?C <= Field ?r |]
      ==> (?B <= AboveS ?r ?C) = (?C <= UnderS ?r ?B)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Groups_List.sum_list_map_eq_sum_count2",
     "[| set ?xs <= ?X; finite ?X |]
      ==> sum_list (map ?f ?xs) = (SUM x:?X. count_list ?xs x * ?f x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_var 1),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 1)))),
    ("Groups_Big.sum_diff1",
     "finite ?A ==>
      sum ?f (?A - {?a}) =
      (if ?a : ?A then sum ?f ?A - ?f ?a else sum ?f ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 2)),
               template_app (template_var 1, template_var 0))),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 2))))),
    ("Groups_Big.card_SigmaI",
     "[| finite ?A; ALL a:?A. finite (?B a) |]
      ==> card (Sigma ?A ?B) = (SUM a:?A. card (?B a))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1), t_empty)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 1)))),
    ("GCD.coprime_crossproduct_nat",
     "[| coprime ?a ?d; coprime ?b ?c |]
      ==> (?a * ?c = ?b * ?d) = (?a = ?b & ?c = ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2))
             )))),
    ("Fun_More.bij_betw_inv_into_LEFT_RIGHT",
     "[| bij_betw ?f ?A ?A'; ?B <= ?A; ?f ` ?B = ?B' |]
      ==> inv_into ?A ?f ` ?B' = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4)),
           template_var 0),
         template_var 1))),
    ("Fun_More.bij_betw_inv_into_RIGHT_LEFT",
     "[| bij_betw ?f ?A ?A'; ?B' <= ?A'; inv_into ?A ?f ` ?B' = ?B |]
      ==> ?f ` ?B = ?B'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 4)),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 0),
         template_var 1))),
    ("Groups_Big.sum_zero_power'",
     "(SUM i:?A. ?c i * (0::?'a) ^ i / ?d i) =
      (if finite ?A & 0 : ?A then ?c 0 / ?d 0 else (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_var 2, template_hole 0)),
             template_app (template_var 1, template_hole 0))),
         template_hole 5))),
    ("Groups.field_split_simps",
     "(?a < ?b / ?c) =
      (if (0::?'a) < ?c then ?a * ?c < ?b
       else if ?c < (0::?'a) then ?b < ?a * ?c else ?a < (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_hole 1))))),
    ("Groups.field_split_simps",
     "(?b / ?c < ?a) =
      (if (0::?'a) < ?c then ?b < ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c < ?b else (0::?'a) < ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_hole 1),
             template_var 0))))),
    ("Groups.field_split_simps",
     "(?a <= ?b / ?c) =
      (if (0::?'a) < ?c then ?a * ?c <= ?b
       else if ?c < (0::?'a) then ?b <= ?a * ?c else ?a <= (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_hole 1))))),
    ("Groups.field_split_simps",
     "(?b / ?c <= ?a) =
      (if (0::?'a) < ?c then ?b <= ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c <= ?b else (0::?'a) <= ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app (template_hole 5, template_hole 1),
             template_var 0))))),
    ("GCD.lcm_unique_nat",
     "(?a dvd ?d & ?b dvd ?d & (ALL e. ?a dvd e & ?b dvd e --> ?d dvd e)) =
      (?d = lcm ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 1)),
                template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("GCD.gcd_unique_nat",
     "(?d dvd ?a & ?d dvd ?b & (ALL e. e dvd ?a & e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 0)),
                template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Quotient.relcompp_mem_Grp_neq_bot",
     "?A Int range ?f ~= {} ==>
      (%x y. x : ?A & y : ?A) OO (BNF_Def.Grp UNIV ?f)^--1 ~= bot",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_hole 8)),
              template_hole 7)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 8),
                   template_var 0))),
             template_hole 0)
           ))),
    ("Groups_Big.sum_Un_nat",
     "[| finite ?A; finite ?B |]
      ==> sum ?f (?A Un ?B) = sum ?f ?A + sum ?f ?B - sum ?f (?A Int ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Groups_Big.sum_card_image",
     "[| finite ?A; pairwise (%s t. disjnt (?f s) (?f t)) ?A |]
      ==> sum card (?f ` ?A) = (SUM a:?A. card (?f a))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Groups_Big.sum_Un",
     "[| finite ?A; finite ?B |]
      ==> sum ?f (?A Un ?B) = sum ?f ?A + sum ?f ?B - sum ?f (?A Int ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Groups_List.sum_list_mono",
     "(!!x. x : set ?xs ==> ?f x <= ?g x) ==>
      sum_list (map ?f ?xs) <= sum_list (map ?g ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Groups_Big.sum_bounded_above_strict",
     "[| !!i. i : ?A ==> ?f i < ?K; 0 < card ?A |]
      ==> sum ?f ?A < of_nat (card ?A) * ?K",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2))),
           template_var 0)))),
    ("Groups_Big.less_1_prod",
     "[| finite ?I; ?I ~= {}; !!i. i : ?I ==> (1::?'b) < ?f i |]
      ==> (1::?'b) < prod ?f ?I",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Groups_Big.sum_Un2",
     "finite (?A Un ?B) ==>
      sum ?f (?A Un ?B) =
      sum ?f (?A - ?B) + sum ?f (?B - ?A) + sum ?f (?A Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("GCD.bezout_add_strong_nat",
     "?a ~= 0 ==> EX d x y. d dvd ?a & d dvd ?b & ?a * x = ?b * y + d",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Groups_Big.sum_image_le",
     "[| finite ?I; !!i. i : ?I ==> (0::?'b) <= ?g (?f i) |]
      ==> sum ?g (?f ` ?I) <= sum (?g o ?f) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("GCD.Gcd_eq_Max",
     "[| finite ?M; ?M ~= {}; 0 ~: ?M |]
      ==> Gcd ?M = Max (INT m:?M. {d. d dvd m})",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_var 0)))))),
    ("Groups.field_split_simps",
     "(?a < - (?b / ?c)) =
      (if (0::?'a) < ?c then ?a * ?c < - ?b
       else if ?c < (0::?'a) then - ?b < ?a * ?c else ?a < (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_hole 1))))),
    ("Groups.field_split_simps",
     "(- (?b / ?c) < ?a) =
      (if (0::?'a) < ?c then - ?b < ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c < - ?b else (0::?'a) < ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_hole 1),
               template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_app (template_hole 5, template_hole 1),
             template_var 0))))),
    ("Groups.field_split_simps",
     "(?a <= - (?b / ?c)) =
      (if (0::?'a) < ?c then ?a * ?c <= - ?b
       else if ?c < (0::?'a) then - ?b <= ?a * ?c else ?a <= (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_hole 1))))),
    ("Groups.field_split_simps",
     "(- (?b / ?c) <= ?a) =
      (if (0::?'a) < ?c then - ?b <= ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c <= - ?b else (0::?'a) <= ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_app (template_hole 5, template_var 2))),
           template_app
            (template_app (template_hole 6, template_hole 1),
             template_var 0))))),
    ("Groups_Big.sum_eq_1_iff",
     "finite ?A ==>
      (sum ?f ?A = 1) =
      (EX a:?A. ?f a = 1 & (ALL b:?A. a ~= b --> ?f b = 0))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 1)),
           template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 1), t_empty)))),
    ("Groups_List.sum_list_strict_mono",
     "[| ?xs ~= []; !!x. x : set ?xs ==> ?f x < ?g x |]
      ==> sum_list (map ?f ?xs) < sum_list (map ?g ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Groups_Big.sum_cong_Suc",
     "[| 0 ~: ?A; !!x. Suc x : ?A ==> ?f (Suc x) = ?g (Suc x) |]
      ==> sum ?f ?A = sum ?g ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 2)
                )
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("GCD.lcm_unique_int",
     "(0 <= ?d &
       ?a dvd ?d & ?b dvd ?d & (ALL e. ?a dvd e & ?b dvd e --> ?d dvd e)) =
      (?d = lcm ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 2)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_var 2)),
                  template_app (template_hole 3, t_empty))))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_unique_int",
     "(0 <= ?d &
       ?d dvd ?a & ?d dvd ?b & (ALL e. e dvd ?a & e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0)),
                  template_app (template_hole 3, t_empty))))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_nat_induct",
     "[| !!m. ?P m 0; !!m n. [| 0 < n; ?P n (m mod n) |] ==> ?P m n |]
      ==> ?P ?m ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("GCD.Gcd_in",
     "[| !!a b. [| a : ?A; b : ?A |] ==> gcd a b : ?A; ?A ~= {} |]
      ==> Gcd ?A : ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Groups_Big.sum_strict_mono_ex1",
     "[| finite ?A; ALL x:?A. ?f x <= ?g x; EX a:?A. ?f a < ?g a |]
      ==> sum ?f ?A < sum ?g ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Groups_Big.sum_eq_Suc0_iff",
     "finite ?A ==>
      (sum ?f ?A = Suc 0) =
      (EX a:?A. ?f a = Suc 0 & (ALL b:?A. a ~= b --> ?f b = 0))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 1)),
           template_app (template_hole 7, template_hole 6)),
         template_app
          (template_app (template_hole 5, template_var 1), t_empty)))),
    ("Groups_Big.prod_gen_delta",
     "finite ?S ==>
      (PROD k:?S. if k = ?a then ?b k else ?c) =
      (if ?a : ?S then ?b ?a * ?c ^ (card ?S - 1) else ?c ^ card ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty), template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_var 1, template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3)),
                   template_hole 0)))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_var 3)))))),
    ("Groups_Big.sum_comp_morphism",
     "[| ?h (0::?'b) = (0::?'a); !!x y. ?h (x + y) = ?h x + ?h y |]
      ==> sum (?h o ?g) ?A = ?h (sum ?g ?A)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 7), template_hole 6),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Groups_Big.member_le_sum",
     "[| ?i : ?A; !!x. x : ?A - {?i} ==> (0::?'b) <= ?f x; finite ?A |]
      ==> ?f ?i <= sum ?f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Groups_Big.sum_bounded_above_divide",
     "[| !!i. i : ?A ==> ?f i <= ?K / of_nat (card ?A); finite ?A;
         ?A ~= {} |]
      ==> sum ?f ?A <= ?K",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("GCD.bezout_add_nat",
     "EX d x y.
         d dvd ?a & d dvd ?b & (?a * x = ?b * y + d | ?b * x = ?a * y + d)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("GCD.bezout1_nat",
     "EX d x y.
         d dvd ?a & d dvd ?b & (?a * x - ?b * y = d | ?b * x - ?a * y = d)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (?a < ?b /\<^sub>R ?c) =
      (if 0 < ?c then ?c *\<^sub>R ?a < ?b
       else if ?c < 0 then ?b < ?c *\<^sub>R ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (?b /\<^sub>R ?c < ?a) =
      (if 0 < ?c then ?b < ?c *\<^sub>R ?a
       else if ?c < 0 then ?c *\<^sub>R ?a < ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (?a <= ?b /\<^sub>R ?c) =
      (if 0 < ?c then ?c *\<^sub>R ?a <= ?b
       else if ?c < 0 then ?b <= ?c *\<^sub>R ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (?b /\<^sub>R ?c <= ?a) =
      (if 0 < ?c then ?b <= ?c *\<^sub>R ?a
       else if ?c < 0 then ?c *\<^sub>R ?a <= ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("GCD.coprime_crossproduct_int",
     "[| coprime ?a ?d; coprime ?b ?c |]
      ==> (\<bar>?a\<bar> * \<bar>?c\<bar> =
           \<bar>?b\<bar> * \<bar>?d\<bar>) =
          (\<bar>?a\<bar> = \<bar>?b\<bar> &
           \<bar>?c\<bar> = \<bar>?d\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 2))),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 1, template_var 3)),
                   template_app (template_hole 1, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 1, template_var 2)))
             )))),
    ("Groups_Big.less_1_prod2",
     "[| finite ?I; ?i : ?I; (1::?'b) < ?f ?i;
         !!i. i : ?I ==> (1::?'b) <= ?f i |]
      ==> (1::?'b) < prod ?f ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_than, template_hole 3,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("GCD.bezw_non_0",
     "0 < ?y ==>
      bezw ?x ?y =
      (snd (bezw ?y (?x mod ?y)),
       fst (bezw ?y (?x mod ?y)) -
       snd (bezw ?y (?x mod ?y)) * int (?x div ?y))",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 1)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))))))),
    ("Groups_Big.sum_subtractf_nat",
     "(!!x. x : ?A ==> ?g x <= ?f x) ==>
      (SUM x:?A. ?f x - ?g x) = sum ?f ?A - sum ?g ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 2))))),
    ("Groups_Big.sum_diff1'",
     "finite {i: ?I. ?f i ~= (0::?'b)} ==>
      sum' ?f (?I - {?i}) =
      (if ?i : ?I then sum' ?f ?I - ?f ?i else sum' ?f ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12, template_app (template_hole 11, t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_app (template_var 1, template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 2))))),
    ("GCD.Lcm_in_lcm_closed_set_nat",
     "[| finite ?M; ?M ~= {};
         !!m n. [| m : ?M; n : ?M |] ==> lcm m n : ?M |]
      ==> Lcm ?M : ?M",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Groups_List.horner_sum_transfer",
     "[| ?A (0::?'a) (0::?'b); rel_fun ?A (rel_fun ?A ?A) (+) (+);
         rel_fun ?A (rel_fun ?A ?A) (*) (*) |]
      ==> rel_fun (rel_fun ?B ?A) (rel_fun ?A (rel_fun (list_all2 ?B) ?A))
           horner_sum horner_sum",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 1, template_hole 14),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 1)),
                template_hole 10),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 1)),
                template_hole 8),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (?a < - (?b /\<^sub>R ?c)) =
      (if 0 < ?c then ?c *\<^sub>R ?a < - ?b
       else if ?c < 0 then - ?b < ?c *\<^sub>R ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (- (?b /\<^sub>R ?c) < ?a) =
      (if 0 < ?c then - ?b < ?c *\<^sub>R ?a
       else if ?c < 0 then ?c *\<^sub>R ?a < - ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (?a <= - (?b /\<^sub>R ?c)) =
      (if 0 < ?c then ?c *\<^sub>R ?a <= - ?b
       else if ?c < 0 then - ?b <= ?c *\<^sub>R ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Groups.field_split_simps",
     "0 < ?c ==>
      (- (?b /\<^sub>R ?c) <= ?a) =
      (if 0 < ?c then - ?b <= ?c *\<^sub>R ?a
       else if ?c < 0 then ?c *\<^sub>R ?a <= - ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Groups_List.sorted_wrt_less_sum_mono_lowerbound",
     "[| !!x y. x <= y ==> ?f x <= ?f y; sorted_wrt (<) ?ns |]
      ==> sum ?f {0..<length ?ns} <= sum_list (map ?f ?ns)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Groups_Big.sum_mono_inv",
     "[| sum ?f ?I = sum ?g ?I; !!i. i : ?I ==> ?f i <= ?g i; ?i : ?I;
         finite ?I |]
      ==> ?f ?i = ?g ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("GCD.Euclid_induct",
     "[| !!a b. ?P a b = ?P b a; !!a. ?P a 0;
         !!a b. ?P a b --> ?P a (a + b) |]
      ==> ?P ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Groups_Big.prod_Un",
     "[| finite ?A; finite ?B; ALL x:?A Int ?B. ?f x ~= (0::?'a) |]
      ==> prod ?f (?A Un ?B) =
          prod ?f ?A * prod ?f ?B / prod ?f (?A Int ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)))))),
    ("Groups_Big.sum_diff1'_aux",
     "[| finite ?F; {i: ?I. ?f i ~= (0::?'b)} <= ?F |]
      ==> sum' ?f (?I - {?i}) =
          (if ?i : ?I then sum' ?f ?I - ?f ?i else sum' ?f ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 11, t_empty),
          template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_app (template_var 1, template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 2))))),
    ("GCD.Lcm_eq_Max_nat",
     "[| finite ?M; ?M ~= {}; 0 ~: ?M;
         !!m n. [| m : ?M; n : ?M |] ==> lcm m n : ?M |]
      ==> Lcm ?M = Max ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)
                )
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Groups_Big.sum_strict_mono2",
     "[| finite ?B; ?A <= ?B; ?b : ?B - ?A; (0::?'b) < ?f ?b;
         !!x. x : ?B ==> (0::?'b) <= ?f x |]
      ==> sum ?f ?A < sum ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("GCD.bezout_gcd_nat'",
     "EX x y.
         ?b * y <= ?a * x & ?a * x - ?b * y = gcd ?a ?b |
         ?a * y <= ?b * x & ?b * x - ?a * y = gcd ?a ?b",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Groups_Big.sum_multicount",
     "[| finite ?S; finite ?T; ALL j:?T. card {i: ?S. ?R i j} = ?k |]
      ==> (SUM i:?S. card {j: ?T. ?R i j}) = ?k * card ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 2))))),
    ("Groups_Big.sum_multicount_gen",
     "[| finite ?s; finite ?t; ALL j:?t. card {i: ?s. ?R i j} = ?k j |]
      ==> (SUM i:?s. card {j: ?t. ?R i j}) = sum ?k ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Groups_Big.card_UN_disjoint",
     "[| finite ?I; ALL i:?I. finite (?A i);
         ALL i:?I. ALL j:?I. i ~= j --> ?A i Int ?A j = {} |]
      ==> card (\<Union> (?A ` ?I)) = (SUM i:?I. card (?A i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("GCD.mult_inj_if_coprime_nat",
     "[| inj_on ?f ?A; inj_on ?g ?B;
         !!a b. [| a : ?A; b : ?B |] ==> coprime (?f a) (?g b) |]
      ==> inj_on (%(a, b). ?f a * ?g b) (?A \<times> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 2), t_empty))
           ))),
    ("Groups_Big.prod_mono2",
     "[| finite ?B; ?A <= ?B; !!b. b : ?B - ?A ==> (1::?'b) <= ?f b;
         !!a. a : ?A ==> (0::?'b) <= ?f a |]
      ==> prod ?f ?A <= prod ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Groups_Big.sum_mult_sum_if_inj",
     "inj_on (%(a, b). ?f a * ?g b) (?A \<times> ?B) ==>
      sum ?f ?A * sum ?g ?B = sum id {?f a * ?g b |a b. a : ?A & b : ?B}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14, template_app (template_hole 13, t_empty)),
              template_app
               (template_app (template_hole 11, template_var 1), t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 9, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app (template_hole 5, t_empty))))),
    ("Groups_Big.convex_sum_bound_le",
     "[| !!i. i : ?I ==> (0::?'b) <= ?x i; sum ?x ?I = (1::?'b);
         !!i. i : ?I ==> \<bar>?a i - ?b\<bar> <= ?\<delta> |]
      ==> \<bar>(SUM i:?I. ?a i * ?x i) - ?b\<bar> <= ?\<delta>",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 4),
          template_hole 3),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, t_empty), template_var 4)),
             template_var 1)),
         template_var 0))),
    ("GCD.bezout_lemma_nat",
     "[| ?d dvd ?a; ?d dvd ?b;
         ?a * ?x = ?b * ?y + ?d | ?b * ?x = ?a * ?y + ?d |]
      ==> EX x y.
             ?d dvd ?a &
             ?d dvd ?a + ?b &
             (?a * x = (?a + ?b) * y + ?d | (?a + ?b) * x = ?a * y + ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 0)),
                    template_var 4))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 0)),
                  template_var 4)))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("GCD.gcd_cases_int",
     "[| [| 0 <= ?x; 0 <= ?y |] ==> ?P (gcd ?x ?y);
         [| 0 <= ?x; ?y <= 0 |] ==> ?P (gcd ?x (- ?y));
         [| ?x <= 0; 0 <= ?y |] ==> ?P (gcd (- ?x) ?y);
         [| ?x <= 0; ?y <= 0 |] ==> ?P (gcd (- ?x) (- ?y)) |]
      ==> ?P (gcd ?x ?y)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_app (template_hole 0, template_var 1)))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_app (template_hole 0, template_var 1)))
                )))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("GCD.lcm_cases_int",
     "[| [| 0 <= ?x; 0 <= ?y |] ==> ?P (lcm ?x ?y);
         [| 0 <= ?x; ?y <= 0 |] ==> ?P (lcm ?x (- ?y));
         [| ?x <= 0; 0 <= ?y |] ==> ?P (lcm (- ?x) ?y);
         [| ?x <= 0; ?y <= 0 |] ==> ?P (lcm (- ?x) (- ?y)) |]
      ==> ?P (lcm ?x ?y)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_app (template_hole 0, template_var 1)))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_app (template_hole 0, template_var 1)))
                )))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Deriv.GMVT'",
     "[| ?a < ?b; !!z. [| ?a <= z; z <= ?b |] ==> isCont ?f z;
         !!z. [| ?a <= z; z <= ?b |] ==> isCont ?g z;
         !!z. [| ?a < z; z < ?b |]
              ==> (?g has_real_derivative ?g' z) (at z);
         !!z. [| ?a < z; z < ?b |]
              ==> (?f has_real_derivative ?f' z) (at z) |]
      ==> EX c>?a.
             c < ?b & (?f ?b - ?f ?a) * ?g' c = (?g ?b - ?g ?a) * ?f' c",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Deriv.GMVT",
     "[| ?a < ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x;
         ALL x. ?a < x & x < ?b --> ?f differentiable at x;
         ALL x. ?a <= x & x <= ?b --> isCont ?g x;
         ALL x. ?a < x & x < ?b --> ?g differentiable at x |]
      ==> EX g'c f'c c.
             (?g has_real_derivative g'c) (at c) &
             (?f has_real_derivative f'c) (at c) &
             ?a < c &
             c < ?b & (?f ?b - ?f ?a) * g'c = (?g ?b - ?g ?a) * f'c",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty))))]
