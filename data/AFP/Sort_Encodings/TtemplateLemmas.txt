   [("Tree.finite_set_tree", "finite (set_tree ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Set_Interval.finite_lessThan", "finite {..<?k}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("TermsAndClauses.finite_vars", "finite (vars ?T)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("TermsAndClauses.finite_varsA", "finite (varsA ?at)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("TermsAndClauses.finite_varsC", "finite (varsC ?c)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("TermsAndClauses.finite_varsL", "finite (varsL ?l)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Sum_Type.Inl_Rep_inject", "inj_on Inl_Rep ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Sum_Type.Inr_Rep_inject", "inj_on Inr_Rep ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Sum_Type.inj_Inl", "inj_on Inl ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Sum_Type.inj_Inr", "inj_on Inr ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Product_Type.inj_swap", "inj_on prod.swap ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Product_Type.unit_eq", "?u = ()",
     template_equation (template_var 0, template_hole 0)),
    ("Product_Type.less_eq_unit", "?u <= ?v",
     template_inequation (less_equals, template_var 1, template_var 0)),
    ("Countable_Set_Type.csubset_refl", "csubset_eq ?A ?A",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Countable_Set_Type.cempty_fsubsetI", "csubset_eq cempty ?x",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("Topological_Spaces.decseq_const", "decseq (%x. ?k)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Topological_Spaces.incseq_const", "incseq (%x. ?k)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Transitive_Closure.reflp_rtranclp", "reflp ?R^**",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.symp_symclp", "symp (symclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.trans_rtrancl", "trans (?r^*)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.trans_trancl", "trans (?r^+)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.transp_rtranclp", "transp ?R^**",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.topological_space_generate_topology",
     "class.topological_space (generate_topology ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.continuous_bot", "continuous bot ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Topological_Spaces.continuous_on_discrete", "continuous_on ?A ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)
         )),
    ("Topological_Spaces.continuous_on_id'", "continuous_on ?s id",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Topological_Spaces.continuous_on_empty", "continuous_on {} ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Topological_Spaces.continuous_intros", "continuous_on ?S norm",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Transcendental.continuous_on_arsinh", "continuous_on ?A arsinh",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Topological_Spaces.continuous_on_swap", "continuous_on ?A prod.swap",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Topological_Spaces.continuous_intros", "open {?a<..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.continuous_intros", "open {..<?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Real_Vector_Spaces.open_real_greaterThan", "open {?a<..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Real_Vector_Spaces.open_real_lessThan", "open {..<?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.closed_atLeast", "closed {?a..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.closed_atMost", "closed {..?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.connected_Ici", "connected {?a..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.connected_Iic", "connected {..?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.connected_Ioi", "connected {?a<..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.connected_Iio", "connected {..<?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topological_Spaces.convergent_const", "convergent (%n. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Countable_Set_Type.cempty_parametric", "rel_cset ?A cempty cempty",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Filter.eventually_True", "\<forall>\<^sub>F x in ?F. True",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Set_Interval.finite_atLeastZeroLessThan_int", "finite {0..<?u}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Set_Interval.finite_atLeastLessThan_int", "finite {?l..<?u}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Set_Interval.finite_greaterThanAtMost_int", "finite {?l<..?u}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Set_Interval.finite_greaterThanLessThan_int", "finite {?l<..<?u}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Set_Interval.finite_atLeastLessThan", "finite {?l..<?u}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Set_Interval.finite_greaterThanAtMost", "finite {?l<..?u}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Set_Interval.finite_greaterThanLessThan", "finite {?l<..<?u}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Product_Type.less_unit", "~ ?u < ?v",
     template_negation
      (template_inequation (less_than, template_var 1, template_var 0))),
    ("Countable_Set_Type.not_cpsubset_cempty", "~ csubset ?A cempty",
     template_negation
      (template_inequation (less_than, template_var 0, template_hole 0))),
    ("Tree.size1_ge0", "0 < size1 ?t",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.cosh_real_pos", "0 < cosh ?x",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.exp_gt_zero", "0 < exp ?x",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.tanh_real_lt_1", "tanh ?x < 1",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("Transitive_Closure.symclp_greater", "?r <= symclp ?r",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.cosh_real_ge_1", "1 <= cosh ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.cosh_real_nonneg", "0 <= cosh ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.exp_ge_zero", "0 <= exp ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.cos_le_one", "cos ?x <= 1",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("Transcendental.sin_le_one", "sin ?x <= 1",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("Transitive_Closure.refl_rtrancl", "refl (?r^*)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.symp_rtranclp_symclp", "symp (symclp ?r)^**",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Transcendental.fact_in_Reals", "fact ?n : \<real>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Sum_Type.Inl_RepI", "Inl_Rep ?a : Sum_Type.sum",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Sum_Type.Inr_RepI", "Inr_Rep ?b : Sum_Type.sum",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Topological_Spaces.continuous_const", "continuous ?F (%x. ?c)",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)
         )),
    ("Topological_Spaces.continuous_on_id", "continuous_on ?s (%x. x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)
         )),
    ("Topological_Spaces.continuous_on_const", "continuous_on ?s (%x. ?c)",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)
         )),
    ("Topological_Spaces.continuous_intros", "open {?a<..<?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Real_Vector_Spaces.open_real_greaterThanLessThan", "open {?a<..<?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Topological_Spaces.closed_atLeastAtMost", "closed {?a..?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Topological_Spaces.connected_Icc", "connected {?a..?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Topological_Spaces.connected_Ico", "connected {?a..<?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Topological_Spaces.connected_Ioc", "connected {?a<..?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Topological_Spaces.connected_Ioo", "connected {?a<..<?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Topological_Spaces.uniformly_continuous_on_id",
     "uniformly_continuous_on ?s (%x. x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)
         )),
    ("Topological_Spaces.uniformly_continuous_on_const",
     "uniformly_continuous_on ?s (%x. ?c)",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)
         )),
    ("Transfer.Rel_eq_refl", "Transfer.Rel (=) ?x ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 0)
         )),
    ("Complete_Partial_Order.admissible_True",
     "ccpo.admissible ?lub ?ord (%x. True)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           t_empty)
         )),
    ("Countable_Set_Type.cinsertI1", "cin ?a (cinsert ?a ?B)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Countable_Set_Type.csingletonI", "cin ?a (csingle ?a)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Transcendental.exp_not_eq_zero", "exp ?x ~= (0::?'a)",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Tree.neq_empty_subtrees", "{} ~= subtrees ?t",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Tree.neq_subtrees_empty", "subtrees ?t ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Transcendental.cosh_real_nonzero", "cosh ?x ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Transcendental.not_exp_less_zero", "~ exp ?x < 0",
     template_negation
      (
         template_inequation
          (less_than, template_app (template_hole 1, template_var 0),
           template_hole 0)
         )),
    ("Transcendental.not_exp_le_zero", "~ exp ?x <= 0",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 0),
           template_hole 0)
         )),
    ("Transcendental.powr_one_eq_one", "(1::?'a) powr ?a = (1::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Transcendental.powr_0", "(0::?'a) powr ?z = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Set_Interval.Inf_greaterThan", "Inf {?x<..} = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Set_Interval.Sup_lessThan", "Sup {..<?y} = ?y",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Conditionally_Complete_Lattices.cSup_lessThan", "Sup {..<?x} = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Conditionally_Complete_Lattices.cInf_greaterThan", "Inf {?x<..} = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transitive_Closure.relpowp_1", "?P ^^ 1 = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Product_Type.curry_case_prod", "curry (%(x, y). ?f x y) = ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transfer.Domainp_refl", "Domainp ?T = Domainp ?T",
     template_equation
      (template_app (template_hole 0, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Product_Type.scomp_Pair", "scomp ?x Pair = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Product_Type.case_prod_curry", "(%(x, y). curry ?f x y) = ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Product_Type.unit_abs_eta_conv", "(%u. ?f ()) = ?f",
     template_equation (t_empty, template_var 0)),
    ("Set_Interval.card_lessThan", "card {..<?u} = ?u",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transitive_Closure.Domain_rtrancl", "Domain (?R^*) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Transitive_Closure.Range_rtrancl", "Range (?R^*) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Set_Interval.atLeastLessThan0", "{?m..<0} = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Transitive_Closure.relpow_1", "?R ^^ 1 = ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Transitive_Closure.ntrancl_Zero", "ntrancl 0 ?R = ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Product_Type.Sigma_empty1", "Sigma {} ?B = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("HOL.ASSUMPTION_cong", "ASSUMPTION ?A = ASSUMPTION ?A",
     template_equation
      (template_app (template_hole 0, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Countable_Set_Type.cBall_cempty", "cBall cempty ?P = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Countable_Set_Type.cBall_simps", "cBall cempty ?P = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Countable_Set_Type.cBex_cempty", "cBex cempty ?P = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Countable_Set_Type.cBex_simps", "cBex cempty ?P = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Countable_Set_Type.cempty_iff", "cin ?c cempty = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("HOL.eq_True", "(?P = True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Transcendental.arsinh_sinh_real", "arsinh (sinh ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transcendental.artanh_tanh_real", "artanh (tanh ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transcendental.ln_exp", "ln (exp ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transcendental.log_one", "log ?a 1 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Transcendental.tan_arctan", "tan (arctan ?y) = ?y",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Tree.mirror_mirror", "mirror (mirror ?t) = ?t",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Product_Type.swap_swap", "prod.swap (prod.swap ?p) = ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Countable_Set_Type.cimage_cempty", "cimage ?f cempty = cempty",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Countable_Set_Type.cDiff_cancel", "cDiff ?A ?A = cempty",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Countable_Set_Type.cDiff_cempty", "cDiff ?A cempty = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Countable_Set_Type.cempty_cDiff", "cDiff cempty ?A = cempty",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Countable_Set_Type.cInt_absorb", "cInt ?A ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Countable_Set_Type.cInt_cempty_right", "cInt ?A cempty = cempty",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Countable_Set_Type.cInt_cempty_left", "cInt cempty ?B = cempty",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Countable_Set_Type.cUn_absorb", "cUn ?A ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Countable_Set_Type.cUn_cempty_right", "cUn ?A cempty = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Countable_Set_Type.cUn_cempty_left", "cUn cempty ?B = ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Transitive_Closure.relpowp_0_I", "(?P ^^ 0) ?x ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Transcendental.tanh_real_gt_neg1", "- 1 < tanh ?x",
     template_inequation
      (less_than, template_app (template_hole 2, template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.sinh_less_cosh_real", "sinh ?x < cosh ?x",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Tree.height_le_size_tree", "height ?t <= size ?t",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Tree.min_height_le_height", "min_height ?t <= height ?t",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.powr_ge_pzero", "0 <= ?x powr ?y",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Transcendental.cos_ge_minus_one", "- 1 <= cos ?x",
     template_inequation
      (less_equals, template_app (template_hole 2, template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.sin_ge_minus_one", "- 1 <= sin ?x",
     template_inequation
      (less_equals, template_app (template_hole 2, template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.sinh_le_cosh_real", "sinh ?x <= cosh ?x",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.abs_cos_le_one", "\<bar>cos ?x\<bar> <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Transcendental.abs_sin_le_one", "\<bar>sin ?x\<bar> <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Countable_Set_Type.cUn_upper1", "csubset_eq ?A (cUn ?A ?B)",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.csubset_cinsertI", "csubset_eq ?B (cinsert ?a ?B)",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Countable_Set_Type.cUn_upper2", "csubset_eq ?B (cUn ?A ?B)",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Countable_Set_Type.cDiff_csubset", "csubset_eq (cDiff ?A ?B) ?A",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("Countable_Set_Type.cInt_lower1", "csubset_eq (cInt ?A ?B) ?A",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("Countable_Set_Type.cInt_lower2", "csubset_eq (cInt ?A ?B) ?B",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 0)),
    ("Topological_Spaces.strict_mono_add", "strict_mono (%n. n + ?k)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Transitive_Closure.refl_reflcl", "refl (?r^=)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Transcendental.isCont_cos", "isCont cos ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_cosh", "isCont cosh ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_exp", "isCont exp ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_sin", "isCont sin ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_sinh", "isCont sinh ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.continuous_within_cos",
     "continuous (at ?z within ?s) cos",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Transcendental.continuous_within_sin",
     "continuous (at ?z within ?s) sin",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Topological_Spaces.continuous_id", "continuous (at ?x within ?S) id",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Topological_Spaces.continuous_discrete",
     "continuous (at ?x within ?A) ?f",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)
         )),
    ("Transcendental.isCont_arctan", "isCont arctan ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_arsinh", "isCont arsinh ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Topological_Spaces.isCont_swap", "isCont prod.swap ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Topological_Spaces.continuous_on_sing", "continuous_on {?x} ?f",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)
         )),
    ("Transcendental.continuous_on_cos_real", "continuous_on {?a..?b} cos",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Transcendental.continuous_on_sin_real", "continuous_on {?a..?b} sin",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Transfer.transfer_raw", "Transfer.Rel (rel_set ?A) {} {}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw", "Transfer.Rel (list_all2 ?R) [] []",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_tree ?R) \<langle>\<rangle> \<langle>\<rangle>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw", "Transfer.Rel (rel_filter ?A) bot bot",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw", "Transfer.Rel (rel_option ?R) None None",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw", "Transfer.Rel (rel_cset ?A) cempty cempty",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("HOL.ASSUMPTION_I", "?A ==> ASSUMPTION ?A",
     template_implication
      ([template_predicate (template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("HOL.ASSUMPTION_D", "ASSUMPTION ?A ==> ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate (template_var 0))),
    ("Infinite_Set.MOST_ge_nat", "MOST n. ?m <= n",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)
         )),
    ("Topological_Spaces.tendsto_intros",
     "((%x. ?k) \<longlongrightarrow> ?k) ?F",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Sum_Type.Inl_Rep_not_Inr_Rep", "Inl_Rep ?a ~= Inr_Rep ?b",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transcendental.cos_arctan_not_zero", "cos (arctan ?x) ~= 0",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Sum_Type.Inl_not_Inr", "Inl ?a ~= Inr ?b",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Sum_Type.Inr_not_Inl", "Inr ?b ~= Inl ?a",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Countable_Set_Type.cempty_not_cinsert", "cempty ~= cinsert ?a ?A",
     template_negation
      (
         template_equation
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Countable_Set_Type.cinsert_not_cempty", "cinsert ?a ?A ~= cempty",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Transcendental.powr_non_neg", "~ ?a powr ?x < 0",
     template_negation
      (
         template_inequation
          (less_than,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Product_Type.fst_swap", "fst (prod.swap ?x) = snd ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Product_Type.snd_swap", "snd (prod.swap ?x) = fst ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("HOL.if_True", "(if True then ?x else ?y) = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 1)),
    ("Product_Type.fst_conv", "fst (?x1.0, ?x2.0) = ?x1.0",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Product_Type.snd_conv", "snd (?x1.0, ?x2.0) = ?x2.0",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Transcendental.cot_altdef", "cot ?x = inverse (tan ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.tan_altdef", "tan ?x = inverse (cot ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cos_minus", "cos (- ?x) = cos ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transcendental.cosh_minus", "cosh (- ?x) = cosh ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Topological_Spaces.lim_const", "lim (%m. ?a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), t_empty),
       template_var 0)),
    ("Transcendental.of_real_fact", "of_real (fact ?n) = fact ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtranclp_idemp", "?r^**^** = ?r^**",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.tranclp_rtranclp_absorb", "?R^++^** = ?R^**",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.symclp_conversep", "symclp ?r^--1 = symclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.symclp_idem", "symclp (symclp ?r) = symclp ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtranclp_tranclp_absorb", "?R^**^++ = ?R^**",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Product_Type.fst_comp_apsnd", "fst o apsnd ?f = fst",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Product_Type.snd_comp_apfst", "snd o apfst ?f = snd",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Tree.length_inorder", "length (inorder ?t) = size ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.length_postorder", "length (postorder ?t) = size ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.length_preorder", "length (preorder ?t) = size ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.size_mirror", "size (mirror ?t) = size ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Tree.height_mirror", "height (mirror ?t) = height ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Tree.ipl_mirror", "ipl (mirror ?t) = ipl ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Tree.min_height_mirror", "min_height (mirror ?t) = min_height ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Tree.size1_mirror", "size1 (mirror ?t) = size1 ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Tree.set_inorder", "set (inorder ?t) = set_tree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.set_postorder", "set (postorder ?t) = set_tree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.set_preorder", "set (preorder ?t) = set_tree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.trancl_domain", "Domain (?r^+) = Domain ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.trancl_range", "Range (?r^+) = Range ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Set_Interval.Compl_greaterThan", "- {?k<..} = {..?k}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.Compl_lessThan", "- {..<?k} = {?k..}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.lessThan_atLeast0", "{..<?n} = {0..<?n}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Set_Interval.atLeast_Suc_greaterThan", "{Suc ?k..} = {?k<..}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.atLeast0LessThan", "{0..<?n} = {..<?n}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.lessThan_Suc_atMost", "{..<Suc ?k} = {..?k}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtrancl_idemp", "(?r^*)^* = ?r^*",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.trancl_rtrancl_absorb", "(?R^+)^* = ?R^*",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.rtrancl_trancl_absorb", "(?R^*)^+ = ?R^*",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Product_Type.Sigma_empty2", "?A \<times> {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       template_hole 0)),
    ("Transitive_Closure.acyclic_irrefl", "acyclic ?r = irrefl (?r^+)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.finite_trancl", "finite (?r^+) = finite ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transfer.bi_total_conversep", "bi_total ?R^--1 = bi_total ?R",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transfer.bi_unique_conversep", "bi_unique ?R^--1 = bi_unique ?R",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transfer.left_total_conversep", "left_total ?A^--1 = right_total ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transfer.left_unique_conversep",
     "left_unique ?A^--1 = right_unique ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transfer.right_total_conversep", "right_total ?A^--1 = left_total ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transfer.right_unique_conversep",
     "right_unique ?A^--1 = left_unique ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.acyclic_converse", "acyclic (?r^-1) = acyclic ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transcendental.abs_exp_cancel", "\<bar>exp ?x\<bar> = exp ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.norm_fact", "norm (fact ?n) = fact ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.cosh_real_abs", "cosh \<bar>?x\<bar> = cosh ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Countable_Set_Type.cUN_empty", "cUnion (cimage ?B cempty) = cempty",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Countable_Set_Type.cimage_ident", "cimage (%x. x) ?Y = ?Y",
     template_equation
      (template_app
        (template_app (template_hole 0, t_empty), template_var 0),
       template_var 0)),
    ("Transcendental.abs_sin_x_le_abs_x",
     "\<bar>sin ?x\<bar> <= \<bar>?x\<bar>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transcendental.exp_ge_add_one_self", "1 + ?x <= exp ?x",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Topological_Spaces.continuous_ident",
     "continuous (at ?x within ?S) (%x. x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Transcendental.continuous_on_pochhammer",
     "continuous_on ?A (%z. pochhammer z ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)
         )),
    ("Transfer.transfer_raw", "Transfer.Rel (rel_fun ?A ?A) id id",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("HOL.eqTrueI", "?P ==> ?P = True",
     template_implication
      ([template_predicate (template_var 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Topological_Spaces.decseq_imp_monoseq", "decseq ?X ==> monoseq ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.incseq_imp_monoseq", "incseq ?X ==> monoseq ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cemptyE", "cin ?a cempty ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("HOL.False_neq_True", "False = True ==> ?P",
     template_implication
      ([template_equation (template_hole 1, template_hole 0)],
       template_predicate (template_var 0))),
    ("HOL.eqTrueE", "?P = True ==> ?P",
     template_implication
      ([template_equation (template_var 0, template_hole 0)],
       template_predicate (template_var 0))),
    ("Transcendental.DERIV_exp",
     "(exp has_field_derivative exp ?x) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Transcendental.DERIV_sin",
     "(sin has_field_derivative cos ?x) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Infinite_Set.MOST_neq", "MOST x. x ~= ?a",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Infinite_Set.MOST_neq", "MOST x. ?a ~= x",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Topological_Spaces.trivial_limit_at_left_real", "at_left ?x ~= bot",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Topological_Spaces.trivial_limit_at_right_real", "at_right ?x ~= bot",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("HOL.True_or_False", "?P = True | ?P = False",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))
         )),
    ("Product_Type.fst_apsnd", "fst (apsnd ?f ?x) = fst ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Product_Type.snd_apfst", "snd (apfst ?f ?x) = snd ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.cot_of_real", "of_real (cot ?x) = cot (of_real ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Transcendental.tan_of_real", "of_real (tan ?x) = tan (of_real ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Transcendental.cot_minus", "cot (- ?x) = - cot ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.exp_minus", "exp (- ?x) = inverse (exp ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Transcendental.tan_minus", "tan (- ?x) = - tan ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.tanh_minus", "tanh (- ?x) = - tanh ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.of_real_exp", "of_real (exp ?x) = exp (of_real ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Transcendental.cos_of_real", "cos (of_real ?x) = of_real (cos ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.exp_of_real", "exp (of_real ?x) = of_real (exp ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_minus", "sin (- ?x) = - sin ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.sin_of_real", "sin (of_real ?x) = of_real (sin ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sinh_minus", "sinh (- ?x) = - sinh ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Product_Type.Pair_scomp", "scomp (Pair ?x) ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Transitive_Closure.symclp_pointfree", "symclp ?r = sup ?r ?r^--1",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtranclp_conversep", "?r^--1^** = ?r^**^--1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.tranclp_converse", "?r^--1^++ = ?r^++^--1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.rtranclp_reflclp_absorb", "?R^**^== = ?R^**",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.reflclp_tranclp", "?r^++^== = ?r^**",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtranclp_reflclp", "?R^==^** = ?R^**",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Product_Type.curry_K", "curry (%x. ?c) = (%x y. ?c)",
     template_equation (template_app (template_hole 0, t_empty), t_empty)),
    ("Tree.size1_size", "size1 ?t = size ?t + 1",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Set_Interval.card_atLeastZeroLessThan_int", "card {0..<?u} = nat ?u",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.size_map_tree", "size (map_tree ?f ?t) = size ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.height_map_tree", "height (map_tree ?f ?t) = height ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.min_height_map_tree",
     "min_height (map_tree ?f ?t) = min_height ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tree.size1_map_tree", "size1 (map_tree ?f ?t) = size1 ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Countable_Set_Type.Union_conv_UNION",
     "\<Union> ?A = \<Union> (id ` ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Transitive_Closure.rtrancl_trancl_reflcl", "?r^* = (?r^+)^=",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Transitive_Closure.trancl_unfold_left", "?r^+ = ?r O ?r^*",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.trancl_unfold_right", "?r^+ = ?r^* O ?r",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transitive_Closure.rtrancl_converse", "(?r^-1)^* = (?r^*)^-1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.trancl_converse", "(?r^-1)^+ = (?r^+)^-1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.rtrancl_reflcl_absorb", "(?R^*)^= = ?R^*",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.reflcl_trancl", "(?r^+)^= = ?r^*",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtrancl_r_diff_Id", "(?r - Id)^* = ?r^*",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transitive_Closure.rtrancl_reflcl", "(?R^=)^* = ?R^*",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transitive_Closure.trancl_reflcl", "(?r^=)^+ = ?r^*",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.symp_conv_conversep_eq", "symp ?r = (?r^--1 = ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("HOL.NO_MATCH_cong", "NO_MATCH ?pat ?val = NO_MATCH ?pat ?val",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.csubset_cempty",
     "csubset_eq ?A cempty = (?A = cempty)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Countable_Set_Type.countable_insert_iff",
     "countable (insert ?x ?A) = countable ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.antisym_reflcl", "antisym (?r^=) = antisym ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Tree.inorder_mirror", "inorder (mirror ?t) = rev (inorder ?t)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Transcendental.log_ln", "ln ?x = log (exp 1) ?x",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Transcendental.arctan_minus", "arctan (- ?x) = - arctan ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.arsinh_minus_real", "arsinh (- ?x) = - arsinh ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.sinh_real_abs",
     "sinh \<bar>?x\<bar> = \<bar>sinh ?x\<bar>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.tanh_real_abs",
     "tanh \<bar>?x\<bar> = \<bar>tanh ?x\<bar>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transcendental.sin_pi_minus", "sin (pi - ?x) = sin ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transcendental.tan_periodic_pi", "tan (?x + pi) = tan ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transcendental.cot_npi", "cot (real ?n * pi) = 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_hole 0)),
    ("Transcendental.sin_npi_int", "sin (pi * real_of_int ?n) = 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Transcendental.sin_npi2", "sin (pi * real ?n) = 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Transcendental.sin_npi", "sin (real ?n * pi) = 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_hole 0)),
    ("Transcendental.tan_npi", "tan (real ?n * pi) = 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_hole 0)),
    ("Product_Type.surjective_pairing", "?t = (fst ?t, snd ?t)",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cInt_commute", "cInt ?A ?B = cInt ?B ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Countable_Set_Type.cUn_commute", "cUn ?A ?B = cUn ?B ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Countable_Set_Type.cUN_empty2",
     "cUnion (cimage (%x. cempty) ?A) = cempty",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_hole 0)),
    ("Countable_Set_Type.cDiff_disjoint", "cInt ?A (cDiff ?B ?A) = cempty",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_hole 0)),
    ("Relation.Id_on_subset_Times", "Id_on ?A <= ?A \<times> ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Transcendental.norm_exp", "norm (exp ?x) <= exp (norm ?x)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Transcendental.tanh_real_bounds", "tanh ?x : {- 1<..<1}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_hole 0))
         )),
    ("Transitive_Closure.relpow_0_I", "(?x, ?x) : ?R ^^ 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?R (rel_option ?R)) Some Some",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?A) (=)) length length",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?A) (=)) List.null List.null",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (stream_all2 ?R) ?R) shd shd",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (=) (rel_trm ?R)) Var Var",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("TermsAndClauses.finite_varsPB",
     "finite ?\<Phi> ==> finite (varsPB ?\<Phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Quotient.QT_lam", "Quot_True ?P ==> Quot_True (?P ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Transitive_Closure.sym_rtrancl", "sym ?r ==> sym (?r^*)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.sym_trancl", "sym ?r ==> sym (?r^+)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.symp_rtranclp", "symp ?r ==> symp ?r^**",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros", "open ?S ==> closed (- ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros", "closed ?S ==> open (- ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?A ==> bi_total (rel_set ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?A ==> bi_total (rel_filter ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?R ==> bi_total (list_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?R ==> bi_total (rel_tree ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?R ==> bi_total (rel_option ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?R ==> bi_total (stream_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?R ==> bi_total (rel_trm ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_total ?R ==> bi_total (rel_cset ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?A ==> bi_unique (rel_set ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?A ==> bi_unique (rel_filter ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?R ==> bi_unique (list_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?R ==> bi_unique (rel_tree ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?R ==> bi_unique (rel_option ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?R ==> bi_unique (stream_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?R ==> bi_unique (rel_trm ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "bi_unique ?R ==> bi_unique (rel_cset ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (rel_set ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (list_all2 ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (rel_tree ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (rel_filter ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (rel_option ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (stream_all2 ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (rel_trm ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "is_equality ?a3 ==> is_equality (rel_cset ?a3)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "left_total ?A ==> left_total (rel_set ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_total ?A ==> left_total (rel_filter ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "left_total ?R ==> left_total (list_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "left_total ?R ==> left_total (rel_tree ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_total ?R ==> left_total (rel_option ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_total ?R ==> left_total (stream_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "left_total ?R ==> left_total (rel_trm ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "left_total ?R ==> left_total (rel_cset ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "left_unique ?A ==> left_unique (rel_set ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_unique ?A ==> left_unique (rel_filter ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_unique ?R ==> left_unique (list_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_unique ?R ==> left_unique (rel_tree ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_unique ?R ==> left_unique (rel_option ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_unique ?R ==> left_unique (stream_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "left_unique ?R ==> left_unique (rel_trm ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "left_unique ?R ==> left_unique (rel_cset ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "right_total ?A ==> right_total (rel_set ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_total ?A ==> right_total (rel_filter ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_total ?R ==> right_total (list_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_total ?R ==> right_total (rel_tree ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_total ?R ==> right_total (rel_option ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_total ?R ==> right_total (stream_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw", "right_total ?R ==> right_total (rel_trm ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_total ?R ==> right_total (rel_cset ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?A ==> right_unique (rel_set ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?A ==> right_unique (rel_filter ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?R ==> right_unique (list_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?R ==> right_unique (rel_tree ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?R ==> right_unique (rel_option ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?R ==> right_unique (stream_all2 ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?R ==> right_unique (rel_trm ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?R ==> right_unique (rel_cset ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.acyclic_impl_antisym_rtrancl",
     "acyclic ?r ==> antisym (?r^*)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Quotient.QT_all", "Quot_True (All ?P) ==> Quot_True ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Quotient.QT_ex", "Quot_True (Ex ?P) ==> Quot_True ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Quotient.QT_ex1", "Quot_True (Ex1 ?P) ==> Quot_True ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("HOL.TrueE", "[| True; ?P |] ==> ?P",
     template_implication
      ([template_predicate (template_hole 0),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cUnion_parametric",
     "rel_fun (rel_cset (rel_cset ?A)) (rel_cset ?A) cUnion cUnion",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0))),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transcendental.DERIV_cos",
     "(cos has_field_derivative - sin ?x) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Topological_Spaces.tendsto_intros",
     "((%x. x) \<longlongrightarrow> ?a) (at ?a within ?s)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Product_Type.swap_inj_on", "inj_on (%(i, j). (j, i)) ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)
         )),
    ("Product_Type.fst_apfst", "fst (apfst ?f ?x) = ?f (fst ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Product_Type.snd_apsnd", "snd (apsnd ?f ?x) = ?f (snd ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cosh_plus_sinh", "cosh ?x + sinh ?x = exp ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.sinh_plus_cosh", "sinh ?x + cosh ?x = exp ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.exp_minus_inverse", "exp ?x * exp (- ?x) = (1::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Sum_Type.case_sum_KK", "case_sum (%x. ?a) (%x. ?a) = (%x. ?a)",
     template_equation
      (template_app (template_app (template_hole 0, t_empty), t_empty),
       t_empty)),
    ("Product_Type.snd_comp_apsnd", "snd o apsnd ?f = ?f o snd",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Product_Type.fst_comp_apfst", "fst o apfst ?f = ?f o fst",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Set_Interval.card_atLeastLessThan", "card {?l..<?u} = ?u - ?l",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Set_Interval.card_greaterThanAtMost", "card {?l<..?u} = ?u - ?l",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complete_Lattices.INT_empty", "\<Inter> (?B ` {}) = UNIV",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 1)),
       template_hole 0)),
    ("List.atLeastLessThan_upt", "{?i..<?j} = set [?i..<?j]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Interval.lessThan_Suc", "{..<Suc ?k} = insert ?k {..<?k}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 2, template_var 0)))),
    ("Set_Interval.image_Suc_lessThan", "Suc ` {..<?n} = {1..?n}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Set_Interval.atLeastSucAtMost_greaterThanAtMost",
     "{Suc ?l..?u} = {?l<..?u}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set_Interval.atLeastLessThanSuc_atLeastAtMost",
     "{?l..<Suc ?u} = {?l..?u}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set_Interval.atLeastLessThan_singleton", "{?m..<Suc ?m} = {?m}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Set_Interval.atLeastSucLessThan_greaterThanLessThan",
     "{Suc ?l..<?u} = {?l<..<?u}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Transitive_Closure.rtrancl_idemp_self_comp", "?R^* O ?R^* = ?R^*",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Product_Type.vimage_fst", "fst -` ?A = ?A \<times> UNIV",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("Topological_Spaces.fst_vimage_eq_Times",
     "fst -` ?S = ?S \<times> UNIV",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("Product_Type.vimage_snd", "snd -` ?A = UNIV \<times> ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), t_empty))),
    ("Topological_Spaces.snd_vimage_eq_Times",
     "snd -` ?S = UNIV \<times> ?S",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), t_empty))),
    ("Topological_Spaces.decseq_eq_incseq",
     "decseq ?X = incseq (%n. - ?X n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Topological_Spaces.monoseq_iff",
     "monoseq ?X = (incseq ?X | decseq ?X)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.complete_iff_min_height",
     "Tree.complete ?t = (height ?t = min_height ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.complete_iff_height",
     "Tree.complete ?t = (min_height ?t = height ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.bst_iff_sorted_wrt_less", "bst ?t = sorted_wrt (<) (inorder ?t)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.bst_wrt_le_iff_sorted", "bst_wrt (<=) ?t = sorted (inorder ?t)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cBex_triv_one_point2",
     "cBex ?A ((=) ?a) = cin ?a ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Product_Type.inj_apsnd", "inj (apsnd ?f) = inj ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Product_Type.inj_apfst", "inj (apfst ?f) = inj ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Tree.eq_0_size", "(0 = size ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_0_height", "(0 = height ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_size_0", "(size ?t = 0) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_height_0", "(height ?t = 0) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_empty_set_tree",
     "({} = set_tree ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_set_tree_empty",
     "(set_tree ?t = {}) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Set_Interval.lessThan_empty_iff", "({..<?n} = {}) = (?n = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_Nil_inorder", "([] = inorder ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_inorder_Nil", "(inorder ?t = []) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Transcendental.arctan_eq_zero_iff", "(arctan ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Transcendental.exp_eq_one_iff", "(exp ?x = 1) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Transcendental.sinh_real_zero_iff", "(sinh ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Transcendental.tanh_real_zero_iff", "(tanh ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.Leaf_mirror",
     "(\<langle>\<rangle> = mirror ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_equation (template_var 0, template_hole 1))),
    ("Tree.mirror_Leaf",
     "(mirror ?t = \<langle>\<rangle>) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Transcendental.one_less_exp_iff", "(1 < exp ?x) = (0 < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 0), template_var 0))),
    ("Transcendental.zero_less_arctan_iff", "(0 < arctan ?x) = (0 < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Transcendental.sinh_real_pos_iff", "(0 < sinh ?x) = (0 < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Transcendental.tanh_real_pos_iff", "(0 < tanh ?x) = (0 < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Transcendental.arctan_less_zero_iff", "(arctan ?x < 0) = (?x < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Transcendental.exp_less_one_iff", "(exp ?x < 1) = (?x < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Transcendental.sinh_real_neg_iff", "(sinh ?x < 0) = (?x < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Transcendental.tanh_real_neg_iff", "(tanh ?x < 0) = (?x < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Transcendental.one_le_exp_iff", "(1 <= exp ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 0), template_var 0))),
    ("Transcendental.zero_le_arctan_iff", "(0 <= arctan ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Transcendental.sinh_real_nonneg_iff", "(0 <= sinh ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Transcendental.tanh_real_nonneg_iff", "(0 <= tanh ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Transcendental.arctan_le_zero_iff", "(arctan ?x <= 0) = (?x <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Transcendental.exp_le_one_iff", "(exp ?x <= 1) = (?x <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Transcendental.sinh_real_nonpos_iff", "(sinh ?x <= 0) = (?x <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Transcendental.tanh_real_nonpos_iff", "(tanh ?x <= 0) = (?x <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Tree.inorder2_inorder", "inorder2 ?t ?xs = inorder ?t @ ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Transcendental.cos_pi_minus", "cos (pi - ?x) = - cos ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Transcendental.cos_minus_pi", "cos (?x - pi) = - cos ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Transcendental.cos_periodic_pi2", "cos (pi + ?x) = - cos ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Transcendental.cos_periodic_pi", "cos (?x + pi) = - cos ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Transcendental.sin_minus_pi", "sin (?x - pi) = - sin ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Transcendental.sin_periodic_pi2", "sin (pi + ?x) = - sin ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Transcendental.sin_periodic_pi", "sin (?x + pi) = - sin ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Product_Type.swap_simp", "prod.swap (?x, ?y) = (?y, ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Transcendental.arctan_ubound", "arctan ?y < pi / 2",
     template_inequation
      (less_than, template_app (template_hole 5, template_var 0),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Transcendental.isCont_pochhammer", "isCont (%z. pochhammer z ?n) ?z",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?S (rel_sum ?S ?T)) Inl Inl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?T (rel_sum ?S ?T)) Inr Inr",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?R2.0 (rel_efsym ?R1.0 ?R2.0)) Tag Tag",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?R2.0 (rel_efsym ?R1.0 ?R2.0)) Wit Wit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?R1.0 (rel_efsym ?R1.0 ?R2.0)) Oldf Oldf",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_set ?A) (rel_filter ?A)) principal
       principal",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?R) (rel_set ?R)) set set",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?A) (list_all2 ?A)) butlast butlast",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?A) (list_all2 ?A)) tl tl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?A) (list_all2 ?A)) rev rev",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?A) (list_all2 ?A)) rotate1 rotate1",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_tree ?R) (rel_set ?R)) set_tree set_tree",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_sum ?A ?B) (=)) isl isl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_hole 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_option ?R) (rel_set ?R)) set_option
       set_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (stream_all2 ?R) (rel_set ?R)) sset sset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (stream_all2 ?R) (stream_all2 ?R)) stl stl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_prod ?A ?B) ?A) fst fst",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_prod ?A ?B) ?B) snd snd",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_trm ?R) (rel_set ?R)) set_trm set_trm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_cset ?R) (rel_set ?R)) rcset rcset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Topological_Spaces.filterlim_subseq",
     "strict_mono ?f ==> filterlim ?f sequentially sequentially",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_hole 0)
           ))),
    ("Topological_Spaces.seq_suble", "strict_mono ?f ==> ?n <= ?f ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_var 1, template_var 0)))),
    ("Transitive_Closure.single_valued_relpow",
     "single_valued ?R ==> single_valued (?R ^^ ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Transitive_Closure.symp_symclp_eq", "symp ?r ==> symclp ?r = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Transitive_Closure.trancl_id", "trans ?r ==> ?r^+ = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Transitive_Closure.trans_reflclI", "trans ?r ==> trans (?r^=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Topological_Spaces.open_vimage_fst", "open ?S ==> open (fst -` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Topological_Spaces.open_vimage_snd", "open ?S ==> open (snd -` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Topological_Spaces.open_image_fst", "open ?S ==> open (fst ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Topological_Spaces.open_image_snd", "open ?S ==> open (snd ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "closed ?S ==> closed (insert ?a ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.closed_vimage_fst",
     "closed ?S ==> closed (fst -` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Topological_Spaces.closed_vimage_snd",
     "closed ?S ==> closed (snd -` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Transfer.transfer_raw", "is_equality ?a1 ==> Domainp ?a1 = top",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Transfer.transfer_raw", "is_equality ?a1 ==> Transfer.Rel ?a1 ?t ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Transfer.transfer_raw",
     "is_equality ?a1 ==>
      Transfer.Rel ?a1 transfer_implies transfer_implies",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_hole 0)
           ))),
    ("Topological_Spaces.continuous_trivial_limit",
     "?net = bot ==> continuous ?net ?f",
     template_implication
      ([template_equation (template_var 1, template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Countable_Set_Type.cequalityD1", "?A = ?B ==> csubset_eq ?A ?B",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Countable_Set_Type.cequalityD2", "?A = ?B ==> csubset_eq ?B ?A",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Countable_Set_Type.cpsubset_imp_fsubset",
     "csubset ?A ?B ==> csubset_eq ?A ?B",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Sum_Type.inj_on_Abs_sum", "?A <= Sum_Type.sum ==> inj_on Abs_sum ?A",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Topological_Spaces.uniformly_continuous_imp_continuous",
     "uniformly_continuous_on ?s ?f ==> continuous_on ?s ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Tree.bst_wrt_le_if_bst", "bst ?t ==> bst_wrt (<=) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 0)
           ))),
    ("Transfer.Let_transfer",
     "rel_fun ?A (rel_fun (rel_fun ?A ?B) ?B) Let Let",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Countable_Set_Type.cinsert_parametric",
     "rel_fun ?A (rel_fun (rel_cset ?A) (rel_cset ?A)) cinsert cinsert",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Infinite_Set.MOST_eq_imp", "MOST x. x = ?a --> ?P x",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Infinite_Set.MOST_eq_imp", "MOST x. ?a = x --> ?P x",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Topological_Spaces.eventually_at_right_less",
     "eventually ((<) ?x) (at_right ?x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Topological_Spaces.tendsto_intros",
     "(%n. ?a / of_nat n) \<longlonglongrightarrow> (0::?'a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("Product_Type.surj_pair", "EX x y. ?p = (x, y)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Topological_Spaces.LIM_Uniq", "?< L. ?f \<midarrow>?a\<rightarrow> L",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Product_Type.case_prod_beta",
     "(case ?p of (x, xa) => ?f x xa) = ?f (fst ?p) (snd ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Product_Type.curry_conv", "curry ?f ?a ?b = ?f (?a, ?b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Product_Type.scomp_apply",
     "scomp ?f ?g ?x = (case ?f ?x of (x, xa) => ?g x xa)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Product_Type.internal_case_prod_conv",
     "??.Product_Type.internal_case_prod ?c (?a, ?b) = ?c ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Product_Type.fst_map_prod", "fst (map_prod ?f ?g ?x) = ?f (fst ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("Product_Type.snd_map_prod", "snd (map_prod ?f ?g ?x) = ?g (snd ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.exp_times_arg_commute", "exp ?A * ?A = ?A * exp ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cosh_minus_sinh", "cosh ?x - sinh ?x = exp (- ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.pochhammer_of_real",
     "pochhammer (of_real ?x) ?n = of_real (pochhammer ?x ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.powr_minus", "?x powr - ?a = inverse (?x powr ?a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Product_Type.split_beta",
     "(case ?prod of (x, xa) => ?f x xa) = ?f (fst ?prod) (snd ?prod)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.reflclp_idemp", "?P^==^== = ?P^==",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_hole 0)
           ),
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Product_Type.fst_comp_map_prod", "fst o map_prod ?f ?g = ?f o fst",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Product_Type.snd_comp_map_prod", "snd o map_prod ?f ?g = ?g o snd",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Product_Type.case_prod_eta", "(%(x, y). ?f (x, y)) = ?f",
     template_equation
      (template_app (template_hole 1, t_empty), template_var 0)),
    ("Set_Interval.card_atLeastLessThan_int",
     "card {?l..<?u} = nat (?u - ?l)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Interval.card_greaterThanAtMost_int",
     "card {?l<..?u} = nat (?u - ?l)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Interval.card_greaterThanLessThan",
     "card {?l<..<?u} = ?u - Suc ?l",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Set_Interval.atLeastPlusOneAtMost_greaterThanAtMost_int",
     "{?l + 1..?u} = {?l<..?u}",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set_Interval.atLeastLessThanPlusOne_atLeastAtMost_int",
     "{?l..<?u + 1} = {?l..?u}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set_Interval.atLeastPlusOneLessThan_greaterThanLessThan_int",
     "{?l + 1..<?u} = {?l<..<?u}",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("List.greaterThanLessThan_upt", "{?n<..<?m} = set [Suc ?n..<?m]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Transitive_Closure.rtrancl_unfold", "?r^* = Id Un ?r^* O ?r",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_var 0)))),
    ("Transitive_Closure.trancl_unfold", "?r^+ = ?r Un ?r^+ O ?r",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 0)))),
    ("Transitive_Closure.r_comp_rtrancl_eq", "?r O ?r^* = ?r^* O ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Countable_Set_Type.countable_card_le_natLeq",
     "countable ?A = (|?A| \<le>o natLeq)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1)),
         template_hole 0))),
    ("Countable_Set_Type.csubset_cUn_eq",
     "csubset_eq ?A ?B = (cUn ?A ?B = ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Transfer.Domainp_iff", "Domainp ?T ?x = (EX y. ?T ?x y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Infinite_Set.MOST_const", "(MOST x. ?P) = (?P | finite UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Countable_Set_Type.csingleton_iff", "cin ?b (csingle ?a) = (?b = ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.powr_eq_0_iff",
     "(?w powr ?z = (0::?'a)) = (?w = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 1, template_hole 0))),
    ("Set_Interval.greaterThan_eq_iff", "({?x<..} = {?y<..}) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Set_Interval.lessThan_eq_iff", "({..<?x} = {..<?y}) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.arctan_eq_iff", "(arctan ?x = arctan ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.exp_inj_iff", "(exp ?x = exp ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.sinh_real_eq_iff", "(sinh ?x = sinh ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.tanh_real_eq_iff", "(tanh ?x = tanh ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.exp_ln_iff", "(exp (ln ?x) = ?x) = (0 < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Transcendental.powr_one_gt_zero_iff", "(?x powr 1 = ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Tree.eq_Leaf_map_tree",
     "(\<langle>\<rangle> = map_tree ?f ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_map_tree_Leaf",
     "(map_tree ?f ?t = \<langle>\<rangle>) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Countable_Set_Type.cempty_is_cimage",
     "(cempty = cimage ?f ?A) = (?A = cempty)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Countable_Set_Type.cimage_is_cempty",
     "(cimage ?f ?A = cempty) = (?A = cempty)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Countable_Set_Type.cDiff_eq_cempty_iff",
     "(cDiff ?A ?B = cempty) = csubset_eq ?A ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set_Interval.lessThan_strict_subset_iff",
     "({..<?m} < {..<?n}) = (?m < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Transcendental.arctan_less_iff",
     "(arctan ?x < arctan ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transcendental.exp_less_cancel_iff", "(exp ?x < exp ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transcendental.sinh_real_less_iff", "(sinh ?x < sinh ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transcendental.tanh_real_less_iff", "(tanh ?x < tanh ?y) = (?x < ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Set_Interval.greaterThan_subset_iff",
     "({?x<..} <= {?y<..}) = (?y <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Set_Interval.lessThan_subset_iff",
     "({..<?x} <= {..<?y}) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Transcendental.arctan_le_iff",
     "(arctan ?x <= arctan ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transcendental.exp_le_cancel_iff", "(exp ?x <= exp ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transcendental.sinh_real_le_iff", "(sinh ?x <= sinh ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transcendental.tanh_real_le_iff", "(tanh ?x <= tanh ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transcendental.powr_nonneg_iff", "(?a powr ?x <= 0) = (?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_equation (template_var 1, template_hole 1))),
    ("Complete_Lattices.True_in_image_Bex", "(True : ?P ` ?A) = Bex ?A ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Infinite_Set.MOST_eq", "(MOST x. x = ?a) = finite UNIV",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_hole 2),
       template_app (template_hole 1, template_hole 0))),
    ("Infinite_Set.MOST_eq", "(MOST x. ?a = x) = finite UNIV",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_hole 2),
       template_app (template_hole 1, template_hole 0))),
    ("Tree.inorder_map", "inorder (map_tree ?f ?t) = map ?f (inorder ?t)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.postorder_map",
     "postorder (map_tree ?f ?t) = map ?f (postorder ?t)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.preorder_map",
     "preorder (map_tree ?f ?t) = map ?f (preorder ?t)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.map_mirror", "map_tree ?f (mirror ?t) = mirror (map_tree ?f ?t)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cinsert_is_cUn",
     "cinsert ?a ?A = cUn (csingle ?a) ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Countable_Set_Type.cinsert_absorb2",
     "cinsert ?x (cinsert ?x ?A) = cinsert ?x ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.cDiff_idemp",
     "cDiff (cDiff ?A ?B) ?B = cDiff ?A ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.cInt_left_absorb",
     "cInt ?A (cInt ?A ?B) = cInt ?A ?B",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.cUn_cDiff_cancel",
     "cUn ?A (cDiff ?B ?A) = cUn ?A ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Countable_Set_Type.cUn_left_absorb", "cUn ?A (cUn ?A ?B) = cUn ?A ?B",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.cUn_cDiff_cancel2",
     "cUn (cDiff ?B ?A) ?A = cUn ?B ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Countable_Set_Type.cUN_csingleton", "cUnion (cimage csingle ?A) = ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_var 0)),
    ("Countable_Set_Type.cUn_cDiff_cInt",
     "cUn (cDiff ?A ?B) (cInt ?A ?B) = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Transcendental.arctan_lbound", "- (pi / 2) < arctan ?y",
     template_inequation
      (less_than,
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))),
       template_app (template_hole 0, template_var 0))),
    ("Tree.size1_height", "size1 ?t <= 2 ^ height ?t",
     template_inequation
      (less_equals, template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.min_height_size1", "2 ^ min_height ?t <= size1 ?t",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.trancl_subset_Field2",
     "?r^+ <= Field ?r \<times> Field ?r",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Transcendental.summable_exp",
     "summable (%n. inverse (fact n) * ?x ^ n)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Transcendental.summable_exp_generic",
     "summable (%n. ?x ^ n /\<^sub>R fact n)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Transcendental.summable_norm_cos",
     "summable (%n. norm (cos_coeff n *\<^sub>R ?x ^ n))",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Transcendental.summable_norm_sin",
     "summable (%n. norm (sin_coeff n *\<^sub>R ?x ^ n))",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (=) (rel_fun ?A (list_all2 ?A))) replicate
       replicate",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_set ?A) (rel_set (rel_set ?A))) Pow Pow",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_set ?A) (rel_set (list_all2 ?A))) lists
       lists",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_set (rel_filter ?A)) (rel_filter ?A)) Sup
       Sup",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_efsym ?R1.0 ?R2.0) (rel_set ?R1.0))
       set1_efsym set1_efsym",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_efsym ?R1.0 ?R2.0) (rel_set ?R2.0))
       set2_efsym set2_efsym",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?A) (list_all2 (list_all2 ?A)))
       subseqs subseqs",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 (list_all2 ?A)) (list_all2 ?A))
       concat concat",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_sum ?R1.0 ?R2.0) (rel_set ?R1.0))
       Basic_BNFs.setl Basic_BNFs.setl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_sum ?R1.0 ?R2.0) (rel_set ?R2.0))
       Basic_BNFs.setr Basic_BNFs.setr",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_prod ?R1.0 ?R2.0) (rel_set ?R1.0))
       Basic_BNFs.fsts Basic_BNFs.fsts",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_prod ?R1.0 ?R2.0) (rel_set ?R2.0))
       Basic_BNFs.snds Basic_BNFs.snds",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_atm ?R1.0 ?R2.0) (rel_set ?R1.0)) set1_atm
       set1_atm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_atm ?R1.0 ?R2.0) (rel_set ?R2.0)) set2_atm
       set2_atm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_lit ?R1.0 ?R2.0) (rel_set ?R1.0)) set1_lit
       set1_lit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_lit ?R1.0 ?R2.0) (rel_set ?R2.0)) set2_lit
       set2_lit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_cset (rel_cset ?A)) (rel_cset ?A)) cUnion
       cUnion",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Topological_Spaces.monoseq_minus",
     "monoseq ?a ==> monoseq (%n. - ?a n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==> Transfer.Rel (rel_set ?A) UNIV UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==> Transfer.Rel (rel_filter ?A) top top",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.equals_cemptyD", "?A = cempty ==> ~ cin ?a ?A",
     template_implication
      ([template_equation (template_var 1, template_hole 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("Transcendental.ln_gt_zero", "1 < ?x ==> 0 < ln ?x",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.exp_gt_one", "0 < ?x ==> 1 < exp ?x",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.ln_less_self", "0 < ?x ==> ln ?x < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_var 0))),
    ("Transcendental.ln_bound", "0 < ?x ==> ln ?x <= ?x",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 0))),
    ("Transcendental.ln_ge_zero", "1 <= ?x ==> 0 <= ln ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_x_le_x", "0 <= ?x ==> sin ?x <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 0))),
    ("Transcendental.cot_in_Reals", "?z : \<real> ==> cot ?z : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Transcendental.tan_in_Reals", "?z : \<real> ==> tan ?z : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Transcendental.cos_in_Reals", "?z : \<real> ==> cos ?z : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Transcendental.exp_in_Reals", "?z : \<real> ==> exp ?z : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Transcendental.sin_in_Reals", "?z : \<real> ==> sin ?z : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Transitive_Closure.r_into_rtrancl", "?p : ?r ==> ?p : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.r_into_trancl'", "?p : ?r ==> ?p : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.r_into_rtranclp", "?r ?x ?y ==> ?r^** ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Transitive_Closure.symclpI1", "?r ?x ?y ==> symclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Transitive_Closure.symclpI2", "?r ?y ?x ==> symclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Transcendental.continuous_on_arcosh",
     "?A <= {1..} ==> continuous_on ?A arcosh",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Topological_Spaces.convergentI",
     "?X \<longlonglongrightarrow> ?L ==> convergent ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Set_Interval.subset_eq_atLeast0_lessThan_finite",
     "?N <= {0..<?n} ==> finite ?N",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Tree.acomplete_subtreeL",
     "acomplete \<langle>?l, ?x, ?r\<rangle> ==> acomplete ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 2)))),
    ("Tree.acomplete_subtreeR",
     "acomplete \<langle>?l, ?x, ?r\<rangle> ==> acomplete ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Countable_Set_Type.cBall_parametric",
     "rel_fun (rel_cset ?A) (rel_fun (rel_fun ?A (=)) (=)) cBall cBall",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("Countable_Set_Type.cBex_parametric",
     "rel_fun (rel_cset ?A) (rel_fun (rel_fun ?A (=)) (=)) cBex cBex",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("Topological_Spaces.seq_monosub",
     "EX f. strict_mono f & monoseq (%n. ?s (f n))",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Transfer.if_conn",
     "(if ~ ?P then ?t else ?e) = (if ?P then ?e else ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_var 1))),
    ("Transcendental.powr_zero_eq_one",
     "?x powr (0::?'a) = (if ?x = (0::?'a) then 0::?'a else (1::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 2)),
               template_hole 2),
             template_hole 0)
           ))),
    ("Transcendental.exp_diff", "exp (?x - ?y) = exp ?x / exp ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Transcendental.exp_add", "exp (?x + ?y) = exp ?x * exp ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Transcendental.mult_exp_exp", "exp ?x * exp ?y = exp (?x + ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.exp_of_nat2_mult",
     "exp (?x * of_nat ?n) = exp ?x ^ ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Transcendental.exp_of_nat_mult", "exp (of_nat ?n * ?x) = exp ?x ^ ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 0)),
         template_var 1))),
    ("Transcendental.sinh_minus_cosh", "sinh ?x - cosh ?x = - exp (- ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Transcendental.powr_minus_divide",
     "?x powr - ?a = (1::?'a) / ?x powr ?a",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.rtranclp_is_Sup_relpowp",
     "?P^** = Sup (range ((^^) ?P))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Relation.Inf_INT_eq", "Inf ?S = (%x. x : \<Inter> (Collect ` ?S))",
     template_equation
      (template_app (template_hole 4, template_var 0), t_empty)),
    ("Set_Interval.single_Diff_lessThan", "{?k} - {..<?k} = {?k}",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 1))),
    ("List.atLeastLessThan_upto", "{?i..<?j} = set [?i..?j - 1]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("List.greaterThanAtMost_upto", "{?i<..?j} = set [?i + 1..?j]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)))),
    ("List.greaterThanAtMost_upt", "{?n<..?m} = set [Suc ?n..<Suc ?m]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Set_Interval.lessThan_Suc_eq_insert_0",
     "{..<Suc ?n} = insert 0 (Suc ` {..<?n})",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_app (template_hole 4, template_var 0))))),
    ("Set_Interval.lessThan_nat_numeral",
     "{..<numeral ?k} = insert (pred_numeral ?k) {..<pred_numeral ?k}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("Set_Interval.atLeast0_lessThan_Suc",
     "{0..<Suc ?n} = insert ?n {0..<?n}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("TermsAndClauses.varsC_append",
     "varsC (?c1.0 @ ?c2.0) = varsC ?c1.0 Un varsC ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("TermsAndClauses.varsPB_Un",
     "varsPB (?\<Phi>1.0 Un ?\<Phi>2.0) =
      varsPB ?\<Phi>1.0 Un varsPB ?\<Phi>2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Transitive_Closure.rtrancl_is_UN_relpow",
     "?R^* = \<Union> (range ((^^) ?R))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Product_Type.Collect_const_case_prod",
     "{(a, b). ?P} = (if ?P then UNIV else {})",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, t_empty)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Countable_Set_Type.countable_card_of_nat",
     "countable ?A = (|?A| \<le>o |UNIV|)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_hole 1))),
         template_hole 0))),
    ("Topological_Spaces.convergent_LIMSEQ_iff",
     "convergent ?X = ?X \<longlonglongrightarrow> lim ?X",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_hole 0))),
    ("Transfer.left_unique_iff", "left_unique ?R = (ALL z. ?< x. ?R x z)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Transfer.right_unique_iff", "right_unique ?R = (ALL z. ?< x. ?R z x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Countable_Set_Type.csubset_eq",
     "csubset_eq ?A ?B = cBall ?A (%x. cin x ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Countable_Set_Type.ex_cin_conv", "(EX x. cin x ?A) = (?A ~= cempty)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Transcendental.powr_gt_zero", "(0 < ?x powr ?a) = (?x ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 3)))),
    ("Countable_Set_Type.cBex_triv_one_point1",
     "cBex ?A (%x. x = ?a) = cin ?a ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Topological_Spaces.LIMSEQ_const_iff",
     "(%n. ?k) \<longlonglongrightarrow> ?l = (?k = ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Countable_Set_Type.all_not_cin_conv",
     "(ALL x. ~ cin x ?A) = (?A = cempty)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Transcendental.sin_times_pi_eq_0",
     "(sin (?x * pi) = 0) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Transcendental.sin_coeff_Suc",
     "sin_coeff (Suc ?n) = cos_coeff ?n / real (Suc ?n)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Transcendental.cos_npi2", "cos (pi * real ?n) = (- 1) ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Transcendental.cos_npi", "cos (real ?n * pi) = (- 1) ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Transcendental.tan_periodic_int",
     "tan (?x + real_of_int ?i * pi) = tan ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))),
       template_app (template_hole 4, template_var 1))),
    ("Transcendental.tan_periodic_nat", "tan (?x + real ?n * pi) = tan ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))),
       template_app (template_hole 4, template_var 1))),
    ("Transcendental.tan_periodic_n", "tan (?x + numeral ?n * pi) = tan ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))),
       template_app (template_hole 4, template_var 1))),
    ("Topological_Spaces.nhds_prod",
     "nhds (?a, ?b) = nhds ?a \<times>\<^sub>F nhds ?b",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Product_Type.apfst_conv", "apfst ?f (?x, ?y) = (?f ?x, ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_var 0))),
    ("Product_Type.apsnd_conv", "apsnd ?f (?x, ?y) = (?x, ?f ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Countable_Set_Type.cimage_cUnion",
     "cimage ?f (cUnion ?S) = cUnion (cimage (cimage ?f) ?S)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("TermsAndClauses.varsPB_sappend_incl",
     "varsPB (?\<Phi>1.0 @@ ?\<Phi>2.0)
      <= varsPB ?\<Phi>1.0 Un varsPB ?\<Phi>2.0",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Transitive_Closure.rtrancl_Un_subset", "?R^* Un ?S^* <= (?R Un ?S)^*",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Product_Type.subset_fst_snd", "?A <= fst ` ?A \<times> snd ` ?A",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         t_empty))),
    ("Transcendental.exp_plus_inverse_exp",
     "2 <= exp ?x + inverse (exp ?x)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5, template_app (template_hole 4, template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Transcendental.summable_norm_exp",
     "summable (%n. norm (?x ^ n /\<^sub>R fact n))",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Transcendental.cos_converges",
     "(%n. cos_coeff n *\<^sub>R ?x ^ n) sums cos ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transcendental.sin_converges",
     "(%n. sin_coeff n *\<^sub>R ?x ^ n) sums sin ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transcendental.powser_sums_zero",
     "(%n. ?a n * (0::?'a) ^ n) sums ?a 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_var 0, template_hole 0))
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?A (rel_fun ?B (rel_prod ?A ?B))) Pair Pair",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?A (rel_fun (rel_fun ?A ?B) ?B)) Let Let",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?A (rel_fun (rel_set ?A) (rel_set ?A))) insert
       insert",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?R (rel_fun (list_all2 ?R) (list_all2 ?R))) (#)
       (#)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?R (rel_fun (stream_all2 ?R) (stream_all2 ?R)))
       (##) (##)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?A (rel_fun (rel_cset ?A) (rel_cset ?A)))
       cinsert cinsert",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (=) (rel_fun (list_all2 ?A) (list_all2 ?A)))
       drop drop",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (=) (rel_fun (list_all2 ?A) (list_all2 ?A)))
       rotate rotate",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (=) (rel_fun (list_all2 ?A) (list_all2 ?A)))
       take take",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (=) (rel_fun ?A (rel_fun ?A ?A))) If If",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 (rel_set ?A)) (rel_set (list_all2 ?A))) listset
       listset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 (list_all2 ?A)) (list_all2 (list_all2 ?A)))
       product_lists product_lists",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 (rel_option ?P)) (rel_option (list_all2 ?P)))
       those those",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_atm ?R1.0 ?R2.0) (rel_lit ?R1.0 ?R2.0)) Neg
       Neg",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_atm ?R1.0 ?R2.0) (rel_lit ?R1.0 ?R2.0)) Pos
       Pos",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Topological_Spaces.decseq_SucD", "decseq ?A ==> ?A (Suc ?i) <= ?A ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_var 1, template_app (template_hole 0, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Topological_Spaces.incseq_SucD", "incseq ?A ==> ?A ?i <= ?A (Suc ?i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Countable_Set_Type.cinsert_absorb",
     "cin ?a ?A ==> cinsert ?a ?A = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Countable_Set_Type.cinsertI2", "cin ?a ?B ==> cin ?a (cinsert ?b ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Countable_Set_Type.cUnI1", "cin ?c ?A ==> cin ?c (cUn ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Countable_Set_Type.cUnI2", "cin ?c ?B ==> cin ?c (cUn ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Transitive_Closure.relpowp_bot", "0 < ?n ==> bot ^^ ?n = bot",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Transitive_Closure.relpow_empty", "0 < ?n ==> {} ^^ ?n = {}",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Transcendental.log_inj", "1 < ?b ==> inj_on (log ?b) {0<..}",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Transcendental.isCont_arcosh", "1 < ?x ==> isCont arcosh ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.exp_ln", "0 < ?x ==> exp (ln ?x) = ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transcendental.arctan_monotone", "?x < ?y ==> arctan ?x < arctan ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.exp_less_mono", "?x < ?y ==> exp ?x < exp ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtranclp_mono", "?r <= ?s ==> ?r^** <= ?s^**",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtrancl_mono", "?r <= ?s ==> ?r^* <= ?s^*",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.arcosh_cosh_real", "0 <= ?x ==> arcosh (cosh ?x) = ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transcendental.powr_one", "0 <= ?x ==> ?x powr 1 = ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 0))),
    ("Transcendental.sin_x_ge_neg_x", "0 <= ?x ==> - ?x <= sin ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.arctan_monotone'",
     "?x <= ?y ==> arctan ?x <= arctan ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cInt_absorb2",
     "csubset_eq ?A ?B ==> cInt ?A ?B = ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Countable_Set_Type.cUn_absorb1",
     "csubset_eq ?A ?B ==> cUn ?A ?B = ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Countable_Set_Type.csubset_cinsertI2",
     "csubset_eq ?A ?B ==> csubset_eq ?A (cinsert ?b ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Countable_Set_Type.cInt_absorb1",
     "csubset_eq ?B ?A ==> cInt ?A ?B = ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Countable_Set_Type.cUn_absorb2",
     "csubset_eq ?B ?A ==> cUn ?A ?B = ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("Transcendental.cos_one_sin_zero",
     "cos ?x = (1::?'a) ==> sin ?x = (0::?'a)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Transcendental.ln_unique", "exp ?y = ?x ==> ln ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Product_Type.curryD", "curry ?f ?a ?b ==> ?f (?a, ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transitive_Closure.tranclp_into_rtranclp",
     "?r^++ ?a ?b ==> ?r^** ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Product_Type.curryI", "?f (?a, ?b) ==> curry ?f ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Countable_Set_Type.csingletonD", "cin ?b (csingle ?a) ==> ?b = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Countable_Set_Type.cDiffD1", "cin ?c (cDiff ?A ?B) ==> cin ?c ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Countable_Set_Type.cIntD1", "cin ?c (cInt ?A ?B) ==> cin ?c ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Countable_Set_Type.cIntD2", "cin ?c (cInt ?A ?B) ==> cin ?c ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Sum_Type.Suml_inject",
     "Sum_Type.Suml ?f = Sum_Type.Suml ?g ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Sum_Type.Sumr_inject",
     "Sum_Type.Sumr ?f = Sum_Type.Sumr ?g ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Sum_Type.Inl_inject", "Inl ?x = Inl ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Sum_Type.Inr_inject", "Inr ?x = Inr ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.exp_less_cancel", "exp ?x < exp ?y ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Topological_Spaces.continuous_intros",
     "ALL S:?K. closed S ==> closed (\<Inter> ?K)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transfer.transfer_start", "[| ?P; Transfer.Rel (=) ?P ?Q |] ==> ?Q",
     template_implication
      ([template_predicate (template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_var 0))),
    ("Transfer.transfer_start'",
     "[| ?P; Transfer.Rel (-->) ?P ?Q |] ==> ?Q",
     template_implication
      ([template_predicate (template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_var 0))),
    ("Transfer.untransfer_start", "[| ?Q; Transfer.Rel (=) ?P ?Q |] ==> ?P",
     template_implication
      ([template_predicate (template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 0),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("Transfer.bi_totalI",
     "[| left_total ?R; right_total ?R |] ==> bi_total ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transfer.bi_uniqueI",
     "[| left_unique ?R; right_unique ?R |] ==> bi_unique ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transfer.case_nat_transfer",
     "rel_fun ?A (rel_fun (rel_fun (=) ?A) (rel_fun (=) ?A)) case_nat
       case_nat",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Countable_Set_Type.cimage_parametric",
     "rel_fun (rel_fun ?A ?B) (rel_fun (rel_cset ?A) (rel_cset ?B)) cimage
       cimage",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.funpow_transfer",
     "rel_fun (=) (rel_fun (rel_fun ?A ?A) (rel_fun ?A ?A)) compow compow",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transcendental.tendsto_power_div_exp_0",
     "((%x. x ^ ?k / exp x) \<longlongrightarrow> 0) at_top",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.powser_zero", "(\<Sum>n. ?f n * (0::?'a) ^ n) = ?f 0",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_var 0, template_hole 0))),
    ("Product_Type.fcomp_scomp",
     "scomp (fcomp ?f ?g) ?h = fcomp ?f (scomp ?g ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.relpowp_commute",
     "?P OO ?P ^^ ?n = ?P ^^ ?n OO ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Transitive_Closure.rtranclp_sup_rtranclp",
     "(sup ?R^** ?S^**)^** = (sup ?R ?S)^**",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.diffs_minus",
     "diffs (%n. - ?c n) = (%n. - diffs ?c n)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("Transcendental.diffs_of_real",
     "diffs (%n. of_real (?f n)) = (%n. of_real (diffs ?f n))",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("TermsAndClauses.o_substPB",
     "substPB ?\<pi>1.0 o substPB ?\<pi>2.0 =
      substPB (subst ?\<pi>1.0 o ?\<pi>2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("TermsAndClauses.o_substC",
     "substC ?\<pi>1.0 o substC ?\<pi>2.0 =
      substC (subst ?\<pi>1.0 o ?\<pi>2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Sum_Type.surjective_sum",
     "case_sum (%x. ?f (Inl x)) (%y. ?f (Inr y)) = ?f",
     template_equation
      (template_app (template_app (template_hole 2, t_empty), t_empty),
       template_var 0)),
    ("TermsAndClauses.o_substA",
     "substA ?\<pi>1.0 o substA ?\<pi>2.0 =
      substA (subst ?\<pi>1.0 o ?\<pi>2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("TermsAndClauses.o_substL",
     "substL ?\<pi>1.0 o substL ?\<pi>2.0 =
      substL (subst ?\<pi>1.0 o ?\<pi>2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("TermsAndClauses.o_subst",
     "subst ?\<pi>1.0 o subst ?\<pi>2.0 =
      subst (subst ?\<pi>1.0 o ?\<pi>2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Set_Interval.card_greaterThanLessThan_int",
     "card {?l<..<?u} = nat (?u - (?l + 1))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Set_Interval.image_int_atLeastLessThan",
     "int ` {?a..<?b} = {int ?a..<int ?b}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Set_Interval.greaterThan_Suc", "{Suc ?k<..} = {?k<..} - {Suc ?k}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("Set_Interval.atLeast1_lessThan_eq_remove0",
     "{Suc 0..<?n} = {..<?n} - {0}",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_hole 0)))),
    ("Set_Interval.image_Suc_atLeastLessThan",
     "Suc ` {?i..<?j} = {Suc ?i..<Suc ?j}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.relpow_commute", "?R O ?R ^^ ?n = ?R ^^ ?n O ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Transitive_Closure.rtrancl_Un_rtrancl",
     "(?R^* Un ?S^*)^* = (?R Un ?S)^*",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Product_Type.Compl_Times_UNIV2",
     "- (?A \<times> UNIV) = (- ?A) \<times> UNIV",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Product_Type.Compl_Times_UNIV1",
     "- (UNIV \<times> ?A) = UNIV \<times> - ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1), t_empty)),
       template_app
        (template_app (template_hole 2, template_hole 1), t_empty))),
    ("Product_Type.product_swap",
     "prod.swap ` (?A \<times> ?B) = ?B \<times> ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Topological_Spaces.decseq_Suc_iff",
     "decseq ?f = (ALL n. ?f (Suc n) <= ?f n)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Topological_Spaces.incseq_Suc_iff",
     "incseq ?f = (ALL n. ?f n <= ?f (Suc n))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Topological_Spaces.strict_mono_Suc_iff",
     "strict_mono ?f = (ALL n. ?f n < ?f (Suc n))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Countable_Set_Type.cset_eq_csubset",
     "(?A = ?B) = (csubset_eq ?A ?B & csubset_eq ?B ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Countable_Set_Type.csubset_iff_pfsubset_eq",
     "csubset_eq ?A ?B = (csubset ?A ?B | ?A = ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Countable_Set_Type.cBall_simps",
     "(~ cBall ?A ?P) = cBex ?A (%x. ~ ?P x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Countable_Set_Type.cBex_simps",
     "(~ cBex ?A ?P) = cBall ?A (%x. ~ ?P x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Transcendental.cosh_real_eq_iff",
     "(cosh ?x = cosh ?y) = (\<bar>?x\<bar> = \<bar>?y\<bar>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cDiff_csubset_conv",
     "csubset_eq (cDiff ?A ?B) ?C = csubset_eq ?A (cUn ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Product_Type.inj_on_apsnd",
     "inj_on (apsnd ?f) (UNIV \<times> ?A) = inj_on ?f ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1), t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Product_Type.inj_on_apfst",
     "inj_on (apfst ?f) (?A \<times> UNIV) = inj_on ?f ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Fun_More.atLeastLessThan_less", "({0..<?m} < {0..<?n}) = (?m < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Fun_More.atLeastLessThan_less_eq",
     "({0..<?m} <= {0..<?n}) = (?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Transcendental.cos_coeff_Suc",
     "cos_coeff (Suc ?n) = - sin_coeff ?n / real (Suc ?n)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 4, template_var 0))))),
    ("Transcendental.numeral_powr_numeral_real",
     "numeral ?m powr numeral ?n = numeral ?m ^ numeral ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.powr_powr", "(?x powr ?a) powr ?b = ?x powr (?a * ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.powr_powr_swap",
     "(?x powr ?a) powr ?b = (?x powr ?b) powr ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Transcendental.cos_2pi_minus", "cos (2 * pi - ?x) = cos ?x",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_hole 0)),
           template_var 0)),
       template_app (template_hole 6, template_var 0))),
    ("Transcendental.cos_periodic", "cos (?x + 2 * pi) = cos ?x",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_hole 0))),
       template_app (template_hole 6, template_var 0))),
    ("Transcendental.cot_periodic", "cot (?x + 2 * pi) = cot ?x",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_hole 0))),
       template_app (template_hole 6, template_var 0))),
    ("Transcendental.sin_periodic", "sin (?x + 2 * pi) = sin ?x",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_hole 0))),
       template_app (template_hole 6, template_var 0))),
    ("Transcendental.tan_cot'", "tan (pi / 2 - ?x) = cot ?x",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transcendental.tan_periodic", "tan (?x + 2 * pi) = tan ?x",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_hole 0))),
       template_app (template_hole 6, template_var 0))),
    ("Transcendental.cos_int_2pin", "cos (2 * pi * real_of_int ?n) = 1",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_hole 2)),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Transcendental.cos_2npi", "cos (2 * real ?n * pi) = 1",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app (template_hole 2, template_var 0))),
           template_hole 1)),
       template_hole 0)),
    ("Transcendental.sin_int_2pin", "sin (2 * pi * real_of_int ?n) = 0",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_hole 2)),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Transcendental.sin_2npi", "sin (2 * real ?n * pi) = 0",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app (template_hole 2, template_var 0))),
           template_hole 1)),
       template_hole 0)),
    ("Product_Type.The_case_prod",
     "(THE (x, y). ?P x y) = (THE xy. ?P (fst xy) (snd xy))",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Product_Type.apfst_compose",
     "apfst ?f (apfst ?g ?x) = apfst (?f o ?g) ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Product_Type.apsnd_apfst_commute",
     "apsnd ?f (apfst ?g ?p) = apfst ?g (apsnd ?f ?p)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Product_Type.apsnd_compose",
     "apsnd ?f (apsnd ?g ?x) = apsnd (?f o ?g) ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Countable_Set_Type.cinsert_commute",
     "cinsert ?x (cinsert ?y ?A) = cinsert ?y (cinsert ?x ?A)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cInt_cDiff",
     "cDiff (cInt ?A ?B) ?C = cInt ?A (cDiff ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cInt_left_commute",
     "cInt ?A (cInt ?B ?C) = cInt ?B (cInt ?A ?C)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cInt_assoc",
     "cInt (cInt ?A ?B) ?C = cInt ?A (cInt ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cUn_cinsert_right",
     "cUn ?A (cinsert ?a ?B) = cinsert ?a (cUn ?A ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cUn_left_commute",
     "cUn ?A (cUn ?B ?C) = cUn ?B (cUn ?A ?C)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cUn_cinsert_left",
     "cUn (cinsert ?a ?B) ?C = cinsert ?a (cUn ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cUn_assoc",
     "cUn (cUn ?A ?B) ?C = cUn ?A (cUn ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cinsert_cDiff_single",
     "cinsert ?a (cDiff ?A (csingle ?a)) = cinsert ?a ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0))),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Tree.size_height", "size ?t <= 2 ^ height ?t - 1",
     template_inequation
      (less_equals, template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Transcendental.binomial_maximum",
     "?n choose ?k <= ?n choose ?n div 2",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.cos_minus_converges",
     "(%n. cos_coeff n *\<^sub>R (- ?x) ^ n) sums cos ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transcendental.exp_converges",
     "(%n. ?x ^ n /\<^sub>R fact n) sums exp ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?R (rel_fun (list_all2 (rel_trm ?R)) (rel_trm ?R))) Fn Fn",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0))),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_fun (list_all2 ?A) (=)))
       list_all list_all",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_fun (list_all2 ?A) (=)))
       list_ex list_ex",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?R (=)) (rel_fun (list_all2 ?R) (=)))
       list_all list_all",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?R (=)) (rel_fun (rel_tree ?R) (=)))
       pred_tree pred_tree",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_fun (rel_filter ?A) (=)))
       eventually eventually",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_fun (rel_filter ?A) (=)))
       frequently frequently",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_fun (rel_option ?A) (=)))
       pred_option pred_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?R (=)) (rel_fun (rel_option ?R) (=)))
       pred_option pred_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?R (=)) (rel_fun (stream_all2 ?R) (=)))
       pred_stream pred_stream",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?R (=)) (rel_fun (rel_trm ?R) (=)))
       pred_trm pred_trm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_fun ?R (=)) (rel_fun (rel_cset ?R) (=)))
       pred_cset pred_cset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_set ?A) (rel_fun (rel_fun ?A (=)) (=)))
       Ball Ball",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_set ?A) (rel_fun (rel_fun ?A (=)) (=))) Bex
       Bex",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_set ?A) (rel_fun (rel_set ?A) (rel_set ?A))) (Un)
       (Un)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 ?A) (rel_fun (list_all2 ?A) (list_all2 ?A))) (@)
       (@)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 ?A) (rel_fun (list_all2 ?A) (list_all2 ?A)))
       splice splice",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_filter ?A) (rel_fun (rel_filter ?A) (rel_filter ?A)))
       sup sup",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_cset ?A) (rel_fun (rel_fun ?A (=)) (=)))
       cBall cBall",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_cset ?A) (rel_fun (rel_fun ?A (=)) (=)))
       cBex cBex",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("Countable_Set_Type.rcset_to_rcset",
     "countable ?A ==> rcset (the_inv rcset ?A) = ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 2),
             template_var 0)),
         template_var 0))),
    ("Topological_Spaces.convergentD",
     "convergent ?X ==> EX L. ?X \<longlonglongrightarrow> L",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Transfer.All_transfer",
     "bi_total ?A ==> rel_fun (rel_fun ?A (=)) (=) All All",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.Ex_transfer",
     "bi_total ?A ==> rel_fun (rel_fun ?A (=)) (=) Ex Ex",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_forall_transfer",
     "bi_total ?A ==>
      rel_fun (rel_fun ?A (=)) (=) transfer_forall transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_forall_transfer",
     "bi_total ?A ==>
      rel_fun (rel_fun ?A (=)) rev_implies transfer_forall transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_forall_transfer",
     "bi_total ?A ==>
      rel_fun (rel_fun ?A rev_implies) rev_implies transfer_forall
       transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.eq_transfer",
     "bi_unique ?A ==> rel_fun ?A (rel_fun ?A (=)) (=) (=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==> Transfer.Rel (rel_fun (rel_set ?A) (=)) card card",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (rel_set ?A) (=)) finite finite",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (list_all2 ?A) (=)) distinct distinct",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (list_all2 ?A) (=)) distinct_adj distinct_adj",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?R ==>
      Transfer.Rel (rel_fun (rel_set ?R) (=)) countable countable",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_forall_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (=)) (-->) transfer_forall transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_forall_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (-->)) (-->) transfer_forall transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.eq_imp_transfer",
     "right_unique ?A ==> rel_fun ?A (rel_fun ?A (-->)) (=) (=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cimageI",
     "cin ?x ?A ==> cin (?f ?x) (cimage ?f ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 0, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "?x = ?y ==> ((%x. ?x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Set_Interval.Inf_greaterThanAtMost", "?x < ?y ==> Inf {?x<..?y} = ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Set_Interval.Inf_greaterThanLessThan",
     "?x < ?y ==> Inf {?x<..<?y} = ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Set_Interval.Sup_atLeastLessThan", "?x < ?y ==> Sup {?x..<?y} = ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Set_Interval.Sup_greaterThanLessThan",
     "?x < ?y ==> Sup {?x<..<?y} = ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Conditionally_Complete_Lattices.cInf_greaterThanAtMost",
     "?y < ?x ==> Inf {?y<..?x} = ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Conditionally_Complete_Lattices.cInf_greaterThanLessThan",
     "?y < ?x ==> Inf {?y<..<?x} = ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Conditionally_Complete_Lattices.cSup_atLeastLessThan",
     "?y < ?x ==> Sup {?y..<?x} = ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Conditionally_Complete_Lattices.cSup_greaterThanLessThan",
     "?y < ?x ==> Sup {?y<..<?x} = ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Transcendental.ln_le_minus_one", "0 < ?x ==> ln ?x <= ?x - 1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Transcendental.exp_total", "0 < ?y ==> EX x. exp x = ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Transcendental.exp_ge_add_one_self_aux",
     "0 <= ?x ==> 1 + ?x <= exp ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.ln_add_one_self_le_self",
     "0 <= ?x ==> ln (1 + ?x) <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_var 0))),
    ("Transcendental.ln_neg_is_const", "?x <= 0 ==> ln ?x = (THE x. False)",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 4)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("Sum_Type.InlI", "?a : ?A ==> Inl ?a : ?A <+> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sum_Type.InrI", "?b : ?B ==> Inr ?b : ?A <+> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Transcendental.continuous_cos",
     "continuous ?F ?f ==> continuous ?F (%x. cos (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_sin",
     "continuous ?F ?f ==> continuous ?F (%x. sin (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?f ==> continuous ?F (%x. - ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?f ==> continuous ?F (%x. norm (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?f ==> continuous ?F (%x. \<bar>?f x\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?f ==> continuous ?F (%x. sqrt (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_arctan",
     "continuous ?F ?f ==> continuous ?F (%x. arctan (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_arsinh",
     "continuous ?F ?f ==> continuous ?F (%x. arsinh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_fst",
     "continuous ?F ?f ==> continuous ?F (%x. fst (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_snd",
     "continuous ?F ?f ==> continuous ?F (%x. snd (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_cosh",
     "continuous ?F ?f ==> continuous ?F (%x. cosh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_exp",
     "continuous ?F ?f ==> continuous ?F (%x. exp (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_sinh",
     "continuous ?F ?f ==> continuous ?F (%x. sinh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?g ==> continuous ?F (%x. of_real (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?g ==> continuous ?F (%x. cnj (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_cos",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. cos (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_sin",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. sin (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. norm (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?A ?f ==> continuous_on ?A (%x. cis (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. \<bar>?f x\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. sqrt (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_arctan",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. arctan (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_on_fst",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. fst (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_on_snd",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. snd (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_cosh",
     "continuous_on ?A ?f ==> continuous_on ?A (%x. cosh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_sinh",
     "continuous_on ?A ?f ==> continuous_on ?A (%x. sinh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_exp",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. exp (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. - ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. of_real (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. Im (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. Re (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. cnj (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_arsinh'",
     "continuous_on ?A ?f ==> continuous_on ?A (%x. arsinh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Infinite_Set.ALL_MOST", "ALL x. ?P x ==> MOST x. ?P x",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Transcendental.isCont_ln", "?x ~= 0 ==> isCont ln ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.sin_zero_norm_cos_one",
     "sin ?x = (0::?'a) ==> norm (cos ?x) = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Transcendental.sin_zero_abs_cos_one",
     "sin ?x = 0 ==> \<bar>cos ?x\<bar> = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Transitive_Closure.rtrancl_subset_rtrancl",
     "?r <= ?s^* ==> ?r^* <= ?s^*",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 0, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cos_arccos_abs",
     "\<bar>?y\<bar> <= 1 ==> cos (arccos ?y) = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Tree.size_subtrees", "?s : subtrees ?t ==> size ?s <= size ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Tree.height_subtrees", "?s : subtrees ?t ==> height ?s <= height ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtranclp_converseI",
     "?r^** ?y ?x ==> ?r^--1^** ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("Infinite_Set.MOST_I", "(!!x. ?P x) ==> MOST x. ?P x",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Transitive_Closure.relpowp_imp_rtranclp",
     "(?P ^^ ?n) ?x ?y ==> ?P^** ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Set_Interval.subset_eq_atLeast0_lessThan_card",
     "?N <= {0..<?n} ==> card ?N <= ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Transitive_Closure.relpow_imp_rtrancl", "?p : ?R ^^ ?n ==> ?p : ?R^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.rtranclp_converseD",
     "?r^--1^** ?x ?y ==> ?r^** ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Product_Type.fst_eqD", "fst (?x, ?y) = ?a ==> ?x = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)),
          template_var 0)],
       template_equation (template_var 2, template_var 0))),
    ("Product_Type.snd_eqD", "snd (?x, ?y) = ?a ==> ?y = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)),
          template_var 0)],
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.continuous_on_artanh",
     "?A <= {- 1<..<1} ==> continuous_on ?A artanh",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2)),
            template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Transfer.right_totalI", "(!!y. EX x. ?A x y) ==> right_total ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transfer.left_totalI", "(!!x. EX y. ?R x y) ==> left_total ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.acyclic_subset",
     "[| acyclic ?s; ?r <= ?s |] ==> acyclic ?r",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Transcendental.cos_sin_eq",
     "cos ?x = sin (of_real pi / (2::?'a) - ?x)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_var 0)))),
    ("Transcendental.sin_cos_eq",
     "sin ?x = cos (of_real pi / (2::?'a) - ?x)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_var 0)))),
    ("Transitive_Closure.rtranclp_r_diff_Id", "(inf ?r (~=))^** = ?r^**",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)),
       template_app (template_hole 3, template_var 0))),
    ("Transfer.rel_fun_eq_eq_onp",
     "rel_fun (=) (eq_onp ?P) = eq_onp (%f. ALL x. ?P (f x))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Countable_Set_Type.cUn_eq_cUN",
     "?A Un ?B = (UN b. if b then ?A else ?B)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Complete_Lattices.INT_constant",
     "(INT y:?A. ?c) = (if ?A = {} then UNIV else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_var 1)
           ))),
    ("Product_Type.snd_image_Sigma",
     "snd ` Sigma ?A ?B = \<Union> (?B ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_bool_eq",
     "\<Inter> (range ?A) = ?A True Int ?A False",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 0, template_hole 1)),
         template_app (template_var 0, template_hole 0)))),
    ("List.greaterThanLessThan_upto", "{?i<..<?j} = set [?i + 1..?j - 1]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 1))))),
    ("Set_Interval.atLeast0_lessThan_Suc_eq_insert_0",
     "{0..<Suc ?n} = insert 0 (Suc ` {0..<?n})",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 3),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0))))),
    ("TermsAndClauses.substPB_o",
     "substPB (subst ?\<pi>1.0 o ?\<pi>2.0) ?\<Phi> =
      substPB ?\<pi>1.0 (substPB ?\<pi>2.0 ?\<Phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.ntrancl_Suc",
     "ntrancl (Suc ?n) ?R = ntrancl ?n ?R O (Id Un ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Product_Type.Sigma_Union",
     "Sigma (\<Union> ?X) ?B = (UN A:?X. Sigma A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Tree.complete_iff_size1",
     "Tree.complete ?t = (size1 ?t = 2 ^ height ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Countable_Set_Type.cpsubset_eq",
     "csubset ?A ?B = (csubset_eq ?A ?B & ?A ~= ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Countable_Set_Type.csubset_not_fsubset_eq",
     "csubset ?A ?B = (csubset_eq ?A ?B & ~ csubset_eq ?B ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Topological_Spaces.continuous_on_eq_continuous_within",
     "continuous_on ?s ?f = (ALL x:?s. continuous (at x within ?s) ?f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), t_empty))),
    ("Countable_Set_Type.cBall_triv",
     "cBall ?A (%x. ?P) = ((EX x. cin x ?A) --> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Countable_Set_Type.cBex_triv",
     "cBex ?A (%x. ?P) = ((EX x. cin x ?A) & ?P)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Transitive_Closure.rtrancl_power",
     "(?p : ?R^*) = (EX n. ?p : ?R ^^ n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Transitive_Closure.rtranclp_power",
     "?P^** ?x ?y = (EX n. (?P ^^ n) ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Countable_Set_Type.cBall_simps",
     "cBall (cinsert ?a ?B) ?P = (?P ?a & cBall ?B ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cBall_simps",
     "cBall (cimage ?f ?A) ?P = cBall ?A (%x. ?P (?f x))",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Countable_Set_Type.cBex_simps",
     "cBex (cinsert ?a ?B) ?P = (?P ?a | cBex ?B ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cBex_simps",
     "cBex (cimage ?f ?A) ?P = cBex ?A (%x. ?P (?f x))",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Infinite_Set.MOST_iff_cofinite",
     "(MOST x. ?P x) = finite {x. ~ ?P x}",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_hole 3),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Product_Type.member_product",
     "(?x : Product_Type.product ?A ?B) = (?x : ?A \<times> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Infinite_Set.MOST_Suc_iff", "(MOST n. ?P (Suc n)) = (MOST n. ?P n)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("Countable_Set_Type.rel_cset_csingle_iff",
     "rel_cset ?R (csingle ?x) (csingle ?y) = ?R ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Countable_Set_Type.finite_countable_subset",
     "finite {X. X <= ?A & countable X} = finite ?A",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("List.sorted_list_of_set_lessThan_Suc",
     "sorted_list_of_set {..<Suc ?k} = sorted_list_of_set {..<?k} @ [?k]",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("TermsAndClauses.substC_o",
     "substC (subst ?\<pi>1.0 o ?\<pi>2.0) ?c =
      substC ?\<pi>1.0 (substC ?\<pi>2.0 ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Transcendental.divide_powr_uminus",
     "?a / ?b powr ?c = ?a * ?b powr - ?c",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.sin_2pi_minus", "sin (2 * pi - ?x) = - sin ?x",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_hole 1)),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 7, template_var 0)))),
    ("Transcendental.tan_cot", "tan (pi / 2 - ?x) = inverse (tan ?x)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 7, template_var 0)))),
    ("Product_Type.map_prod_simp",
     "map_prod ?f ?g (?a, ?b) = (?f ?a, ?g ?b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 3, template_var 1)),
         template_app (template_var 2, template_var 0)))),
    ("TermsAndClauses.substA_o",
     "substA (subst ?\<pi>1.0 o ?\<pi>2.0) ?at =
      substA ?\<pi>1.0 (substA ?\<pi>2.0 ?at)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("TermsAndClauses.substL_o",
     "substL (subst ?\<pi>1.0 o ?\<pi>2.0) ?l =
      substL ?\<pi>1.0 (substL ?\<pi>2.0 ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("TermsAndClauses.subst_o",
     "subst (subst ?\<pi>1.0 o ?\<pi>2.0) ?T =
      subst ?\<pi>1.0 (subst ?\<pi>2.0 ?T)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cUN_constant",
     "cUnion (cimage (%y. ?c) ?A) = (if ?A = cempty then cempty else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_var 1)
           ))),
    ("Countable_Set_Type.cimage_cimage",
     "cimage ?f (cimage ?g ?A) = cimage (%x. ?f (?g x)) ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Countable_Set_Type.cimage_cinsert",
     "cimage ?f (cinsert ?a ?B) = cinsert (?f ?a) (cimage ?f ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Transcendental.arsinh_real_aux", "0 < ?x + sqrt (?x\<^sup>2 + 1)",
     template_inequation
      (less_than, template_hole 7,
       template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_hole 0))))),
    ("Transcendental.square_fact_le_2_fact",
     "fact ?n * fact ?n <= fact (2 * ?n)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Transcendental.sin_minus_converges",
     "(%n. - (sin_coeff n *\<^sub>R (- ?x) ^ n)) sums sin ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Cardinal_Order_Relation.card_of_Times_singl1",
     "|?A| =o |?A \<times> {?b}|",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   t_empty)))),
           template_hole 0)
         )),
    ("Cardinal_Order_Relation.card_of_Times_singl2",
     "|?A| =o |{?b} \<times> ?A|",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 1)),
                   t_empty)))),
           template_hole 0)
         )),
    ("Cardinal_Arithmetic.card_of_Times_singleton",
     "|?A \<times> {?x}| =o |?A|",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     t_empty))),
               template_app (template_hole 1, template_var 1))),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun ?A (rel_fun (rel_fun (=) ?A) (rel_fun (=) ?A)))
       case_nat case_nat",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?R2.0
         (rel_fun (list_all2 (rel_trm ?R1.0)) (rel_atm ?R1.0 ?R2.0)))
       Pr Pr",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A ?B) (rel_fun (rel_set ?A) (rel_set ?B))) (`)
       (`)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Rb ?Sd) (rel_fun (list_all2 ?Rb) (list_all2 ?Sd)))
       map map",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Rb ?Sd) (rel_fun (rel_tree ?Rb) (rel_tree ?Sd)))
       map_tree map_tree",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Rb ?Sd)
         (rel_fun (rel_option ?Rb) (rel_option ?Sd)))
       map_option map_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Rb ?Sd)
         (rel_fun (stream_all2 ?Rb) (stream_all2 ?Sd)))
       smap smap",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Rb ?Sd) (rel_fun (rel_trm ?Rb) (rel_trm ?Sd)))
       map_trm map_trm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A ?B) (rel_fun (rel_cset ?A) (rel_cset ?B)))
       cimage cimage",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Rb ?Sd) (rel_fun (rel_cset ?Rb) (rel_cset ?Sd)))
       cimage cimage",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (=)) (rel_fun (list_all2 ?A) (list_all2 ?A)))
       dropWhile dropWhile",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (=)) (rel_fun (list_all2 ?A) (list_all2 ?A)))
       filter filter",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (=)) (rel_fun (list_all2 ?A) (list_all2 ?A)))
       takeWhile takeWhile",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (=)) (rel_fun (list_all2 ?A) (rel_option ?A)))
       find find",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (=) (rel_fun (rel_fun ?A ?A) (rel_fun ?A ?A)))
       compow compow",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 ?A) (rel_fun (=) (rel_fun ?A (list_all2 ?A))))
       list_update list_update",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app (template_hole 5, template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 ?A)
         (rel_fun (list_all2 ?A) (rel_set (list_all2 ?A))))
       shuffles shuffles",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_trm ?R1.0)
         (rel_fun (rel_trm ?R1.0) (rel_atm ?R1.0 ?R2.0)))
       Eq Eq",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "bi_total ?A ==> Transfer.Rel (rel_fun (rel_fun ?A (=)) (=)) All All",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==> Transfer.Rel (rel_fun (rel_fun ?A (=)) (=)) Ex Ex",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (=)) (=)) transfer_forall
       transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (=)) rev_implies) transfer_forall
       transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A rev_implies) rev_implies)
       transfer_forall transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cin_parametric",
     "bi_unique ?A ==> rel_fun ?A (rel_fun (rel_cset ?A) (=)) cin cin",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==> Transfer.Rel (rel_fun ?A (rel_fun ?A (=))) (=) (=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (list_all2 ?A) (list_all2 ?A)) remdups remdups",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (list_all2 ?A) (list_all2 ?A)) remdups_adj
       remdups_adj",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "right_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (=)) (-->)) transfer_forall
       transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "right_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (-->)) (-->)) transfer_forall
       transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "right_unique ?A ==>
      Transfer.Rel (rel_fun ?A (rel_fun ?A (-->))) (=) (=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cUN_upper",
     "cin ?a ?A ==> csubset_eq (?B ?a) (cUnion (cimage ?B ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Countable_Set_Type.eqcelem_imp_iff",
     "?x = ?y ==> cin ?x ?A = cin ?y ?A",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.eqcset_imp_iff",
     "?A = ?B ==> cin ?x ?A = cin ?x ?B",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transcendental.DERIV_ln",
     "0 < ?x ==> (ln has_real_derivative inverse ?x) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transcendental.ln_inverse", "0 < ?x ==> ln (inverse ?x) = - ln ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Countable_Set_Type.cpsubset_imp_ex_fmem",
     "csubset ?A ?B ==> EX b. cin b (cDiff ?B ?A)",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Product_Type.Collect_case_prod_mono",
     "?A <= ?B ==> {(x, y). ?A x y} <= {(x, y). ?B x y}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Countable_Set_Type.cDiff_partition",
     "csubset_eq ?A ?B ==> cUn ?A (cDiff ?B ?A) = ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Countable_Set_Type.cin_mono",
     "csubset_eq ?A ?B ==> cin ?x ?A --> cin ?x ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Countable_Set_Type.cimage_mono",
     "csubset_eq ?A ?B ==> csubset_eq (cimage ?f ?A) (cimage ?f ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Countable_Set_Type.cinsert_mono",
     "csubset_eq ?C ?D ==> csubset_eq (cinsert ?a ?C) (cinsert ?a ?D)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?f ==> continuous ?F (%x. ?f x ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous ?F ?f ==> continuous ?F (%x. root ?n (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. root ?n (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Transcendental.continuous_on_pochhammer'",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. pochhammer (?f x) ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. ?f x ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Transfer.transfer_raw",
     "Domainp ?R = ?DR1 ==> Domainp (list_all2 ?R) = list_all ?DR1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transfer.transfer_raw",
     "Domainp ?R = ?DR1 ==> Domainp (rel_tree ?R) = pred_tree ?DR1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transfer.transfer_raw",
     "Domainp ?R = ?DR1 ==> Domainp (rel_option ?R) = pred_option ?DR1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transfer.transfer_raw",
     "Domainp ?R = ?DR1 ==> Domainp (stream_all2 ?R) = pred_stream ?DR1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transfer.transfer_raw",
     "Domainp ?R = ?DR1 ==> Domainp (rel_trm ?R) = pred_trm ?DR1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transfer.transfer_raw",
     "Domainp ?R = ?DR1 ==> Domainp (rel_cset ?R) = pred_cset ?DR1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.ln_add_one_self_le_self2",
     "- 1 < ?x ==> ln (1 + ?x) <= ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0)),
         template_var 0))),
    ("Transcendental.arccos_cos_eq_abs",
     "\<bar>?\<theta>\<bar> <= pi ==>
      arccos (cos ?\<theta>) = \<bar>?\<theta>\<bar>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Topological_Spaces.limI",
     "?X \<longlonglongrightarrow> ?L ==> lim ?X = ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 2), template_var 1),
         template_var 0))),
    ("Transcendental.isCont_tan", "cos ?x ~= (0::?'a) ==> isCont tan ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_tanh", "cosh ?x ~= (0::?'a) ==> isCont tanh ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_cot", "sin ?x ~= (0::?'a) ==> isCont cot ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Order_Union.wf_Int_Times", "?A Int ?B = {} ==> wf (?A \<times> ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Countable_Set_Type.cDiff_triv",
     "cInt ?A ?B = cempty ==> cDiff ?A ?B = ?A",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Transitive_Closure.tranclp_converseI",
     "?r^++^--1 ?x ?y ==> ?r^--1^++ ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Product_Type.Collect_case_prodD",
     "?x : {(x, y). ?A x y} ==> ?A (fst ?x) (snd ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 0,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topological_Spaces.continuous_at_imp_continuous_at_within",
     "isCont ?f ?x ==> continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_hole 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Transitive_Closure.rtranclp_symclp_sym",
     "(symclp ?r)^** ?x ?y ==> (symclp ?r)^** ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("Transitive_Closure.tranclp_converseD",
     "?r^--1^++ ?x ?y ==> ?r^++^--1 ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Fun_More.atLeastLessThan_injective",
     "{0..<?m} = {0..<?n} ==> ?m = ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 1),
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Countable_Set_Type.csingleton_inject",
     "csingle ?a = csingle ?b ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_hole 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_equation (template_var 1, template_var 0))),
    ("Product_Type.SigmaD1", "(?a, ?b) : Sigma ?A ?B ==> ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("Topological_Spaces.mono_SucI1",
     "ALL n. ?X n <= ?X (Suc n) ==> monoseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.mono_SucI2",
     "ALL n. ?X (Suc n) <= ?X n ==> monoseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Product_Type.prod_cases", "(!!a b. ?P (a, b)) ==> ?P ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Topological_Spaces.incseq_SucI",
     "(!!n. ?X n <= ?X (Suc n)) ==> incseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.decseq_SucI",
     "(!!n. ?X (Suc n) <= ?X n) ==> decseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.finite_relcomp",
     "[| finite ?R; finite ?S |] ==> finite (?R O ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.strict_mono_o",
     "[| strict_mono ?r; strict_mono ?s |] ==> strict_mono (?r o ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Countable_Set_Type.cBexI", "[| ?P ?x; cin ?x ?A |] ==> cBex ?A ?P",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| open ?S; open ?T |] ==> open (?S Un ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| open ?S; closed ?T |] ==> open (?S - ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| closed ?S; open ?T |] ==> closed (?S - ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| closed ?S; closed ?T |] ==> closed (?S Int ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| closed ?S; closed ?T |] ==> closed (?S Un ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.convergent_subseq_convergent",
     "[| convergent ?X; strict_mono ?f |] ==> convergent (?X o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.bi_total_OO",
     "[| bi_total ?A; bi_total ?B |] ==> bi_total (?A OO ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.bi_unique_fun",
     "[| bi_total ?A; bi_unique ?B |] ==> bi_unique (rel_fun ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?R1.0; bi_total ?R2.0 |]
      ==> bi_total (rel_efsym ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?R1.0; bi_total ?R2.0 |]
      ==> bi_total (rel_sum ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?R1.0; bi_total ?R2.0 |]
      ==> bi_total (rel_prod ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?R1.0; bi_total ?R2.0 |]
      ==> bi_total (rel_atm ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?R1.0; bi_total ?R2.0 |]
      ==> bi_total (rel_lit ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.bi_total_fun",
     "[| bi_unique ?A; bi_total ?B |] ==> bi_total (rel_fun ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.bi_unique_OO",
     "[| bi_unique ?A; bi_unique ?B |] ==> bi_unique (?A OO ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?R1.0; bi_unique ?R2.0 |]
      ==> bi_unique (rel_efsym ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?R1.0; bi_unique ?R2.0 |]
      ==> bi_unique (rel_sum ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?R1.0; bi_unique ?R2.0 |]
      ==> bi_unique (rel_prod ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?R1.0; bi_unique ?R2.0 |]
      ==> bi_unique (rel_atm ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?R1.0; bi_unique ?R2.0 |]
      ==> bi_unique (rel_lit ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "[| is_equality ?a3; is_equality ?b3 |]
      ==> is_equality (rel_efsym ?a3 ?b3)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "[| is_equality ?a3; is_equality ?b3 |]
      ==> is_equality (rel_sum ?a3 ?b3)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "[| is_equality ?a3; is_equality ?b3 |]
      ==> is_equality (rel_prod ?a3 ?b3)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "[| is_equality ?a3; is_equality ?b3 |]
      ==> is_equality (rel_atm ?a3 ?b3)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "[| is_equality ?a3; is_equality ?b3 |]
      ==> is_equality (rel_lit ?a3 ?b3)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.relator_eq_raw",
     "[| is_equality ?a3; is_equality ?b3 |]
      ==> is_equality (rel_fun ?a3 ?b3)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.left_unique_fun",
     "[| left_total ?A; left_unique ?B |] ==> left_unique (rel_fun ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.left_total_OO",
     "[| left_total ?R; left_total ?S |] ==> left_total (?R OO ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_total ?R1.0; left_total ?R2.0 |]
      ==> left_total (rel_efsym ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_total ?R1.0; left_total ?R2.0 |]
      ==> left_total (rel_sum ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_total ?R1.0; left_total ?R2.0 |]
      ==> left_total (rel_prod ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_total ?R1.0; left_total ?R2.0 |]
      ==> left_total (rel_atm ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_total ?R1.0; left_total ?R2.0 |]
      ==> left_total (rel_lit ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.left_total_fun",
     "[| left_unique ?A; left_total ?B |] ==> left_total (rel_fun ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.left_unique_OO",
     "[| left_unique ?R; left_unique ?S |] ==> left_unique (?R OO ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_unique ?R1.0; left_unique ?R2.0 |]
      ==> left_unique (rel_efsym ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_unique ?R1.0; left_unique ?R2.0 |]
      ==> left_unique (rel_sum ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_unique ?R1.0; left_unique ?R2.0 |]
      ==> left_unique (rel_prod ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_unique ?R1.0; left_unique ?R2.0 |]
      ==> left_unique (rel_atm ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| left_unique ?R1.0; left_unique ?R2.0 |]
      ==> left_unique (rel_lit ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.right_total_OO",
     "[| right_total ?A; right_total ?B |] ==> right_total (?A OO ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.right_unique_fun",
     "[| right_total ?A; right_unique ?B |]
      ==> right_unique (rel_fun ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_total ?R1.0; right_total ?R2.0 |]
      ==> right_total (rel_efsym ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_total ?R1.0; right_total ?R2.0 |]
      ==> right_total (rel_sum ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_total ?R1.0; right_total ?R2.0 |]
      ==> right_total (rel_prod ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_total ?R1.0; right_total ?R2.0 |]
      ==> right_total (rel_atm ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_total ?R1.0; right_total ?R2.0 |]
      ==> right_total (rel_lit ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.right_total_fun",
     "[| right_unique ?A; right_total ?B |]
      ==> right_total (rel_fun ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.right_unique_OO",
     "[| right_unique ?A; right_unique ?B |] ==> right_unique (?A OO ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_unique ?R1.0; right_unique ?R2.0 |]
      ==> right_unique (rel_efsym ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_unique ?R1.0; right_unique ?R2.0 |]
      ==> right_unique (rel_sum ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_unique ?R1.0; right_unique ?R2.0 |]
      ==> right_unique (rel_prod ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_unique ?R1.0; right_unique ?R2.0 |]
      ==> right_unique (rel_atm ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| right_unique ?R1.0; right_unique ?R2.0 |]
      ==> right_unique (rel_lit ?R1.0 ?R2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Tree.acomplete_subtrees",
     "[| acomplete ?t; ?s : subtrees ?t |] ==> acomplete ?s",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("Tree.wbalanced_subtrees",
     "[| wbalanced ?t; ?s : subtrees ?t |] ==> wbalanced ?s",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("Countable_Set_Type.cbspec", "[| cBall ?A ?P; cin ?x ?A |] ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Countable_Set_Type.rev_cBexI",
     "[| cin ?x ?A; ?P ?x |] ==> cBex ?A ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transfer.rec_nat_transfer",
     "rel_fun ?A (rel_fun (rel_fun (=) (rel_fun ?A ?A)) (rel_fun (=) ?A))
       rec_nat rec_nat",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 2, template_hole 4),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.apfst_parametric",
     "rel_fun (rel_fun ?A ?B) (rel_fun (rel_prod ?A ?C) (rel_prod ?B ?C))
       apfst apfst",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.curry_transfer",
     "rel_fun (rel_fun (rel_prod ?A ?B) ?C) (rel_fun ?A (rel_fun ?B ?C))
       curry curry",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transcendental.DERIV_arctan",
     "(arctan has_real_derivative inverse (1 + ?x\<^sup>2)) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Transcendental.tendsto_exp_limit_at_top",
     "((%y. (1 + ?x / y) powr y) \<longlongrightarrow> exp ?x) at_top",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Product_Type.split", "(case (?a, ?b) of (c, d) => ?f c d) = ?f ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Transcendental.minus_sin_cos_eq",
     "- sin ?x = cos (?x + of_real pi / (2::?'a))",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Transcendental.sin_cos_squared_add3",
     "cos ?x * cos ?x + sin ?x * sin ?x = (1::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Transcendental.cos_int_times_real",
     "cos (of_int ?m * of_real ?x) = of_real (cos (real_of_int ?m * ?x))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Transcendental.exp_double", "exp ((2::?'a) * ?z) = (exp ?z)\<^sup>2",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_hole 2))))),
    ("Transcendental.sin_int_times_real",
     "sin (of_int ?m * of_real ?x) = of_real (sin (real_of_int ?m * ?x))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Transcendental.powr_diff",
     "?w powr (?z1.0 - ?z2.0) = ?w powr ?z1.0 / ?w powr ?z2.0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Transcendental.powr_add",
     "?x powr (?a + ?b) = ?x powr ?a * ?x powr ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Product_Type.scomp_fcomp",
     "fcomp (scomp ?f ?g) ?h = scomp ?f (%x. fcomp (?g x) ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2), t_empty))),
    ("Product_Type.scomp_scomp",
     "scomp (scomp ?f ?g) ?h = scomp ?f (%x. scomp (?g x) ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2), t_empty))),
    ("Transitive_Closure.relpowp_add",
     "?P ^^ (?m + ?n) = ?P ^^ ?m OO ?P ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Transfer.rel_fun_eq_rel",
     "rel_fun (=) ?R = (%f g. ALL x. ?R (f x) (g x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       t_empty)),
    ("Product_Type.split_beta'",
     "(%(x, y). ?f x y) = (%x. ?f (fst x) (snd x))",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Product_Type.split_comp_eq",
     "(%u. ?f (?g (fst u)) (snd u)) = (%(x, y). ?f (?g x) y)",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("Product_Type.fst_image_times",
     "fst ` (?A \<times> ?B) = (if ?B = {} then {} else ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 1), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_var 1)
           ))),
    ("Product_Type.snd_image_times",
     "snd ` (?A \<times> ?B) = (if ?A = {} then {} else ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 1), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_hole 0),
             template_var 0)
           ))),
    ("TermsAndClauses.vars_subst",
     "vars (subst ?\<pi> ?T) = (UN x:vars ?T. vars (?\<pi> x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 3, template_var 0))))),
    ("TermsAndClauses.varsA_substA",
     "varsA (substA ?\<pi> ?at) = (UN x:varsA ?at. vars (?\<pi> x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 4, template_var 0))))),
    ("TermsAndClauses.varsC_substC",
     "varsC (substC ?\<pi> ?c) = (UN x:varsC ?c. vars (?\<pi> x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 4, template_var 0))))),
    ("TermsAndClauses.varsL_substL",
     "varsL (substL ?\<pi> ?l) = (UN x:varsL ?l. vars (?\<pi> x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 4, template_var 0))))),
    ("TermsAndClauses.varsPB_substPB",
     "varsPB (substPB ?\<pi> ?\<Phi>) =
      (UN x:varsPB ?\<Phi>. vars (?\<pi> x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 4, template_var 0))))),
    ("Transitive_Closure.relpow_add",
     "?R ^^ (?m + ?n) = ?R ^^ ?m O ?R ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Product_Type.Sigma_Diff_distrib1",
     "Sigma (?I - ?J) ?C = Sigma ?I ?C - Sigma ?J ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Product_Type.Sigma_Int_distrib1",
     "Sigma (?I Int ?J) ?C = Sigma ?I ?C Int Sigma ?J ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Product_Type.Sigma_Un_distrib1",
     "Sigma (?I Un ?J) ?C = Sigma ?I ?C Un Sigma ?J ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Relation.converse_INTER",
     "(\<Inter> (?r ` ?S))^-1 = (INT x:?S. (?r x)^-1)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Countable_Set_Type.cset_eq_iff",
     "(?A = ?B) = (ALL x. cin x ?A = cin x ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Countable_Set_Type.csubset_iff",
     "csubset_eq ?A ?B = (ALL t. cin t ?A --> cin t ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Product_Type.split_paired_All",
     "(ALL x. ?P x) = (ALL a b. ?P (a, b))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Product_Type.split_paired_Ex", "(EX x. ?P x) = (EX a b. ?P (a, b))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Transcendental.sin_zero_iff_int2",
     "(sin ?x = 0) = (EX i. ?x = real_of_int i * pi)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Countable_Set_Type.cBall_cUn",
     "cBall (cUn ?A ?B) ?P = (cBall ?A ?P & cBall ?B ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cBex_cUn",
     "cBex (cUn ?A ?B) ?P = (cBex ?A ?P | cBex ?B ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cinsert_iff",
     "cin ?a (cinsert ?b ?A) = (?a = ?b | cin ?a ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Countable_Set_Type.cInt_iff",
     "cin ?c (cInt ?A ?B) = (cin ?c ?A & cin ?c ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cUn_iff",
     "cin ?c (cUn ?A ?B) = (cin ?c ?A | cin ?c ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cimage_iff",
     "cin ?z (cimage ?f ?A) = cBex ?A (%x. ?z = ?f x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("Sum_Type.Plus_eq_empty_conv",
     "(?A <+> ?B = {}) = (?A = {} & ?B = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Countable_Set_Type.cUn_cempty",
     "(cUn ?A ?B = cempty) = (?A = cempty & ?B = cempty)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Countable_Set_Type.cInt_csubset_iff",
     "csubset_eq ?C (cInt ?A ?B) = (csubset_eq ?C ?A & csubset_eq ?C ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cimage_csubset_iff",
     "csubset_eq (cimage ?f ?A) ?B = cBall ?A (%x. cin (?f x) ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Countable_Set_Type.cinsert_csubset",
     "csubset_eq (cinsert ?x ?A) ?B = (cin ?x ?B & csubset_eq ?A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cUn_csubset_iff",
     "csubset_eq (cUn ?A ?B) ?C = (csubset_eq ?A ?C & csubset_eq ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Infinite_Set.not_MOST", "(~ (MOST x. ?P x)) = (INFM x. ~ ?P x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 1)),
       template_app
        (template_app (template_hole 0, t_empty), template_hole 1))),
    ("Countable_Set_Type.cBall_simps",
     "cBall ?A (%x. ?P x | ?Q) = (cBall ?A ?P | ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Countable_Set_Type.cBall_simps",
     "cBall ?A (%x. ?P | ?Q x) = (?P | cBall ?A ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cBall_simps",
     "cBall ?A (%x. ?P --> ?Q x) = (?P --> cBall ?A ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cBall_simps",
     "cBall ?A (%x. ?P x --> ?Q) = (cBex ?A ?P --> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Countable_Set_Type.cBex_simps",
     "cBex ?A (%x. ?P x & ?Q) = (cBex ?A ?P & ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Countable_Set_Type.cBex_simps",
     "cBex ?A (%x. ?P & ?Q x) = (?P & cBex ?A ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Product_Type.pair_in_swap_image",
     "((?y, ?x) : prod.swap ` ?A) = ((?x, ?y) : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Topological_Spaces.eventually_eventually",
     "(\<forall>\<^sub>F y in nhds ?x. eventually ?P (nhds y)) =
      eventually ?P (nhds ?x)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.tan_inverse", "1 / tan ?y = tan (pi / 2 - ?y)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 7, template_hole 3),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_var 0)))),
    ("Product_Type.split_paired_The",
     "(THE x. ?P x) = (THE (a, b). ?P (a, b))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Product_Type.apfst_apsnd",
     "apfst ?f (apsnd ?g ?x) = (?f (fst ?x), ?g (snd ?x))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_var 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Product_Type.apsnd_apfst",
     "apsnd ?f (apfst ?g ?x) = (?g (fst ?x), ?f (snd ?x))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_var 2,
           template_app (template_hole 0, template_var 0))))),
    ("Countable_Set_Type.cimage_constant_conv",
     "cimage (%x. ?c) ?A = (if ?A = cempty then cempty else csingle ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 1))
           ))),
    ("Countable_Set_Type.cimage_cUn",
     "cimage ?f (cUn ?A ?B) = cUn (cimage ?f ?A) (cimage ?f ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cDiff_cinsert",
     "cDiff ?A (cinsert ?a ?B) = cDiff (cDiff ?A ?B) (csingle ?a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Countable_Set_Type.cDiff_cinsert2",
     "cDiff ?A (cinsert ?a ?B) = cDiff (cDiff ?A (csingle ?a)) ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Countable_Set_Type.cDiff_cInt",
     "cDiff ?A (cInt ?B ?C) = cUn (cDiff ?A ?B) (cDiff ?A ?C)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cDiff_cUn",
     "cDiff ?A (cUn ?B ?C) = cInt (cDiff ?A ?B) (cDiff ?A ?C)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cUn_cDiff",
     "cDiff (cUn ?A ?B) ?C = cUn (cDiff ?A ?C) (cDiff ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cInt_cUn_distrib",
     "cInt ?A (cUn ?B ?C) = cUn (cInt ?A ?B) (cInt ?A ?C)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cDiff_cInt_distrib",
     "cInt ?C (cDiff ?A ?B) = cDiff (cInt ?C ?A) (cInt ?C ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cDiff_cInt_distrib2",
     "cInt (cDiff ?A ?B) ?C = cDiff (cInt ?A ?C) (cInt ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cInt_cUn_distrib2",
     "cInt (cUn ?B ?C) ?A = cUn (cInt ?B ?A) (cInt ?C ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cUn_cInt_distrib",
     "cUn ?A (cInt ?B ?C) = cInt (cUn ?A ?B) (cUn ?A ?C)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cUn_cInt_distrib2",
     "cUn (cInt ?B ?C) ?A = cInt (cUn ?B ?A) (cUn ?C ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cUNION_cimage",
     "cUnion (cimage ?g (cimage ?f ?A)) = cUnion (cimage (?g o ?f) ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Countable_Set_Type.cDiff_cInt2",
     "cDiff (cInt ?A ?C) (cInt ?B ?C) = cDiff (cInt ?A ?C) ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Countable_Set_Type.cinsert_cinter_cinsert",
     "cInt (cinsert ?a ?A) (cinsert ?a ?B) = cinsert ?a (cInt ?A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cimage_cInt_csubset",
     "csubset_eq (cimage ?f (cInt ?A ?B))
       (cInt (cimage ?f ?A) (cimage ?f ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cimage_cDiff_csubset",
     "csubset_eq (cDiff (cimage ?f ?A) (cimage ?f ?B))
       (cimage ?f (cDiff ?A ?B))",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Cardinal_Arithmetic.Times_cprod", "|?A \<times> ?B| =o |?A| *c |?B|",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     t_empty))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?S (rel_fun (rel_fun ?R ?S) (rel_fun (rel_option ?R) ?S)))
       case_option case_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?S (rel_fun (rel_fun ?R ?S) (rel_fun (rel_option ?R) ?S)))
       rec_option rec_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?A (=))) (rel_fun (list_all2 ?A) (=)))
       successively successively",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_hole 4))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 4))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_set ?A)
         (rel_fun (rel_fun ?A (rel_set ?B)) (rel_set ?B)))
       Set.bind Set.bind",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 0))),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_set ?A)
         (rel_fun (rel_set (list_all2 ?A)) (rel_set (list_all2 ?A))))
       set_Cons set_Cons",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0))),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_set (rel_set ?A)) (rel_set ?A)) \<Union>
       \<Union>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             t_empty),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 ?A)
         (rel_fun (list_all2 ?B) (list_all2 (rel_prod ?A ?B))))
       List.product List.product",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (list_all2 ?A)
         (rel_fun (list_all2 ?B) (list_all2 (rel_prod ?A ?B))))
       zip zip",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?R) (=)) (%list. list = [])
       (%list. list = [])",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 4)),
             t_empty),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_tree ?R)
         (rel_fun ?R (rel_fun (rel_tree ?R) (rel_tree ?R))))
       Node Node",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 4, template_var 0)),
                     template_app (template_hole 4, template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_tree ?R) (=))
       (%tree. tree = \<langle>\<rangle>)
       (%tree. tree = \<langle>\<rangle>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 4)),
             t_empty),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_filter ?R)
         (rel_fun (rel_filter ?S) (rel_filter (rel_prod ?R ?S))))
       (\<times>\<^sub>F) (\<times>\<^sub>F)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_option ?A)
         (rel_fun (rel_fun ?A (rel_option ?B)) (rel_option ?B)))
       Option.bind Option.bind",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 0))),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_option ?R) (=)) (%option. option = None)
       (%option. option = None)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 4)),
             t_empty),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (stream_all2 ?R) (=)) (%stream. stream = stream)
       (%stream. stream = stream)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             t_empty),
           t_empty)
         )),
    ("Transitive_Closure.finite_trancl_ntranl",
     "finite ?R ==> ?R^+ = ntrancl (card ?R - 1) ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)),
           template_var 0)))),
    ("Transfer.reflp_transfer",
     "bi_total ?A ==>
      rel_fun (rel_fun ?A (rel_fun ?A (=))) (=) reflp reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.reflp_transfer",
     "bi_total ?A ==>
      rel_fun (rel_fun ?A (rel_fun ?A (=))) rev_implies reflp reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.reflp_transfer",
     "bi_total ?A ==>
      rel_fun (rel_fun ?A (rel_fun ?A rev_implies)) rev_implies reflp
       reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_set ?A)) Collect Collect",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3)),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun ?A (rel_fun (rel_set ?A) (=))) (:) (:)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0)),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun ?A (rel_fun (rel_cset ?A) (=))) cin cin",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0)),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.less_cset_transfer",
     "bi_unique ?A ==>
      rel_fun (pcr_cset ?A) (rel_fun (pcr_cset ?A) (=)) (<) csubset",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.reflp_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (rel_fun ?A (=))) (-->) reflp reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.reflp_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (rel_fun ?A (-->))) (-->) reflp reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.Domainp_forall_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (=)) (=) (transfer_bforall (Domainp ?A))
       transfer_forall",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_hole 3),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Tree.size1_if_complete",
     "Tree.complete ?t ==> size1 ?t = 2 ^ height ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Countable_Set_Type.cimage_constant",
     "cin ?x ?A ==> cimage (%x. ?c) ?A = csingle ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Topological_Spaces.tendsto_eq_intros",
     "?x = ?y ==> ((%x. x) \<longlongrightarrow> ?y) (at ?x within ?s1)",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Transcendental.DERIV_ln_divide",
     "0 < ?x ==> (ln has_real_derivative 1 / ?x) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transcendental.ln_eq_zero_iff", "0 < ?x ==> (ln ?x = 0) = (?x = 1)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 0), template_hole 4),
         template_equation (template_var 0, template_hole 0)))),
    ("Transcendental.ln_gt_zero_iff", "0 < ?x ==> (0 < ln ?x) = (1 < ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 4, template_hole 0),
           template_var 0)))),
    ("Transcendental.ln_less_zero_iff", "0 < ?x ==> (ln ?x < 0) = (?x < 1)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 1, template_var 0)),
           template_hole 3),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 0)))),
    ("Transcendental.ln_ge_zero_iff", "0 < ?x ==> (0 <= ln ?x) = (1 <= ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 4),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 0),
           template_var 0)))),
    ("Transcendental.ln_le_zero_iff", "0 < ?x ==> (ln ?x <= 0) = (?x <= 1)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 4),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)))),
    ("Transcendental.powr_neg_one", "0 < ?x ==> ?x powr - 1 = 1 / ?x",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_hole 1)),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)))),
    ("Transcendental.powr_realpow", "0 < ?x ==> ?x powr real ?n = ?x ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.plus_inverse_ge_2", "0 < ?x ==> 2 <= ?x + inverse ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.finite_roots_unity",
     "1 <= ?n ==> finite {z. z ^ ?n = (1::?'a)}",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("T.iimg", "?a : ?B ==> iimg ?B ?f (?f ?a) = ?f ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app (template_var 0, template_var 2)),
         template_app (template_var 0, template_var 2)))),
    ("Transcendental.sin_pi_divide_n_ge_0",
     "?n ~= 0 ==> 0 <= sin (pi / real ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_inequation
        (less_equals, template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Transcendental.artanh_minus_real",
     "\<bar>?x\<bar> < 1 ==> artanh (- ?x) = - artanh ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Transitive_Closure.rtrancl_imp_relpow",
     "?p : ?R^* ==> EX n. ?p : ?R ^^ n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.rtranclp_imp_relpowp",
     "?P^** ?x ?y ==> EX n. (?P ^^ n) ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Infinite_Set.MOST_SucI", "MOST n. ?P n ==> MOST n. ?P (Suc n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Transitive_Closure.Image_closed_trancl",
     "?r `` ?X <= ?X ==> ?r^* `` ?X = ?X",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 0))),
    ("T.inImage_iimg", "?a : ?f ` ?B ==> iimg ?B ?f ?a = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_var 2))),
    ("Infinite_Set.MOST_SucD", "MOST n. ?P (Suc n) ==> MOST n. ?P n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("Relation.sym_INTER",
     "ALL x:?S. sym (?r x) ==> sym (\<Inter> (?r ` ?S))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Relation.trans_INTER",
     "ALL x:?S. trans (?r x) ==> trans (\<Inter> (?r ` ?S))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("List.filter_True", "ALL x:set ?xs. ?P x ==> filter ?P ?xs = ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Tree.in_set_tree_if",
     "\<langle>?l, ?a, ?r\<rangle> : subtrees ?t ==> ?a : set_tree ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Product_Type.SigmaD2", "(?a, ?b) : Sigma ?A ?B ==> ?b : ?B ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 0, template_var 3))
           ))),
    ("Topological_Spaces.LIM_const_eq",
     "(%x. ?k) \<midarrow>?a\<rightarrow> ?L ==> ?k = ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty),
                template_app (template_hole 3, template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_equation (template_var 2, template_var 1))),
    ("Fun_More.atLeastLessThan_injective2",
     "bij_betw ?f {0..<?m} {0..<?n} ==> ?m = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Topological_Spaces.continuous_at_imp_continuous_on",
     "ALL x:?s. isCont ?f x ==> continuous_on ?s ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Countable_Set_Type.equals_cemptyI",
     "(!!y. cin y ?A ==> False) ==> ?A = cempty",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Transitive_Closure.acyclicI", "ALL x. (x, x) ~: ?r^+ ==> acyclic ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Tree.complete_if_size1_height",
     "size1 ?t = 2 ^ height ?t ==> Tree.complete ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Tree.complete_if_size1_min_height",
     "size1 ?t = 2 ^ min_height ?t ==> Tree.complete ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.finite_rtrancl_Image",
     "[| finite ?R; finite ?A |] ==> finite (?R^* `` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Transitive_Closure.finite_relpow",
     "[| finite ?R; 0 < ?n |] ==> finite (?R ^^ ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.strict_mono_compose",
     "[| strict_mono ?r; strict_mono ?s |] ==> strict_mono (%x. ?r (?s x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Topological_Spaces.open_Times",
     "[| open ?S; open ?T |] ==> open (?S \<times> ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Topological_Spaces.open_vimage",
     "[| open ?s; continuous_on UNIV ?f |] ==> open (?f -` ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.closed_Times",
     "[| closed ?S; closed ?T |] ==> closed (?S \<times> ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Topological_Spaces.closed_vimage",
     "[| closed ?s; continuous_on UNIV ?f |] ==> closed (?f -` ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.connected_Times",
     "[| connected ?S; connected ?T |] ==> connected (?S \<times> ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Countable_Set_Type.cset_rev_mp",
     "[| cin ?c ?A; csubset_eq ?A ?B |] ==> cin ?c ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Countable_Set_Type.eq_cmem_trans",
     "[| ?a = ?b; cin ?b ?A |] ==> cin ?a ?A",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Countable_Set_Type.cpsubsetD",
     "[| csubset ?A ?B; cin ?c ?A |] ==> cin ?c ?B",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Countable_Set_Type.cpsubset_trans",
     "[| csubset ?A ?B; csubset ?B ?C |] ==> csubset ?A ?C",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Countable_Set_Type.cpsubset_csubset_trans",
     "[| csubset ?A ?B; csubset_eq ?B ?C |] ==> csubset ?A ?C",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Countable_Set_Type.cset_mp",
     "[| csubset_eq ?A ?B; cin ?c ?A |] ==> cin ?c ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Countable_Set_Type.csubset_cpsubset_trans",
     "[| csubset_eq ?A ?B; csubset ?B ?C |] ==> csubset ?A ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Countable_Set_Type.cequalityI",
     "[| csubset_eq ?A ?B; csubset_eq ?B ?A |] ==> ?A = ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation (template_var 1, template_var 0))),
    ("Countable_Set_Type.csubset_trans",
     "[| csubset_eq ?A ?B; csubset_eq ?B ?C |] ==> csubset_eq ?A ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Topological_Spaces.compact_continuous_image",
     "[| continuous_on ?s ?f; compact ?s |] ==> compact (?f ` ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.connected_continuous_image",
     "[| continuous_on ?s ?f; connected ?s |] ==> connected (?f ` ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.continuous_on_subset",
     "[| continuous_on ?s ?f; ?t <= ?s |] ==> continuous_on ?t ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Countable_Set_Type.cDiffD2",
     "[| cin ?c (cDiff ?A ?B); cin ?c ?B |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("Transcendental.DERIV_cos_add",
     "((%x. cos (x + ?k)) has_field_derivative - sin (?xa + ?k)) (at ?xa)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1)))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Transcendental.tendsto_exp_limit_sequentially",
     "(%n. (1 + ?x / real n) ^ n) \<longlonglongrightarrow> exp ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Transfer.if_conn",
     "(if ?P & ?Q then ?t else ?e) =
      (if ?P then if ?Q then ?t else ?e else ?e)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Transfer.if_conn",
     "(if ?P | ?Q then ?t else ?e) =
      (if ?P then ?t else if ?Q then ?t else ?e)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Transfer.if_conn",
     "(if ?P --> ?Q then ?t else ?e) =
      (if ?P then if ?Q then ?t else ?e else ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1))),
    ("Product_Type.Pair_vimage_Sigma",
     "Pair ?x -` Sigma ?A ?f = (if ?x : ?A then ?f ?x else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app (template_var 0, template_var 2)),
         template_hole 0))),
    ("Set_Interval.image_diff_atLeastLessThan",
     "(-) ?c ` {?a..<?b} = {?c - ?b<..?c - ?a}",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("Set_Interval.image_minus_const_greaterThanAtMost",
     "(-) ?c ` {?a<..?b} = {?c - ?b..<?c - ?a}",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("Set_Interval.image_add_int_atLeastLessThan",
     "(%x. x + ?l) ` {0..<?u - ?l} = {?l..<?u}",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Transcendental.cosh_zero_iff",
     "(cosh ?x = (0::?'a)) = ((exp ?x)\<^sup>2 = - (1::?'a))",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, template_var 0), template_hole 7),
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app (template_hole 1, template_hole 0)))),
    ("Transcendental.sinh_zero_iff",
     "(sinh ?x = (0::?'a)) = (exp ?x : {1::?'a, - (1::?'a)})",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_hole 6),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_hole 2)),
             template_hole 0))))),
    ("Countable_Set_Type.cDiff_iff",
     "cin ?c (cDiff ?A ?B) = (cin ?c ?A & ~ cin ?c ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("Topological_Spaces.continuous_at",
     "isCont ?f ?x = ?f \<midarrow>?x\<rightarrow> ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 0,
             template_app (template_var 0, template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_hole 2)))),
    ("Topological_Spaces.continuous_within",
     "continuous (at ?x within ?s) ?f =
      (?f \<longlongrightarrow> ?f ?x) (at ?x within ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 0,
             template_app (template_var 0, template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("Countable_Set_Type.cBall_cUN",
     "cBall (cUnion (cimage ?B ?A)) ?P = cBall ?A (%x. cBall (?B x) ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Countable_Set_Type.cBex_cUN",
     "cBex (cUnion (cimage ?B ?A)) ?P = cBex ?A (%x. cBex (?B x) ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Countable_Set_Type.cUN_iff",
     "cin ?b (cUnion (cimage ?B ?A)) = cBex ?A (%x. cin ?b (?B x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Product_Type.Times_empty",
     "(?A \<times> ?B = {}) = (?A = {} | ?B = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), t_empty),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Countable_Set_Type.cUNION_cempty_conv",
     "(cempty = cUnion (cimage ?B ?A)) = cBall ?A (%x. ?B x = cempty)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Countable_Set_Type.cUNION_cempty_conv",
     "(cUnion (cimage ?B ?A) = cempty) = cBall ?A (%x. ?B x = cempty)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Countable_Set_Type.cUN_csubset_iff",
     "csubset_eq (cUnion (cimage ?A ?I)) ?B =
      cBall ?I (%i. csubset_eq (?A i) ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Transcendental.powser_sums_zero_iff",
     "(%n. ?a n * (0::?'a) ^ n) sums ?x = (?a 0 = ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_equation
        (template_app (template_var 1, template_hole 0), template_var 0))),
    ("Transcendental.cos_arctan",
     "cos (arctan ?x) = 1 / sqrt (1 + ?x\<^sup>2)",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 6),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Transcendental.sin_arctan",
     "sin (arctan ?x) = ?x / sqrt (1 + ?x\<^sup>2)",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Transcendental.numeral_powr_inverse_eq",
     "numeral ?x powr inverse (numeral ?n) =
      numeral ?x powr (1 / numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Transcendental.square_powr_half",
     "?x\<^sup>2 powr (1 / 2) = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 5, template_hole 4)))),
       template_app (template_hole 0, template_var 0))),
    ("Countable_Set_Type.cUN_cinsert",
     "cUnion (cimage ?B (cinsert ?a ?A)) =
      cUn (?B ?a) (cUnion (cimage ?B ?A))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Transcendental.real_le_abs_sinh",
     "\<bar>?x\<bar> <= \<bar>(exp ?x - inverse (exp ?x)) / 2\<bar>",
     template_inequation
      (less_equals, template_app (template_hole 7, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 4, template_var 0)))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.sin_cos_le1",
     "\<bar>sin ?x * sin ?y + cos ?x * cos ?y\<bar> <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0)))),
       template_hole 0)),
    ("Countable_Set_Type.ordLeq_countable_subsets",
     "|?A| \<le>o |{X. X <= ?A & countable X}|",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, t_empty)))),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?A (rel_fun (rel_fun (=) (rel_fun ?A ?A)) (rel_fun (=) ?A)))
       rec_nat rec_nat",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 0))),
                   template_app
                    (template_app (template_hole 2, template_hole 4),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?B ?C) (rel_fun (rel_fun ?A ?B) (rel_fun ?A ?C)))
       (o) (o)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A ?B) (rel_fun (rel_prod ?A ?C) (rel_prod ?B ?C)))
       apfst apfst",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?B ?C)) (rel_fun (rel_prod ?A ?B) ?C))
       case_prod case_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R (rel_fun (stream_all2 ?R) ?S))
         (rel_fun (stream_all2 ?R) ?S))
       case_stream case_stream",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun (rel_prod ?A ?B) ?C) (rel_fun ?A (rel_fun ?B ?C)))
       curry curry",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Topological_Spaces.LIMSEQ_INF",
     "decseq ?X ==> ?X \<longlonglongrightarrow> Inf (range ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_hole 1)))),
             template_hole 0)
           ))),
    ("Topological_Spaces.LIMSEQ_SUP",
     "incseq ?X ==> ?X \<longlonglongrightarrow> Sup (range ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_hole 1)))),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?A (=))) (=)) reflp reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?A (=))) rev_implies) reflp
       reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_hole 3))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?A rev_implies)) rev_implies) reflp
       reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun ?A (rel_fun (list_all2 ?A) (list_all2 ?A)))
       List.insert List.insert",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app (template_hole 2, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun ?A (rel_fun (list_all2 ?A) (list_all2 ?A)))
       remove1 remove1",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app (template_hole 2, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun ?A (rel_fun (list_all2 ?A) (list_all2 ?A)))
       removeAll removeAll",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app (template_hole 2, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (rel_set ?A) (rel_fun (rel_set ?A) (=))) (<)
       (<)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (rel_set ?A) (rel_fun (rel_set ?A) (=))) (<=)
       (<=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (rel_filter ?A) (rel_fun (rel_filter ?A) (=)))
       (<) (<)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (rel_filter ?A) (rel_fun (rel_filter ?A) (=)))
       (<=) (<=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "is_equality ?a1 ==>
      Transfer.Rel (rel_fun (list_all2 ?A) (rel_fun ?a1 (list_all2 ?A)))
       nths nths",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 3, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.Domainp_pred_fun_eq",
     "left_unique ?T ==>
      Domainp (rel_fun ?T ?S) = pred_fun (Domainp ?T) (Domainp ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Transfer.right_total_All_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (=)) (=) (Ball (Collect (Domainp ?A))) All",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_hole 4),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("Transfer.right_total_Ex_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (=)) (=) (Bex (Collect (Domainp ?A))) Ex",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_hole 4),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "right_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?A (=))) (-->)) reflp
       reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_hole 3))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "right_total ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?A (-->))) (-->)) reflp
       reflp",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cinsert_cDiff",
     "cin ?a ?A ==> cinsert ?a (cDiff ?A (csingle ?a)) = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Countable_Set_Type.cinsert_cDiff1",
     "cin ?x ?B ==> cDiff (cinsert ?x ?A) ?B = cDiff ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Cardinal_Order_Relation.Times_same_infinite_bij_betw",
     "infinite ?A ==> EX f. bij_betw f (?A \<times> ?A) ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Tree.size1_height_if_incomplete",
     "~ Tree.complete ?t ==> size1 ?t < 2 ^ height ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_inequation
        (less_than, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Tree.min_height_size1_if_incomplete",
     "~ Tree.complete ?t ==> 2 ^ min_height ?t < size1 ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.tendsto_eq_intros",
     "(0::?'a1) = ?y ==>
      (%n. (1::?'a1) / of_nat n) \<longlonglongrightarrow> ?y",
     template_implication
      ([template_equation (template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "(0::?'a1) = ?y ==> (%n. ?a1 / of_nat n) \<longlonglongrightarrow> ?y",
     template_implication
      ([template_equation (template_hole 5, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 1, template_var 1)),
             template_hole 0)
           ))),
    ("Transcendental.powr_eq_one_iff",
     "1 < ?a ==> (?a powr ?x = 1) = (?x = 0)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 4),
         template_equation (template_var 0, template_hole 0)))),
    ("Transcendental.ln_ge_iff",
     "0 < ?x ==> (?y <= ln ?x) = (exp ?y <= ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Set_Interval.image_atLeastZeroLessThan_int",
     "0 <= ?u ==> {0..<?u} = int ` {..<nat ?u}",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 6), template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Transcendental.powr_numeral",
     "0 <= ?x ==> ?x powr numeral ?n = ?x ^ numeral ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.inverse_powr",
     "0 <= ?y ==> inverse ?y powr ?a = inverse (?y powr ?a)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.INT_lower",
     "?a : ?A ==> \<Inter> (?B ` ?A) <= ?B ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1)),
         template_app (template_var 0, template_var 2)))),
    ("Product_Type.case_prodI",
     "?f ?a ?b ==> case (?a, ?b) of (c, d) => ?f c d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "Domainp ?T = ?DT1 ==> Domainp (rel_set ?T) = (%A. Ball A ?DT1)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Transcendental.sin_zero_pi_iff",
     "\<bar>?x\<bar> < pi ==> (sin ?x = 0) = (?x = 0)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 0),
          template_hole 4)],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Topological_Spaces.tendsto_intros",
     "norm ?x < 1 ==> (^) ?x \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.arccos_minus_abs",
     "\<bar>?x\<bar> <= 1 ==> arccos (- ?x) = pi - arccos ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Topological_Spaces.sequentially_offset",
     "eventually ?P sequentially ==>
      \<forall>\<^sub>F i in sequentially. ?P (i + ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Transcendental.sin_pi_divide_n_gt_0",
     "2 <= ?n ==> 0 < sin (pi / real ?n)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 0)],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Transitive_Closure.trancl_into_rtrancl",
     "(?a, ?b) : ?r^+ ==> (?a, ?b) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Countable_Set_Type.cDiff_single_cinsert",
     "csubset_eq (cDiff ?A (csingle ?x)) ?B ==>
      csubset_eq ?A (cinsert ?x ?B)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)),
          template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Product_Type.case_prodD",
     "case (?a, ?b) of (c, d) => ?f c d ==> ?f ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Countable_Set_Type.cset_eqI",
     "(!!x. cin x ?A = cin x ?B) ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Countable_Set_Type.cBallI",
     "(!!x. cin x ?A ==> ?P x) ==> cBall ?A ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| finite ?S; ALL T:?S. open T |] ==> open (\<Inter> ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| finite ?S; ALL T:?S. closed T |] ==> closed (\<Union> ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topological_Spaces.decseqD",
     "[| decseq ?f; ?i <= ?j |] ==> ?f ?j <= ?f ?i",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_app (template_var 2, template_var 1)))),
    ("Topological_Spaces.incseqD",
     "[| incseq ?f; ?i <= ?j |] ==> ?f ?i <= ?f ?j",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Topological_Spaces.strict_mono_leD",
     "[| strict_mono ?r; ?m <= ?n |] ==> ?r ?m <= ?r ?n",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Transcendental.ln_less_zero", "[| 0 < ?x; ?x < 1 |] ==> ln ?x < 0",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_hole 2))),
    ("Transcendental.sin_gt_zero", "[| 0 < ?x; ?x < pi |] ==> 0 < sin ?x",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_inequation
        (less_than, template_hole 2,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_ge_zero",
     "[| 0 <= ?x; ?x <= pi |] ==> 0 <= sin ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_hole 2,
         template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cpsubsetI",
     "[| csubset_eq ?A ?B; ?A ~= ?B |] ==> csubset ?A ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Transcendental.ln_gt_zero_imp_gt_one",
     "[| 0 < ln ?x; 0 < ?x |] ==> 1 < ?x",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 0)),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("Transcendental.ln_ge_zero_imp_ge_one",
     "[| 0 <= ln ?x; 0 < ?x |] ==> 1 <= ?x",
     template_implication
      ([template_inequation
         (less_equals, template_hole 3,
          template_app (template_hole 2, template_var 0)),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Countable_Set_Type.fsingletonE",
     "[| cin ?b (csingle ?a); ?b = ?a ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.rel_cset_parametric",
     "rel_fun (rel_fun ?A (rel_fun ?B (=)))
       (rel_fun (rel_cset ?A) (rel_fun (rel_cset ?B) (=))) rel_cset
       rel_cset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 6))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 6))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.prod_pred_parametric",
     "rel_fun (rel_fun ?A (=))
       (rel_fun (rel_fun ?B (=)) (rel_fun (rel_prod ?A ?B) (=))) pred_prod
       pred_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_hole 6))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transcendental.arsinh_real_has_field_derivative",
     "(arsinh has_real_derivative 1 / sqrt (?x\<^sup>2 + 1))
       (at ?x within ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1)))),
                   template_hole 7)))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Transcendental.cos_squared_eq",
     "(cos ?x)\<^sup>2 = (1::?'a) - (sin ?x)\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))))),
    ("Transcendental.cosh_square_eq",
     "(cosh ?x)\<^sup>2 = (sinh ?x)\<^sup>2 + (1::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 0))),
    ("Transcendental.sin_squared_eq",
     "(sin ?x)\<^sup>2 = (1::?'a) - (cos ?x)\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))))),
    ("Transcendental.sinh_square_eq",
     "(sinh ?x)\<^sup>2 = (cosh ?x)\<^sup>2 - (1::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 0))),
    ("Transcendental.hyperbolic_pythagoras",
     "(cosh ?x)\<^sup>2 - (sinh ?x)\<^sup>2 = (1::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_hole 0)),
    ("Transcendental.sin_cos_squared_add2",
     "(cos ?x)\<^sup>2 + (sin ?x)\<^sup>2 = (1::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_hole 0)),
    ("Transcendental.sin_cos_squared_add",
     "(sin ?x)\<^sup>2 + (cos ?x)\<^sup>2 = (1::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_hole 0)),
    ("Relation.Inf_INT_eq2",
     "Inf ?S = (%x y. (x, y) : \<Inter> (Collect ` case_prod ` ?S))",
     template_equation
      (template_app (template_hole 7, template_var 0), t_empty)),
    ("Product_Type.split_part",
     "(%(a, b). ?P & ?Q a b) = (%ab. ?P & (case ab of (x, xa) => ?Q x xa))",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("Product_Type.map_prod_compose",
     "map_prod (?f1.0 o ?f2.0) (?g1.0 o ?g2.0) =
      map_prod ?f1.0 ?g1.0 o map_prod ?f2.0 ?g2.0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complete_Lattices.Compl_INT",
     "- \<Inter> (?B ` ?A) = (UN x:?A. - ?B x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Set_Interval.atLeastLessThanSuc",
     "{?m..<Suc ?n} = (if ?m <= ?n then insert ?n {?m..<?n} else {})",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("Complete_Lattices.Pow_INT_eq",
     "Pow (\<Inter> (?B ` ?A)) = (INT x:?A. Pow (?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Product_Type.prod_eq_iff",
     "(?s = ?t) = (fst ?s = fst ?t & snd ?s = snd ?t)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Topological_Spaces.tendsto_compose_filtermap",
     "((?g o ?f) \<longlongrightarrow> ?T) ?F =
      (?g \<longlongrightarrow> ?T) (filtermap ?f ?F)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Product_Type.Sigma_empty_iff",
     "(Sigma ?I ?X = {}) = (ALL i:?I. ?X i = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 1), t_empty))),
    ("Product_Type.apfst_eq_conv",
     "(apfst ?f ?x = apfst ?g ?x) = (?f (fst ?x) = ?g (fst ?x))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0), template_var 1)),
       template_equation
        (template_app
          (template_var 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("Product_Type.apsnd_eq_conv",
     "(apsnd ?f ?x = apsnd ?g ?x) = (?f (snd ?x) = ?g (snd ?x))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0), template_var 1)),
       template_equation
        (template_app
          (template_var 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("Countable_Set_Type.cUn_cInt_assoc_eq",
     "(cUn (cInt ?A ?B) ?C = cInt ?A (cUn ?B ?C)) = csubset_eq ?C ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("Transcendental.cos_npi_int",
     "cos (pi * real_of_int ?n) = (if even ?n then 1 else - 1)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app (template_hole 7, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0)),
           template_hole 1),
         template_app (template_hole 0, template_hole 1)))),
    ("Product_Type.The_split_eq",
     "(THE (x', y'). ?x = x' & ?y = y') = (?x, ?y)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.cimage_cUN",
     "cimage ?f (cUnion (cimage ?B ?A)) =
      cUnion (cimage (%x. cimage ?f (?B x)) ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Transcendental.binomial_maximum'",
     "2 * ?n choose ?k <= 2 * ?n choose ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 1))),
    ("Relation.Image_INT_subset",
     "?r `` \<Inter> (?B ` ?A) <= (INT x:?A. ?r `` ?B x)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Transcendental.isCont_polynom",
     "isCont (%w. SUM i<=?n. ?c i * w ^ i) ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_hole 4)),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?B (rel_fun ?A ?B))
         (rel_fun ?B (rel_fun (list_all2 ?A) ?B)))
       foldl foldl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?B ?B))
         (rel_fun (list_all2 ?A) (rel_fun ?B ?B)))
       fold fold",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?B ?B))
         (rel_fun (list_all2 ?A) (rel_fun ?B ?B)))
       foldr foldr",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (=))
         (rel_fun (list_all2 ?A) (rel_prod (list_all2 ?A) (list_all2 ?A))))
       partition partition",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 3, template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (list_all2 ?R) (=)) (%list. list ~= [])
       (%list. list ~= [])",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_hole 5)),
             t_empty),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_tree ?R) (=))
       (%tree. tree ~= \<langle>\<rangle>)
       (%tree. tree ~= \<langle>\<rangle>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_hole 5)),
             t_empty),
           t_empty)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel (rel_fun (rel_option ?R) (=)) (%option. option ~= None)
       (%option. option ~= None)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_hole 5)),
             t_empty),
           t_empty)
         )),
    ("Transcendental.exp_sum",
     "finite ?I ==> exp (sum ?f ?I) = (PROD x:?I. exp (?f x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Transfer.Domainp_transfer",
     "bi_total ?B ==>
      rel_fun (rel_fun ?A (rel_fun ?B (=))) (rel_fun ?A (=)) Domainp
       Domainp",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 3)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.eq_onp_transfer",
     "bi_unique ?A ==>
      rel_fun (rel_fun ?A (=)) (rel_fun ?A (rel_fun ?A (=))) eq_onp eq_onp",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel
       (rel_fun (rel_set ?A) (rel_fun (rel_set ?A) (rel_set ?A))) (-) (-)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 3, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel
       (rel_fun (rel_set ?A) (rel_fun (rel_set ?A) (rel_set ?A))) (Int)
       (Int)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 3, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Tree.size_if_complete",
     "Tree.complete ?t ==> size ?t = 2 ^ height ?t - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Countable_Set_Type.cinsert_cimage",
     "cin ?x ?A ==> cinsert (?f ?x) (cimage ?f ?A) = cimage ?f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transcendental.exp_divide_power_eq",
     "0 < ?n ==> exp (?x / of_nat ?n) ^ ?n = exp ?x",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1)))),
           template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Transcendental.ln_sqrt", "0 < ?x ==> ln (sqrt ?x) = ln ?x / 2",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.ln_realpow",
     "0 < ?x ==> ln (?x ^ ?n) = real ?n * ln ?x",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("Transcendental.card_roots_unity",
     "1 <= ?n ==> card {z. z ^ ?n = (1::?'a)} <= ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_var 0))),
    ("Transcendental.powr_half_sqrt",
     "0 <= ?x ==> ?x powr (1 / 2) = sqrt ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cos_integer_2pi",
     "?n : \<int> ==> cos (2 * pi * ?n) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_hole 1)),
             template_var 0)),
         template_hole 0))),
    ("Transcendental.sin_integer_2pi",
     "?n : \<int> ==> sin (2 * pi * ?n) = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_hole 1)),
             template_var 0)),
         template_hole 0))),
    ("Countable_Set_Type.cInt_cinsert_right_if0",
     "~ cin ?a ?A ==> cInt ?A (cinsert ?a ?B) = cInt ?A ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cInt_cinsert_left_if0",
     "~ cin ?a ?C ==> cInt (cinsert ?a ?B) ?C = cInt ?B ?C",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Countable_Set_Type.csubset_cinsert",
     "~ cin ?x ?A ==> csubset_eq ?A (cinsert ?x ?B) = csubset_eq ?A ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cDiff_cinsert0",
     "~ cin ?x ?A ==> cDiff ?A (cinsert ?x ?B) = cDiff ?A ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cDiff_cinsert_absorb",
     "~ cin ?x ?A ==> cDiff (cinsert ?x ?A) (csingle ?x) = ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Topological_Spaces.LIM_const_not_eq",
     "?k ~= ?L ==> ~ (%x. ?k) \<midarrow>?a\<rightarrow> ?L",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, t_empty),
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))
               )
           ))),
    ("Topological_Spaces.LIM_not_zero",
     "?k ~= (0::?'aa) ==> ~ (%x. ?k) \<midarrow>?a\<rightarrow> (0::?'aa)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, t_empty),
                   template_app (template_hole 2, template_hole 4)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))
               )
           ))),
    ("Transcendental.ln_powr", "?x ~= 0 ==> ln (?x powr ?y) = ?y * ln ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Transitive_Closure.rtrancl_imp_UN_relpow",
     "?p : ?R^* ==> ?p : \<Union> (range ((^^) ?R))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty), template_hole 0)))
           ))),
    ("Transitive_Closure.rtranclp_imp_Sup_relpowp",
     "?P^** ?x ?y ==> Sup (range ((^^) ?P)) ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_hole 0)),
               template_var 1),
             template_var 0)
           ))),
    ("Topological_Spaces.LIMSEQ_Suc",
     "?f \<longlonglongrightarrow> ?l ==>
      (%n. ?f (Suc n)) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_hole 1)
           ))),
    ("Tree.Node_notin_subtrees_if",
     "?a ~: set_tree ?t ==> \<langle>?l, ?a, ?r\<rangle> ~: subtrees ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 3),
                     template_var 0)),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("Transcendental.isCont_cos'",
     "isCont ?f ?a ==> isCont (%x. cos (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Transcendental.isCont_sin'",
     "isCont ?f ?a ==> isCont (%x. sin (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Topological_Spaces.isContD",
     "isCont ?f ?x ==> ?f \<midarrow>?x\<rightarrow> ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2))
           ))),
    ("Topological_Spaces.isCont_fst",
     "isCont ?f ?a ==> isCont (%x. fst (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_snd",
     "isCont ?f ?a ==> isCont (%x. snd (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Transcendental.isCont_exp'",
     "isCont ?f ?a ==> isCont (%x. exp (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("T.not_inImage_iimg", "?a ~: ?f ` ?B ==> iimg ?B ?f ?a = ?f ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("Transitive_Closure.trancl_subset_Sigma",
     "?r <= ?A \<times> ?A ==> ?r^+ <= ?A \<times> ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 0), t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Topological_Spaces.continuous_intros",
     "ALL x:?A. open (?B x) ==> open (\<Union> (?B ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Topological_Spaces.continuous_intros",
     "ALL x:?A. closed (?B x) ==> closed (\<Inter> (?B ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Finite_Set.finite_INT",
     "EX x:?I. finite (?A x) ==> finite (\<Inter> (?A ` ?I))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Transitive_Closure.rtrancl_converseI",
     "(?y, ?x) : ?r^* ==> (?x, ?y) : (?r^-1)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Transitive_Closure.rtrancl_converseD",
     "(?x, ?y) : (?r^-1)^* ==> (?y, ?x) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Topological_Spaces.LIMSEQ_imp_Suc",
     "(%n. ?f (Suc n)) \<longlonglongrightarrow> ?l ==>
      ?f \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Countable_Set_Type.csubsetI",
     "(!!x. cin x ?A ==> cin x ?B) ==> csubset_eq ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Topological_Spaces.decseq_ge",
     "[| decseq ?X; ?X \<longlonglongrightarrow> ?L |] ==> ?L <= ?X ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_var 2, template_var 0)))),
    ("Topological_Spaces.incseq_le",
     "[| incseq ?X; ?X \<longlonglongrightarrow> ?L |] ==> ?X ?n <= ?L",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_var 1))),
    ("Topological_Spaces.eventually_subseq",
     "[| strict_mono ?r; eventually ?P sequentially |]
      ==> \<forall>\<^sub>F n in sequentially. ?P (?r n)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Transfer.Ex1_parametric",
     "[| bi_unique ?A; bi_total ?A |]
      ==> rel_fun (rel_fun ?A (=)) (=) Ex1 Ex1",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.right_totalE",
     "[| right_total ?A; !!x. ?A x ?y ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cIntI",
     "[| cin ?c ?A; cin ?c ?B |] ==> cin ?c (cInt ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transfer.transfer_prover_start",
     "[| ?x = ?x'; Transfer.Rel ?R ?x' ?y |] ==> Transfer.Rel ?R ?x ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Transcendental.gr_one_powr",
     "[| 1 < ?x; 0 < ?y |] ==> 1 < ?x powr ?y",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.ge_one_powr_ge_zero",
     "[| 1 <= ?x; 0 <= ?a |] ==> 1 <= ?x powr ?a",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.cosh_real_strict_mono",
     "[| 0 <= ?x; ?x < ?y |] ==> cosh ?x < cosh ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.arccos_cos",
     "[| 0 <= ?x; ?x <= pi |] ==> arccos (cos ?x) = ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Countable_Set_Type.contra_csubsetD",
     "[| csubset_eq ?A ?B; ~ cin ?c ?B |] ==> ~ cin ?c ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)
               )
           ))),
    ("Countable_Set_Type.cUn_least",
     "[| csubset_eq ?A ?C; csubset_eq ?B ?C |]
      ==> csubset_eq (cUn ?A ?B) ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Countable_Set_Type.cInt_greatest",
     "[| csubset_eq ?C ?A; csubset_eq ?C ?B |]
      ==> csubset_eq ?C (cInt ?A ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.converse_rtranclp_into_rtranclp",
     "[| ?r ?a ?b; ?r^** ?b ?c |] ==> ?r^** ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.rtranclp_into_tranclp2",
     "[| ?r ?a ?b; ?r^** ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.tranclp_into_tranclp2",
     "[| ?r ?a ?b; ?r^++ ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transcendental.arccos_lbound",
     "[| - 1 <= ?y; ?y <= 1 |] ==> 0 <= arccos ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.arccos_ubound",
     "[| - 1 <= ?y; ?y <= 1 |] ==> arccos ?y <= pi",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("Transitive_Closure.trancl_mono",
     "[| ?p : ?r^+; ?r <= ?s |] ==> ?p : ?s^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Transitive_Closure.transitive_closurep_trans'",
     "[| ?r^** ?a ?b; ?r ?b ?c |] ==> ?r^** ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.rtranclp_into_tranclp1",
     "[| ?r^** ?a ?b; ?r ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.transitive_closurep_trans'",
     "[| ?r^++ ?a ?b; ?r ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Countable_Set_Type.countable_ordLeq",
     "[| |?A| \<le>o |?B|; countable ?B |] ==> countable ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_app (template_hole 3, template_var 0))),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Countable_Set_Type.countable_ordLess",
     "[| |?A| <o |?B|; countable ?B |] ==> countable ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_app (template_hole 3, template_var 0))),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Product_Type.case_swap",
     "(case prod.swap ?p of (y, x) => ?f x y) =
      (case ?p of (x, y) => ?f x y)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Product_Type.case_prod_comp",
     "(case ?x of (a, b) => (?f o ?g) a b) = ?f (?g (fst ?x)) (snd ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_var 2,
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Set_Interval.sum_lessThan_telescope'",
     "(SUM n<?m. ?f n - ?f (Suc n)) = ?f 0 - ?f ?m",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 1, template_hole 0)),
         template_app (template_var 1, template_var 0)))),
    ("Set_Interval.sum_lessThan_telescope",
     "(SUM n<?m. ?f (Suc n) - ?f n) = ?f ?m - ?f 0",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 1, template_var 0)),
         template_app (template_var 1, template_hole 0)))),
    ("Transcendental.tanh_altdef",
     "tanh ?x = (exp ?x - exp (- ?x)) / (exp ?x + exp (- ?x))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))))),
    ("Transcendental.cos_diff",
     "cos (?x - ?y) = cos ?x * cos ?y + sin ?x * sin ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.cos_add",
     "cos (?x + ?y) = cos ?x * cos ?y - sin ?x * sin ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.cosh_diff",
     "cosh (?x - ?y) = cosh ?x * cosh ?y - sinh ?x * sinh ?y",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.cosh_add",
     "cosh (?x + ?y) = cosh ?x * cosh ?y + sinh ?x * sinh ?y",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.sin_diff",
     "sin (?x - ?y) = sin ?x * cos ?y - cos ?x * sin ?y",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Transcendental.sin_add",
     "sin (?x + ?y) = sin ?x * cos ?y + cos ?x * sin ?y",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Transcendental.sinh_diff",
     "sinh (?x - ?y) = sinh ?x * cosh ?y - cosh ?x * sinh ?y",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Transcendental.sinh_add",
     "sinh (?x + ?y) = sinh ?x * cosh ?y + cosh ?x * sinh ?y",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Transcendental.sin_double",
     "sin ((2::?'a) * ?x) = (2::?'a) * sin ?x * cos ?x",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sinh_double",
     "sinh ((2::?'a) * ?x) = (2::?'a) * sinh ?x * cosh ?x",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.exp_first_term",
     "exp ?x = (1::?'a) + (\<Sum>n. ?x ^ Suc n /\<^sub>R fact (Suc n))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app (template_hole 5, t_empty)))),
    ("Complete_Lattices.INTER_eq",
     "\<Inter> (?B ` ?A) = {y. ALL x:?A. y : ?B x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.INT_insert",
     "\<Inter> (?B ` insert ?a ?A) = ?B ?a Int \<Inter> (?B ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT a:?A. ?B (?f a)) = \<Inter> (?B ` ?f ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?B ` ?f ` ?A) = (INT a:?A. ?B (?f a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Product_Type.Times_Diff_distrib1",
     "(?A - ?B) \<times> ?C = ?A \<times> ?C - ?B \<times> ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Product_Type.Times_Int_distrib1",
     "(?A Int ?B) \<times> ?C = ?A \<times> ?C Int ?B \<times> ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Product_Type.Times_Un_distrib1",
     "(?A Un ?B) \<times> ?C = ?A \<times> ?C Un ?B \<times> ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Product_Type.Sigma_Diff_distrib2",
     "(SIGMA i:?I. ?A i - ?B i) = Sigma ?I ?A - Sigma ?I ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Product_Type.Sigma_Int_distrib2",
     "(SIGMA i:?I. ?A i Int ?B i) = Sigma ?I ?A Int Sigma ?I ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Product_Type.Sigma_Un_distrib2",
     "(SIGMA i:?I. ?A i Un ?B i) = Sigma ?I ?A Un Sigma ?I ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Product_Type.Collect_case_prod",
     "{(a, b). ?P a & ?Q b} = Collect ?P \<times> Collect ?Q",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Product_Type.swap_product",
     "(%(i, j). (j, i)) ` (?A \<times> ?B) = ?B \<times> ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Transcendental.Sigma_interval_disjoint",
     "(SIGMA i:?A. {..?v i}) Int (SIGMA i:?A. {?v i<..?w}) = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2), t_empty)),
         template_app
          (template_app (template_hole 3, template_var 2), t_empty)),
       template_hole 0)),
    ("Sum_Type.split_sum_all",
     "(ALL x. ?P x) = ((ALL x. ?P (Inl x)) & (ALL x. ?P (Inr x)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Sum_Type.split_sum_ex",
     "(EX x. ?P x) = ((EX x. ?P (Inl x)) | (EX x. ?P (Inr x)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.trancl_power",
     "(?p : ?R^+) = (EX n>0. ?p : ?R ^^ n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Transitive_Closure.tranclp_power",
     "?P^++ ?x ?y = (EX n>0. (?P ^^ n) ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Infinite_Set.MOST_nat", "(MOST n. ?P n) = (EX m. ALL n>m. ?P n)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Infinite_Set.MOST_nat_le", "(MOST n. ?P n) = (EX m. ALL n>=m. ?P n)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Countable_Set_Type.disjoint_iff_cnot_equal",
     "(cInt ?A ?B = cempty) = cBall ?A (%x. cBall ?B ((~=) x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 1), t_empty))),
    ("Product_Type.mem_Times_iff",
     "(?x : ?A \<times> ?B) = (fst ?x : ?A & snd ?x : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Product_Type.mem_Sigma_iff",
     "((?a, ?b) : Sigma ?A ?B) = (?a : ?A & ?b : ?B ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app (template_var 0, template_var 3))))),
    ("Countable_Set_Type.cBall_conj_distrib",
     "cBall ?A (%x. ?P x & ?Q x) = (cBall ?A ?P & cBall ?A ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cBex_disj_distrib",
     "cBex ?A (%x. ?P x | ?Q x) = (cBex ?A ?P | cBex ?A ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Topological_Spaces.tendsto_at_iff_tendsto_nhds",
     "?g \<midarrow>?l\<rightarrow> ?g ?l =
      (?g \<longlongrightarrow> ?g ?l) (nhds ?l)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_var 1, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_var 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(UNIV = \<Inter> (?B ` ?A)) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(\<Inter> (?B ` ?A) = UNIV) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INT_subset_iff",
     "(?B <= \<Inter> (?A ` ?I)) = (ALL i:?I. ?B <= ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INT_iff",
     "(?b : \<Inter> (?B ` ?A)) = (ALL x:?A. ?b : ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Countable_Set_Type.cBall_one_point1",
     "cBall ?A (%x. x = ?a --> ?P x) = (cin ?a ?A --> ?P ?a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app (template_var 0, template_var 1)))),
    ("Countable_Set_Type.cBall_one_point2",
     "cBall ?A (%x. ?a = x --> ?P x) = (cin ?a ?A --> ?P ?a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app (template_var 0, template_var 1)))),
    ("Countable_Set_Type.cBex_one_point1",
     "cBex ?A (%x. x = ?a & ?P x) = (cin ?a ?A & ?P ?a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app (template_var 0, template_var 1)))),
    ("Countable_Set_Type.cBex_one_point2",
     "cBex ?A (%x. ?a = x & ?P x) = (cin ?a ?A & ?P ?a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app (template_var 0, template_var 1)))),
    ("Transcendental.cos_pi_eq_zero",
     "cos (pi * real (Suc (2 * ?m)) / 2) = 0",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 0))))),
           template_app
            (template_hole 1,
             template_app (template_hole 3, template_hole 2)))),
       template_hole 0)),
    ("Countable_Set_Type.cUN_cUn",
     "cUnion (cimage ?M (cUn ?A ?B)) =
      cUn (cUnion (cimage ?M ?A)) (cUnion (cimage ?M ?B))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?S
         (rel_fun (rel_fun ?R (rel_fun (list_all2 ?R) ?S))
           (rel_fun (list_all2 ?R) ?S)))
       case_list case_list",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 0)),
                         template_var 1))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R ?T)
         (rel_fun (rel_fun ?S ?T) (rel_fun (rel_sum ?R ?S) ?T)))
       case_sum case_sum",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?B (=)))
         (rel_fun (rel_set ?A) (rel_fun (rel_set ?B) (=))))
       rel_set rel_set",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Sa (rel_fun ?Sc (=)))
         (rel_fun (list_all2 ?Sa) (rel_fun (list_all2 ?Sc) (=))))
       list_all2 list_all2",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Sa (rel_fun ?Sc (=)))
         (rel_fun (rel_tree ?Sa) (rel_fun (rel_tree ?Sc) (=))))
       rel_tree rel_tree",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Sa (rel_fun ?Sc (=)))
         (rel_fun (rel_option ?Sa) (rel_fun (rel_option ?Sc) (=))))
       rel_option rel_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Sa (rel_fun ?Sc (=)))
         (rel_fun (stream_all2 ?Sa) (rel_fun (stream_all2 ?Sc) (=))))
       stream_all2 stream_all2",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Sa (rel_fun ?Sc (=)))
         (rel_fun (rel_trm ?Sa) (rel_fun (rel_trm ?Sc) (=))))
       rel_trm rel_trm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?B (=)))
         (rel_fun (rel_cset ?A) (rel_fun (rel_cset ?B) (=))))
       rel_cset rel_cset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?Sa (rel_fun ?Sc (=)))
         (rel_fun (rel_cset ?Sa) (rel_fun (rel_cset ?Sc) (=))))
       rel_cset rel_cset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1.0 (=))
         (rel_fun (rel_fun ?R2.0 (=))
           (rel_fun (rel_efsym ?R1.0 ?R2.0) (=))))
       pred_efsym pred_efsym",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1.0 (=))
         (rel_fun (rel_fun ?R2.0 (=)) (rel_fun (rel_sum ?R1.0 ?R2.0) (=))))
       pred_sum pred_sum",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1.0 (=))
         (rel_fun (rel_fun ?R2.0 (=)) (rel_fun (rel_prod ?R1.0 ?R2.0) (=))))
       pred_prod pred_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1.0 (=))
         (rel_fun (rel_fun ?R2.0 (=)) (rel_fun (rel_atm ?R1.0 ?R2.0) (=))))
       pred_atm pred_atm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1.0 (=))
         (rel_fun (rel_fun ?R2.0 (=)) (rel_fun (rel_lit ?R1.0 ?R2.0) (=))))
       pred_lit pred_lit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A (=))
         (rel_fun (rel_fun ?B (=)) (rel_fun (rel_prod ?A ?B) (=))))
       pred_prod pred_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_hole 6)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Topological_Spaces.continuous_on_eq_continuous_at",
     "open ?s ==> continuous_on ?s ?f = (ALL x:?s. isCont ?f x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)))),
    ("Transfer.transfer_raw",
     "bi_total ?B ==>
      Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?B (=))) (rel_fun ?A (=)))
       Domainp Domainp",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_hole 3))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 3))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_fun ?A (rel_fun ?A (=))))
       eq_onp eq_onp",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel
       (rel_fun (rel_fun ?A (=)) (rel_fun (rel_set ?A) (rel_set ?A)))
       Set.filter Set.filter",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app (template_hole 2, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cInt_cinsert_right_if1",
     "cin ?a ?A ==> cInt ?A (cinsert ?a ?B) = cinsert ?a (cInt ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Countable_Set_Type.cInt_cinsert_left_if1",
     "cin ?a ?C ==> cInt (cinsert ?a ?B) ?C = cinsert ?a (cInt ?B ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Transcendental.powr_less_cancel_iff",
     "1 < ?x ==> (?x powr ?a < ?x powr ?b) = (?a < ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Transcendental.powr_le_cancel_iff",
     "1 < ?x ==> (?x powr ?a <= ?x powr ?b) = (?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transcendental.powr_mult_base",
     "0 <= ?x ==> ?x * ?x powr ?y = ?x powr (1 + ?y)",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Transcendental.has_field_derivative_scaleR_right",
     "(?f has_field_derivative ?D) ?F ==>
      ((%x. ?c *\<^sub>R ?f x) has_field_derivative ?c *\<^sub>R ?D) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Transitive_Closure.tranclpD",
     "?R^++ ?x ?y ==> EX z. ?R ?x z & ?R^** z ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Topological_Spaces.tendsto_intros",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. norm (?f x)) \<longlongrightarrow> norm ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. \<bar>?f x\<bar>) \<longlongrightarrow> \<bar>?l\<bar>) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?f \<longlongrightarrow> ?x) ?F ==>
      ((%x. sqrt (?f x)) \<longlongrightarrow> sqrt ?x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_arctan",
     "(?f \<longlongrightarrow> ?x) ?F ==>
      ((%x. arctan (?f x)) \<longlongrightarrow> arctan ?x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_fst",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. fst (?f x)) \<longlongrightarrow> fst ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_snd",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. snd (?f x)) \<longlongrightarrow> snd ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_cos",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. cos (?f x)) \<longlongrightarrow> cos ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_sin",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. sin (?f x)) \<longlongrightarrow> sin ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. - ?f x) \<longlongrightarrow> - ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_arsinh",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. arsinh (?f x)) \<longlongrightarrow> arsinh ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_cosh",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. cosh (?f x)) \<longlongrightarrow> cosh ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_exp",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. exp (?f x)) \<longlongrightarrow> exp ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_sinh",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. sinh (?f x)) \<longlongrightarrow> sinh ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. of_real (?g x)) \<longlongrightarrow> of_real ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. Im (?g x)) \<longlongrightarrow> Im ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. Re (?g x)) \<longlongrightarrow> Re ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. cnj (?g x)) \<longlongrightarrow> cnj ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.LIMSEQ_ignore_initial_segment",
     "?f \<longlonglongrightarrow> ?a ==>
      (%n. ?f (n + ?k)) \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 1)),
             template_hole 1)
           ))),
    ("Topological_Spaces.seq_offset_neg",
     "?f \<longlonglongrightarrow> ?l ==>
      (%i. ?f (i - ?k)) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 1)),
             template_hole 1)
           ))),
    ("Countable_Set_Type.csubset_csingletonD",
     "csubset_eq ?A (csingle ?x) ==> ?A = cempty | ?A = csingle ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)))
           ))),
    ("Topological_Spaces.Lim_ident_at",
     "at ?x within ?s ~= bot ==> Lim (at ?x within ?s) (%x. x) = ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           t_empty),
         template_var 1))),
    ("Transitive_Closure.irrefl_tranclI",
     "?r^-1 Int ?r^* = {} ==> (?x, ?x) ~: ?r^+",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 5, template_var 1)),
          template_hole 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 0)),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Transitive_Closure.trancl_converseI",
     "(?x, ?y) : (?r^+)^-1 ==> (?x, ?y) : (?r^-1)^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Transitive_Closure.trancl_converseD",
     "(?x, ?y) : (?r^-1)^+ ==> (?x, ?y) : (?r^+)^-1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Topological_Spaces.LIMSEQ_offset",
     "(%n. ?f (n + ?k)) \<longlonglongrightarrow> ?a ==>
      ?f \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Transcendental.tan_bound_pi2",
     "\<bar>?x\<bar> < pi / 4 ==> \<bar>tan ?x\<bar> < 1",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 3, template_hole 2)))))],
       template_inequation
        (less_than,
         template_app
          (template_hole 7, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Countable_Set_Type.cinsertCI",
     "(~ cin ?a ?B ==> ?a = ?b) ==> cin ?a (cinsert ?b ?B)",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)
                   )
               )],
          template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Countable_Set_Type.cUnCI",
     "(~ cin ?c ?B ==> cin ?c ?A) ==> cin ?c (cUn ?A ?B)",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Product_Type.case_prodD'",
     "(case (?a, ?b) of (c, d) => ?R c d) ?c ==> ?R ?a ?b ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, t_empty),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Product_Type.prod_induct3", "(!!a b c. ?P (a, b, c)) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (=)) (=)) Ex1 Ex1",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_set ?A) (rel_set ?A)) uminus uminus",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Tree.acomplete_optimal",
     "[| acomplete ?t; size ?t <= size ?t' |] ==> height ?t <= height ?t'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cDiffI",
     "[| cin ?c ?A; ~ cin ?c ?B |] ==> cin ?c (cDiff ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Countable_Set_Type.rev_cimage_eqI",
     "[| cin ?x ?A; ?b = ?f ?x |] ==> cin ?b (cimage ?f ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1, template_app (template_var 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Transcendental.log_eq_one", "[| 0 < ?a; ?a ~= 1 |] ==> log ?a ?a = 1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 0),
         template_hole 1))),
    ("Transcendental.sin_gt_zero_02", "[| 0 < ?x; ?x < 2 |] ==> 0 < sin ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_hole 1)))],
       template_inequation
        (less_than, template_hole 4,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.ln_eq_minus_one",
     "[| 0 < ?x; ln ?x = ?x - 1 |] ==> ?x = 1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_hole 0))],
       template_equation (template_var 0, template_hole 0))),
    ("Transitive_Closure.rtranclp_subset",
     "[| ?R <= ?S; ?S <= ?R^** |] ==> ?S^** = ?R^**",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Transitive_Closure.rtrancl_subset",
     "[| ?R <= ?S; ?S <= ?R^* |] ==> ?S^* = ?R^*",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Countable_Set_Type.cimage_eqI",
     "[| ?b = ?f ?x; cin ?x ?A |] ==> cin ?b (cimage ?f ?A)",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; right_total ?A |]
      ==> Transfer.Rel (rel_set ?A) (Collect ?DA1) UNIV",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_arccos",
     "[| - 1 < ?x; ?x < 1 |] ==> isCont arccos ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_arcsin",
     "[| - 1 < ?x; ?x < 1 |] ==> isCont arcsin ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_artanh",
     "[| - 1 < ?x; ?x < 1 |] ==> isCont artanh ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.cos_arccos",
     "[| - 1 <= ?y; ?y <= 1 |] ==> cos (arccos ?y) = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transcendental.sin_arcsin",
     "[| - 1 <= ?y; ?y <= 1 |] ==> sin (arcsin ?y) = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Product_Type.curryE",
     "[| curry ?f ?a ?b; ?f (?a, ?b) ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_var 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.rtranclp_trans",
     "[| ?r^** ?x ?y; ?r^** ?y ?z |] ==> ?r^** ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.rtranclp_tranclp_tranclp",
     "[| ?r^** ?x ?y; ?r^++ ?y ?z |] ==> ?r^++ ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.tranclp_rtranclp_tranclp",
     "[| ?r^++ ?a ?b; ?r^** ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.tranclp_trans",
     "[| ?r^++ ?x ?y; ?r^++ ?y ?z |] ==> ?r^++ ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.relpowp_0_E",
     "[| (?P ^^ 0) ?x ?y; ?x = ?y ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transfer.map_fun_parametric",
     "rel_fun (rel_fun ?A ?B)
       (rel_fun (rel_fun ?C ?D) (rel_fun (rel_fun ?B ?C) (rel_fun ?A ?D)))
       map_fun map_fun",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transcendental.polar_Ex", "EX r a. ?x = r * cos a & ?y = r * sin a",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Transitive_Closure.rtranclp_rtrancl_eq",
     "(%x xa. (x, xa) : ?r)^** = (%x xa. (x, xa) : ?r^*)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Transitive_Closure.tranclp_trancl_eq",
     "(%x xa. (x, xa) : ?r)^++ = (%x xa. (x, xa) : ?r^+)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Transfer.rel_fun_eq_onp_rel",
     "rel_fun (eq_onp ?R) ?S = (%f g. ALL x. ?R x --> ?S (f x) (g x))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       t_empty)),
    ("Product_Type.split_eta_SetCompr2",
     "(%u. EX x y. u = (x, y) & ?P x y) = (%(x, y). ?P x y)",
     template_equation
      (t_empty, template_app (template_hole 0, template_var 0))),
    ("Product_Type.split_eta_SetCompr",
     "(%u. EX x y. u = (x, y) & ?P (x, y)) = ?P",
     template_equation (t_empty, template_var 0)),
    ("Product_Type.fst_image_Sigma",
     "fst ` Sigma ?A ?B = {x: ?A. ?B x ~= {}}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Complete_Lattices.Un_INT_distrib",
     "?B Un \<Inter> (?A ` ?I) = (INT i:?I. ?B Un ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_INT",
     "?f -` \<Inter> (?B ` ?A) = (INT x:?A. ?f -` ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. insert ?a (?B x)) = insert ?a (\<Inter> (?B ` ?C))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.INT_extend_simps",
     "insert ?a (\<Inter> (?B ` ?C)) = (INT x:?C. insert ?a (?B x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x Un ?B) = \<Inter> (?A ` ?C) Un ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_var 1))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) Un ?B = (INT x:?C. ?A x Un ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A Un ?B x) = ?A Un \<Inter> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.INT_extend_simps",
     "?A Un \<Inter> (?B ` ?C) = (INT x:?C. ?A Un ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Tree.neq_Leaf_iff",
     "(?t ~= \<langle>\<rangle>) =
      (EX l a r. ?t = \<langle>l, a, r\<rangle>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app (template_hole 2, t_empty))),
    ("Transcendental.cos_one_2pi_int",
     "(cos ?x = 1) = (EX x. ?x = real_of_int x * 2 * pi)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_hole 7),
       template_app (template_hole 6, t_empty))),
    ("Countable_Set_Type.subset_cimage_iff",
     "csubset_eq ?B (cimage ?f ?A) =
      (EX AA. csubset_eq AA ?A & ?B = cimage ?f AA)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Transitive_Closure.acyclic_insert",
     "acyclic (insert (?y, ?x) ?r) = (acyclic ?r & (?x, ?y) ~: ?r^*)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0)))))),
    ("Countable_Set_Type.csingleton_finsert_inj_eq'",
     "(cinsert ?a ?A = csingle ?b) =
      (?a = ?b & csubset_eq ?A (csingle ?b))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)))
           ))),
    ("Countable_Set_Type.csingleton_finsert_inj_eq",
     "(csingle ?b = cinsert ?a ?A) =
      (?a = ?b & csubset_eq ?A (csingle ?b))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_hole 3),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 3)))
           ))),
    ("Topological_Spaces.LIMSEQ_lessThan_iff_atMost",
     "(%n. ?f {..<n}) \<longlonglongrightarrow> ?x =
      (%n. ?f {..n}) \<longlonglongrightarrow> ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 2, template_var 0)),
         template_hole 1))),
    ("Product_Type.disjnt_Times2_iff",
     "disjnt (?A \<times> ?C) (?B \<times> ?C) = (?C = {} | disjnt ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2), t_empty)),
              template_app
               (template_app (template_hole 4, template_var 0), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Product_Type.disjnt_Times1_iff",
     "disjnt (?C \<times> ?A) (?C \<times> ?B) = (?C = {} | disjnt ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2), t_empty)),
              template_app
               (template_app (template_hole 4, template_var 2), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Countable_Set_Type.cUN_cUN_flatten",
     "cUnion (cimage ?C (cUnion (cimage ?B ?A))) =
      cUnion (cimage (%y. cUnion (cimage ?C (?B y))) ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Transcendental.cos_x_y_le_one",
     "\<bar>?x / sqrt (?x\<^sup>2 + ?y\<^sup>2)\<bar> <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))))),
       template_hole 0)),
    ("Transfer.fun_upd_transfer",
     "bi_unique ?A ==>
      rel_fun (rel_fun ?A ?B) (rel_fun ?A (rel_fun ?B (rel_fun ?A ?B)))
       fun_upd fun_upd",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel
       (rel_fun (rel_set (rel_prod ?A ?B))
         (rel_fun (rel_set ?A) (rel_set ?B)))
       (``) (``)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_app (template_hole 2, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.mk_disjoint_cinsert",
     "cin ?a ?A ==> EX B. ?A = cinsert ?a B & ~ cin ?a B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Countable_Set_Type.cUN_absorb",
     "cin ?k ?I ==>
      cUn (?A ?k) (cUnion (cimage ?A ?I)) = cUnion (cimage ?A ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Transcendental.log_base_pow",
     "0 < ?a ==> log (?a ^ ?n) ?x = log ?a ?x / real ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Transcendental.cosh_ln_real",
     "0 < ?x ==> cosh (ln ?x) = (?x + inverse ?x) / 2",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.sinh_ln_real",
     "0 < ?x ==> sinh (ln ?x) = (?x - inverse ?x) / 2",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.log_nat_power",
     "0 < ?x ==> log ?b (?x ^ ?n) = real ?n * log ?b ?x",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2))))),
    ("Transcendental.powr_neg_numeral",
     "0 < ?x ==> ?x powr - numeral ?n = 1 / ?x ^ numeral ?n",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Transcendental.real_le_x_sinh",
     "0 <= ?x ==> ?x <= (exp ?x - inverse (exp ?x)) / 2",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0)],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 4, template_var 0)))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Topological_Spaces.not_eventually_sequentiallyD",
     "~ eventually ?P sequentially ==>
      EX r. strict_mono r & (ALL n. ~ ?P (r n))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)
                )
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Transcendental.log_base_powr",
     "?a ~= 0 ==> log (?a powr ?b) ?x = log ?a ?x / ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Transcendental.log_powr",
     "?x ~= 0 ==> log ?b (?x powr ?y) = ?y * log ?b ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("Transcendental.lim_n_over_pown",
     "1 < norm ?x ==>
      (%n. of_nat n / ?x ^ n) \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.powser_times_n_limit_0",
     "norm ?x < 1 ==>
      (%n. of_nat n * ?x ^ n) \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 0),
          template_hole 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Tree.set_treeE",
     "?a : set_tree ?t ==>
      EX l r. \<langle>l, ?a, r\<rangle> : subtrees ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Transitive_Closure.Not_Domain_rtrancl",
     "?x ~: Domain ?R ==> ((?x, ?y) : ?R^*) = (?x = ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 0)),
                template_app (template_hole 1, template_var 1))
              )],
         template_equation (template_var 2, template_var 0)))),
    ("Transcendental.binomial_less_binomial_Suc",
     "?k < ?n div 2 ==> ?n choose ?k < ?n choose Suc ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 5, template_var 0),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Transcendental.exp_bound_half",
     "norm ?z <= 1 / 2 ==> norm (exp ?z) <= 2",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 6, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))))),
    ("Transitive_Closure.in_rtrancl_UnI",
     "?x : ?R^* | ?x : ?S^* ==> ?x : (?R Un ?S)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Topological_Spaces.monoI2",
     "ALL m n. m <= n --> ?X n <= ?X m ==> monoseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.monoI1",
     "ALL m n. m <= n --> ?X m <= ?X n ==> monoseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.lim_le",
     "[| convergent ?f; !!n. ?f n <= ?x |] ==> lim ?f <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("Transfer.left_total_parametric",
     "[| bi_total ?A; bi_total ?B |]
      ==> rel_fun (rel_fun ?A (rel_fun ?B (=))) (=) left_total left_total",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.right_total_parametric",
     "[| bi_total ?A; bi_total ?B |]
      ==> rel_fun (rel_fun ?A (rel_fun ?B (=))) (=) right_total
           right_total",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_set (rel_filter ?A)) (rel_filter ?A))
           Inf Inf",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0))),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.left_totalE",
     "[| left_total ?R; (!!x. EX y. ?R x y) ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_predicate (template_app (template_hole 1, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cUN_I",
     "[| cin ?a ?A; cin ?b (?B ?a) |] ==> cin ?b (cUnion (cimage ?B ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_var 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Infinite_Set.MOST_INFM",
     "[| infinite UNIV; MOST x. ?P x |] ==> INFM x. ?P x",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_hole 1)
           ))),
    ("Transcendental.powr_less_mono",
     "[| ?a < ?b; 1 < ?x |] ==> ?x powr ?a < ?x powr ?b",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transcendental.ln_one_minus_pos_upper_bound",
     "[| 0 <= ?x; ?x < 1 |] ==> ln (1 - ?x) <= - ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.powr_mono",
     "[| ?a <= ?b; 1 <= ?x |] ==> ?x powr ?a <= ?x powr ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transcendental.arccos_cos2",
     "[| ?x <= 0; - pi <= ?x |] ==> arccos (cos ?x) = - ?x",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 5),
        template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Countable_Set_Type.double_cDiff",
     "[| csubset_eq ?A ?B; csubset_eq ?B ?C |]
      ==> cDiff ?B (cDiff ?C ?A) = ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 2))),
    ("Countable_Set_Type.cinter_mono",
     "[| csubset_eq ?A ?C; csubset_eq ?B ?D |]
      ==> csubset_eq (cInt ?A ?B) (cInt ?C ?D)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cunion_mono",
     "[| csubset_eq ?A ?C; csubset_eq ?B ?D |]
      ==> csubset_eq (cUn ?A ?B) (cUn ?C ?D)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cminus_mono",
     "[| csubset_eq ?A ?C; csubset_eq ?D ?B |]
      ==> csubset_eq (cDiff ?A ?B) (cDiff ?C ?D)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Countable_Set.countable_INT",
     "[| ?i : ?I; countable (?A ?i) |] ==> countable (\<Inter> (?A ` ?I))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_var 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Topological_Spaces.continuous_on_compose",
     "[| continuous_on ?s ?f; continuous_on (?f ` ?s) ?g |]
      ==> continuous_on ?s (?g o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Cardinal_Order_Relation.Plus_into_Times_types",
     "[| ?a1.0 ~= ?a2.0; ?b1.0 ~= ?b2.0 |] ==> EX f. inj f",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Transcendental.cos_arcsin_nonzero",
     "[| - 1 < ?x; ?x < 1 |] ==> cos (arcsin ?x) ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 5)],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Transcendental.sin_arccos_nonzero",
     "[| - 1 < ?x; ?x < 1 |] ==> sin (arccos ?x) ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 5)],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Transfer.rel_funD2",
     "[| rel_fun ?A ?B ?f ?g; ?A ?x ?x |] ==> ?B (?f ?x) (?g ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 0), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_var 2, template_var 0)),
             template_app (template_var 1, template_var 0))
           ))),
    ("Topological_Spaces.tendsto_cong_limit",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?k = ?l |]
      ==> (?f \<longlongrightarrow> ?k) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_equation (template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 1, template_var 0)),
             template_var 1)
           ))),
    ("Product_Type.prod_eqI",
     "[| fst ?p = fst ?q; snd ?p = snd ?q |] ==> ?p = ?q",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.powr_less_cancel",
     "[| ?x powr ?a < ?x powr ?b; 1 < ?x |] ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0)),
        template_inequation (less_than, template_hole 0, template_var 2)],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Transfer.bi_uniqueDr",
     "[| bi_unique ?A; ?A ?x ?y; ?A ?x ?z |] ==> ?y = ?z",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Transfer.bi_uniqueDl",
     "[| bi_unique ?A; ?A ?x ?y; ?A ?z ?y |] ==> ?x = ?z",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 0), template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Transfer.left_uniqueD",
     "[| left_unique ?A; ?A ?x ?z; ?A ?y ?z |] ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 0), template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Transfer.right_uniqueD",
     "[| right_unique ?A; ?A ?x ?y; ?A ?x ?z |] ==> ?y = ?z",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Countable_Set_Type.cUn_parametric",
     "rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (rel_cset ?A)) cUn cUn",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 3, template_var 0))),
             t_empty),
           t_empty)
         )),
    ("Transcendental.tendsto_exp_limit_at_right",
     "((%y. (1 + ?x * y) powr (1 / y)) \<longlongrightarrow> exp ?x)
       (at_right 0)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_hole 1)))
         )),
    ("Transcendental.arctan_bounded",
     "- (pi / 2) < arctan ?y & arctan ?y < pi / 2",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_app (template_hole 0, template_var 0))),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))))
         )),
    ("Transcendental.sumr_diff_mult_const2",
     "sum ?f {..<?n} - of_nat ?n * ?r = (SUM i<?n. ?f i - ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 2, template_var 1)))),
    ("Transcendental.tan_half",
     "tan ?x = sin ((2::?'a) * ?x) / (cos ((2::?'a) * ?x) + (1::?'a))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0))),
           template_hole 0)))),
    ("Product_Type.vimage_Times",
     "?f -` (?A \<times> ?B) = (fst o ?f) -` ?A Int (snd o ?f) -` ?B",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?B ` \<Union> ?A) = (INT y:?A. \<Inter> (?B ` y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT y:?A. \<Inter> (?B ` y)) = \<Inter> (?B ` \<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Set_Interval.atLeastLessThan_nat_numeral",
     "{?m..<numeral ?k} =
      (if ?m <= pred_numeral ?k
       then insert (pred_numeral ?k) {?m..<pred_numeral ?k} else {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app (template_hole 2, template_var 0)))),
         template_hole 0))),
    ("Product_Type.Times_Int_Times",
     "?A \<times> ?B Int ?C \<times> ?D = (?A Int ?C) \<times> (?B Int ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         t_empty))),
    ("Product_Type.Collect_case_prod_Sigma",
     "{(x, y). ?P x & ?Q x y} = (SIGMA x:Collect ?P. Collect (?Q x))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Transcendental.pairs_le_eq_Sigma",
     "{(i, j). i + j <= ?m} = (SIGMA r:{..?m}. {..?m - r})",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Topological_Spaces.connected_iff_const",
     "connected ?S =
      (ALL P. continuous_on ?S P --> (EX c. ALL s:?S. P s = c))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Transfer.bi_unique_iff",
     "bi_unique ?R = ((ALL z. ?< x. ?R x z) & (ALL z. ?< x. ?R z x))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Countable_Set_Type.disjoint_cinsert",
     "(cempty = cInt ?A (cinsert ?b ?B)) =
      (~ cin ?b ?A & cempty = cInt ?A ?B)",
     template_bimplication
      (template_equation
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)))
           ))),
    ("Countable_Set_Type.cinsert_disjoint",
     "(cempty = cInt (cinsert ?a ?A) ?B) =
      (~ cin ?a ?B & cempty = cInt ?A ?B)",
     template_bimplication
      (template_equation
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("Countable_Set_Type.disjoint_cinsert",
     "(cInt ?B (cinsert ?a ?A) = cempty) =
      (~ cin ?a ?B & cInt ?B ?A = cempty)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0)),
               template_hole 3))
           ))),
    ("Countable_Set_Type.cinsert_disjoint",
     "(cInt (cinsert ?a ?A) ?B = cempty) =
      (~ cin ?a ?B & cInt ?A ?B = cempty)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_hole 3))
           ))),
    ("Transitive_Closure.acyclicP_converse",
     "acyclicP ?r^--1 = acyclicP ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Countable_Set_Type.cinsert_cDiff_if",
     "cDiff (cinsert ?x ?A) ?B =
      (if cin ?x ?B then cDiff ?A ?B else cinsert ?x (cDiff ?A ?B))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Countable_Set_Type.cInt_cinsert_right",
     "cInt ?A (cinsert ?a ?B) =
      (if cin ?a ?A then cinsert ?a (cInt ?A ?B) else cInt ?A ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cInt_cinsert_left",
     "cInt (cinsert ?a ?B) ?C =
      (if cin ?a ?C then cinsert ?a (cInt ?B ?C) else cInt ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Transcendental.sinh_converges",
     "(%n. if even n then 0::?'a else ?x ^ n /\<^sub>R fact n) sums
      sinh ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 11, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transcendental.cosh_converges",
     "(%n. if even n then ?x ^ n /\<^sub>R fact n else (0::?'a)) sums
      cosh ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 11, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?S
         (rel_fun (rel_fun ?R (rel_fun (list_all2 ?R) (rel_fun ?S ?S)))
           (rel_fun (list_all2 ?R) ?S)))
       rec_list rec_list",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 0)),
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_var 1)))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 4, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?A ?B)
         (rel_fun (rel_fun ?C ?D)
           (rel_fun (rel_fun ?B ?C) (rel_fun ?A ?D))))
       map_fun map_fun",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1b ?S1d)
         (rel_fun (rel_fun ?R2b ?S2d)
           (rel_fun (rel_efsym ?R1b ?R2b) (rel_efsym ?S1d ?S2d))))
       map_efsym map_efsym",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1b ?S1d)
         (rel_fun (rel_fun ?R2b ?S2d)
           (rel_fun (rel_sum ?R1b ?R2b) (rel_sum ?S1d ?S2d))))
       map_sum map_sum",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1b ?S1d)
         (rel_fun (rel_fun ?R2b ?S2d)
           (rel_fun (rel_prod ?R1b ?R2b) (rel_prod ?S1d ?S2d))))
       map_prod map_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1b ?S1d)
         (rel_fun (rel_fun ?R2b ?S2d)
           (rel_fun (rel_atm ?R1b ?R2b) (rel_atm ?S1d ?S2d))))
       map_atm map_atm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1b ?S1d)
         (rel_fun (rel_fun ?R2b ?S2d)
           (rel_fun (rel_lit ?R1b ?R2b) (rel_lit ?S1d ?S2d))))
       map_lit map_lit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Topological_Spaces.INT_decseq_offset",
     "decseq ?F ==> \<Inter> (range ?F) = \<Inter> (?F ` {?n..})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel
       (rel_fun (rel_fun ?A ?B) (rel_fun ?A (rel_fun ?B (rel_fun ?A ?B))))
       fun_upd fun_upd",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 0))))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Product_Type.Times_eq_cancel2",
     "?x : ?C ==> (?A \<times> ?C = ?B \<times> ?C) = (?A = ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1), t_empty),
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)),
         template_equation (template_var 1, template_var 0)))),
    ("Product_Type.Times_subset_cancel2",
     "?x : ?C ==> (?A \<times> ?C <= ?B \<times> ?C) = (?A <= ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1), t_empty)),
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Cardinal_Order_Relation.Card_order_Times_singl1",
     "Card_order ?r ==> ?r =o |Field ?r \<times> {?b}|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 7, template_var 1)),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Cardinal_Order_Relation.Card_order_Times_singl2",
     "Card_order ?r ==> ?r =o |{?a} \<times> Field ?r|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_hole 1)),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Transcendental.sin_cos_sqrt",
     "0 <= sin ?x ==> sin ?x = sqrt (1 - (cos ?x)\<^sup>2)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 10,
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Transcendental.sin_arccos_abs",
     "\<bar>?y\<bar> <= 1 ==> sin (arccos ?y) = sqrt (1 - ?y\<^sup>2)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 0),
          template_hole 9)],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 9),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Topological_Spaces.tendsto_intros",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. ?f x ^ ?n) \<longlongrightarrow> ?a ^ ?n) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(?f \<longlongrightarrow> ?x) ?F ==>
      ((%x. root ?n (?f x)) \<longlongrightarrow> root ?n ?x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_var 1)
           ))),
    ("List.nth_sorted_list_of_set_greaterThanAtMost",
     "?n < ?j - ?i ==> sorted_list_of_set {?i<..?j} ! ?n = Suc (?i + ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Product_Type.mem_case_prodI",
     "?z : ?c ?a ?b ==> ?z : (case (?a, ?b) of (d, e) => ?c d e)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_var 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Product_Type.map_prod_imageI",
     "(?a, ?b) : ?R ==> (?f ?a, ?g ?b) : map_prod ?f ?g ` ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_var 1, template_var 4)),
                 template_app (template_var 0, template_var 3))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Transcendental.log2_of_power_eq",
     "?m = 2 ^ ?n ==> real ?n = log 2 (real ?m)",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 5, template_hole 4))),
           template_app (template_hole 2, template_var 1))))),
    ("Transcendental.less_log2_of_power",
     "2 ^ ?n < ?m ==> real ?n < log 2 (real ?m)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 5, template_hole 4))),
           template_app (template_hole 2, template_var 0))))),
    ("Transcendental.le_log2_of_power",
     "2 ^ ?n <= ?m ==> real ?n <= log 2 (real ?m)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 5, template_hole 4))),
           template_app (template_hole 2, template_var 0))))),
    ("Countable_Set_Type.cimage_csubsetI",
     "(!!x. cin x ?A ==> cin (?f x) ?B) ==> csubset_eq (cimage ?f ?A) ?B",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Topological_Spaces.connectedD_const",
     "[| connected ?S; continuous_on ?S ?P |] ==> EX c. ALL s:?S. ?P s = c",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Transfer.transfer_raw",
     "[| bi_total ?A; bi_total ?B |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?B (=))) (=))
           left_total left_total",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?A; bi_total ?B |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?B (=))) (=))
           right_total right_total",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?A; bi_unique ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun (rel_fun ?A (=)) (=)) (=))
           is_filter is_filter",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2)),
                       template_hole 2)),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Product_Type.map_prod_inj_on",
     "[| inj_on ?f ?A; inj_on ?g ?B |]
      ==> inj_on (map_prod ?f ?g) (?A \<times> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2), t_empty))
           ))),
    ("Transcendental.log_powr_cancel",
     "[| 0 < ?a; ?a ~= 1 |] ==> log ?a (?a powr ?y) = ?y",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Transcendental.cos_gt_zero",
     "[| 0 < ?x; ?x < pi / 2 |] ==> 0 < cos ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_than, template_hole 6,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cot_gt_zero",
     "[| 0 < ?x; ?x < pi / 2 |] ==> 0 < cot ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_than, template_hole 6,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_gt_zero2",
     "[| 0 < ?x; ?x < pi / 2 |] ==> 0 < sin ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_than, template_hole 6,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.tan_gt_zero",
     "[| 0 < ?x; ?x < pi / 2 |] ==> 0 < tan ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_than, template_hole 6,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_lt_zero",
     "[| pi < ?x; ?x < 2 * pi |] ==> sin ?x < 0",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_hole 6))],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("Transcendental.ln_powr_bound",
     "[| 1 <= ?x; 0 < ?a |] ==> ln ?x <= ?x powr ?a / ?a",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)))),
    ("Transcendental.tan_pos_pi2_le",
     "[| 0 <= ?x; ?x < pi / 2 |] ==> 0 <= tan ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_equals, template_hole 7,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.arccos_le_pi2",
     "[| 0 <= ?y; ?y <= 1 |] ==> arccos ?y <= pi / 2",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.sin_le_zero",
     "[| pi <= ?x; ?x < 2 * pi |] ==> sin ?x <= 0",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_hole 7))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("Transitive_Closure.relpowp_Suc_I2",
     "[| ?P ?x ?y; (?P ^^ ?n) ?y ?z |] ==> (?P ^^ Suc ?n) ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("Product_Type.SigmaI",
     "[| ?a : ?A; ?b : ?B ?a |] ==> (?a, ?b) : Sigma ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_var 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. ?f x - ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_max",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. max (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_min",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. min (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_Pair",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. (?f x, ?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. ?f x ^ ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. dist (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous ?F ?f; continuous ?F ?g |]
      ==> continuous ?F (%x. ?f x *\<^sub>R ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.closed_Collect_eq",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> closed {x. ?f x = ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Topological_Spaces.continuous_on_max",
     "[| continuous_on ?A ?f; continuous_on ?A ?g |]
      ==> continuous_on ?A (%x. max (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_on_min",
     "[| continuous_on ?A ?f; continuous_on ?A ?g |]
      ==> continuous_on ?A (%x. min (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.open_Collect_less",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> open {x. ?f x < ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Topological_Spaces.closed_Collect_le",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> closed {x. ?f x <= ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Topological_Spaces.continuous_on_Pair",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. (?f x, ?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?A ?f; continuous_on ?A ?g |]
      ==> continuous_on ?A (%x. ?f x ^ ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. dist (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x - ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?A ?f; continuous_on ?A ?g |]
      ==> continuous_on ?A (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x *\<^sub>R ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.uniformly_continuous_on_compose",
     "[| uniformly_continuous_on ?s ?g;
         uniformly_continuous_on (?g ` ?s) ?f |]
      ==> uniformly_continuous_on ?s (%x. ?f (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.tendsto_Lim",
     "[| ?net ~= bot; (?f \<longlongrightarrow> ?l) ?net |]
      ==> Lim ?net ?f = ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Transcendental.arcsin_minus",
     "[| - 1 <= ?x; ?x <= 1 |] ==> arcsin (- ?x) = - arcsin ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("Infinite_Set.MOST_inj",
     "[| MOST x. ?P x; inj ?f |] ==> MOST x. ?P (?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Topological_Spaces.LIMSEQ_subseq_LIMSEQ",
     "[| ?X \<longlonglongrightarrow> ?L; strict_mono ?f |]
      ==> (?X o ?f) \<longlonglongrightarrow> ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app (template_hole 3, template_var 1)),
             template_hole 2)
           ))),
    ("Transitive_Closure.relpowp_Suc_I",
     "[| (?P ^^ ?n) ?x ?y; ?P ?y ?z |] ==> (?P ^^ Suc ?n) ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transcendental.less_log_of_power",
     "[| ?b ^ ?n < ?m; 1 < ?b |] ==> real ?n < log ?b ?m",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0),
        template_inequation (less_than, template_hole 2, template_var 2)],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Transcendental.le_log_of_power",
     "[| ?b ^ ?n <= ?m; 1 < ?b |] ==> real ?n <= log ?b ?m",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0),
        template_inequation (less_than, template_hole 2, template_var 2)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Topological_Spaces.subset_snd_imageI",
     "[| ?A \<times> ?B <= ?S; ?x : ?A |] ==> ?B <= snd ` ?S",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), t_empty),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Topological_Spaces.subset_fst_imageI",
     "[| ?A \<times> ?B <= ?S; ?y : ?B |] ==> ?A <= fst ` ?S",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), t_empty),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Transitive_Closure.relpow_0_E",
     "[| (?x, ?y) : ?R ^^ 0; ?x = ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transcendental.cos_times_cos",
     "cos ?w * cos ?z = (cos (?w - ?z) + cos (?w + ?z)) / (2::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Transcendental.cos_times_sin",
     "cos ?w * sin ?z = (sin (?w + ?z) - sin (?w - ?z)) / (2::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Transcendental.sin_times_cos",
     "sin ?w * cos ?z = (sin (?w + ?z) + sin (?w - ?z)) / (2::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Transcendental.sin_times_sin",
     "sin ?w * sin ?z = (cos (?w - ?z) - cos (?w + ?z)) / (2::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Transcendental.cos_double_sin",
     "cos ((2::?'a) * ?w) = (1::?'a) - (2::?'a) * (sin ?w)\<^sup>2",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_hole 6, template_hole 5))))))),
    ("Transcendental.cos_double_cos",
     "cos ((2::?'a) * ?w) = (2::?'a) * (cos ?w)\<^sup>2 - (1::?'a)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_hole 1,
                 template_app (template_hole 5, template_hole 4))))),
         template_hole 0))),
    ("Transitive_Closure.reflcl_set_eq",
     "(%x y. (x, y) : ?r)^== = (%x y. (x, y) : ?r^=)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_hole 2),
       t_empty)),
    ("Transitive_Closure.relpowp_relpow_eq",
     "(%x y. (x, y) : ?R) ^^ ?n = (%x y. (x, y) : ?R ^^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       t_empty)),
    ("Relation.INF_INT_eq",
     "(INF i\<in>?S. (%x. x : ?r i)) = (%x. x : \<Inter> (?r ` ?S))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       t_empty)),
    ("Topological_Spaces.continuous_at_split",
     "isCont ?f ?x =
      (continuous (at_left ?x) ?f & continuous (at_right ?x) ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 1, template_var 1))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("Topological_Spaces.connected_Times_eq",
     "connected (?S \<times> ?T) =
      (?S = {} | ?T = {} | connected ?S & connected ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Countable_Set_Type.if_split_cin2",
     "cin ?a (if ?Q then ?x else ?y) =
      ((?Q --> cin ?a ?x) & (~ ?Q --> cin ?a ?y))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Countable_Set_Type.if_split_cin1",
     "cin (if ?Q then ?x else ?y) ?b =
      ((?Q --> cin ?x ?b) & (~ ?Q --> cin ?y ?b))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Product_Type.split_paired_Ball_Sigma",
     "(ALL z:Sigma ?A ?B. ?P z) = (ALL x:?A. ALL y:?B x. ?P (x, y))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 2, template_var 2), t_empty))),
    ("Product_Type.split_paired_Bex_Sigma",
     "(EX z:Sigma ?A ?B. ?P z) = (EX x:?A. EX y:?B x. ?P (x, y))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 2, template_var 2), t_empty))),
    ("Topological_Spaces.tendsto_at_within_iff_tendsto_nhds",
     "(?g \<longlongrightarrow> ?g ?l) (at ?l within ?S) =
      (?g \<longlongrightarrow> ?g ?l) (inf (nhds ?l) (principal ?S))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_hole 4,
             template_app (template_var 2, template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_hole 4,
             template_app (template_var 2, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.sin_cos_npi",
     "sin (real (Suc (2 * ?n)) * pi / 2) = (- 1) ^ ?n",
     template_equation
      (template_app
        (template_hole 13,
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5))),
                       template_var 0)))),
               template_hole 4)),
           template_app
            (template_hole 3,
             template_app (template_hole 6, template_hole 5)))),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Cardinal_Order_Relation.card_of_Times_assoc",
     "|(?A \<times> ?B) \<times> ?C| =o |?A \<times> ?B \<times> ?C|",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         t_empty)),
                     t_empty))),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   t_empty)))),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?S
         (rel_fun
           (rel_fun (rel_tree ?R) (rel_fun ?R (rel_fun (rel_tree ?R) ?S)))
           (rel_fun (rel_tree ?R) ?S)))
       case_tree case_tree",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 0)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 4, template_var 0)),
                           template_var 1)))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 4, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun (=) ?S)
         (rel_fun (rel_fun ?R (rel_fun (list_all2 (rel_trm ?R)) ?S))
           (rel_fun (rel_trm ?R) ?S)))
       case_trm case_trm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_var 0))),
                         template_var 1))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (rel_cset ?A))) cUn
       cUn",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0)))),
             t_empty),
           t_empty)
         )),
    ("Transitive_Closure.rtrancl_finite_eq_relpow",
     "finite ?R ==> ?R^* = \<Union> ((^^) ?R ` {n. n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, t_empty)))))),
    ("Topological_Spaces.continuous_on_open_vimage",
     "open ?s ==>
      continuous_on ?s ?f = (ALL B. open B --> open (?f -` B Int ?s))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("Topological_Spaces.continuous_on_closed_vimage",
     "closed ?s ==>
      continuous_on ?s ?f = (ALL B. closed B --> closed (?f -` B Int ?s))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("Topological_Spaces.approx_from_above_dense_linorder",
     "?x < ?y ==> EX u. (ALL n. ?x < u n) & u \<longlonglongrightarrow> ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Topological_Spaces.approx_from_below_dense_linorder",
     "?y < ?x ==> EX u. (ALL n. u n < ?x) & u \<longlonglongrightarrow> ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Transcendental.DERIV_log",
     "0 < ?x ==> (log ?b has_real_derivative 1 / (ln ?b * ?x)) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Cardinal_Order_Relation.Card_order_Times3",
     "Card_order ?r ==> |Field ?r| \<le>o |Field ?r \<times> Field ?r|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 6, template_var 0))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 6, template_var 0)),
                     t_empty)))),
             template_hole 0)
           ))),
    ("List.sorted_list_of_set_greaterThanLessThan",
     "Suc ?i < ?j ==>
      sorted_list_of_set {?i<..<?j} =
      Suc ?i # sorted_list_of_set {Suc ?i<..<?j}",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 1)),
               template_var 0)))))),
    ("List.sorted_list_of_set_greaterThanAtMost",
     "Suc ?i <= ?j ==>
      sorted_list_of_set {?i<..?j} =
      Suc ?i # sorted_list_of_set {Suc ?i<..?j}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 1)),
               template_var 0)))))),
    ("Transitive_Closure.rtranclpD",
     "?R^** ?a ?b ==> ?a = ?b | ?a ~= ?b & ?R^++ ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Transcendental.DERIV_tan",
     "cos ?x ~= (0::?'a) ==>
      (tan has_field_derivative inverse ((cos ?x)\<^sup>2)) (at ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 10, template_var 0)),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Product_Type.pair_imageI",
     "(?a, ?b) : ?A ==> ?f ?a ?b : (%(a, b). ?f a b) ` ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_var 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_var 1))
           ))),
    ("Transitive_Closure.relpowp_Suc_D2",
     "(?P ^^ Suc ?n) ?x ?z ==> EX y. ?P ?x y & (?P ^^ ?n) y ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("List.nth_sorted_list_of_set_greaterThanLessThan",
     "?n < ?j - Suc ?i ==>
      sorted_list_of_set {?i<..<?j} ! ?n = Suc (?i + ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app (template_hole 5, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))),
           template_var 2),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Transcendental.exp_add_commuting",
     "?x * ?y = ?y * ?x ==> exp (?x + ?y) = exp ?x * exp ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Relation.refl_on_INTER",
     "ALL x:?S. refl_on (?A x) (?r x) ==>
      refl_on (\<Inter> (?A ` ?S)) (\<Inter> (?r ` ?S))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Countable_Set_Type.cUN_least",
     "(!!x. cin x ?A ==> csubset_eq (?B x) ?C) ==>
      csubset_eq (cUnion (cimage ?B ?A)) ?C",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Product_Type.prod_cases3",
     "(!!a b c. ?y = (a, b, c) ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_intros",
     "[| finite ?A; ALL x:?A. open (?B x) |] ==> open (\<Inter> (?B ` ?A))",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| finite ?A; ALL x:?A. closed (?B x) |]
      ==> closed (\<Union> (?B ` ?A))",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Topological_Spaces.INF_Lim",
     "[| decseq ?X; ?X \<longlonglongrightarrow> ?l |]
      ==> Inf (range ?X) = ?l",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)),
         template_var 0))),
    ("Topological_Spaces.SUP_Lim",
     "[| incseq ?X; ?X \<longlonglongrightarrow> ?l |]
      ==> Sup (range ?X) = ?l",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)),
         template_var 0))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A |]
      ==> Transfer.Rel
           (rel_fun (rel_filter ?A)
             (rel_fun (rel_filter ?A) (rel_filter ?A)))
           inf inf",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 3, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_unique ?B |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A ?B) (rel_fun (rel_set ?A) (=)))
           inj_on inj_on",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| is_equality ?a1; bi_unique ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A ?a1) (rel_fun (rel_set ?A) ?a1))
           sum sum",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| is_equality ?a1; bi_unique ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A ?a1) (rel_fun (rel_set ?A) ?a1))
           prod prod",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Zorn.chain_subset_Total_Union",
     "[| chain\<^sub>\<subseteq> ?R; ALL r:?R. Total r |]
      ==> Total (\<Union> ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Countable_Set_Type.cequalityE",
     "[| ?A = ?B; [| csubset_eq ?A ?B; csubset_eq ?B ?A |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_var 2)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Transcendental.one_less_log_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (1 < log ?a ?x) = (?a < ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Transcendental.zero_less_log_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (0 < log ?a ?x) = (1 < ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)))),
    ("Transcendental.log_less_one_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (log ?a ?x < 1) = (?x < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_hole 3),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 1)))),
    ("Transcendental.log_less_zero_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (log ?a ?x < 0) = (?x < 1)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)))),
    ("Transcendental.one_le_log_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (1 <= log ?a ?x) = (?a <= ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 4),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transcendental.zero_le_log_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (0 <= log ?a ?x) = (1 <= ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_var 0)))),
    ("Transcendental.log_le_one_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (log ?a ?x <= 1) = (?x <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_hole 4),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Transcendental.log_le_zero_cancel_iff",
     "[| 1 < ?a; 0 < ?x |] ==> (log ?a ?x <= 0) = (?x <= 1)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_hole 3),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 4)))),
    ("Transcendental.log_pow_cancel",
     "[| 0 < ?a; ?a ~= 1 |] ==> log ?a (?a ^ ?b) = real ?b",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.ln_inj_iff",
     "[| 0 < ?x; 0 < ?y |] ==> (ln ?x = ln ?y) = (?x = ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_bimplication
        (template_equation
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Transcendental.ln_less_cancel_iff",
     "[| 0 < ?x; 0 < ?y |] ==> (ln ?x < ln ?y) = (?x < ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Transcendental.ln_le_cancel_iff",
     "[| 0 < ?x; 0 < ?y |] ==> (ln ?x <= ln ?y) = (?x <= ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.rtrancl_Int_subset",
     "[| Id <= ?s; (?r^* Int ?s) O ?r <= ?s |] ==> ?r^* <= ?s",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 0)),
                template_var 1)),
            template_var 0),
          template_var 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Transitive_Closure.trancl_Int_subset",
     "[| ?r <= ?s; (?r^+ Int ?s) O ?r <= ?s |] ==> ?r^+ <= ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 1)),
                template_var 0)),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Transcendental.cosh_real_nonneg_less_iff",
     "[| 0 <= ?x; 0 <= ?y |] ==> (cosh ?x < cosh ?y) = (?x < ?y)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transcendental.cosh_real_nonneg_le_iff",
     "[| 0 <= ?x; 0 <= ?y |] ==> (cosh ?x <= cosh ?y) = (?x <= ?y)",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Transcendental.cosh_real_nonpos_less_iff",
     "[| ?x <= 0; ?y <= 0 |] ==> (cosh ?x < cosh ?y) = (?y < ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Transcendental.cosh_real_nonpos_le_iff",
     "[| ?x <= 0; ?y <= 0 |] ==> (cosh ?x <= cosh ?y) = (?y <= ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 2),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 1)))),
    ("Transfer.transfer_rule_of_bool",
     "[| ?R (0::?'a) (0::?'b); ?R (1::?'a) (1::?'b) |]
      ==> rel_fun (=) ?R of_bool of_bool",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 7),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 5),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, t_empty), template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Topological_Spaces.open_Collect_neq",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> open {x. ?f x ~= ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| filterlim ?f at_infinity ?F; 0 < ?n |]
      ==> LIM x ?F. ?f x ^ ?n :> at_infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), template_hole 3),
             template_var 1)
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; right_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (=)) (=))
           (transfer_bforall ?DA1) transfer_forall",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_hole 2)),
                   template_hole 2)),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| norm ?x1 < 1; (0::?'a1) = ?y |]
      ==> (^) ?x1 \<longlonglongrightarrow> ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_hole 6),
        template_equation (template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Transcendental.arccos_minus",
     "[| - 1 <= ?x; ?x <= 1 |] ==> arccos (- ?x) = pi - arccos ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 4)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, template_var 0))))),
    ("Transcendental.arcsin_ubound",
     "[| - 1 <= ?y; ?y <= 1 |] ==> arcsin ?y <= pi / 2",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Order_Relation.Total_Id_Field",
     "[| Total ?r; ~ ?r <= Id |] ==> Field ?r = Field (?r - Id)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_var 0)
            ),
        template_negation
         (
            template_inequation
             (less_equals, template_var 0, template_hole 2)
            )],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 2))))),
    ("Topological_Spaces.tendsto_within_subset",
     "[| filterlim ?f ?l (at ?x within ?S); ?T <= ?S |]
      ==> filterlim ?f ?l (at ?x within ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("Topological_Spaces.Sup_lim",
     "[| !!n. ?b n : ?s; ?b \<longlonglongrightarrow> ?a |]
      ==> ?a <= Sup ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Topological_Spaces.Inf_lim",
     "[| !!n. ?b n : ?s; ?b \<longlonglongrightarrow> ?a |]
      ==> Inf ?s <= ?a",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Transcendental.cot_less_zero",
     "[| - pi / 2 < ?x; ?x < 0 |] ==> cot ?x < 0",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5)),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_hole 1))),
    ("Transcendental.sin_less_zero",
     "[| - pi / 2 < ?x; ?x < 0 |] ==> sin ?x < 0",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5)),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_hole 1))),
    ("Transcendental.tan_less_zero",
     "[| - pi / 2 < ?x; ?x < 0 |] ==> tan ?x < 0",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5)),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_hole 1))),
    ("Complete_Lattices.INT_D",
     "[| ?b : \<Inter> (?B ` ?A); ?a : ?A |] ==> ?b : ?B ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, t_empty), template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_var 2, template_var 0))
           ))),
    ("Transcendental.root_test_convergence",
     "[| (%n. root n (norm (?f n))) \<longlonglongrightarrow> ?x; ?x < 1 |]
      ==> summable ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, t_empty),
                template_app (template_hole 4, template_var 0)),
              template_hole 3)
            ),
        template_inequation (less_than, template_var 0, template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Topological_Spaces.closed_vimage_Int",
     "[| closed ?s; continuous_on ?t ?f; closed ?t |]
      ==> closed (?f -` ?s Int ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("Topological_Spaces.connected_contains_Icc",
     "[| connected ?A; ?a : ?A; ?b : ?A |] ==> {?a..?b} <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Topological_Spaces.connected_contains_Ioo",
     "[| connected ?A; ?a : ?A; ?b : ?A |] ==> {?a<..<?b} <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Transcendental.cos_double",
     "cos ((2::?'a) * ?x) = (cos ?x)\<^sup>2 - (sin ?x)\<^sup>2",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 8, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 5, template_hole 4)))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 5, template_hole 4)))))),
    ("Transcendental.cosh_double",
     "cosh ((2::?'a) * ?x) = (cosh ?x)\<^sup>2 + (sinh ?x)\<^sup>2",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 8, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 5, template_hole 4)))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 5, template_hole 4)))))),
    ("Topological_Spaces.monoseq_Suc",
     "monoseq ?X =
      ((ALL n. ?X n <= ?X (Suc n)) | (ALL n. ?X (Suc n) <= ?X n))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Countable_Set_Type.csubset_cinsert_iff",
     "csubset_eq ?A (cinsert ?x ?B) =
      (if cin ?x ?A then csubset_eq (cDiff ?A (csingle ?x)) ?B
       else csubset_eq ?A ?B)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 0))),
             template_var 0)),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("Infinite_Set.MOST_conj_distrib",
     "(MOST x. ?P x & ?Q x) = ((MOST x. ?P x) & (MOST x. ?Q x))",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)),
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Transcendental.arctan_half",
     "arctan ?x = 2 * arctan (?x / (1 + sqrt (1 + ?x\<^sup>2)))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6))),
         template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 7, template_hole 6))))))))))),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1.0 ?S)
         (rel_fun (rel_fun ?R2.0 ?S)
           (rel_fun (rel_fun ?R2.0 ?S)
             (rel_fun (rel_efsym ?R1.0 ?R2.0) ?S))))
       case_efsym case_efsym",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_var 1))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?R1.0 ?S)
         (rel_fun (rel_fun ?R2.0 ?S)
           (rel_fun (rel_fun ?R2.0 ?S)
             (rel_fun (rel_efsym ?R1.0 ?R2.0) ?S))))
       rec_efsym rec_efsym",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_var 1))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun (rel_atm ?R1.0 ?R2.0) ?S)
         (rel_fun (rel_fun (rel_atm ?R1.0 ?R2.0) ?S)
           (rel_fun (rel_lit ?R1.0 ?R2.0) ?S)))
       case_lit case_lit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 2),
                           template_var 1)),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1)),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun (rel_atm ?R1.0 ?R2.0) ?S)
         (rel_fun (rel_fun (rel_atm ?R1.0 ?R2.0) ?S)
           (rel_fun (rel_lit ?R1.0 ?R2.0) ?S)))
       rec_lit rec_lit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 2),
                           template_var 1)),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1)),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transitive_Closure.relpow_finite_bounded",
     "finite ?R ==> ?R ^^ ?k <= \<Union> ((^^) ?R ` {n. n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 5, template_var 0), template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, t_empty)))))),
    ("Countable_Set_Type.cUN_cinsert_distrib",
     "cin ?u ?A ==>
      cUnion (cimage (%x. cinsert ?a (?B x)) ?A) =
      cinsert ?a (cUnion (cimage ?B ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)))))),
    ("Transcendental.arcosh_real_has_field_derivative",
     "1 < ?x ==>
      (arcosh has_real_derivative 1 / sqrt (?x\<^sup>2 - 1))
       (at ?x within ?A)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 10),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1)))),
                     template_hole 10)))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.has_real_derivative_powr",
     "0 < ?z ==>
      ((%z. z powr ?r) has_real_derivative ?r * ?z powr (?r - 1)) (at ?z)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Set_Interval.atLeastLessThan_add_Un",
     "?i <= ?j ==> {?i..<?j + ?k} = {?i..<?j} Un {?j..<?j + ?k}",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("Transcendental.artanh_real_has_field_derivative",
     "\<bar>?x\<bar> < 1 ==>
      (artanh has_real_derivative 1 / (1 - ?x\<^sup>2)) (at ?x within ?A)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 1),
          template_hole 9)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 9),
                 template_app
                  (template_app (template_hole 5, template_hole 9),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.DERIV_cot",
     "sin ?x ~= (0::?'a) ==>
      (cot has_field_derivative - inverse ((sin ?x)\<^sup>2)) (at ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 11, template_var 0)),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2)))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transcendental.arccos_eq_iff",
     "\<bar>?x\<bar> <= 1 & \<bar>?y\<bar> <= 1 ==>
      (arccos ?x = arccos ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_hole 3)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0)),
                template_hole 3))
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Fun_More.atLeastLessThan_less_eq2",
     "inj_on ?f {0..<?m} & ?f ` {0..<?m} <= {0..<?n} ==> ?m <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 1))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 1))),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Product_Type.prod_induct4", "(!!a b c d. ?P (a, b, c, d)) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Topological_Spaces.connectedI_const",
     "(!!P. continuous_on ?S P ==> EX c. ALL s:?S. P s = c) ==>
      connected ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transfer.transfer_raw",
     "[| bi_total ?A; bi_unique ?B |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?A ?B) (rel_fun (rel_set ?B) (rel_set ?A)))
           (-`) (-`)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 2, template_var 1)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A |]
      ==> Transfer.Rel
           (rel_fun (rel_set (rel_prod ?A ?A)) (rel_set (rel_prod ?A ?A)))
           rtrancl rtrancl",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 0))),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cBexE",
     "[| cBex ?A ?P; !!x. [| cin x ?A; ?P x |] ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.ln_root",
     "[| 0 < ?n; 0 < ?b |] ==> ln (root ?n ?b) = ln ?b / real ?n",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Transcendental.root_powr_inverse",
     "[| 0 < ?n; 0 < ?x |] ==> root ?n ?x = ?x powr (1 / real ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 1)))))),
    ("Transcendental.ln_powr_bound2",
     "[| 1 < ?x; 0 < ?a |] ==> ln ?x powr ?a <= ?a powr ?a * ?x",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 0)),
           template_var 1)))),
    ("Transcendental.ln_mult",
     "[| 0 < ?x; 0 < ?y |] ==> ln (?x * ?y) = ln ?x + ln ?y",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Transcendental.ln_div",
     "[| 0 < ?x; 0 < ?y |] ==> ln (?x / ?y) = ln ?x - ln ?y",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Transcendental.cos_double_less_one",
     "[| 0 < ?x; ?x < 2 |] ==> cos (2 * ?x) < 1",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 0)),
         template_hole 0))),
    ("Countable_Set_Type.cpsubsetE",
     "[| csubset ?A ?B; [| csubset_eq ?A ?B; ~ csubset_eq ?B ?A |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_implication
           ([template_negation
              (
                 template_inequation
                  (less_equals, template_var 1, template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_within_open",
     "[| ?a : ?A; open ?A |]
      ==> continuous (at ?a within ?A) ?f = isCont ?f ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_var 0)))),
    ("Transcendental.continuous_arcosh_strong",
     "[| continuous ?F ?f; \<forall>\<^sub>F x in ?F. 1 <= ?f x |]
      ==> continuous ?F (%x. arcosh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_arcosh",
     "[| continuous ?F ?f; 1 < ?f (Lim ?F (%x. x)) |]
      ==> continuous ?F (%x. arcosh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_hole 2,
          template_app
           (template_var 0,
            template_app
             (template_app (template_hole 1, template_var 1), t_empty)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)
           ))),
    ("Fun_More.bij_betw_inv_into_LEFT",
     "[| bij_betw ?f ?A ?A'; ?B <= ?A |] ==> inv_into ?A ?f ` ?f ` ?B = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_var 0))),
    ("Fun_More.bij_betw_inv_into_RIGHT",
     "[| bij_betw ?f ?A ?A'; ?B' <= ?A' |]
      ==> ?f ` inv_into ?A ?f ` ?B' = ?B'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 0)),
         template_var 0))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; right_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (=)) (=)) (Ball (Collect ?DA1))
           All",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3)),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; right_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (=)) (=)) (Bex (Collect ?DA1))
           Ex",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3)),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?R1.0 = ?DR1.1; Domainp ?R2.0 = ?DR2.1 |]
      ==> Domainp (rel_efsym ?R1.0 ?R2.0) = pred_efsym ?DR1.1 ?DR2.1",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Transfer.transfer_raw",
     "[| Domainp ?R1.0 = ?DR1.1; Domainp ?R2.0 = ?DR2.1 |]
      ==> Domainp (rel_sum ?R1.0 ?R2.0) = pred_sum ?DR1.1 ?DR2.1",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Transfer.transfer_raw",
     "[| Domainp ?R1.0 = ?DR1.1; Domainp ?R2.0 = ?DR2.1 |]
      ==> Domainp (rel_prod ?R1.0 ?R2.0) = pred_prod ?DR1.1 ?DR2.1",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Transfer.transfer_raw",
     "[| Domainp ?R1.0 = ?DR1.1; Domainp ?R2.0 = ?DR2.1 |]
      ==> Domainp (rel_atm ?R1.0 ?R2.0) = pred_atm ?DR1.1 ?DR2.1",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Transfer.transfer_raw",
     "[| Domainp ?R1.0 = ?DR1.1; Domainp ?R2.0 = ?DR2.1 |]
      ==> Domainp (rel_lit ?R1.0 ?R2.0) = pred_lit ?DR1.1 ?DR2.1",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Transcendental.arccos_lt_bounded",
     "[| - 1 < ?y; ?y < 1 |] ==> 0 < arccos ?y & arccos ?y < pi",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_hole 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           ))),
    ("Transcendental.arccos_bounded",
     "[| - 1 <= ?y; ?y <= 1 |] ==> 0 <= arccos ?y & arccos ?y <= pi",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_hole 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           ))),
    ("Transcendental.arcsin_lbound",
     "[| - 1 <= ?y; ?y <= 1 |] ==> - (pi / 2) <= arcsin ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.ln_x_over_x_mono",
     "[| exp 1 <= ?x; ?x <= ?y |] ==> ln ?y / ?y <= ln ?x / ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 1)))),
    ("Ordinal_Arithmetic.osum_Total",
     "[| Total ?r; Total ?r' |] ==> Total (?r +o ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ordinal_Arithmetic.oprod_Total",
     "[| Total ?r; Total ?r' |] ==> Total (?r *o ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.summable_Leibniz",
     "[| ?a \<longlonglongrightarrow> 0; monoseq ?a |]
      ==> summable (%n. (- 1) ^ n * ?a n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 0),
                template_app (template_hole 8, template_hole 7)),
              template_hole 6)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transitive_Closure.r_r_into_trancl",
     "[| (?a, ?b) : ?R; (?b, ?c) : ?R |] ==> (?a, ?c) : ?R^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transcendental.log_of_power_eq",
     "[| real ?m = ?b ^ ?n; 1 < ?b |] ==> real ?n = log ?b (real ?m)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 1, template_var 1)],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 4, template_var 2))))),
    ("Transfer.Rel_app",
     "[| Transfer.Rel (rel_fun ?A ?B) ?f ?g; Transfer.Rel ?A ?x ?y |]
      ==> Transfer.Rel ?B (?f ?x) (?g ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_app (template_var 3, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Countable_Set_Type.cBexCI",
     "[| cBall ?A (%x. ~ ?P x) ==> ?P ?a; cin ?a ?A |] ==> cBex ?A ?P",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2), t_empty)
               )],
          template_predicate
           (template_app (template_var 1, template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Topological_Spaces.connected_Un",
     "[| connected ?s; connected ?t; ?s Int ?t ~= {} |]
      ==> connected (?s Un ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.powr_le1",
     "[| 0 <= ?a; 0 <= ?x; ?x <= 1 |] ==> ?x powr ?a <= 1",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_hole 2, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_hole 1))),
    ("Transcendental.cos_monotone_0_pi",
     "[| 0 <= ?y; ?y < ?x; ?x <= pi |] ==> cos ?x < cos ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Transcendental.cos_monotone_0_pi_le",
     "[| 0 <= ?y; ?y <= ?x; ?x <= pi |] ==> cos ?x <= cos ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Transcendental.sin_eq_0_pi",
     "[| - pi < ?x; ?x < pi; sin ?x = 0 |] ==> ?x = 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 3),
        template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?C ` \<Union> (?B ` ?A)) =
      (INT x:?A. \<Inter> (?C ` ?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT x:?A. \<Inter> (?C ` ?B x)) =
      \<Inter> (?C ` \<Union> (?B ` ?A))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Topological_Spaces.uniformly_continuous_on_uniformity",
     "uniformly_continuous_on ?s ?f =
      (LIM (x, y) uniformity_on ?s. (?f x, ?f y) :> uniformity)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               t_empty)))))),
    ("Product_Type.disjnt_Sigma_iff",
     "disjnt (Sigma ?A ?C) (Sigma ?B ?C) =
      ((ALL i:?A Int ?B. ?C i = {}) | disjnt ?A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Fun_More.atLeastLessThan_less_eq3",
     "(EX f. inj_on f {0..<?m} & f ` {0..<?m} <= {0..<?n}) = (?m <= ?n)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Countable_Set_Type.card_of_countable_sets_Func",
     "|{X. X <= ?A & countable X & X ~= {}}| \<le>o |?A| ^c natLeq",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, t_empty))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1))),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun (=) ?S)
         (rel_fun
           (rel_fun ?R (rel_fun (list_all2 (rel_prod (rel_trm ?R) ?S)) ?S))
           (rel_fun (rel_trm ?R) ?S)))
       rec_trm rec_trm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3, template_var 0)),
                               template_var 1))),
                         template_var 1))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Countable_Set_Type.csubset_parametric",
     "bi_unique ?A ==>
      rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (=)) csubset_eq
       csubset_eq",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 2)),
               t_empty),
             t_empty)
           ))),
    ("Transcendental.lemma_exp_total",
     "1 <= ?y ==> EX x>=0. x <= ?y - 1 & exp x = ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("MacLaurin.exp_lower_Taylor_quadratic",
     "0 <= ?x ==> 1 + ?x + ?x\<^sup>2 / 2 <= exp ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 9, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_hole 1,
               template_app (template_hole 3, template_hole 2)))),
         template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.INT_absorb",
     "?k : ?I ==> ?A ?k Int \<Inter> (?A ` ?I) = \<Inter> (?A ` ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Complete_Lattices.bij_image_INT",
     "bij ?f ==> ?f ` \<Inter> (?B ` ?A) = (INT x:?A. ?f ` ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Topological_Spaces.Inf_as_limit",
     "?A ~= {} ==>
      EX u. (ALL n. u n : ?A) & u \<longlonglongrightarrow> Inf ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Infinite_Set.MOST_imp_iff",
     "MOST x. ?P x ==> (MOST x. ?P x --> ?Q x) = (MOST x. ?Q x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_hole 2),
         template_app
          (template_app (template_hole 3, t_empty), template_hole 2)))),
    ("Transcendental.DERIV_fun_exp",
     "(?g has_field_derivative ?m) (at ?x) ==>
      ((%x. exp (?g x)) has_field_derivative exp (?g ?x) * ?m) (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 1,
                     template_app (template_var 2, template_var 0))),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))
           ))),
    ("Transcendental.DERIV_fun_sin",
     "(?g has_field_derivative ?m) (at ?x) ==>
      ((%x. sin (?g x)) has_field_derivative cos (?g ?x) * ?m) (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 2, template_var 0))),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))
           ))),
    ("Transcendental.has_field_derivative_cosh",
     "(?g has_field_derivative ?Db) (at ?x within ?s) ==>
      ((%x. cosh (?g x)) has_field_derivative sinh (?g ?x) * ?Db)
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 1))),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.has_field_derivative_sinh",
     "(?g has_field_derivative ?Db) (at ?x within ?s) ==>
      ((%x. sinh (?g x)) has_field_derivative cosh (?g ?x) * ?Db)
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 1))),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.filterlim_at_within_not_equal",
     "filterlim ?f (at ?a within ?s) ?F ==>
      \<forall>\<^sub>F w in ?F. ?f w : ?s & ?f w ~= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 1)
           ))),
    ("Transcendental.termdiff_converges_all",
     "(!!x. summable (%n. ?c n * x ^ n)) ==>
      summable (%n. diffs ?c n * ?x ^ n)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complete_Lattices.INT_greatest",
     "(!!x. x : ?A ==> ?C <= ?B x) ==> ?C <= \<Inter> (?B ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Complete_Lattices.INT_I",
     "(!!x. x : ?A ==> ?b : ?B x) ==> ?b : \<Inter> (?B ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Topological_Spaces.generate_topology_Union",
     "(!!k. k : ?I ==> generate_topology ?S (?K k)) ==>
      generate_topology ?S (\<Union> (?K ` ?I))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Transfer.rtranclp_parametric",
     "[| bi_unique ?A; bi_total ?A |]
      ==> rel_fun (rel_fun ?A (rel_fun ?A (=)))
           (rel_fun ?A (rel_fun ?A (=))) rtranclp rtranclp",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_set (rel_set ?A)) (rel_set ?A))
           \<Inter> \<Inter>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0))),
                   template_app (template_hole 2, template_var 0))),
               t_empty),
             t_empty)
           ))),
    ("Transcendental.binomial_strict_mono",
     "[| ?k < ?k'; 2 * ?k' <= ?n |] ==> ?n choose ?k < ?n choose ?k'",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transcendental.less_powr_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (?x < ?b powr ?y) = (log ?b ?x < ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Transcendental.less_log_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (?y < log ?b ?x) = (?b powr ?y < ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Transcendental.log_less_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (log ?b ?x < ?y) = (?x < ?b powr ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Transcendental.powr_less_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (?b powr ?y < ?x) = (?y < log ?b ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Transcendental.le_powr_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (?x <= ?b powr ?y) = (log ?b ?x <= ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Transcendental.le_log_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (?y <= log ?b ?x) = (?b powr ?y <= ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Transcendental.log_le_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (log ?b ?x <= ?y) = (?x <= ?b powr ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Transcendental.powr_le_iff",
     "[| 1 < ?b; 0 < ?x |] ==> (?b powr ?y <= ?x) = (?y <= log ?b ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Transcendental.ln_diff_le",
     "[| 0 < ?x; 0 < ?y |] ==> ln ?x - ln ?y <= (?x - ?y) / ?y",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 0)))),
    ("Transcendental.binomial_mono",
     "[| ?k <= ?k'; 2 * ?k' <= ?n |] ==> ?n choose ?k <= ?n choose ?k'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transcendental.continuous_ln",
     "[| continuous ?F ?f; ?f (Lim ?F (%x. x)) ~= 0 |]
      ==> continuous ?F (%x. ln (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 2, template_var 1), t_empty)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; ALL x:?s. ?f x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. sgn (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; ALL x:?s. ?f x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. inverse (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_ln",
     "[| continuous_on ?s ?f; ALL x:?s. ?f x ~= 0 |]
      ==> continuous_on ?s (%x. ln (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Transcendental.arcsin_eq_iff",
     "[| \<bar>?x\<bar> <= 1; \<bar>?y\<bar> <= 1 |]
      ==> (arcsin ?x = arcsin ?y) = (?x = ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_hole 3),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_hole 3)],
       template_bimplication
        (template_equation
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Transcendental.arccos_less_mono",
     "[| \<bar>?x\<bar> <= 1; \<bar>?y\<bar> <= 1 |]
      ==> (arccos ?x < arccos ?y) = (?y < ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_hole 3),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Transcendental.arcsin_less_mono",
     "[| \<bar>?x\<bar> <= 1; \<bar>?y\<bar> <= 1 |]
      ==> (arcsin ?x < arcsin ?y) = (?x < ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_hole 3),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transcendental.arccos_le_mono",
     "[| \<bar>?x\<bar> <= 1; \<bar>?y\<bar> <= 1 |]
      ==> (arccos ?x <= arccos ?y) = (?y <= ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_hole 2),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 1)))),
    ("Transcendental.arcsin_le_mono",
     "[| \<bar>?x\<bar> <= 1; \<bar>?y\<bar> <= 1 |]
      ==> (arcsin ?x <= arcsin ?y) = (?x <= ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_hole 2),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Countable_Set_Type.cIntE",
     "[| cin ?c (cInt ?A ?B); [| cin ?c ?A; cin ?c ?B |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; cosh ?a1 = ?y |]
      ==> ((%x. cosh (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; exp ?a1 = ?y |]
      ==> ((%x. exp (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; sinh ?a1 = ?y |]
      ==> ((%x. sinh (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; - ?a1 = ?y |]
      ==> ((%x. - ?f1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; norm ?a1 = ?y |]
      ==> ((%x. norm (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Transcendental.tendsto_arcosh",
     "[| (?f \<longlongrightarrow> ?a) ?F; 1 < ?a |]
      ==> ((%x. arcosh (?f x)) \<longlongrightarrow> arcosh ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 1, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; arsinh ?a1 = ?y |]
      ==> ((%x. arsinh (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?l1) ?F; \<bar>?l1\<bar> = ?y |]
      ==> ((%x. \<bar>?f1 x\<bar>) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?x1) ?F; sqrt ?x1 = ?y |]
      ==> ((%x. sqrt (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?x1) ?F; arctan ?x1 = ?y |]
      ==> ((%x. arctan (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?g1 \<longlongrightarrow> ?a1) ?F; of_real ?a1 = ?y |]
      ==> ((%x. of_real (?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?g1 \<longlongrightarrow> ?a1) ?F; Im ?a1 = ?y |]
      ==> ((%x. Im (?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?g1 \<longlongrightarrow> ?a1) ?F; Re ?a1 = ?y |]
      ==> ((%x. Re (?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?g1 \<longlongrightarrow> ?a1) ?F; cnj ?a1 = ?y |]
      ==> ((%x. cnj (?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; fst ?a1 = ?y |]
      ==> ((%x. fst (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; snd ?a1 = ?y |]
      ==> ((%x. snd (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; cos ?a1 = ?y |]
      ==> ((%x. cos (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; sin ?a1 = ?y |]
      ==> ((%x. sin (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Product_Type.map_prod_surj",
     "[| surj ?f; surj ?g |] ==> surj (map_prod ?f ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 1),
            template_hole 10),
          template_hole 9),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 0),
            template_hole 6),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Transitive_Closure.converse_rtrancl_into_rtrancl",
     "[| (?a, ?b) : ?r; (?b, ?c) : ?r^* |] ==> (?a, ?c) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_into_trancl2",
     "[| (?a, ?b) : ?r; (?b, ?c) : ?r^* |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.trancl_into_trancl2",
     "[| (?a, ?b) : ?r; (?b, ?c) : ?r^+ |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topological_Spaces.continuous_on_Icc_at_rightD",
     "[| continuous_on {?a..?b} ?f; ?a < ?b |]
      ==> (?f \<longlongrightarrow> ?f ?a) (at_right ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_var 0, template_var 2))),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Topological_Spaces.continuous_on_Icc_at_leftD",
     "[| continuous_on {?a..?b} ?f; ?a < ?b |]
      ==> (?f \<longlongrightarrow> ?f ?b) (at_left ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_var 0, template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Transitive_Closure.transitive_closure_trans",
     "[| (?a, ?b) : ?r^*; (?b, ?c) : ?r |] ==> (?a, ?c) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_into_trancl1",
     "[| (?a, ?b) : ?r^*; (?b, ?c) : ?r |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.trancl_into_trancl",
     "[| (?a, ?b) : ?r^+; (?b, ?c) : ?r |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topological_Spaces.LIM_unique",
     "[| ?f \<midarrow>?a\<rightarrow> ?L;
         ?f \<midarrow>?a\<rightarrow> ?M |]
      ==> ?L = ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Topological_Spaces.connected_Union",
     "[| !!s. s : ?S ==> connected s; \<Inter> ?S ~= {} |]
      ==> connected (\<Union> ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Quotient.QT_ext",
     "[| !!x. Quot_True (?a x) ==> ?f x = ?g x; Quot_True ?a |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Transfer.right_unique_parametric",
     "[| bi_total ?A; bi_unique ?B; bi_total ?B |]
      ==> rel_fun (rel_fun ?A (rel_fun ?B (=))) (=) right_unique
           right_unique",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.left_unique_parametric",
     "[| bi_unique ?A; bi_total ?A; bi_total ?B |]
      ==> rel_fun (rel_fun ?A (rel_fun ?B (=))) (=) left_unique
           left_unique",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.left_unique_transfer",
     "[| right_total ?A; right_total ?B; bi_unique ?A |]
      ==> rel_fun (rel_fun ?A (rel_fun ?B (=))) (-->) left_unique
           left_unique",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.right_unique_transfer",
     "[| right_total ?A; right_total ?B; bi_unique ?B |]
      ==> rel_fun (rel_fun ?A (rel_fun ?B (=))) (-->) right_unique
           right_unique",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3))),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Topological_Spaces.continuous_on_inv_into",
     "[| continuous_on ?s ?f; compact ?s; inj_on ?f ?s |]
      ==> continuous_on (?f ` ?s) (the_inv_into ?s ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.arccos_less_arccos",
     "[| - 1 <= ?x; ?x < ?y; ?y <= 1 |] ==> arccos ?y < arccos ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Transcendental.arcsin_less_arcsin",
     "[| - 1 <= ?x; ?x < ?y; ?y <= 1 |] ==> arcsin ?x < arcsin ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.arccos_le_arccos",
     "[| - 1 <= ?x; ?x <= ?y; ?y <= 1 |] ==> arccos ?y <= arccos ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_hole 1),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Transcendental.arcsin_le_arcsin",
     "[| - 1 <= ?x; ?x <= ?y; ?y <= 1 |] ==> arcsin ?x <= arcsin ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_hole 1),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cos_monotone_minus_pi_0",
     "[| - pi <= ?y; ?y < ?x; ?x <= 0 |] ==> cos ?y < cos ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cos_monotone_minus_pi_0'",
     "[| - pi <= ?y; ?y <= ?x; ?x <= 0 |] ==> cos ?y <= cos ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sincos_principal_value",
     "EX y. (- pi < y & y <= pi) & sin y = sin ?x & cos y = cos ?x",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Complete_Lattices.INT_Un",
     "\<Inter> (?M ` (?A Un ?B)) =
      \<Inter> (?M ` ?A) Int \<Inter> (?M ` ?B)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Countable_Set_Type.Compr_cimage_eq",
     "{x. cin x (cimage ?f ?A) & ?P x} = ?f ` {x. cin x ?A & ?P (?f x)}",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app (template_hole 1, t_empty)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x Int ?B) =
      (if ?C = {} then UNIV else \<Inter> (?A ` ?C) Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 0))),
               template_var 1))
           ))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) Int ?B =
      (if ?C = {} then ?B else INT x:?C. ?A x Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 1)))
           ))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A Int ?B x) =
      (if ?C = {} then UNIV else ?A Int \<Inter> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_var 0))))
           ))),
    ("Complete_Lattices.INT_extend_simps",
     "?A Int \<Inter> (?B ` ?C) =
      (if ?C = {} then ?A else INT x:?C. ?A Int ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 0)))
           ))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x - ?B) =
      (if ?C = {} then UNIV else \<Inter> (?A ` ?C) - ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 0))),
               template_var 1))
           ))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A - ?B x) =
      (if ?C = {} then UNIV else ?A - \<Union> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 0))))
           ))),
    ("Complete_Lattices.INT_extend_simps",
     "?A - \<Union> (?B ` ?C) =
      (if ?C = {} then ?A else INT x:?C. ?A - ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, t_empty), template_var 0)))
           ))),
    ("Product_Type.image_paired_Times",
     "(%(x, y). (?f x, ?g y)) ` (?A \<times> ?B) =
      ?f ` ?A \<times> ?g ` ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         t_empty))),
    ("Transcendental.product_atMost_eq_Un",
     "?A \<times> {..?m} =
      (SIGMA i:?A. {..?m - i}) Un (SIGMA i:?A. {?m - i<..?m})",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)),
         template_app
          (template_app (template_hole 4, template_var 1), t_empty)))),
    ("Topological_Spaces.connected_iff_interval",
     "connected ?U = (ALL x:?U. ALL y:?U. ALL z>=x. z <= y --> z : ?U)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app (template_hole 4, template_var 0), t_empty))),
    ("Topological_Spaces.filterlim_at_split",
     "filterlim ?f ?F (at ?x) =
      (filterlim ?f ?F (at_left ?x) & filterlim ?f ?F (at_right ?x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 0, template_var 0)))))),
    ("Transitive_Closure.rtrancl_eq_or_trancl",
     "((?x, ?y) : ?R^*) = (?x = ?y | ?x ~= ?y & (?x, ?y) : ?R^+)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Topological_Spaces.eventually_Lim_ident_at",
     "eventually (?P (Lim (at ?x within ?X) (%x. x))) (at ?x within ?X) =
      eventually (?P ?x) (at ?x within ?X)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.tanh_real_altdef",
     "tanh ?x = (1 - exp (- 2 * ?x)) / (1 + exp (- 2 * ?x))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))),
                 template_var 0)))),
         template_app
          (template_app (template_hole 0, template_hole 7),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_var 0)))))),
    ("Transfer.transfer_raw",
     "bi_total ?C ==>
      Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?B (=)))
         (rel_fun (rel_fun ?C ?A) (rel_fun (rel_fun ?C ?B) (=))))
       fun_ord fun_ord",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_hole 6))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_hole 6)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cDiff_parametric",
     "bi_unique ?A ==>
      rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (rel_cset ?A)) cDiff
       cDiff",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0))),
               t_empty),
             t_empty)
           ))),
    ("Countable_Set_Type.cInt_parametric",
     "bi_unique ?A ==>
      rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (rel_cset ?A)) cInt
       cInt",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0))),
               t_empty),
             t_empty)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel (rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (=)))
       csubset_eq csubset_eq",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 2))),
               t_empty),
             t_empty)
           ))),
    ("Complete_Lattices.INT_insert_distrib",
     "?u : ?A ==>
      (INT x:?A. insert ?a (?B x)) = insert ?a (\<Inter> (?B ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 2)))))),
    ("Transcendental.arctan_inverse",
     "?x ~= 0 ==> arctan (1 / ?x) = sgn ?x * pi / 2 - arctan ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_app (template_hole 9, template_var 0))))),
    ("Cardinal_Order_Relation.ordIso_Times_cong1",
     "?r =o ?r' ==> |Field ?r \<times> ?C| =o |Field ?r' \<times> ?C|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_hole 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 2)),
                       t_empty))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Cardinal_Order_Relation.ordIso_Times_cong2",
     "?r =o ?r' ==> |?A \<times> Field ?r| =o |?A \<times> Field ?r'|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_hole 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       t_empty))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Transcendental.DERIV_fun_cos",
     "(?g has_field_derivative ?m) (at ?x) ==>
      ((%x. cos (?g x)) has_field_derivative - sin (?g ?x) * ?m) (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_var 2, template_var 0)))),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4))
           ))),
    ("Stream.sdrop_while_sdrop_LEAST",
     "EX n. ?P (?s !! n) ==>
      sdrop_while (Not o ?P) ?s = sdrop (LEAST n. ?P (?s !! n)) ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("Transitive_Closure.tranclD",
     "(?x, ?y) : ?R^+ ==> EX z. (?x, z) : ?R & (z, ?y) : ?R^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Transitive_Closure.tranclD2",
     "(?x, ?y) : ?R^+ ==> EX z. (?x, z) : ?R^* & (z, ?y) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Cardinal_Order_Relation.card_of_Times_cong1",
     "|?A| =o |?B| ==> |?A \<times> ?C| =o |?B \<times> ?C|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 2)),
                  template_app (template_hole 8, template_var 1))),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       t_empty))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Cardinal_Order_Relation.card_of_Times_cong2",
     "|?A| =o |?B| ==> |?C \<times> ?A| =o |?C \<times> ?B|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 2)),
                  template_app (template_hole 8, template_var 1))),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       t_empty))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Transcendental.exp_bound_lemma",
     "norm ?z <= 1 / 2 ==> norm (exp ?z) <= 1 + 2 * norm ?z",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 0),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 8, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app (template_hole 8, template_var 0)))))),
    ("Topological_Spaces.isCont_cong",
     "\<forall>\<^sub>F x in nhds ?x. ?f x = ?g x ==>
      isCont ?f ?x = isCont ?g ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 1)))),
    ("Transitive_Closure.mono_rtranclp",
     "(!!a b. ?x a b --> ?y a b) ==> ?x^** ?a ?b --> ?y^** ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_intros",
     "(!!i. i : ?I ==> continuous ?F (?f i)) ==>
      continuous ?F (%x. SUM i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "(!!i. i : ?I ==> continuous ?F (?f i)) ==>
      continuous ?F (%x. PROD i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "(!!i. i : ?I ==> continuous_on ?S (?f i)) ==>
      continuous_on ?S (%x. SUM i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "(!!i. i : ?I ==> continuous_on ?S (?f i)) ==>
      continuous_on ?S (%x. PROD i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "(!!i. i : ?S ==> continuous ?F (?f i)) ==>
      continuous ?F (%x. PROD i:?S. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "(!!i. i : ?S ==> continuous_on ?s (?f i)) ==>
      continuous_on ?s (%x. PROD i:?S. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Product_Type.cond_case_prod_eta",
     "(!!x y. ?f x y = ?g (x, y)) ==> (%(x, y). ?f x y) = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("TermsAndClauses.subst_cong",
     "(!!x. x : vars ?T ==> ?\<pi>1.0 x = ?\<pi>2.0 x) ==>
      subst ?\<pi>1.0 ?T = subst ?\<pi>2.0 ?T",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("TermsAndClauses.substA_congA",
     "(!!x. x : varsA ?at ==> ?\<pi>1.0 x = ?\<pi>2.0 x) ==>
      substA ?\<pi>1.0 ?at = substA ?\<pi>2.0 ?at",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("TermsAndClauses.substC_congC",
     "(!!x. x : varsC ?c ==> ?\<pi>1.0 x = ?\<pi>2.0 x) ==>
      substC ?\<pi>1.0 ?c = substC ?\<pi>2.0 ?c",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("TermsAndClauses.substL_congL",
     "(!!x. x : varsL ?l ==> ?\<pi>1.0 x = ?\<pi>2.0 x) ==>
      substL ?\<pi>1.0 ?l = substL ?\<pi>2.0 ?l",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("TermsAndClauses.substPB_congPB",
     "(!!x. x : varsPB ?\<Phi> ==> ?\<pi>1.0 x = ?\<pi>2.0 x) ==>
      substPB ?\<pi>1.0 ?\<Phi> = substPB ?\<pi>2.0 ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?A (rel_fun ?A (=)))
             (rel_fun ?A (rel_fun ?A (=))))
           rtranclp rtranclp",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transcendental.log_root",
     "[| 0 < ?n; 0 < ?a |] ==> log ?b (root ?n ?a) = log ?b ?a / real ?n",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app (template_hole 0, template_var 2))))),
    ("Transcendental.log_base_root",
     "[| 0 < ?n; 0 < ?b |] ==> log (root ?n ?b) ?x = real ?n * log ?b ?x",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Transcendental.powr_inj",
     "[| 0 < ?a; ?a ~= 1 |] ==> (?a powr ?x = ?a powr ?y) = (?x = ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Transcendental.log_base_change",
     "[| 0 < ?a; ?a ~= 1 |] ==> log ?b ?x = log ?a ?x / log ?a ?b",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Transcendental.tendsto_neg_powr",
     "[| ?s < 0; filterlim ?f at_top ?F |]
      ==> ((%x. ?f x powr ?s) \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 0, template_hole 4)),
             template_var 0)
           ))),
    ("Transcendental.exp_bound",
     "[| 0 <= ?x; ?x <= 1 |] ==> exp ?x <= 1 + ?x + ?x\<^sup>2",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 4, template_hole 6),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Transcendental.ln_one_plus_pos_lower_bound",
     "[| 0 <= ?x; ?x <= 1 |] ==> ?x - ?x\<^sup>2 <= ln (1 + ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 7)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 7),
             template_var 0))))),
    ("Transcendental.continuous_tan",
     "[| continuous ?F ?f; cos (?f (Lim ?F (%x. x))) ~= (0::?'a) |]
      ==> continuous ?F (%x. tan (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    t_empty))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_cot",
     "[| continuous ?F ?f; sin (?f (Lim ?F (%x. x))) ~= (0::?'a) |]
      ==> continuous ?F (%x. cot (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    t_empty))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_tanh",
     "[| continuous ?F ?f; cosh (?f (Lim ?F (%x. x))) ~= (0::?'a) |]
      ==> continuous ?F (%x. tanh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    t_empty))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_tan",
     "[| continuous_on ?s ?f; ALL x:?s. cos (?f x) ~= (0::?'a) |]
      ==> continuous_on ?s (%x. tan (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_cot",
     "[| continuous_on ?s ?f; ALL x:?s. sin (?f x) ~= (0::?'a) |]
      ==> continuous_on ?s (%x. cot (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; ALL x:?s. ?f x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. ?f x powi ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("TermsAndClauses.varsPB_sappend",
     "[| ?\<Phi>1.0 ~= {}; ?\<Phi>2.0 ~= {} |]
      ==> varsPB (?\<Phi>1.0 @@ ?\<Phi>2.0) =
          varsPB ?\<Phi>1.0 Un varsPB ?\<Phi>2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Countable_Set_Type.cDiffE",
     "[| cin ?c (cDiff ?A ?B); [| cin ?c ?A; ~ cin ?c ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Infinite_Set.MOST_conjI",
     "[| MOST x. ?P x; MOST x. ?Q x |] ==> MOST x. ?P x & ?Q x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Infinite_Set.MOST_rev_mp",
     "[| MOST x. ?P x; MOST x. ?P x --> ?Q x |] ==> MOST x. ?Q x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Infinite_Set.MOST_mono",
     "[| MOST x. ?P x; !!x. ?P x ==> ?Q x |] ==> MOST x. ?Q x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Transcendental.tendsto_ln",
     "[| (?f \<longlongrightarrow> ?a) ?F; ?a ~= 0 |]
      ==> ((%x. ln (?f x)) \<longlongrightarrow> ln ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~= (0::?'a) |]
      ==> ((%x. sgn (?f x)) \<longlongrightarrow> sgn ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F; ?a ~= (0::?'a) |]
      ==> ((%x. inverse (?f x)) \<longlongrightarrow> inverse ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.Lim_bounded",
     "[| ?f \<longlonglongrightarrow> ?l; ALL n>=?M. ?f n <= ?C |]
      ==> ?l <= ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Topological_Spaces.Lim_bounded2",
     "[| ?f \<longlonglongrightarrow> ?l; ALL n>=?N. ?C <= ?f n |]
      ==> ?C <= ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("Topological_Spaces.continuous_at_compose",
     "[| isCont ?f ?a; isCont ?g (?f ?a) |] ==> isCont (?g o ?f) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_hole 5)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_var 1, template_var 2)),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_hole 5)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| isCont ?f ?a; ?f ?a ~= (0::?'b) |] ==> isCont (%x. sgn (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)),
             t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous (at ?a within ?s) ?f; ?f ?a ~= (0::?'b) |]
      ==> continuous (at ?a within ?s) (%x. sgn (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous (at ?a within ?s) ?f; ?f ?a ~= (0::?'b) |]
      ==> continuous (at ?a within ?s) (%x. inverse (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Transcendental.isCont_ln'",
     "[| isCont ?f ?x; ?f ?x ~= 0 |] ==> isCont (%x. ln (?f x)) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)),
             t_empty)
           ))),
    ("Transcendental.continuous_within_ln",
     "[| continuous (at ?x within ?s) ?f; ?f ?x ~= 0 |]
      ==> continuous (at ?x within ?s) (%x. ln (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Transitive_Closure.trancl_rtrancl_trancl",
     "[| (?a, ?b) : ?r^+; (?b, ?c) : ?r^* |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_trans",
     "[| (?x, ?y) : ?r^*; (?y, ?z) : ?r^* |] ==> (?x, ?z) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_trancl_trancl",
     "[| (?x, ?y) : ?r^*; (?y, ?z) : ?r^+ |] ==> (?x, ?z) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.trancl_trans",
     "[| (?x, ?y) : ?r^+; (?y, ?z) : ?r^+ |] ==> (?x, ?z) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.irrefl_trancl_rD",
     "[| ALL x. (x, x) ~: ?r^+; (?x, ?y) : ?r |] ==> ?x ~= ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Tree.bst_wrt_mono",
     "[| !!x y. ?P x y ==> ?Q x y; bst_wrt ?P ?t |] ==> bst_wrt ?Q ?t",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_total ?A; bi_unique ?B; bi_total ?B |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?B (=))) (=))
           right_unique right_unique",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| bi_unique ?A; bi_total ?A; bi_total ?B |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?B (=))) (=))
           left_unique left_unique",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| right_total ?A; right_total ?B; bi_unique ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?B (=))) (-->))
           left_unique left_unique",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_hole 3))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| right_total ?A; right_total ?B; bi_unique ?B |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (rel_fun ?B (=))) (-->))
           right_unique right_unique",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_hole 3))),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cBallE",
     "[| cBall ?A ?P; ?P ?x ==> ?Q; ~ cin ?x ?A ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transcendental.powr_less_mono2",
     "[| 0 < ?a; 0 <= ?x; ?x < ?y |] ==> ?x powr ?a < ?y powr ?a",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2),
        template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transcendental.powr_less_mono2_neg",
     "[| ?a < 0; 0 < ?x; ?x < ?y |] ==> ?y powr ?a < ?x powr ?a",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 1),
        template_inequation (less_than, template_hole 1, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Transcendental.powr_mono2",
     "[| 0 <= ?a; 0 <= ?x; ?x <= ?y |] ==> ?x powr ?a <= ?y powr ?a",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_hole 1, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transcendental.powr_mono2'",
     "[| ?a <= 0; 0 < ?x; ?x <= ?y |] ==> ?y powr ?a <= ?x powr ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_hole 2),
        template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Set_Interval.atLeastLessThan_inj",
     "[| {?a..<?b} = {?c..<?d}; ?a < ?b; ?c < ?d |] ==> ?a = ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation (template_var 3, template_var 1))),
    ("Set_Interval.atLeastLessThan_inj",
     "[| {?a..<?b} = {?c..<?d}; ?a < ?b; ?c < ?d |] ==> ?b = ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation (template_var 2, template_var 0))),
    ("Transcendental.lemma_tan_total1",
     "EX x>- (pi / 2). x < pi / 2 & tan x = ?y",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("Transcendental.tan_total",
     "EX! x. - (pi / 2) < x & x < pi / 2 & tan x = ?y",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("Complete_Lattices.INT_Int_distrib",
     "(INT i:?I. ?A i Int ?B i) =
      \<Inter> (?A ` ?I) Int \<Inter> (?B ` ?I)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Product_Type.image_split_eq_Sigma",
     "(%x. (?f x, ?g x)) ` ?A = (SIGMA x:?f ` ?A. ?g ` (?f -` {x} Int ?A))",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         t_empty))),
    ("Topological_Spaces.continuous_on_open_invariant",
     "continuous_on ?s ?f =
      (ALL B. open B --> (EX A. open A & A Int ?s = ?f -` B Int ?s))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Topological_Spaces.continuous_on_closed_invariant",
     "continuous_on ?s ?f =
      (ALL B. closed B --> (EX A. closed A & A Int ?s = ?f -` B Int ?s))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Transcendental.sin_zero_iff_int",
     "(sin ?x = 0) = (EX i. even i & ?x = real_of_int i * (pi / 2))",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app (template_hole 12, template_var 0)),
         template_hole 11),
       template_app (template_hole 10, t_empty))),
    ("Countable_Set_Type.cUn_cInt_crazy",
     "cUn (cUn (cInt ?A ?B) (cInt ?B ?C)) (cInt ?C ?A) =
      cInt (cInt (cUn ?A ?B) (cUn ?B ?C)) (cUn ?C ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Transcendental.cos_paired",
     "(%n. (- 1) ^ n / fact (2 * n) * ?x ^ (2 * n)) sums cos ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 11, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun ?S
         (rel_fun
           (rel_fun (rel_tree ?R)
             (rel_fun ?R
               (rel_fun (rel_tree ?R) (rel_fun ?S (rel_fun ?S ?S)))))
           (rel_fun (rel_tree ?R) ?S)))
       rec_tree rec_tree",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_var 0)),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 7, template_var 0)),
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_app
                              (template_app
                                (template_hole 3, template_var 1),
                               template_var 1)))))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 7, template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_set ?A)
         (rel_fun (rel_fun ?A (rel_set ?B)) (rel_set ?B)))
       (%A f. \<Union> (f ` A)) (%A f. \<Union> (f ` A))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app (template_hole 4, template_var 0))),
                   template_app (template_hole 4, template_var 0)))),
             t_empty),
           t_empty)
         )),
    ("Countable_Set_Type.countable_or",
     "countable ?A ==>
      (EX f. finite ?A & inj_on f ?A) |
      (EX f. infinite ?A & bij_betw f ?A UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_app (template_hole 6, t_empty))
           ))),
    ("Infinite_Set.MOST_finite_Ball_distrib",
     "finite ?A ==>
      (MOST y. ALL x:?A. ?P x y) = (ALL x:?A. MOST y. ?P x y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)))),
    ("Transitive_Closure.trancl_finite_eq_relpow",
     "finite ?R ==> ?R^+ = \<Union> ((^^) ?R ` {n. 0 < n & n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 5, t_empty)))))),
    ("Transfer.relcompp_transfer",
     "bi_total ?B ==>
      rel_fun (rel_fun ?A (rel_fun ?B (=)))
       (rel_fun (rel_fun ?B (rel_fun ?C (=))) (rel_fun ?A (rel_fun ?C (=))))
       (OO) (OO)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 6))),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 6)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel
       (rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (rel_cset ?A))) cDiff
       cDiff",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 3, template_var 0)))),
               t_empty),
             t_empty)
           ))),
    ("Transfer.transfer_raw",
     "bi_unique ?A ==>
      Transfer.Rel
       (rel_fun (rel_cset ?A) (rel_fun (rel_cset ?A) (rel_cset ?A))) cInt
       cInt",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 3, template_var 0)))),
               t_empty),
             t_empty)
           ))),
    ("Transcendental.lemma_tan_total",
     "0 < ?y ==> EX x>0. x < pi / 2 & ?y < tan x",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 0)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Transcendental.tan_total_pos",
     "0 <= ?y ==> EX x>=0. x < pi / 2 & tan x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_hole 10, template_var 0)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Transcendental.sums_if'",
     "?g sums ?x ==>
      (%n. if even n then 0 else ?g ((n - 1) div 2)) sums ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, t_empty), template_var 0)
           ))),
    ("Transcendental.tan_sec",
     "cos ?x ~= (0::?'a) ==>
      (1::?'a) + (tan ?x)\<^sup>2 = (inverse (cos ?x))\<^sup>2",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 0,
               template_app (template_hole 9, template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))))),
    ("Transcendental.has_derivative_exp",
     "(?g has_derivative ?g') (at ?x within ?s) ==>
      ((%x. exp (?g x)) has_derivative (%x. ?g' x * exp (?g ?x)))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), t_empty),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.has_derivative_sin",
     "(?g has_derivative ?g') (at ?x within ?s) ==>
      ((%x. sin (?g x)) has_derivative (%x. ?g' x * cos (?g ?x)))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Transitive_Closure.rtranclD",
     "(?a, ?b) : ?R^* ==> ?a = ?b | ?a ~= ?b & (?a, ?b) : ?R^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Product_Type.case_prodI2",
     "(!!a b. ?p = (a, b) ==> ?c a b) ==> case ?p of (a, b) => ?c a b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_var 1)
           ))),
    ("Transfer.left_uniqueI",
     "(!!x y z. [| ?A x z; ?A y z |] ==> x = y) ==> left_unique ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transfer.right_uniqueI",
     "(!!x y z. [| ?A x y; ?A x z |] ==> y = z) ==> right_unique ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Product_Type.prod_cases4",
     "(!!a b c d. ?y = (a, b, c, d) ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.arccos_cos_eq_abs_2pi",
     "(!!k. arccos (cos ?\<theta>) =
            \<bar>?\<theta> - real_of_int k * (2 * pi)\<bar> ==>
            ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Cardinal_Order_Relation.Times_infinite_bij_betw_types",
     "[| infinite UNIV; inj ?g |] ==> (EX f. bij f) & (EX h. bij h)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_hole 9))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Transcendental.powr_mult",
     "[| 0 <= ?x; 0 <= ?y |]
      ==> (?x * ?y) powr ?a = ?x powr ?a * ?y powr ?a",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Transcendental.powr_divide",
     "[| 0 <= ?x; 0 <= ?y |]
      ==> (?x / ?y) powr ?a = ?x powr ?a / ?y powr ?a",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Transcendental.abs_ln_one_plus_x_minus_x_bound_nonneg",
     "[| 0 <= ?x; ?x <= 1 |]
      ==> \<bar>ln (1 + ?x) - ?x\<bar> <= ?x\<^sup>2",
     template_implication
      ([template_inequation (less_equals, template_hole 9, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 8)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 8),
                   template_var 0))),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.powr_real_of_int'",
     "[| 0 <= ?x; ?x ~= 0 | 0 < ?n |]
      ==> ?x powr real_of_int ?n = ?x powi ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_hole 8))),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transcendental.continuous_artanh",
     "[| continuous ?F ?f; ?f (Lim ?F (%x. x)) : {- 1<..<1} |]
      ==> continuous ?F (%x. artanh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    t_empty))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1)),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Countable_Set_Type.cinsert_ident",
     "[| ~ cin ?x ?A; ~ cin ?x ?B |]
      ==> (cinsert ?x ?A = cinsert ?x ?B) = (?A = ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)
                )
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Transcendental.exp_ge_one_minus_x_over_n_power_n",
     "[| ?x <= real ?n; 0 < ?n |]
      ==> (1 - ?x / real ?n) ^ ?n <= exp (- ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 8, template_var 0)),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 8, template_var 0)))),
           template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Transcendental.cos_arcsin",
     "[| - 1 <= ?x; ?x <= 1 |] ==> cos (arcsin ?x) = sqrt (1 - ?x\<^sup>2)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_hole 9),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 9)],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 9),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Transcendental.sin_arccos",
     "[| - 1 <= ?x; ?x <= 1 |] ==> sin (arccos ?x) = sqrt (1 - ?x\<^sup>2)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_hole 9),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 9)],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 9),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Transfer.transfer_raw",
     "[| Transfer.Rel ?A (0::?'a) (0::?'b);
         Transfer.Rel (rel_fun ?A (rel_fun ?A ?A)) (+) (+) |]
      ==> Transfer.Rel (rel_fun (list_all2 ?A) ?A) sum_list sum_list",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 0),
                template_hole 11),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_var 0))),
                template_hole 6),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| Transfer.Rel ?A (1::?'a) (1::?'b);
         Transfer.Rel (rel_fun ?A (rel_fun ?A ?A)) (*) (*) |]
      ==> Transfer.Rel (rel_fun (list_all2 ?A) ?A) prod_list prod_list",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 0),
                template_hole 11),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_var 0))),
                template_hole 6),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Topological_Spaces.tendsto_imp_filterlim_at_right",
     "[| (?f \<longlongrightarrow> ?L) ?F;
         \<forall>\<^sub>F x in ?F. ?L < ?f x |]
      ==> filterlim ?f (at_right ?L) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_imp_filterlim_at_left",
     "[| (?f \<longlongrightarrow> ?L) ?F;
         \<forall>\<^sub>F x in ?F. ?f x < ?L |]
      ==> filterlim ?f (at_left ?L) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_tan",
     "[| (?f \<longlongrightarrow> ?a) ?F; cos ?a ~= (0::?'a) |]
      ==> ((%x. tan (?f x)) \<longlongrightarrow> tan ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.tendsto_cot",
     "[| (?f \<longlongrightarrow> ?a) ?F; sin ?a ~= (0::?'a) |]
      ==> ((%x. cot (?f x)) \<longlongrightarrow> cot ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; ?a1 ^ ?n1 = ?y |]
      ==> ((%x. ?f1 x ^ ?n1) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app (template_hole 2, template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?x1) ?F; root ?n1 ?x1 = ?y |]
      ==> ((%x. root ?n1 (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app (template_hole 2, template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 3),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 2)
           ))),
    ("Transcendental.tendsto_tanh",
     "[| (?f \<longlongrightarrow> ?a) ?F; cosh ?a ~= (0::?'a) |]
      ==> ((%x. tanh (?f x)) \<longlongrightarrow> tanh ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.exp_ge_one_plus_x_over_n_power_n",
     "[| - real ?n <= ?x; 0 < ?n |] ==> (1 + ?x / real ?n) ^ ?n <= exp ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1)),
          template_var 0),
        template_inequation (less_than, template_hole 5, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 7, template_var 1)))),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.isCont_tan'",
     "[| isCont ?f ?a; cos (?f ?a) ~= (0::?'a) |]
      ==> isCont (%x. tan (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)),
             t_empty)
           ))),
    ("Transcendental.isCont_cot'",
     "[| isCont ?f ?a; sin (?f ?a) ~= (0::?'a) |]
      ==> isCont (%x. cot (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)),
             t_empty)
           ))),
    ("Transcendental.continuous_within_tan",
     "[| continuous (at ?x within ?s) ?f; cos (?f ?x) ~= (0::?'a) |]
      ==> continuous (at ?x within ?s) (%x. tan (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 2)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Transcendental.continuous_within_cot",
     "[| continuous (at ?x within ?s) ?f; sin (?f ?x) ~= (0::?'a) |]
      ==> continuous (at ?x within ?s) (%x. cot (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 2)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_o2",
     "[| isCont ?f ?a; isCont ?g (?f ?a) |] ==> isCont (%x. ?g (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_var 1, template_var 2)),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_tendsto_compose",
     "[| isCont ?g ?l; (?f \<longlongrightarrow> ?l) ?F |]
      ==> ((%x. ?g (?f x)) \<longlongrightarrow> ?g ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_hole 4)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 3))),
             template_var 0)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous (at ?a within ?s) ?f; ?f ?a ~= (0::?'b) |]
      ==> continuous (at ?a within ?s) (%x. ?f x powi ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             t_empty)
           ))),
    ("Transcendental.continuous_at_within_tanh",
     "[| continuous (at ?x within ?A) ?f; cosh (?f ?x) ~= (0::?'a) |]
      ==> continuous (at ?x within ?A) (%x. tanh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 2)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Transitive_Closure.trancl_subset_Sigma_aux",
     "[| (?a, ?b) : ?r^*; ?r <= ?A \<times> ?A |] ==> ?a = ?b | ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0), t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Topological_Spaces.continuous_within_compose3",
     "[| isCont ?g (?f ?x); continuous (at ?x within ?s) ?f |]
      ==> continuous (at ?x within ?s) (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_var 3, template_var 2)),
                  template_hole 3)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Sum_Type.case_sum_inject",
     "[| case_sum ?f1.0 ?f2.0 = case_sum ?g1.0 ?g2.0;
         [| ?f1.0 = ?g1.0; ?f2.0 = ?g2.0 |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Product_Type.Pair_inject",
     "[| (?a, ?b) = (?a', ?b'); [| ?a = ?a'; ?b = ?b' |] ==> ?R |] ==> ?R",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Transcendental.log2_of_power_less",
     "[| ?m < 2 ^ ?n; 0 < ?m |] ==> log 2 (real ?m) < real ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 0)),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 6, template_hole 5))),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.log2_of_power_le",
     "[| ?m <= 2 ^ ?n; 0 < ?m |] ==> log 2 (real ?m) <= real ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 0)),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 7, template_hole 6))),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cos_gt_zero_pi",
     "[| - (pi / 2) < ?x; ?x < pi / 2 |] ==> 0 < cos ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.cos_ge_zero",
     "[| - (pi / 2) <= ?x; ?x <= pi / 2 |] ==> 0 <= cos ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Sum_Type.sumE",
     "[| !!x. ?s = Inl x ==> ?P; !!y. ?s = Inr y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.powr_log_cancel",
     "[| 0 < ?a; ?a ~= 1; 0 < ?x |] ==> ?a powr log ?a ?x = ?x",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Countable_Set_Type.csubsetCE",
     "[| csubset_eq ?A ?B; ~ cin ?c ?A ==> ?P; cin ?c ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_on_compose2",
     "[| continuous_on ?t ?g; continuous_on ?s ?f; ?f ` ?s <= ?t |]
      ==> continuous_on ?s (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), t_empty)
           ))),
    ("Transitive_Closure.symclpE",
     "[| symclp ?r ?x ?y; ?r ?x ?y ==> ?thesis; ?r ?y ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transfer.rel_funE",
     "[| rel_fun ?A ?B ?f ?g; ?A ?x ?y; ?B (?f ?x) (?g ?y) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 6, template_var 2), template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 5,
                   template_app (template_var 4, template_var 2)),
                 template_app (template_var 3, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_on_open_Un",
     "[| open ?s; open ?t; continuous_on ?s ?f; continuous_on ?t ?f |]
      ==> continuous_on (?s Un ?t) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Topological_Spaces.continuous_on_closed_Un",
     "[| closed ?s; closed ?t; continuous_on ?s ?f; continuous_on ?t ?f |]
      ==> continuous_on (?s Un ?t) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Transcendental.arctan",
     "- (pi / 2) < arctan ?y & arctan ?y < pi / 2 & tan (arctan ?y) = ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3))))),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 0))),
               template_var 0)))
         )),
    ("Transcendental.exp_first_two_terms",
     "exp ?x =
      (1::?'a) + ?x + (\<Sum>n. ?x ^ (n + 2) /\<^sub>R fact (n + 2))",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 0)),
         template_app (template_hole 8, t_empty)))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) - ?B =
      (if ?C = {} then UNIV - ?B else INT x:?C. ?A x - ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_hole 0),
                 template_var 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 1)))
           ))),
    ("Transcendental.cos_zero_iff_int",
     "(cos ?x = 0) = (EX i. odd i & ?x = real_of_int i * (pi / 2))",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 0)),
         template_hole 12),
       template_app (template_hole 11, t_empty))),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?S1a (rel_fun ?S1c (=)))
         (rel_fun (rel_fun ?S2a (rel_fun ?S2c (=)))
           (rel_fun (rel_efsym ?S1a ?S2a)
             (rel_fun (rel_efsym ?S1c ?S2c) (=)))))
       rel_efsym rel_efsym",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 3),
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 9))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 9))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_hole 9))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?S1a (rel_fun ?S1c (=)))
         (rel_fun (rel_fun ?S2a (rel_fun ?S2c (=)))
           (rel_fun (rel_sum ?S1a ?S2a) (rel_fun (rel_sum ?S1c ?S2c) (=)))))
       rel_sum rel_sum",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 3),
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 9))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 9))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_hole 9))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?S1a (rel_fun ?S1c (=)))
         (rel_fun (rel_fun ?S2a (rel_fun ?S2c (=)))
           (rel_fun (rel_prod ?S1a ?S2a)
             (rel_fun (rel_prod ?S1c ?S2c) (=)))))
       rel_prod rel_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 3),
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 9))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 9))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_hole 9))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?S1a (rel_fun ?S1c (=)))
         (rel_fun (rel_fun ?S2a (rel_fun ?S2c (=)))
           (rel_fun (rel_atm ?S1a ?S2a) (rel_fun (rel_atm ?S1c ?S2c) (=)))))
       rel_atm rel_atm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 3),
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 9))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 9))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_hole 9))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?S1a (rel_fun ?S1c (=)))
         (rel_fun (rel_fun ?S2a (rel_fun ?S2c (=)))
           (rel_fun (rel_lit ?S1a ?S2a) (rel_fun (rel_lit ?S1c ?S2c) (=)))))
       rel_lit rel_lit",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 3),
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 9))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 9))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_hole 9))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun ?S ?R)
         (rel_fun (rel_fun ?S (=))
           (rel_fun (rel_fun ?S (stream_all2 ?R))
             (rel_fun (rel_fun ?S ?S) (rel_fun ?S (stream_all2 ?R))))))
       corec_stream corec_stream",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 7)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app (template_hole 4, template_var 0))),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app
                          (template_hole 4, template_var 0))))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun (rel_trm ?R1.0) (rel_fun (rel_trm ?R1.0) ?S))
         (rel_fun (rel_fun ?R2.0 (rel_fun (list_all2 (rel_trm ?R1.0)) ?S))
           (rel_fun (rel_atm ?R1.0 ?R2.0) ?S)))
       case_atm case_atm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 2)),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 9, template_var 2)),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 9, template_var 2))),
                         template_var 1))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "Transfer.Rel
       (rel_fun (rel_fun (rel_trm ?R1.0) (rel_fun (rel_trm ?R1.0) ?S))
         (rel_fun (rel_fun ?R2.0 (rel_fun (list_all2 (rel_trm ?R1.0)) ?S))
           (rel_fun (rel_atm ?R1.0 ?R2.0) ?S)))
       rec_atm rec_atm",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 2)),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 9, template_var 2)),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 9, template_var 2))),
                         template_var 1))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "bi_total ?A ==>
      Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?A (=)))
         (rel_fun (rel_fun ?B (rel_fun ?B (=)))
           (rel_fun (rel_fun ?A ?B) (=))))
       monotone monotone",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 1),
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_hole 7))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_hole 7))),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 0)),
                       template_hole 7)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "bi_total ?B ==>
      Transfer.Rel
       (rel_fun (rel_fun ?A (rel_fun ?B (=)))
         (rel_fun (rel_fun ?B (rel_fun ?C (=)))
           (rel_fun ?A (rel_fun ?C (=)))))
       (OO) (OO)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_app
                        (template_app (template_hole 7, template_var 2),
                         template_hole 6))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 6))),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 6))))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.right_total_Domainp_transfer",
     "right_total ?B ==>
      rel_fun (rel_fun ?A (rel_fun ?B (=))) (rel_fun ?A (=))
       (%T x. EX y:Collect (Domainp ?B). T x y) Domainp",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_hole 5))),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 5)),
               t_empty),
             template_hole 0)
           ))),
    ("Topological_Spaces.eventually_nhds_top",
     "?b < top ==> eventually ?P (nhds top) = (EX b<top. ALL z>b. ?P z)",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 7)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_hole 7)),
         template_app (template_hole 3, t_empty)))),
    ("Transcendental.tanh_ln_real",
     "0 < ?x ==> tanh (ln ?x) = (?x\<^sup>2 - 1) / (?x\<^sup>2 + 1)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 0)],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_hole 1))))),
    ("Transcendental.powr_real_of_int",
     "0 < ?x ==>
      ?x powr real_of_int ?n =
      (if 0 <= ?n then ?x ^ nat ?n else inverse (?x ^ nat (- ?n)))",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0)))))))),
    ("Transcendental.log_base_10_eq2",
     "0 < ?x ==> log 10 ?x = log 10 (exp 1) * ln ?x",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 6, template_hole 4))))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 6, template_hole 4))))),
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.geometric_deriv_sums",
     "norm ?z < 1 ==>
      (%n. of_nat (Suc n) * ?z ^ n) sums
      ((1::?'a) / ((1::?'a) - ?z)\<^sup>2)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_var 0),
          template_hole 11)],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 3, template_hole 4),
                     template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))))
           ))),
    ("Transcendental.has_derivative_cos",
     "(?g has_derivative ?g') (at ?x within ?s) ==>
      ((%x. cos (?g x)) has_derivative (%x. ?g' x * - sin (?g ?x)))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), t_empty),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.central_binomial_odd",
     "odd ?n ==> ?n choose Suc (?n div 2) = ?n choose ?n div 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))))))),
    ("Transcendental.cos_tan",
     "\<bar>?x\<bar> < pi / 2 ==> cos ?x = 1 / sqrt (1 + (tan ?x)\<^sup>2)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 13, template_var 0),
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_hole 8))))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 12, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 9, template_hole 8))))))))),
    ("Topological_Spaces.continuous_on_swap_args",
     "continuous_on (?A \<times> ?B) (%(x, y). ?d x y) ==>
      continuous_on (?B \<times> ?A) (%(x, y). ?d y x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2), t_empty)),
              template_app (template_hole 3, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1), t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Product_Type.prod_induct5",
     "(!!a b c d e. ?P (a, b, c, d, e)) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Transfer.transfer_raw",
     "[| bi_total ?A; bi_unique ?A |]
      ==> Transfer.Rel
           (rel_fun (rel_fun (rel_set ?A) ?B)
             (rel_fun (rel_set (rel_fun ?C ?A)) (rel_fun ?C ?B)))
           fun_lub fun_lub",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_var 2)),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_var 2))),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.set_cinsert",
     "[| cin ?x ?A; !!B. [| ?A = cinsert ?x B; ~ cin ?x B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.real_exp_bound_lemma",
     "[| 0 <= ?x; ?x <= 1 / 2 |] ==> exp ?x <= 1 + 2 * ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 0))))),
    ("Topological_Spaces.tendsto_within_open",
     "[| ?a : ?S; open ?S |]
      ==> (?f \<longlongrightarrow> ?l) (at ?a within ?S) =
          ?f \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("Transcendental.continuous_on_arcosh'",
     "[| continuous_on ?A ?f; !!x. x : ?A ==> 1 <= ?f x |]
      ==> continuous_on ?A (%x. arcosh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Countable_Set_Type.rel_cset_cUNION",
     "[| rel_cset ?Q ?A ?B; rel_fun ?Q (rel_cset ?R) ?f ?g |]
      ==> rel_cset ?R (cUnion (cimage ?f ?A)) (cUnion (cimage ?g ?B))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)))
           ))),
    ("Order_Relation.Total_subset_Id",
     "[| Total ?r; ?r <= Id |] ==> ?r = {} | (EX a. ?r = {(a, a)})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Transfer.transfer_raw",
     "[| Transfer.Rel ?R (1::?'a) (1::?'b);
         Transfer.Rel (rel_fun ?R (rel_fun ?R ?R)) (*) (*) |]
      ==> Transfer.Rel (rel_fun ?R (rel_fun (=) ?R)) (^) (^)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 0),
                template_hole 12),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 0),
                    template_app
                     (template_app (template_hole 8, template_var 0),
                      template_var 0))),
                template_hole 7),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Countable_Set_Type.cimageE",
     "[| cin ?b (cimage ?f ?A);
         !!x. [| ?b = ?f x; cin x ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F; ?a ~= (0::?'a) |]
      ==> ((%x. ?f x powi ?n) \<longlongrightarrow> ?a powi ?n) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Topological_Spaces.LIMSEQ_le_const",
     "[| ?X \<longlonglongrightarrow> ?x; EX N. ALL n>=N. ?a <= ?X n |]
      ==> ?a <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Topological_Spaces.LIMSEQ_le_const2",
     "[| ?X \<longlonglongrightarrow> ?x; EX N. ALL n>=N. ?X n <= ?a |]
      ==> ?x <= ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Transitive_Closure.relpow_Suc_I2",
     "[| (?x, ?y) : ?R; (?y, ?z) : ?R ^^ ?n |] ==> (?x, ?z) : ?R ^^ Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 1)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("Topological_Spaces.continuous_within_compose",
     "[| continuous (at ?x within ?s) ?f;
         continuous (at (?f ?x) within ?f ` ?s) ?g |]
      ==> continuous (at ?x within ?s) (?g o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_var 1, template_var 3)),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 2))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Topological_Spaces.isCont_Pair",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. (?f x, ?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_hole 3)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_hole 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 3)),
             t_empty)
           ))),
    ("TermsAndClauses.trm_induct",
     "[| !!x. ?\<phi> (Var x);
         !!f Tl. list_all ?\<phi> Tl ==> ?\<phi> (Fn f Tl) |]
      ==> ?\<phi> ?T",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Topological_Spaces.filterlim_split_at",
     "[| filterlim ?f ?F (at_left ?x); filterlim ?f ?F (at_right ?x) |]
      ==> filterlim ?f ?F (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 0))
           ))),
    ("Transitive_Closure.relpow_Suc_I",
     "[| (?x, ?y) : ?R ^^ ?n; (?y, ?z) : ?R |] ==> (?x, ?z) : ?R ^^ Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1))
           ))),
    ("Product_Type.SigmaE2",
     "[| (?a, ?b) : Sigma ?A ?B; [| ?a : ?A; ?b : ?B ?a |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app (template_var 1, template_var 4))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Transcendental.arctan_tan",
     "[| - (pi / 2) < ?x; ?x < pi / 2 |] ==> arctan (tan ?x) = ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transcendental.arcsin_sin",
     "[| - (pi / 2) <= ?x; ?x <= pi / 2 |] ==> arcsin (sin ?x) = ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transfer.transfer_rule_of_nat",
     "[| ?R (0::?'a) (0::?'b); ?R (1::?'a) (1::?'b);
         rel_fun ?R (rel_fun ?R ?R) (+) (+) |]
      ==> rel_fun (=) ?R of_nat of_nat",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 11),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 9),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_var 0)),
                template_hole 5),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Topological_Spaces.continuous_on_inv",
     "[| continuous_on ?s ?f; compact ?s; ALL x:?s. ?g (?f x) = x |]
      ==> continuous_on (?f ` ?s) ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?T = ?DT1; Domainp ?S = ?DS1; left_unique ?T |]
      ==> Domainp (rel_fun ?T ?S) = pred_fun ?DT1 ?DS1",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 5, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cinsertE",
     "[| cin ?a (cinsert ?b ?A); ?a = ?b ==> ?P; cin ?a ?A ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cuUnE",
     "[| cin ?c (cUn ?A ?B); cin ?c ?A ==> ?P; cin ?c ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_imp_open_vimage",
     "[| continuous_on ?s ?f; open ?s; open ?B; ?f -` ?B <= ?s |]
      ==> open (?f -` ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 0),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.cos_treble_cos",
     "cos ((3::?'a) * ?x) = (4::?'a) * cos ?x ^ 3 - (3::?'a) * cos ?x",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 2, template_hole 4)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_hole 0,
                 template_app (template_hole 5, template_hole 4))))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_app (template_hole 8, template_var 0))))),
    ("Relation.INF_INT_eq2",
     "(INF i\<in>?S. (%x y. (x, y) : ?r i)) =
      (%x y. (x, y) : \<Inter> (?r ` ?S))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)),
       t_empty)),
    ("Topological_Spaces.eventually_filtercomap_nhds",
     "eventually ?P (filtercomap ?f (nhds ?x)) =
      (EX S. open S & ?x : S & (ALL x. ?f x : S --> ?P x))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app (template_hole 6, template_var 0))),
       template_app (template_hole 5, t_empty))),
    ("Topological_Spaces.eventually_at_right_field",
     "eventually ?P (at_right ?x) = (EX b>?x. ALL y>?x. y < b --> ?P y)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Topological_Spaces.eventually_at_left_field",
     "eventually ?P (at_left ?x) = (EX b<?x. ALL y>b. y < ?x --> ?P y)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Product_Type.times_subset_iff",
     "(?A \<times> ?C <= ?B \<times> ?D) =
      (?A = {} | ?C = {} | ?A <= ?B & ?C <= ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3), t_empty)),
              template_app
               (template_app (template_hole 8, template_var 1), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))))
           ))),
    ("Transcendental.polyfun_eq_0",
     "(ALL x. (SUM i<=?n. ?c i * x ^ i) = (0::?'a)) =
      (ALL i<=?n. ?c i = (0::?'a))",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Countable_Set_Type.card_of_countable_sets_range",
     "|{X. X <= ?A & countable X & X ~= {}}| \<le>o |{f. range f <= ?A}|",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, t_empty))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, t_empty)))),
           template_hole 0)
         )),
    ("Transfer.transfer_raw",
     "is_equality ?a1 ==>
      Transfer.Rel (rel_fun (rel_set ?A) (rel_fun (rel_fun ?A ?a1) ?a1))
       (%A f. Inf (f ` A)) (%A f. Inf (f ` A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 1)),
                     template_var 1))),
               t_empty),
             t_empty)
           ))),
    ("Transfer.transfer_raw",
     "is_equality ?a1 ==>
      Transfer.Rel (rel_fun (rel_set ?R) (rel_fun (rel_fun ?R ?a1) ?a1))
       (%A f. Sup (f ` A)) (%A f. Sup (f ` A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 1)),
                     template_var 1))),
               t_empty),
             t_empty)
           ))),
    ("Transcendental.powr_int",
     "0 < ?x ==>
      ?x powr real_of_int ?i =
      (if 0 <= ?i then ?x ^ nat ?i else 1 / ?x ^ nat (- ?i))",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 1),
           template_app (template_hole 8, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0)))))))),
    ("Transcendental.sin_tan",
     "\<bar>?x\<bar> < pi / 2 ==>
      sin ?x = tan ?x / sqrt (1 + (tan ?x)\<^sup>2)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 13, template_var 0),
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_hole 8))))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 12,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 9, template_hole 8))))))))),
    ("Transitive_Closure.relpow_Suc_D2",
     "(?x, ?z) : ?R ^^ Suc ?n ==> EX y. (?x, y) : ?R & (y, ?z) : ?R ^^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transcendental.isCont_powser_converges_everywhere",
     "(!!y. summable (%n. ?c n * y ^ n)) ==>
      isCont (%x. \<Sum>n. ?c n * x ^ n) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             t_empty)
           ))),
    ("Product_Type.case_prodI2'",
     "(!!a b. (a, b) = ?p ==> ?c a b ?x) ==>
      (case ?p of (a, b) => ?c a b) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 2),
             template_var 0)
           ))),
    ("Set_Interval.atLeastLessThan_eq_iff",
     "[| ?a < ?b; ?c < ?d |]
      ==> ({?a..<?b} = {?c..<?d}) = (?a = ?c & ?b = ?d)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))
             )))),
    ("Transcendental.DERIV_arcsin",
     "[| - 1 < ?x; ?x < 1 |]
      ==> (arcsin has_real_derivative inverse (sqrt (1 - ?x\<^sup>2)))
           (at ?x)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 11)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 11),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3, template_hole 2))))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transcendental.cos_total",
     "[| - 1 <= ?y; ?y <= 1 |] ==> EX! x. 0 <= x & x <= pi & cos x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Topological_Spaces.continuous_within_compose2",
     "[| continuous (at ?x within ?s) ?f;
         continuous (at (?f ?x) within ?f ` ?s) ?g |]
      ==> continuous (at ?x within ?s) (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_var 1, template_var 3)),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 2))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             t_empty)
           ))),
    ("Countable_Set_Type.cUN_E",
     "[| cin ?b (cUnion (cimage ?B ?A));
         !!x. [| cin x ?A; cin ?b (?B x) |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.powser_inside",
     "[| summable (%n. ?f n * ?x ^ n); norm ?z < norm ?x |]
      ==> summable (%n. ?f n * ?z ^ n)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 0, template_var 0),
          template_app (template_hole 0, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transcendental.zero_polynom_imp_zero_coeffs",
     "[| !!w. (SUM i<=?n. ?c i * w ^ i) = (0::?'a); ?k <= ?n |]
      ==> ?c ?k = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app (template_var 2, template_var 0), template_hole 1))),
    ("Transcendental.log_inverse",
     "[| 0 < ?a; ?a ~= 1; 0 < ?x |] ==> log ?a (inverse ?x) = - log ?a ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Fun_More.bij_betw_inv_into_LEFT_RIGHT",
     "[| bij_betw ?f ?A ?A'; ?B <= ?A; ?f ` ?B = ?B' |]
      ==> inv_into ?A ?f ` ?B' = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4)),
           template_var 0),
         template_var 1))),
    ("Fun_More.bij_betw_inv_into_RIGHT_LEFT",
     "[| bij_betw ?f ?A ?A'; ?B' <= ?A'; inv_into ?A ?f ` ?B' = ?B |]
      ==> ?f ` ?B = ?B'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 4)),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 0),
         template_var 1))),
    ("Transcendental.log_of_power_less",
     "[| real ?m < ?b ^ ?n; 1 < ?b; 0 < ?m |]
      ==> log ?b (real ?m) < real ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 2)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 5, template_var 2)),
         template_app (template_hole 5, template_var 0)))),
    ("Transcendental.log_of_power_le",
     "[| real ?m <= ?b ^ ?n; 1 < ?b; 0 < ?m |]
      ==> log ?b (real ?m) <= real ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 6, template_var 2)),
         template_app (template_hole 6, template_var 0)))),
    ("Transcendental.sum_up_index_split",
     "sum ?f {..?m + ?n} = sum ?f {..?m} + sum ?f {Suc ?m..?m + ?n}",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Product_Type.insert_Times_insert",
     "insert ?a ?A \<times> insert ?b ?B =
      insert (?a, ?b)
       (?A \<times> insert ?b ?B Un insert ?a ?A \<times> ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2), t_empty)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             t_empty))))),
    ("Product_Type.UN_Times_distrib",
     "(UN (a, b):?A \<times> ?B. ?E a \<times> ?F b) =
      \<Union> (?E ` ?A) \<times> \<Union> (?F ` ?B)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app (template_hole 4, template_var 1), t_empty))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1))),
         t_empty))),
    ("Countable_Set_Type.countable_or_card_of",
     "countable ?A ==>
      finite ?A & |?A| <o |UNIV| | infinite ?A & |?A| =o |UNIV|",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 0)),
                       template_app (template_hole 4, template_hole 3))),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 8, template_var 0))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 0)),
                     template_app (template_hole 4, template_hole 3))),
                 template_hole 0)))
           ))),
    ("Tree.ipl_if_complete_int",
     "Tree.complete ?t ==>
      int (ipl ?t) = (int (height ?t) - 2) * 2 ^ height ?t + 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 9,
                       template_app (template_hole 4, template_var 0))),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app (template_hole 4, template_var 0)))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))))),
    ("Transcendental.log_base_10_eq1",
     "0 < ?x ==> log 10 ?x = ln (exp 1) / ln 10 * ln ?x",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 7, template_hole 5))))),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 7, template_hole 5))))))),
           template_app (template_hole 2, template_var 0))))),
    ("Topological_Spaces.continuous_on_cong_simp",
     "[| ?s = ?t; !!x. x : ?t =simp=> ?f x = ?g x |]
      ==> continuous_on ?s ?f = continuous_on ?t ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Topological_Spaces.continuous_on_cong",
     "[| ?s = ?t; !!x. x : ?t ==> ?f x = ?g x |]
      ==> continuous_on ?s ?f = continuous_on ?t ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cBall_cong",
     "[| ?A = ?B; !!x. cin x ?B ==> ?P x = ?Q x |]
      ==> cBall ?A ?P = cBall ?B ?Q",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cBex_cong",
     "[| ?A = ?B; !!x. cin x ?B ==> ?P x = ?Q x |]
      ==> cBex ?A ?P = cBex ?B ?Q",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Countable_Set_Type.cimage_cong",
     "[| ?M = ?N; !!x. cin x ?N ==> ?f x = ?g x |]
      ==> cimage ?f ?M = cimage ?g ?N",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Product_Type.Sigma_mono",
     "[| ?A <= ?C; !!x. x : ?A ==> ?B x <= ?D x |]
      ==> Sigma ?A ?B <= Sigma ?C ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Relation.Image_INT_eq",
     "[| single_valued (?r^-1); ?A ~= {} |]
      ==> ?r `` \<Inter> (?B ` ?A) = (INT x:?A. ?r `` ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Transcendental.continuous_on_arccos",
     "[| continuous_on ?s ?f; ALL x:?s. - 1 <= ?f x & ?f x <= 1 |]
      ==> continuous_on ?s (%x. arccos (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_arcsin",
     "[| continuous_on ?s ?f; ALL x:?s. - 1 <= ?f x & ?f x <= 1 |]
      ==> continuous_on ?s (%x. arcsin (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Transcendental.continuous_on_tanh",
     "[| continuous_on ?A ?f; !!x. x : ?A ==> cosh (?f x) ~= (0::?'a) |]
      ==> continuous_on ?A (%x. tanh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1), t_empty)
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; right_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A (=)) (rel_set ?A))
           (%P. {x. P x & ?DA1 x}) Collect",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_hole 4)),
                   template_app (template_hole 3, template_var 1))),
               t_empty),
             template_hole 0)
           ))),
    ("Transcendental.DERIV_arccos",
     "[| - 1 < ?x; ?x < 1 |]
      ==> (arccos has_real_derivative inverse (- sqrt (1 - ?x\<^sup>2)))
           (at ?x)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 11)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 11),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2)))))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transcendental.arccos",
     "[| - 1 <= ?y; ?y <= 1 |]
      ==> 0 <= arccos ?y & arccos ?y <= pi & cos (arccos ?y) = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_hole 4),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 0))),
                 template_var 0)))
           ))),
    ("Topological_Spaces.tendsto_Pair",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. (?f x, ?g x)) \<longlongrightarrow> (?a, ?b)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. Complex (?f x) (?g x)) \<longlongrightarrow> Complex ?a ?b)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x - ?g x) \<longlongrightarrow> ?a - ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x + ?g x) \<longlongrightarrow> ?a + ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?l) ?F;
         (?g \<longlongrightarrow> ?m) ?F |]
      ==> ((%x. dist (?f x) (?g x)) \<longlongrightarrow> dist ?l ?m) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x * ?g x) \<longlongrightarrow> ?a * ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?X \<longlongrightarrow> ?x) ?net;
         (?Y \<longlongrightarrow> ?y) ?net |]
      ==> ((%x. max (?X x) (?Y x)) \<longlongrightarrow> max ?x ?y) ?net",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?X \<longlongrightarrow> ?x) ?net;
         (?Y \<longlongrightarrow> ?y) ?net |]
      ==> ((%x. min (?X x) (?Y x)) \<longlongrightarrow> min ?x ?y) ?net",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x ^ ?g x) \<longlongrightarrow> ?a ^ ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x *\<^sub>R ?g x) \<longlongrightarrow> ?a *\<^sub>R ?b)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Transitive_Closure.relpowp_Suc_E2",
     "[| (?P ^^ Suc ?n) ?x ?z; !!y. [| ?P ?x y; (?P ^^ ?n) y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_Suc_E",
     "[| (?P ^^ Suc ?n) ?x ?z; !!y. [| (?P ^^ ?n) ?x y; ?P y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.tendsto_compose",
     "[| ?g \<midarrow>?l\<rightarrow> ?g ?l;
         (?f \<longlongrightarrow> ?l) ?F |]
      ==> ((%x. ?g (?f x)) \<longlongrightarrow> ?g ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_hole 5,
                  template_app (template_var 3, template_var 2))),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app
                (template_hole 5,
                 template_app (template_var 3, template_var 2))),
             template_var 0)
           ))),
    ("Transcendental.powser_insidea",
     "[| summable (%n. ?f n * ?x ^ n); norm ?z < norm ?x |]
      ==> summable (%n. norm (?f n * ?z ^ n))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 0),
          template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Topological_Spaces.continuous_attains_sup",
     "[| compact ?s; ?s ~= {}; continuous_on ?s ?f |]
      ==> EX x:?s. ALL y:?s. ?f y <= ?f x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), t_empty)
           ))),
    ("Topological_Spaces.continuous_attains_inf",
     "[| compact ?s; ?s ~= {}; continuous_on ?s ?f |]
      ==> EX x:?s. ALL y:?s. ?f x <= ?f y",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), t_empty)
           ))),
    ("Transcendental.binomial_strict_antimono",
     "[| ?k < ?k'; ?n <= 2 * ?k; ?k' <= ?n |]
      ==> ?n choose ?k' < ?n choose ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transcendental.log_less_cancel_iff",
     "[| 1 < ?a; 0 < ?x; 0 < ?y |] ==> (log ?a ?x < log ?a ?y) = (?x < ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Transcendental.log_le_cancel_iff",
     "[| 1 < ?a; 0 < ?x; 0 < ?y |]
      ==> (log ?a ?x <= log ?a ?y) = (?x <= ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transcendental.binomial_antimono",
     "[| ?k <= ?k'; ?n div 2 <= ?k; ?k' <= ?n |]
      ==> ?n choose ?k' <= ?n choose ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))),
          template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transitive_Closure.relpowp_Suc_D2'",
     "ALL x y z.
         (?P ^^ ?n) x y & ?P y z --> (EX w. ?P x w & (?P ^^ ?n) w z)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Transcendental.cos_diff_cos",
     "cos ?w - cos ?z =
      (2::?'a) * sin ((?w + ?z) / (2::?'a)) * sin ((?z - ?w) / (2::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)))))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))))))),
    ("Transcendental.sin_diff_sin",
     "sin ?w - sin ?z =
      (2::?'a) * sin ((?w - ?z) / (2::?'a)) * cos ((?w + ?z) / (2::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)))))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))))))),
    ("Transcendental.cos_plus_cos",
     "cos ?w + cos ?z =
      (2::?'a) * cos ((?w + ?z) / (2::?'a)) * cos ((?w - ?z) / (2::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))))))),
    ("Transcendental.sin_plus_sin",
     "sin ?w + sin ?z =
      (2::?'a) * sin ((?w + ?z) / (2::?'a)) * cos ((?w - ?z) / (2::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)))))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))))))),
    ("Complete_Lattices.Un_INT_distrib2",
     "\<Inter> (?A ` ?I) Un \<Inter> (?B ` ?J) =
      (INT i:?I. INT j:?J. ?A i Un ?B j)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2)))),
    ("Transitive_Closure.rtrancl_insert",
     "(insert (?a, ?b) ?r)^* =
      ?r^* Un {(x, y). (x, ?a) : ?r^* & (?b, y) : ?r^*}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Transitive_Closure.trancl_insert",
     "(insert (?y, ?x) ?r)^+ =
      ?r^+ Un {(a, b). (a, ?y) : ?r^* & (?x, b) : ?r^*}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Topological_Spaces.lim_explicit",
     "?f \<longlonglongrightarrow> ?f0.0 =
      (ALL S. open S --> ?f0.0 : S --> (EX N. ALL n>=N. ?f n : S))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 1),
           template_app (template_hole 8, template_var 0)),
         template_hole 7),
       template_app (template_hole 6, t_empty))),
    ("Countable_Set_Type.cpsubset_finsert_iff",
     "csubset ?A (cinsert ?x ?B) =
      (if cin ?x ?B then csubset ?A ?B
       else if cin ?x ?A then csubset (cDiff ?A (csingle ?x)) ?B
            else csubset_eq ?A ?B)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 1))),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Countable_Set_Type.cdoubleton_eq_iff",
     "(cinsert ?a (csingle ?b) = cinsert ?c (csingle ?d)) =
      (?a = ?c & ?b = ?d | ?a = ?d & ?b = ?c)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_hole 3)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("Transcendental.polyfun_finite_roots",
     "finite {x. (SUM i<=?n. ?c i * x ^ i) = (0::?'a)} =
      (EX i<=?n. ?c i ~= (0::?'a))",
     template_equation
      (template_app
        (template_hole 11, template_app (template_hole 10, t_empty)),
       template_app (template_hole 3, t_empty))),
    ("Transcendental.sin_paired",
     "(%n. (- 1) ^ n / fact (2 * n + 1) * ?x ^ (2 * n + 1)) sums sin ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 13, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transcendental.central_binomial_lower_bound",
     "0 < ?n ==> 4 ^ ?n / (2 * real ?n) <= real (2 * ?n choose ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 6, template_hole 5)))),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_var 0))))),
    ("Transcendental.arctan_double",
     "\<bar>?x\<bar> < 1 ==>
      2 * arctan ?x = arctan (2 * ?x / (1 - ?x\<^sup>2))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 11, template_var 0),
          template_hole 10)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 10),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 6, template_hole 5))))))))),
    ("Transcendental.abs_ln_one_plus_x_minus_x_bound",
     "\<bar>?x\<bar> <= 1 / 2 ==>
      \<bar>ln (1 + ?x) - ?x\<bar> <= 2 * ?x\<^sup>2",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_var 0),
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 9),
                   template_var 0))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_hole 6))))))),
    ("Transcendental.has_derivative_cosh",
     "(?g has_derivative (*) ?Db) (at ?x within ?s) ==>
      ((%x. cosh (?g x)) has_derivative (*) (sinh (?g ?x) * ?Db))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3), t_empty),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.has_derivative_sinh",
     "(?g has_derivative (*) ?Db) (at ?x within ?s) ==>
      ((%x. sinh (?g x)) has_derivative (*) (cosh (?g ?x) * ?Db))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3), t_empty),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Product_Type.mem_case_prodI2",
     "(!!a b. ?p = (a, b) ==> ?z : ?c a b) ==>
      ?z : (case ?p of (a, b) => ?c a b)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, t_empty), template_var 2))
           ))),
    ("Product_Type.prod_cases5",
     "(!!a b c d e. ?y = (a, b, c, d, e) ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cLeast_mono",
     "[| mono ?f; cBex ?S (%x. cBall ?S ((<=) x)) |]
      ==> (LEAST y. cin y (cimage ?f ?S)) = ?f (LEAST x. cin x ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0), t_empty)
            )],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app
          (template_var 1, template_app (template_hole 1, t_empty))))),
    ("Transcendental.continuous_on_artanh'",
     "[| continuous_on ?A ?f; !!x. x : ?A ==> ?f x : {- 1<..<1} |]
      ==> continuous_on ?A (%x. artanh (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Complete_Lattices.inj_on_INTER",
     "[| ?I ~= {}; !!i. i : ?I ==> inj_on ?f (?A i) |]
      ==> inj_on ?f (\<Inter> (?A ` ?I))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Transcendental.polyfun_roots_finite",
     "[| ?c ?k ~= (0::?'a); ?k <= ?n |]
      ==> finite {z. (SUM i<=?n. ?c i * z ^ i) = (0::?'a)}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1),
              template_hole 7)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Product_Type.map_prod_surj_on",
     "[| ?f ` ?A = ?A'; ?g ` ?B = ?B' |]
      ==> map_prod ?f ?g ` (?A \<times> ?B) = ?A' \<times> ?B'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 5), template_var 4),
          template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 4), t_empty)),
         template_app
          (template_app (template_hole 0, template_var 3), t_empty)))),
    ("Topological_Spaces.filtermap_nhds_open_map",
     "[| isCont ?f ?a; !!S. open S ==> open (?f ` S) |]
      ==> filtermap ?f (nhds ?a) = nhds (?f ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_hole 8)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 0,
           template_app (template_var 0, template_var 1))))),
    ("Topological_Spaces.continuous_on_open_Union",
     "[| !!s. s : ?S ==> open s; !!s. s : ?S ==> continuous_on s ?f |]
      ==> continuous_on (\<Union> ?S) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; bi_unique ?A; right_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_set ?A) (rel_set ?A))
           (%S. - S Int Collect ?DA1) uminus",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1), template_var 0),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app (template_hole 4, template_var 1))),
               t_empty),
             template_hole 0)
           ))),
    ("Transcendental.tendsto_artanh",
     "[| (?f \<longlongrightarrow> ?a) ?F; - 1 < ?a; ?a < 1 |]
      ==> ((%x. artanh (?f x)) \<longlongrightarrow> artanh ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_inequation
         (less_than, template_app (template_hole 2, template_hole 1),
          template_var 1),
        template_inequation (less_than, template_var 1, template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?l1) ?F; ?l1 ~= (0::?'a1);
         sgn ?l1 = ?y |]
      ==> ((%x. sgn (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 1)),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; ?a1 ~= (0::?'a1);
         inverse ?a1 = ?y |]
      ==> ((%x. inverse (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 1)),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; ?a1 ~= 0; ln ?a1 = ?y |]
      ==> ((%x. ln (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 1)),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_var 1)
           ))),
    ("Transcendental.powr_mono_both",
     "[| 0 <= ?a; ?a <= ?b; 1 <= ?x; ?x <= ?y |]
      ==> ?x powr ?a <= ?y powr ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_hole 1, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transcendental.exp_first_terms",
     "exp ?x =
      (SUM n<?k. ?x ^ n /\<^sub>R fact n) +
      (\<Sum>n. ?x ^ (n + ?k) /\<^sub>R fact (n + ?k))",
     template_equation
      (template_app (template_hole 9, template_var 1),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, t_empty)))),
    ("Set_Interval.image_minus_const_atLeastLessThan_nat",
     "(%i. i - ?c) ` {?x..<?y} =
      (if ?c < ?y then {?x - ?c..<?y - ?c}
       else if ?x < ?y then {0} else {})",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_hole 0)))),
    ("Countable_Set_Type.Collect_Int_Times",
     "{(x, y). ?R x y} Int ?A \<times> ?B =
      {(x, y). ?R x y & x : ?A & y : ?B}",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))),
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Transcendental.monoseq_arctan_series",
     "\<bar>?x\<bar> <= 1 ==>
      monoseq (%n. 1 / real (n * 2 + 1) * ?x ^ (n * 2 + 1))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 0),
          template_hole 11)],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Transcendental.floor_log2_div2",
     "2 <= ?n ==>
      \<lfloor>log 2 (real ?n)\<rfloor> =
      \<lfloor>log 2 (real (?n div 2))\<rfloor> + 1",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 9, template_hole 8))),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 9, template_hole 8))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9, template_hole 8))))))),
           template_hole 0)))),
    ("Transcendental.DERIV_fun_pow",
     "(?g has_real_derivative ?m) (at ?x) ==>
      ((%x. ?g x ^ ?n) has_real_derivative real ?n * ?g ?x ^ (?n - 1) * ?m)
       (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_var 3, template_var 1)),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_hole 0)))),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_hole 5))
           ))),
    ("Transfer.Rel_abs",
     "(!!x y. Transfer.Rel ?A x y ==> Transfer.Rel ?B (?f x) (?g y)) ==>
      Transfer.Rel (rel_fun ?A ?B) ?f ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               t_empty),
             t_empty)
           ))),
    ("Product_Type.prod_induct6",
     "(!!a b c d e f. ?P (a, b, c, d, e, f)) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Transcendental.ln_prod",
     "[| finite ?I; !!i. i : ?I ==> 0 < ?f i |]
      ==> ln (prod ?f ?I) = (SUM x:?I. ln (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Countable_Set_Type.cUN_mono",
     "[| csubset_eq ?A ?B; !!x. cin x ?A ==> csubset_eq (?f x) (?g x) |]
      ==> csubset_eq (cUnion (cimage ?f ?A)) (cUnion (cimage ?g ?B))",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Transcendental.arctan_add",
     "[| \<bar>?x\<bar> <= 1; \<bar>?y\<bar> < 1 |]
      ==> arctan ?x + arctan ?y = arctan ((?x + ?y) / (1 - ?x * ?y))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_hole 7),
        template_inequation
         (less_than, template_app (template_hole 8, template_var 0),
          template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_hole 7),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Transcendental.continuous_powr",
     "[| continuous ?F ?f; continuous ?F ?g; ?f (Lim ?F (%x. x)) ~= 0 |]
      ==> continuous ?F (%x. ?f x powr ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 1,
                template_app
                 (template_app (template_hole 2, template_var 2), t_empty)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous_on ?s ?f; continuous_on ?s ?g;
         ALL x:?s. ?g x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. ?f x / ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Transcendental.continuous_on_powr",
     "[| continuous_on ?s ?f; continuous_on ?s ?g; ALL x:?s. ?f x ~= 0 |]
      ==> continuous_on ?s (%x. ?f x powr ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; cosh ?a1 ~= (0::?'a1);
         tanh ?a1 = ?y |]
      ==> ((%x. tanh (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 5, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; cos ?a1 ~= (0::?'a1);
         tan ?a1 = ?y |]
      ==> ((%x. tan (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 5, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; sin ?a1 ~= (0::?'a1);
         cot ?a1 = ?y |]
      ==> ((%x. cot (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 5, template_var 0)),
             template_var 1)
           ))),
    ("Transcendental.polyfun_eq_const",
     "(ALL x. (SUM i<=?n. ?c i * x ^ i) = ?k) =
      (?c 0 = ?k & (ALL i:{1..?n}. ?c i = (0::?'a)))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_var 2, template_hole 4)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               t_empty))
           ))),
    ("Transcendental.has_derivative_arctan",
     "(?g has_derivative ?g') (at ?x within ?s) ==>
      ((%x. arctan (?g x)) has_derivative
       (%x. ?g' x * inverse (1 + (?g ?x)\<^sup>2)))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty), t_empty),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.cos_limit_1",
     "(%j. cos (?\<theta> j)) \<longlonglongrightarrow> 1 ==>
      EX k. (%j. ?\<theta> j - real_of_int (k j) * (2 * pi))
            \<longlonglongrightarrow> 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, t_empty),
                template_app (template_hole 11, template_hole 10)),
              template_hole 9)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Topological_Spaces.LIM_equal",
     "ALL x. x ~= ?a --> ?f x = ?g x ==>
      ?f \<midarrow>?a\<rightarrow> ?l = ?g \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("Transitive_Closure.relpow_finite_bounded1",
     "[| finite ?R; 0 < ?k |]
      ==> ?R ^^ ?k <= \<Union> ((^^) ?R ` {n. 0 < n & n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 3, t_empty)))))),
    ("Transcendental.sin_zero_lemma",
     "[| 0 <= ?x; sin ?x = 0 |] ==> EX n. even n & ?x = real n * (pi / 2)",
     template_implication
      ([template_inequation (less_equals, template_hole 13, template_var 0),
        template_equation
         (template_app (template_hole 11, template_var 0),
          template_hole 13)],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Topological_Spaces.uniformly_continuous_onD",
     "[| uniformly_continuous_on ?s ?f; eventually ?E uniformity |]
      ==> \<forall>\<^sub>F (x, y) in uniformity.
             x : ?s --> y : ?s --> ?E (?f x, ?f y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_hole 0)
           ))),
    ("Transcendental.has_derivative_ln",
     "[| 0 < ?g ?x; (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. ln (?g x)) has_derivative (%x. ?g' x * inverse (?g ?x)))
           (at ?x within ?s)",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Transcendental.arcsin_lt_bounded",
     "[| - 1 < ?y; ?y < 1 |]
      ==> - (pi / 2) < arcsin ?y & arcsin ?y < pi / 2",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1))))),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 0, template_var 0)),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))))
           ))),
    ("Transcendental.arcsin_bounded",
     "[| - 1 <= ?y; ?y <= 1 |]
      ==> - (pi / 2) <= arcsin ?y & arcsin ?y <= pi / 2",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_hole 7),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1))))),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 0, template_var 0)),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))))
           ))),
    ("Transcendental.polyfun_roots_card",
     "[| ?c ?k ~= (0::?'a); ?k <= ?n |]
      ==> card {z. (SUM i<=?n. ?c i * z ^ i) = (0::?'a)} <= ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1),
              template_hole 7)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_var 0))),
    ("Product_Type.mem_case_prodE",
     "[| ?z : (case ?p of (x, xa) => ?c x xa);
         !!x y. [| ?p = (x, y); ?z : ?c x y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Type.case_prodE",
     "[| case ?p of (a, b) => ?c a b;
         !!x y. [| ?p = (x, y); ?c x y |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.real_sum_nat_ivl_bounded2",
     "[| !!p. p < ?n ==> ?f p <= ?K; (0::?'a) <= ?K |]
      ==> sum ?f {..<?n - ?k} <= of_nat ?n * ?K",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation (less_equals, template_hole 5, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 1)))),
    ("Transfer.mono_transfer",
     "[| bi_total ?A; rel_fun ?A (rel_fun ?A (=)) (<=) (<=);
         rel_fun ?B (rel_fun ?B (=)) (<=) (<=) |]
      ==> rel_fun (rel_fun ?A ?B) (=) mono mono",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_hole 10)),
                template_hole 9),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 10)),
                template_hole 5),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_hole 10),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transcendental.minus_log_eq_powr",
     "[| 0 < ?b; ?b ~= 1; 0 < ?x |]
      ==> ?y - log ?b ?x = log ?b (?b powr ?y / ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1))))),
    ("Transcendental.add_log_eq_powr",
     "[| 0 < ?b; ?b ~= 1; 0 < ?x |]
      ==> ?y + log ?b ?x = log ?b (?b powr ?y * ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1))))),
    ("Transcendental.log_add_eq_powr",
     "[| 0 < ?b; ?b ~= 1; 0 < ?x |]
      ==> log ?b ?x + ?y = log ?b (?x * ?b powr ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Topological_Spaces.tendsto_within_open_NO_MATCH",
     "[| ?a : ?S; NO_MATCH UNIV ?S; open ?S |]
      ==> (?f \<longlongrightarrow> ?l) (at ?a within ?S) =
          ?f \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; ?a1 ~= (0::?'a1);
         ?a1 powi ?n1 = ?y |]
      ==> ((%x. ?f1 x powi ?n1) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 1)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_var 2)
           ))),
    ("Order_Union.Osum_Total",
     "[| Field ?r Int Field ?r' = {}; Total ?r; Total ?r' |]
      ==> Total (?r \<union>o ?r')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 3, template_var 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 3, template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.tan_mono_le",
     "[| - (pi / 2) < ?x; ?x <= ?y; ?y < pi / 2 |] ==> tan ?x <= tan ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.arctan_unique",
     "[| - (pi / 2) < ?x; ?x < pi / 2; tan ?x = ?y |] ==> arctan ?y = ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3)))),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Transcendental.tan_monotone",
     "[| - (pi / 2) < ?y; ?y < ?x; ?x < pi / 2 |] ==> tan ?y < tan ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)))),
          template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_monotone_2pi",
     "[| - (pi / 2) <= ?y; ?y < ?x; ?x <= pi / 2 |] ==> sin ?y < sin ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_monotone_2pi_le",
     "[| - (pi / 2) <= ?y; ?y <= ?x; ?x <= pi / 2 |] ==> sin ?y <= sin ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)))),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.INT_E",
     "[| ?b : \<Inter> (?B ` ?A); ?b : ?B ?a ==> ?R; ?a ~: ?A ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 2)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app (template_var 3, template_var 1))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.Lim_in_closed_set",
     "[| closed ?S; \<forall>\<^sub>F x in ?F. ?f x : ?S; ?F ~= bot;
         (?f \<longlongrightarrow> ?l) ?F |]
      ==> ?l : ?S",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 0, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0), template_var 3)
           ))),
    ("Transfer.transfer_raw",
     "[| is_equality ?a1; is_equality ?b1; bi_unique ?R; right_total ?R |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?R ?a1)
             (rel_fun ?b1 (rel_fun (rel_set ?R) ?b1)))
           Finite_Set.fold Finite_Set.fold",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       template_var 1)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transcendental.cos_mono_less_eq",
     "[| 0 <= ?x; ?x <= pi; 0 <= ?y; ?y <= pi |]
      ==> (cos ?x < cos ?y) = (?y < ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_hole 4, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Transcendental.cos_mono_le_eq",
     "[| 0 <= ?x; ?x <= pi; 0 <= ?y; ?y <= pi |]
      ==> (cos ?x <= cos ?y) = (?y <= ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 2),
        template_inequation (less_equals, template_hole 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 1)))),
    ("Transitive_Closure.relpowp_fun_conv",
     "(?P ^^ ?n) ?x ?y =
      (EX f. f 0 = ?x & f ?n = ?y & (ALL i<?n. ?P (f i) (f (Suc i))))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Transfer.right_total_fun_eq_transfer",
     "[| right_total ?A; bi_unique ?B |]
      ==> rel_fun (rel_fun ?A ?B) (rel_fun (rel_fun ?A ?B) (=))
           (%f g. ALL x:Collect (Domainp ?A). f x = g x) (=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_var 0)),
                   template_hole 5)),
               t_empty),
             template_hole 0)
           ))),
    ("Product_Type.Sigma_cong",
     "[| ?A = ?B; !!x. x : ?B ==> ?C x = ?D x |]
      ==> Sigma ?A ?C = Sigma ?B ?D",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("Transcendental.cos_zero_lemma",
     "[| 0 <= ?x; cos ?x = 0 |] ==> EX n. odd n & ?x = real n * (pi / 2)",
     template_implication
      ([template_inequation (less_equals, template_hole 14, template_var 0),
        template_equation
         (template_app (template_hole 12, template_var 0),
          template_hole 14)],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Transfer.transfer_raw",
     "[| Domainp ?B = ?DB1; right_total ?B |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?A (rel_fun ?B (=))) (rel_fun ?A (=)))
           (%T x. EX y:Collect ?DB1. T x y) Domainp",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2), template_var 1),
        template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_hole 4))),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 4))),
               t_empty),
             template_hole 0)
           ))),
    ("Transcendental.add_tan_eq",
     "[| cos ?x ~= (0::?'a); cos ?y ~= (0::?'a) |]
      ==> tan ?x + tan ?y = sin (?x + ?y) / (cos ?x * cos ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 6, template_var 1)),
             template_app (template_hole 6, template_var 0)))))),
    ("Transcendental.isCont_powser",
     "[| summable (%n. ?c n * ?K ^ n); norm ?x < norm ?K |]
      ==> isCont (%x. \<Sum>n. ?c n * x ^ n) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             t_empty)
           ))),
    ("Transcendental.log_minus_eq_powr",
     "[| 0 < ?b; ?b ~= 1; 0 < ?x |]
      ==> log ?b ?x - ?y = log ?b (?x * ?b powr - ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_inequation (less_than, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 0))))))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; bi_unique ?A; right_total ?A |]
      ==> Transfer.Rel (rel_fun (rel_set (rel_set ?A)) (rel_set ?A))
           (%S. \<Inter> S Int Collect ?DA1) \<Inter>",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1), template_var 0),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 1))),
                   template_app (template_hole 4, template_var 1))),
               t_empty),
             t_empty)
           ))),
    ("Transcendental.tendsto_arcosh_strong",
     "[| (?f \<longlongrightarrow> ?a) ?F; 1 <= ?a;
         \<forall>\<^sub>F x in ?F. 1 <= ?f x |]
      ==> ((%x. arcosh (?f x)) \<longlongrightarrow> arcosh ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_inequation (less_equals, template_hole 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Transcendental.cos_inj_pi",
     "[| 0 <= ?x; ?x <= pi; 0 <= ?y; ?y <= pi; cos ?x = cos ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 2),
        template_inequation (less_equals, template_hole 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.cos_one_2pi",
     "(cos ?x = 1) =
      ((EX x. ?x = real x * 2 * pi) | (EX x. ?x = - (real x * 2 * pi)))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_hole 9),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty)))),
    ("Transcendental.tan_total_pi4",
     "\<bar>?x\<bar> < 1 ==> EX z>- (pi / 4). z < pi / 4 & tan z = ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 11, template_var 0),
          template_hole 10)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Transcendental.zeroseq_arctan_series",
     "\<bar>?x\<bar> <= 1 ==>
      (%n. 1 / real (n * 2 + 1) * ?x ^ (n * 2 + 1))
      \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 15, template_var 0),
          template_hole 14)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(!!i. i : ?I ==> (?f i \<longlongrightarrow> ?a i) ?F) ==>
      ((%x. SUM i:?I. ?f i x) \<longlongrightarrow> sum ?a ?I) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(!!i. i : ?I ==> (?f i \<longlongrightarrow> ?a i) ?F) ==>
      ((%x. PROD i:?I. ?f i x) \<longlongrightarrow> prod ?a ?I) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "(!!i. i : ?S ==> (?f i \<longlongrightarrow> ?L i) ?F) ==>
      ((%x. PROD i:?S. ?f i x) \<longlongrightarrow> prod ?L ?S) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3))),
             template_var 0)
           ))),
    ("Product_Type.prod_cases6",
     "(!!a b c d e f. ?y = (a, b, c, d, e, f) ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.ln_one_minus_pos_lower_bound",
     "[| 0 <= ?x; ?x <= 1 / 2 |] ==> - ?x - 2 * ?x\<^sup>2 <= ln (1 - ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 11, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6))),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 1,
                 template_app (template_hole 7, template_hole 6))))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_hole 9),
             template_var 0))))),
    ("Transcendental.arcsin_pi",
     "[| - 1 <= ?y; ?y <= 1 |]
      ==> - (pi / 2) <= arcsin ?y & arcsin ?y <= pi & sin (arcsin ?y) = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_hole 9),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 9)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4, template_hole 3))))),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 2, template_var 0))),
                 template_var 0)))
           ))),
    ("Cardinal_Order_Relation.ordIso_Times_cong",
     "[| ?r =o ?r'; ?p =o ?p' |]
      ==> |Field ?r \<times> Field ?p| =o |Field ?r' \<times> Field ?p'|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 0)),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_var 3)),
                       t_empty))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 2)),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Cardinal_Order_Relation.ordLeq_Times_mono",
     "[| ?r \<le>o ?r'; ?p \<le>o ?p' |]
      ==> |Field ?r \<times> Field ?p| \<le>o
          |Field ?r' \<times> Field ?p'|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 0)),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_var 3)),
                       t_empty))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 2)),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Cardinal_Order_Relation.card_of_Times_cong",
     "[| |?A| =o |?B|; |?C| =o |?D| |]
      ==> |?A \<times> ?C| =o |?B \<times> ?D|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 3)),
                  template_app (template_hole 13, template_var 2))),
              template_hole 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 1)),
                  template_app (template_hole 8, template_var 0))),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       t_empty))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Cardinal_Order_Relation.card_of_Times_mono",
     "[| |?A| \<le>o |?B|; |?C| \<le>o |?D| |]
      ==> |?A \<times> ?C| \<le>o |?B \<times> ?D|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 3)),
                  template_app (template_hole 13, template_var 2))),
              template_hole 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 1)),
                  template_app (template_hole 8, template_var 0))),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       t_empty))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     t_empty)))),
             template_hole 0)
           ))),
    ("Product_Type.case_prodE'",
     "[| (case ?p of (a, b) => ?c a b) ?z;
         !!x y. [| ?p = (x, y); ?c x y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Type.case_prodE2",
     "[| ?Q (case ?z of (a, b) => ?P a b);
         !!x y. [| ?z = (x, y); ?Q (?P x y) |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 4, t_empty), template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclpE",
     "[| ?r^** ?x ?z; ?x = ?z ==> ?P;
         !!y. [| ?r ?x y; ?r^** y ?z |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_tranclpE",
     "[| ?r^++ ?x ?z; ?r ?x ?z ==> ?P;
         !!y. [| ?r ?x y; ?r^++ y ?z |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; ?a1 - ?b1 = ?y |]
      ==> ((%x. ?f1 x - ?g1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; ?a1 + ?b1 = ?y |]
      ==> ((%x. ?f1 x + ?g1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?l1) ?F;
         (?g1 \<longlongrightarrow> ?m1) ?F; dist ?l1 ?m1 = ?y |]
      ==> ((%x. dist (?f1 x) (?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app (template_hole 4, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; ?a1 * ?b1 = ?y |]
      ==> ((%x. ?f1 x * ?g1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?X1 \<longlongrightarrow> ?x1) ?F;
         (?Y1 \<longlongrightarrow> ?y1) ?F; max ?x1 ?y1 = ?y |]
      ==> ((%x. max (?X1 x) (?Y1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?X1 \<longlongrightarrow> ?x1) ?F;
         (?Y1 \<longlongrightarrow> ?y1) ?F; min ?x1 ?y1 = ?y |]
      ==> ((%x. min (?X1 x) (?Y1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; ?a1 ^ ?b1 = ?y |]
      ==> ((%x. ?f1 x ^ ?g1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app (template_hole 4, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; (?a1, ?b1) = ?y |]
      ==> ((%x. (?f1 x, ?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_app (template_hole 6, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; ?a1 *\<^sub>R ?b1 = ?y |]
      ==> ((%x. ?f1 x *\<^sub>R ?g1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app (template_hole 4, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; Complex ?a1 ?b1 = ?y |]
      ==> ((%x. Complex (?f1 x) (?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app (template_hole 4, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| isCont ?f ?a; isCont ?g ?a; ?g ?a ~= (0::?'b) |]
      ==> isCont (%x. ?f x / ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4)),
             t_empty)
           ))),
    ("Topological_Spaces.continuous_intros",
     "[| continuous (at ?a within ?s) ?f; continuous (at ?a within ?s) ?g;
         ?g ?a ~= (0::?'b) |]
      ==> continuous (at ?a within ?s) (%x. ?f x / ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 3),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             t_empty)
           ))),
    ("Transcendental.isCont_powr",
     "[| isCont ?f ?a; isCont ?g ?a; ?f ?a ~= 0 |]
      ==> isCont (%x. ?f x powr ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4)),
             t_empty)
           ))),
    ("Transcendental.continuous_at_within_powr",
     "[| continuous (at ?a within ?s) ?f; continuous (at ?a within ?s) ?g;
         ?f ?a ~= 0 |]
      ==> continuous (at ?a within ?s) (%x. ?f x powr ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             t_empty)
           ))),
    ("Topological_Spaces.lim_mono",
     "[| !!n. ?N <= n ==> ?X n <= ?Y n; ?X \<longlonglongrightarrow> ?x;
         ?Y \<longlonglongrightarrow> ?y |]
      ==> ?x <= ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 1)),
              template_hole 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Topological_Spaces.eventually_filtercomap_at_topological",
     "eventually ?P (filtercomap ?f (at ?A within ?B)) =
      (EX S. open S & ?A : S & (ALL x. ?f x : S Int ?B - {?A} --> ?P x))",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 3),
         template_app
          (template_app (template_hole 11, template_var 2),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0))),
       template_app (template_hole 9, t_empty))),
    ("Topological_Spaces.LIMSEQ_SEQ_conv",
     "(ALL S.
          (ALL n. S n ~= ?a) & S \<longlonglongrightarrow> ?a -->
          (%n. ?X (S n)) \<longlonglongrightarrow> ?L) =
      ?X \<midarrow>?a\<rightarrow> ?L",
     template_equation
      (template_app (template_hole 13, t_empty),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("Transcendental.ceiling_log2_div2",
     "2 <= ?n ==>
      \<lceil>log 2 (real ?n)\<rceil> =
      \<lceil>log 2 (real ((?n - 1) div 2 + 1))\<rceil> + 1",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 12, template_hole 11))),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 12, template_hole 11))),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 0),
                             template_hole 1)),
                         template_app
                          (template_hole 13,
                           template_app
                            (template_hole 12, template_hole 11)))),
                     template_hole 1))))),
           template_hole 0)))),
    ("Product_Type.prod_induct7",
     "(!!a b c d e f g. ?P (a, b, c, d, e, f, g)) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Transcendental.floor_log_eq_powr_iff",
     "[| 0 < ?x; 1 < ?b |]
      ==> (\<lfloor>log ?b ?x\<rfloor> = ?k) =
          (?b powr real_of_int ?k <= ?x &
           ?x < ?b powr real_of_int (?k + 1))",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 2),
        template_inequation (less_than, template_hole 10, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 2, template_var 0))),
               template_var 2)),
           template_app
            (template_app (template_hole 12, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)))))))),
    ("Complete_Lattices.INT_anti_mono",
     "[| ?A <= ?B; !!x. x : ?A ==> ?f x <= ?g x |]
      ==> \<Inter> (?f ` ?B) <= \<Inter> (?g ` ?A)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 3))))),
    ("Topological_Spaces.continuous_on_generate_topology",
     "[| open = generate_topology ?X;
         !!B. B : ?X ==> EX C. open C & C Int ?A = ?f -` B Int ?A |]
      ==> continuous_on ?A ?f",
     template_implication
      ([template_equation
         (template_hole 10, template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Transcendental.lemma_tan_add1",
     "[| cos ?x ~= (0::?'a); cos ?y ~= (0::?'a) |]
      ==> (1::?'a) - tan ?x * tan ?y = cos (?x + ?y) / (cos ?x * cos ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 7, template_var 1)),
             template_app (template_hole 7, template_var 0)))))),
    ("Transcendental.tanh_add",
     "[| cosh ?x ~= (0::?'a); cosh ?y ~= (0::?'a) |]
      ==> tanh (?x + ?y) =
          (tanh ?x + tanh ?y) / ((1::?'a) + tanh ?x * tanh ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))))))),
    ("Transcendental.abs_ln_one_plus_x_minus_x_bound_nonpos",
     "[| - (1 / 2) <= ?x; ?x <= 0 |]
      ==> \<bar>ln (1 + ?x) - ?x\<bar> <= 2 * ?x\<^sup>2",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8)))),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 7)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 11),
                   template_var 0))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_hole 8))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app (template_hole 9, template_hole 8))))))),
    ("Transitive_Closure.relpow_Suc_E2",
     "[| (?x, ?z) : ?R ^^ Suc ?n;
         !!y. [| (?x, y) : ?R; (y, ?z) : ?R ^^ ?n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_Suc_E",
     "[| (?x, ?z) : ?R ^^ Suc ?n;
         !!y. [| (?x, y) : ?R ^^ ?n; (y, ?z) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transfer.transfer_raw",
     "[| bi_total ?A; Transfer.Rel (rel_fun ?A (rel_fun ?A (=))) (<=) (<=);
         Transfer.Rel (rel_fun ?B (rel_fun ?B (=))) (<=) (<=) |]
      ==> Transfer.Rel (rel_fun (rel_fun ?A ?B) (=)) mono mono",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_var 1),
                    template_app
                     (template_app (template_hole 13, template_var 1),
                      template_hole 12))),
                template_hole 11),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_hole 12))),
                template_hole 6),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_hole 12)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transcendental.tendsto_powr",
     "[| (?f \<longlongrightarrow> ?a) ?F; (?g \<longlongrightarrow> ?b) ?F;
         ?a ~= 0 |]
      ==> ((%x. ?f x powr ?g x) \<longlongrightarrow> ?a powr ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 0)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.tendsto_intros",
     "[| (?f \<longlongrightarrow> ?a) ?F; (?g \<longlongrightarrow> ?b) ?F;
         ?b ~= (0::?'a) |]
      ==> ((%x. ?f x / ?g x) \<longlongrightarrow> ?a / ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 0)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Topological_Spaces.LIMSEQ_le",
     "[| ?X \<longlonglongrightarrow> ?x; ?Y \<longlonglongrightarrow> ?y;
         EX N. ALL n>=N. ?X n <= ?Y n |]
      ==> ?x <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app (template_hole 6, template_var 2)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_app (template_hole 6, template_var 0)),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Transcendental.floor_log_nat_eq_if",
     "[| ?b ^ ?n <= ?k; ?k < ?b ^ (?n + 1); 2 <= ?b |]
      ==> \<lfloor>log (real ?b) (real ?k)\<rfloor> = int ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 11, template_var 2),
            template_app
             (template_app (template_hole 9, template_var 1),
              template_hole 8))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; - 1 < ?a1; ?a1 < 1;
         artanh ?a1 = ?y |]
      ==> ((%x. artanh (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 3, template_hole 2),
          template_var 2),
        template_inequation (less_than, template_var 2, template_hole 2),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 5, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.connected_diff_open_from_closed",
     "[| ?s <= ?t; ?t <= ?u; open ?s; closed ?t; connected ?u;
         connected (?t - ?s) |]
      ==> connected (?u - ?s)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Product_Type.times_eq_iff",
     "(?A \<times> ?B = ?C \<times> ?D) =
      (?A = ?C & ?B = ?D | (?A = {} | ?B = {}) & (?C = {} | ?D = {}))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), t_empty),
         template_app
          (template_app (template_hole 6, template_var 1), t_empty)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 0))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 0))))
           ))),
    ("Transcendental.root_polyfun",
     "1 <= ?n ==>
      (?z ^ ?n = ?a) =
      ((SUM i<=?n.
        (if i = 0 then - ?a else if i = ?n then 1::?'a else (0::?'a)) *
        ?z ^ i) =
       (0::?'a))",
     template_implication
      ([template_inequation
         (less_equals, template_hole 12, template_var 2)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 9, template_var 1),
             template_var 2),
           template_var 0),
         template_equation
          (template_app
            (template_app (template_hole 8, t_empty),
             template_app (template_hole 0, template_var 2)),
           template_hole 1)))),
    ("Transcendental.summable_arctan_series",
     "\<bar>?x\<bar> <= 1 ==>
      summable (%k. (- 1) ^ k * (1 / real (k * 2 + 1) * ?x ^ (k * 2 + 1)))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 13, template_var 0),
          template_hole 12)],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Topological_Spaces.LIMSEQ_SEQ_conv1",
     "?f \<midarrow>?a\<rightarrow> ?l ==>
      ALL S.
         (ALL n. S n ~= ?a) & S \<longlonglongrightarrow> ?a -->
         (%n. ?f (S n)) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app (template_hole 12, template_var 1)),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_hole 10))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Topological_Spaces.LIMSEQ_SEQ_conv2",
     "ALL S.
         (ALL n. S n ~= ?a) & S \<longlonglongrightarrow> ?a -->
         (%n. ?f (S n)) \<longlonglongrightarrow> ?l ==>
      ?f \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Topological_Spaces.connectedI_interval",
     "(!!x y z. [| x : ?U; y : ?U; x <= z; z <= y |] ==> z : ?U) ==>
      connected ?U",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transcendental.powser_limit_0",
     "[| 0 < ?s; !!x. norm x < ?s ==> (%n. ?a n * x ^ n) sums ?f x |]
      ==> ?f \<midarrow>0::?'a\<rightarrow> ?a 0",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 2),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_var 1, template_hole 3))),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Transcendental.termdiff_converges",
     "[| norm ?x < ?K; !!x. norm x < ?K ==> summable (%n. ?c n * x ^ n) |]
      ==> summable (%n. diffs ?c n * ?x ^ n)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Product_Type.SigmaE",
     "[| ?c : Sigma ?A ?B;
         !!x y. [| x : ?A; y : ?B x; ?c = (x, y) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Type.prod_fun_imageE",
     "[| ?c : map_prod ?f ?g ` ?R;
         !!x y. [| ?c = (?f x, ?g y); (x, y) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_on_open_UN",
     "[| !!s. s : ?S ==> open (?A s);
         !!s. s : ?S ==> continuous_on (?A s) ?f |]
      ==> continuous_on (\<Union> (?A ` ?S)) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2))),
             template_var 0)
           ))),
    ("Transitive_Closure.single_valued_confluent",
     "[| single_valued ?r; (?x, ?y) : ?r^*; (?x, ?z) : ?r^* |]
      ==> (?y, ?z) : ?r^* | (?z, ?y) : ?r^*",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app (template_hole 1, template_var 3))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)),
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Cardinal_Order_Relation.card_of_Times_ordLeq_infinite",
     "[| infinite ?C; |?A| \<le>o |?C|; |?B| \<le>o |?C| |]
      ==> |?A \<times> ?B| \<le>o |?C|",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 14, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 10, template_var 2))),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 10, template_var 2))),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       t_empty))),
                 template_app (template_hole 10, template_var 2))),
             template_hole 0)
           ))),
    ("Cardinal_Order_Relation.card_of_Times_ordLess_infinite",
     "[| infinite ?C; |?A| <o |?C|; |?B| <o |?C| |]
      ==> |?A \<times> ?B| <o |?C|",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 14, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 10, template_var 2))),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 10, template_var 2))),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       t_empty))),
                 template_app (template_hole 10, template_var 2))),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| Domainp ?A = ?DA1; bi_unique ?B; right_total ?A |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?A ?B) (rel_fun (rel_set ?B) (rel_set ?A)))
           (%f X. f -` X Int Collect ?DA1) (-`)",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 2), template_var 1),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 0)),
                     template_app (template_hole 4, template_var 2)))),
               t_empty),
             template_hole 0)
           ))),
    ("Transfer.transfer_raw",
     "[| is_equality ?a1; is_equality ?b1; is_equality ?c1; bi_unique ?R;
         right_total ?R |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?R ?a1)
             (rel_fun ?b1 (rel_fun (rel_set ?R) ?c1)))
           fold_graph fold_graph",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       template_var 1)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Deriv.CARAT_DERIV",
     "(?f has_field_derivative ?l) (at ?x) =
      (EX g. (ALL z. ?f z - ?f ?x = g z * (z - ?x)) &
             isCont g ?x & g ?x = ?l)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_hole 7)),
       template_app (template_hole 6, t_empty))),
    ("Topological_Spaces.tendsto_at_iff_sequentially",
     "(?f \<longlongrightarrow> ?a) (at ?x within ?s) =
      (ALL X.
          (ALL i. X i : ?s - {?x}) -->
          X \<longlonglongrightarrow> ?x -->
          (?f o X) \<longlonglongrightarrow> ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 14, template_var 3),
           template_app (template_hole 13, template_var 2)),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app (template_hole 11, t_empty))),
    ("Transitive_Closure.relpow_fun_conv",
     "((?a, ?b) : ?R ^^ ?n) =
      (EX f. f 0 = ?a & f ?n = ?b & (ALL i<?n. (f i, f (Suc i)) : ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Transcendental.diffs_equiv",
     "summable (%n. diffs ?c n * ?x ^ n) ==>
      (%n. of_nat n * ?c n * ?x ^ (n - Suc 0)) sums
      (\<Sum>n. diffs ?c n * ?x ^ n)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, t_empty))
           ))),
    ("Transcendental.termdiffs_strong_converges_everywhere",
     "(!!y. summable (%n. ?c n * y ^ n)) ==>
      ((%x. \<Sum>n. ?c n * x ^ n) has_field_derivative
       (\<Sum>n. diffs ?c n * ?x ^ n))
       (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Topological_Spaces.open_prod_intro",
     "(!!x. x : ?S ==>
            EX A B.
               open A & open B & x : A \<times> B & A \<times> B <= ?S) ==>
      open ?S",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transcendental.sin_total",
     "[| - 1 <= ?y; ?y <= 1 |]
      ==> EX! x. - (pi / 2) <= x & x <= pi / 2 & sin x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_hole 9),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 9)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Transcendental.DERIV_fun_powr",
     "[| (?g has_real_derivative ?m) (at ?x); 0 < ?g ?x |]
      ==> ((%x. ?g x powr ?r) has_real_derivative
           ?r * ?g ?x powr (?r - real 1) * ?m)
           (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_var 3, template_var 1)),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app
                          (template_hole 1, template_hole 0))))),
                 template_var 2)),
             template_app
              (template_app (template_hole 8, template_var 1),
               template_hole 7))
           ))),
    ("Complete_Lattices.image_INT",
     "[| inj_on ?f ?C; ALL x:?A. ?B x <= ?C; ?j : ?A |]
      ==> ?f ` \<Inter> (?B ` ?A) = (INT x:?A. ?f ` ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Countable_Set_Type.cequalityCE",
     "[| ?A = ?B; [| cin ?c ?A; cin ?c ?B |] ==> ?P;
         [| ~ cin ?c ?A; ~ cin ?c ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)
                   )
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Transcendental.summable",
     "[| ?a \<longlonglongrightarrow> 0; !!n. 0 <= ?a n;
         !!n. ?a (Suc n) <= ?a n |]
      ==> summable (%n. (- 1) ^ n * ?a n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 0),
                template_app (template_hole 10, template_hole 9)),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transcendental.ceiling_log_nat_eq_if",
     "[| ?b ^ ?n < ?k; ?k <= ?b ^ (?n + 1); 2 <= ?b |]
      ==> \<lceil>log (real ?b) (real ?k)\<rceil> = int ?n + 1",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 13, template_var 2),
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_var 2)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_hole 0)))),
    ("Topological_Spaces.tendsto_compose_eventually",
     "[| ?g \<midarrow>?l\<rightarrow> ?m; (?f \<longlongrightarrow> ?l) ?F;
         \<forall>\<^sub>F x in ?F. ?f x ~= ?l |]
      ==> ((%x. ?g (?f x)) \<longlongrightarrow> ?m) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_app (template_hole 8, template_var 3)),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 2)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_hole 8, template_var 3)),
             template_var 0)
           ))),
    ("Topological_Spaces.continuous_at_Inf_antimono",
     "[| antimono ?f; continuous (at_right (Inf ?S)) ?f; ?S ~= {};
         bdd_below ?S |]
      ==> ?f (Inf ?S) = Sup (?f ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 8, template_var 0)))),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Topological_Spaces.continuous_at_Sup_antimono",
     "[| antimono ?f; continuous (at_left (Sup ?S)) ?f; ?S ~= {};
         bdd_above ?S |]
      ==> ?f (Sup ?S) = Inf (?f ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 8, template_var 0)))),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Topological_Spaces.continuous_at_Inf_mono",
     "[| mono ?f; continuous (at_right (Inf ?S)) ?f; ?S ~= {};
         bdd_below ?S |]
      ==> ?f (Inf ?S) = Inf (?f ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 8, template_var 0)))),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Topological_Spaces.continuous_at_Sup_mono",
     "[| mono ?f; continuous (at_left (Sup ?S)) ?f; ?S ~= {};
         bdd_above ?S |]
      ==> ?f (Sup ?S) = Sup (?f ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 8, template_var 0)))),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Topological_Spaces.connected_local_const",
     "[| connected ?A; ?a : ?A; ?b : ?A;
         ALL a:?A. \<forall>\<^sub>F b in at a within ?A. ?f a = ?f b |]
      ==> ?f ?a = ?f ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3), t_empty)
            )],
       template_equation
        (template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Transcendental.log_mult",
     "[| 0 < ?a; ?a ~= 1; 0 < ?x; 0 < ?y |]
      ==> log ?a (?x * ?y) = log ?a ?x + log ?a ?y",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Transcendental.log_divide",
     "[| 0 < ?a; ?a ~= 1; 0 < ?x; 0 < ?y |]
      ==> log ?a (?x / ?y) = log ?a ?x - log ?a ?y",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Transitive_Closure.relpow_Suc_D2'",
     "ALL x y z.
         (x, y) : ?R ^^ ?n & (y, z) : ?R -->
         (EX w. (x, w) : ?R & (w, z) : ?R ^^ ?n)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Transitive_Closure.trancl_insert2",
     "(insert (?a, ?b) ?r)^+ =
      ?r^+ Un
      {(x, y). ((x, ?a) : ?r^+ | x = ?a) & ((?b, y) : ?r^+ | y = ?b)}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Transcendental.polyfun_eq_coeffs",
     "(ALL x. (SUM i<=?n. ?c i * x ^ i) = (SUM i<=?n. ?d i * x ^ i)) =
      (ALL i<=?n. ?c i = ?d i)",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Product_Type.prod_cases7",
     "(!!a b c d e f g. ?y = (a, b, c, d, e, f, g) ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.ceiling_log_eq_powr_iff",
     "[| 0 < ?x; 1 < ?b |]
      ==> (\<lceil>log ?b ?x\<rceil> = int ?k + 1) =
          (?b powr real ?k < ?x & ?x <= ?b powr real (?k + 1))",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 2),
        template_inequation (less_than, template_hole 13, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)),
             template_hole 6)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app (template_hole 3, template_var 0))),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)))))))),
    ("Transcendental.ln_series",
     "[| 0 < ?x; ?x < 2 |]
      ==> ln ?x =
          (\<Sum>n. (- 1) ^ n * (1 / real (n + 1)) * (?x - 1) ^ Suc n)",
     template_implication
      ([template_inequation (less_than, template_hole 16, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_hole 13)))],
       template_equation
        (template_app (template_hole 11, template_var 0),
         template_app (template_hole 10, t_empty)))),
    ("Transcendental.sums_if",
     "[| ?g sums ?x; ?f sums ?y |]
      ==> (%n. if even n then ?f (n div 2) else ?g ((n - 1) div 2)) sums
          (?x + ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Transcendental.arcsin",
     "[| - 1 <= ?y; ?y <= 1 |]
      ==> - (pi / 2) <= arcsin ?y &
          arcsin ?y <= pi / 2 & sin (arcsin ?y) = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_hole 9),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 9)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4, template_hole 3))))),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 2, template_var 0)),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3))))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 2, template_var 0))),
                 template_var 0)))
           ))),
    ("Topological_Spaces.continuous_onI_mono",
     "[| open (?f ` ?A);
         !!x y. [| x : ?A; y : ?A; x <= y |] ==> ?f x <= ?f y |]
      ==> continuous_on ?A ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Transcendental.floor_log_nat_eq_powr_iff",
     "[| 2 <= ?b; 0 < ?k |]
      ==> (\<lfloor>log (real ?b) (real ?k)\<rfloor> = int ?n) =
          (?b ^ ?n <= ?k & ?k < ?b ^ (?n + 1))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_var 2),
        template_inequation (less_than, template_hole 10, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app (template_hole 5, template_var 1)))),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app (template_hole 11, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))))))),
    ("Transcendental.has_field_derivative_tanh",
     "[| cosh (?g ?x) ~= (0::?'a1);
         (?g has_field_derivative ?Db) (at ?x within ?s) |]
      ==> ((%x. tanh (?g x)) has_field_derivative
           ((1::?'a1) - (tanh (?g ?x))\<^sup>2) * ?Db)
           (at ?x within ?s)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 11,
                template_app (template_var 3, template_var 2)),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 7,
                           template_app (template_var 3, template_var 2))),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0))))),
                 template_var 1)),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 0))
           ))),
    ("Countable_Set_Type.countable_cases",
     "[| countable ?A; !!f. [| finite ?A; inj_on f ?A |] ==> ?thesis;
         !!f. [| infinite ?A; bij_betw f ?A UNIV |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.rtranclp_induct",
     "[| ?r^** ?a ?b; ?P ?a;
         !!y z. [| ?r^** ?a y; ?r y z; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Transitive_Closure.converse_rtranclp_induct",
     "[| ?r^** ?a ?b; ?P ?b;
         !!y z. [| ?r y z; ?r^** z ?b; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Topological_Spaces.continuous_on_tendsto_compose",
     "[| continuous_on ?s ?f; (?g \<longlongrightarrow> ?l) ?F; ?l : ?s;
         \<forall>\<^sub>F x in ?F. ?g x : ?s |]
      ==> ((%x. ?f (?g x)) \<longlongrightarrow> ?f ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 1))),
             template_var 0)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F; 1 <= ?a1;
         \<forall>\<^sub>F x in ?F. 1 <= ?f1 x; arcosh ?a1 = ?y |]
      ==> ((%x. arcosh (?f1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_inequation (less_equals, template_hole 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            ),
        template_equation
         (template_app (template_hole 0, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 5, template_var 0)),
             template_var 1)
           ))),
    ("Countable_Set_Type.rel_cset_iff",
     "rel_cset ?R ?a ?b =
      ((ALL t. cin t ?a --> (EX u. cin u ?b & ?R t u)) &
       (ALL t. cin t ?b --> (EX u. cin u ?a & ?R u t)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Topological_Spaces.continuous_within_topological",
     "continuous (at ?x within ?s) ?f =
      (ALL B.
          open B -->
          ?f ?x : B -->
          (EX A. open A & ?x : A & (ALL y:?s. y : A --> ?f y : B)))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Transcendental.arctan_series",
     "\<bar>?x\<bar> <= 1 ==>
      arctan ?x =
      (\<Sum>k. (- 1) ^ k * (1 / real (k * 2 + 1) * ?x ^ (k * 2 + 1)))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 15, template_var 0),
          template_hole 14)],
       template_equation
        (template_app (template_hole 12, template_var 0),
         template_app (template_hole 11, t_empty)))),
    ("Transcendental.sum_pos_lt_pair",
     "[| summable ?f;
         !!d. 0 < ?f (?k + Suc (Suc 0) * d) +
                  ?f (?k + (Suc (Suc 0) * d + 1)) |]
      ==> sum ?f {..<?k} < suminf ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Transcendental.lemma_termdiff4",
     "[| 0 < ?k;
         !!h. [| h ~= (0::?'a); norm h < ?k |]
              ==> norm (?f h) <= ?K * norm h |]
      ==> ?f \<midarrow>0::?'a\<rightarrow> (0::?'b)",
     template_implication
      ([template_inequation (less_than, template_hole 13, template_var 2),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_hole 2)),
             template_app
              (template_app (template_hole 1, template_hole 9),
               template_hole 0))
           ))),
    ("Transcendental.has_derivative_tan",
     "[| cos (?g ?x) ~= 0; (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. tan (?g x)) has_derivative
           (%x. ?g' x * inverse ((cos (?g ?x))\<^sup>2)))
           (at ?x within ?s)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 10,
                template_app (template_var 3, template_var 2)),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, t_empty), t_empty),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 0))
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| !!i. i : ?I1 ==> (?f1 i \<longlongrightarrow> ?a1 i) ?F;
         sum ?a1 ?I1 = ?y |]
      ==> ((%x. SUM i:?I1. ?f1 i x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 0, t_empty), template_var 4),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| !!i. i : ?I1 ==> (?f1 i \<longlongrightarrow> ?a1 i) ?F;
         prod ?a1 ?I1 = ?y |]
      ==> ((%x. PROD i:?I1. ?f1 i x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 0, t_empty), template_var 4),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| !!i. i : ?S1 ==> (?f1 i \<longlongrightarrow> ?L1 i) ?F;
         prod ?L1 ?S1 = ?y |]
      ==> ((%x. PROD i:?S1. ?f1 i x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 0, t_empty), template_var 4),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("Topological_Spaces.continuous_on_topological",
     "continuous_on ?s ?f =
      (ALL x:?s.
          ALL B.
             open B -->
             ?f x : B -->
             (EX A. open A & x : A & (ALL y:?s. y : A --> ?f y : B)))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, template_var 1), t_empty))),
    ("Transcendental.ceiling_log_nat_eq_powr_iff",
     "[| 2 <= ?b; 0 < ?k |]
      ==> (\<lceil>log (real ?b) (real ?k)\<rceil> = int ?n + 1) =
          (?b ^ ?n < ?k & ?k <= ?b ^ (?n + 1))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_hole 14)),
          template_var 2),
        template_inequation (less_than, template_hole 12, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2)),
                 template_app (template_hole 7, template_var 1)))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_hole 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app (template_hole 17, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))))))),
    ("Transcendental.cos_diff_limit_1",
     "[| (%j. cos (?\<theta> j - ?\<Theta>)) \<longlonglongrightarrow> 1;
         !!k. (%j. ?\<theta> j - real_of_int (k j) * (2 * pi))
              \<longlonglongrightarrow> ?\<Theta> ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, t_empty),
                template_app (template_hole 9, template_hole 8)),
              template_hole 7)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_on_closed_Union",
     "[| finite ?I; !!i. i : ?I ==> closed (?U i);
         !!i. i : ?I ==> continuous_on (?U i) ?f |]
      ==> continuous_on (\<Union> (?U ` ?I)) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2))),
             template_var 0)
           ))),
    ("Transcendental.continuous_on_powr'",
     "[| continuous_on ?s ?f; continuous_on ?s ?g;
         ALL x:?s. 0 <= ?f x & (?f x = 0 --> 0 < ?g x) |]
      ==> continuous_on ?s (%x. ?f x powr ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2), t_empty)
           ))),
    ("Topological_Spaces.tendsto_compose_at",
     "[| (?f \<longlongrightarrow> ?y) ?F; ?g \<midarrow>?y\<rightarrow> ?z;
         \<forall>\<^sub>F w in ?F. ?f w = ?y --> ?g ?y = ?z |]
      ==> ((?g o ?f) \<longlongrightarrow> ?z) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app (template_hole 10, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 8, template_var 0)),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_app (template_hole 8, template_var 0)),
             template_var 2)
           ))),
    ("Transitive_Closure.rtranclE",
     "[| (?a, ?b) : ?r^*; ?a = ?b ==> ?thesis;
         !!y. [| (?a, y) : ?r^*; (y, ?b) : ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclE",
     "[| (?x, ?z) : ?r^*; ?x = ?z ==> ?P;
         !!y. [| (?x, y) : ?r; (y, ?z) : ?r^* |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Cardinal_Order_Relation.card_of_Times_ordLess_infinite_Field",
     "[| infinite (Field ?r); Card_order ?r; |?A| <o ?r; |?B| <o ?r |]
      ==> |?A \<times> ?B| <o ?r",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 2)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 1)),
                  template_var 2)),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 0)),
                  template_var 2)),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       t_empty))),
                 template_var 2)),
             template_hole 0)
           ))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; ?b1 ~= (0::?'a1);
         ?a1 / ?b1 = ?y |]
      ==> ((%x. ?f1 x / ?g1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app (template_hole 4, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_var 3)
           ))),
    ("Transfer.right_total_relcompp_transfer",
     "right_total ?B ==>
      rel_fun (rel_fun ?A (rel_fun ?B (=)))
       (rel_fun (rel_fun ?B (rel_fun ?C (=))) (rel_fun ?A (rel_fun ?C (=))))
       (%R S x z. EX y:Collect (Domainp ?B). R x y & S y z) (OO)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 1),
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_hole 9))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 9))),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_hole 9)))),
               t_empty),
             template_hole 0)
           ))),
    ("Transcendental.sincos_total_2pi_le",
     "?x\<^sup>2 + ?y\<^sup>2 = 1 ==>
      EX t>=0. t <= 2 * pi & ?x = cos t & ?y = sin t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 1),
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_hole 10)))),
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10)))),
          template_hole 9)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Transitive_Closure.rtrancl_Un_separatorE",
     "[| (?a, ?b) : (?P Un ?Q)^*;
         ALL x y. (?a, x) : ?P^* --> (x, y) : ?Q --> x = y |]
      ==> (?a, ?b) : ?P^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_Un_separator_converseE",
     "[| (?a, ?b) : (?P Un ?Q)^*;
         ALL x y. (x, ?b) : ?P^* --> (y, x) : ?Q --> y = x |]
      ==> (?a, ?b) : ?P^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Countable_Set_Type.countable_cases_card_of",
     "[| countable ?A; [| finite ?A; |?A| <o |UNIV| |] ==> ?thesis;
         [| infinite ?A; |?A| =o |UNIV| |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_implication
         ([template_predicate
            (template_app (template_hole 8, template_var 1))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 1)),
                       template_app (template_hole 4, template_hole 3))),
                   template_hole 2)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_hole 8, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 1)),
                       template_app (template_hole 4, template_hole 3))),
                   template_hole 0)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.IVT'",
     "[| ?f ?a <= ?y; ?y <= ?f ?b; ?a <= ?b; continuous_on {?a..?b} ?f |]
      ==> EX x>=?a. x <= ?b & ?f x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 3, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Topological_Spaces.IVT2'",
     "[| ?f ?b <= ?y; ?y <= ?f ?a; ?a <= ?b; continuous_on {?a..?b} ?f |]
      ==> EX x>=?a. x <= ?b & ?f x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 3, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2)),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Transcendental.tendsto_zero_powrI",
     "[| (?f \<longlongrightarrow> 0) ?F; (?g \<longlongrightarrow> ?b) ?F;
         \<forall>\<^sub>F x in ?F. 0 <= ?f x; 0 < ?b |]
      ==> ((%x. ?f x powr ?g x) \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_hole 4)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            ),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 5, template_hole 4)),
             template_var 2)
           ))),
    ("Countable_Set_Type.csingleton_cUn_iff",
     "(csingle ?x = cUn ?A ?B) =
      (?A = cempty & ?B = csingle ?x |
       ?A = csingle ?x & ?B = cempty | ?A = csingle ?x & ?B = csingle ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 3)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_hole 3))),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_hole 3))),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 3)))))
           ))),
    ("Countable_Set_Type.cUn_csingleton_iff",
     "(cUn ?A ?B = csingle ?x) =
      (?A = cempty & ?B = csingle ?x |
       ?A = csingle ?x & ?B = cempty | ?A = csingle ?x & ?B = csingle ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2))),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 2))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)))))
           ))),
    ("Transcendental.powser_limit_0_strong",
     "[| 0 < ?s;
         !!x. [| x ~= (0::?'a); norm x < ?s |]
              ==> (%n. ?a n * x ^ n) sums ?f x |]
      ==> ?f \<midarrow>0::?'a\<rightarrow> ?a 0",
     template_implication
      ([template_inequation (less_than, template_hole 13, template_var 2),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_var 1, template_hole 2))),
             template_app
              (template_app (template_hole 1, template_hole 9),
               template_hole 0))
           ))),
    ("Transcendental.sincos_total_pi",
     "[| 0 <= ?y; ?x\<^sup>2 + ?y\<^sup>2 = 1 |]
      ==> EX t>=0. t <= pi & ?x = cos t & ?y = sin t",
     template_implication
      ([template_inequation (less_equals, template_hole 12, template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)))),
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6)))),
          template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transcendental.summable_Leibniz",
     "[| ?a \<longlonglongrightarrow> 0; monoseq ?a |]
      ==> (%n. SUM i<2 * n. (- 1) ^ i * ?a i)
          \<longlonglongrightarrow> (\<Sum>i. (- 1) ^ i * ?a i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 0),
                template_app (template_hole 14, template_hole 13)),
              template_hole 12)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 15, t_empty),
               template_app
                (template_hole 14,
                 template_app (template_hole 0, t_empty))),
             template_hole 12)
           ))),
    ("Transcendental.termdiffs_strong",
     "[| summable (%n. ?c n * ?K ^ n); norm ?x < norm ?K |]
      ==> ((%x. \<Sum>n. ?c n * x ^ n) has_field_derivative
           (\<Sum>n. diffs ?c n * ?x ^ n))
           (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 0),
          template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transfer.transfer_raw",
     "[| Transfer.Rel ?A (0::?'a) (0::?'b);
         Transfer.Rel (rel_fun ?A (rel_fun ?A ?A)) (+) (+);
         Transfer.Rel (rel_fun ?A (rel_fun ?A ?A)) (*) (*) |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?B ?A)
             (rel_fun ?A (rel_fun (list_all2 ?B) ?A)))
           horner_sum horner_sum",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 1),
                template_hole 16),
              template_hole 15)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_app
                     (template_app (template_hole 12, template_var 1),
                      template_var 1))),
                template_hole 11),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_app
                     (template_app (template_hole 12, template_var 1),
                      template_var 1))),
                template_hole 9),
              template_hole 8)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       template_var 1)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transcendental.isCont_powser'",
     "[| isCont ?f ?a; summable (%n. ?c n * ?K ^ n);
         norm (?f ?a) < norm ?K |]
      ==> isCont (%x. \<Sum>n. ?c n * ?f x ^ n) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_hole 6)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_than,
          template_app
           (template_hole 1, template_app (template_var 2, template_var 3)),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_hole 6)),
             t_empty)
           ))),
    ("Transitive_Closure.tranclE",
     "[| (?a, ?b) : ?r^+; (?a, ?b) : ?r ==> ?thesis;
         !!c. [| (?a, c) : ?r^+; (c, ?b) : ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_tranclE",
     "[| (?x, ?z) : ?r^+; (?x, ?z) : ?r ==> ?P;
         !!y. [| (?x, y) : ?r; (y, ?z) : ?r^+ |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.le_arcsin_iff",
     "[| - 1 <= ?x; ?x <= 1; - pi / 2 <= ?y; ?y <= pi / 2 |]
      ==> (?y <= arcsin ?x) = (sin ?y <= ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_hole 8),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 8),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 9, template_hole 6)),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_app (template_hole 10, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Transcendental.arcsin_le_iff",
     "[| - 1 <= ?x; ?x <= 1; - pi / 2 <= ?y; ?y <= pi / 2 |]
      ==> (arcsin ?x <= ?y) = (?x <= sin ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_hole 8),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 8),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 9, template_hole 6)),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Topological_Spaces.connected_closedD",
     "[| connected ?s; ?A Int ?B Int ?s = {}; ?s <= ?A Un ?B; closed ?A;
         closed ?B |]
      ==> ?A Int ?s = {} | ?B Int ?s = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)),
            template_var 2),
          template_hole 4),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 2)),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 2)),
               template_hole 4))
           ))),
    ("Transcendental.polyfun_linear_factor",
     "EX b. ALL z.
               (SUM i<=?n. ?c i * z ^ i) =
               (z - ?a) * (SUM i<?n. b i * z ^ i) +
               (SUM i<=?n. ?c i * ?a ^ i)",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Transcendental.tan_double",
     "[| cos ?x ~= (0::?'a); cos ((2::?'a) * ?x) ~= (0::?'a) |]
      ==> tan ((2::?'a) * ?x) =
          (2::?'a) * tan ?x / ((1::?'a) - (tan ?x)\<^sup>2)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_var 0)),
              template_hole 10)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_hole 0,
                 template_app (template_hole 7, template_hole 6)))))))),
    ("Topological_Spaces.LIM_cong",
     "[| ?a = ?b; !!x. x ~= ?b ==> ?f x = ?g x; ?l = ?m |]
      ==> ?f \<midarrow>?a\<rightarrow> ?l =
          ?g \<midarrow>?b\<rightarrow> ?m",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_hole 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_hole 0))))),
    ("Sum_Type.PlusE",
     "[| ?u : ?A <+> ?B; !!x. [| x : ?A; ?u = Inl x |] ==> ?P;
         !!y. [| y : ?B; ?u = Inr y |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.LIM_compose_eventually",
     "[| ?f \<midarrow>?a\<rightarrow> ?b; ?g \<midarrow>?b\<rightarrow> ?c;
         \<forall>\<^sub>F x in at ?a. ?f x ~= ?b |]
      ==> (%x. ?g (?f x)) \<midarrow>?a\<rightarrow> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app (template_hole 10, template_var 3)),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_hole 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_hole 8))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_hole 8))
           ))),
    ("Transcendental.tendsto_powr2",
     "[| (?f \<longlongrightarrow> ?a) ?F; (?g \<longlongrightarrow> ?b) ?F;
         \<forall>\<^sub>F x in ?F. 0 <= ?f x; 0 < ?b |]
      ==> ((%x. ?f x powr ?g x) \<longlongrightarrow> ?a powr ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            ),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Transcendental.log_eq_div_ln_mult_log",
     "[| 0 < ?a; ?a ~= 1; 0 < ?b; ?b ~= 1; 0 < ?x |]
      ==> log ?a ?x = ln ?b / ln ?a * log ?b ?x",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Transcendental.lemma_termdiff1",
     "(SUM p<?m. (?z + ?h) ^ (?m - p) * ?z ^ p - ?z ^ ?m) =
      (SUM p<?m. ?z ^ p * ((?z + ?h) ^ (?m - p) - ?z ^ (?m - p)))",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.connected_closed",
     "connected ?s =
      (\<nexists>A B.
          closed A &
          closed B &
          ?s <= A Un B &
          A Int B Int ?s = {} & A Int ?s ~= {} & B Int ?s ~= {})",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty)))),
    ("Transcendental.summable_Leibniz",
     "[| ?a \<longlonglongrightarrow> 0; monoseq ?a |]
      ==> (%n. SUM i<2 * n + 1. (- 1) ^ i * ?a i)
          \<longlonglongrightarrow> (\<Sum>i. (- 1) ^ i * ?a i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 0),
                template_app (template_hole 16, template_hole 15)),
              template_hole 14)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 17, t_empty),
               template_app
                (template_hole 16,
                 template_app (template_hole 0, t_empty))),
             template_hole 14)
           ))),
    ("Topological_Spaces.open_prod_elim",
     "[| open ?S; ?x : ?S;
         !!A B.
            [| open A; open B; ?x : A \<times> B; A \<times> B <= ?S |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Cardinal_Order_Relation.Times_infinite_bij_betw",
     "[| infinite ?A; ?B ~= {}; inj_on ?g ?B & ?g ` ?B <= ?A |]
      ==> (EX f. bij_betw f (?A \<times> ?B) ?A) &
          (EX h. bij_betw h (?B \<times> ?A) ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_var 1)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 5, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Transcendental.tan_diff",
     "[| cos ?x ~= (0::?'a); cos ?y ~= (0::?'a);
         cos (?x - ?y) ~= (0::?'a) |]
      ==> tan (?x - ?y) = (tan ?x - tan ?y) / ((1::?'a) + tan ?x * tan ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))))))),
    ("Transcendental.tan_add",
     "[| cos ?x ~= (0::?'a); cos ?y ~= (0::?'a);
         cos (?x + ?y) ~= (0::?'a) |]
      ==> tan (?x + ?y) = (tan ?x + tan ?y) / ((1::?'a) - tan ?x * tan ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))))))),
    ("Transitive_Closure.rtrancl_induct",
     "[| (?a, ?b) : ?r^*; ?P ?a;
         !!y z. [| (?a, y) : ?r^*; (y, z) : ?r; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 3)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Transitive_Closure.converse_rtrancl_induct",
     "[| (?a, ?b) : ?r^*; ?P ?b;
         !!y z. [| (y, z) : ?r; (z, ?b) : ?r^*; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 3)))),
    ("Product_Type.Collect_split_mono_strong",
     "[| ?X = fst ` ?A; ?Y = snd ` ?A;
         ALL a:?X. ALL b:?Y. ?P a b --> ?Q a b; ?A <= {(x, y). ?P x y} |]
      ==> ?A <= {(x, y). ?Q x y}",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4), t_empty)
            ),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 1,
            template_app (template_hole 0, template_var 1)))],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.sum_split_even_odd",
     "(SUM i<2 * ?n. if even i then ?f i else ?g i) =
      (SUM i<?n. ?f (2 * i)) + (SUM i<?n. ?g (2 * i + 1))",
     template_equation
      (template_app
        (template_app (template_hole 10, t_empty),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 10, t_empty),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 4, template_var 0))))),
    ("Transcendental.exp_series_add_commuting",
     "?x * ?y = ?y * ?x ==>
      (?x + ?y) ^ ?n /\<^sub>R fact ?n =
      (SUM i<=?n.
       ?x ^ i /\<^sub>R fact i * (?y ^ (?n - i) /\<^sub>R fact (?n - i)))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Transitive_Closure.converse_tranclp_induct",
     "[| ?r^++ ?a ?b; !!y. ?r y ?b ==> ?P y;
         !!y z. [| ?r y z; ?r^++ z ?b; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Transitive_Closure.tranclp_induct",
     "[| ?r^++ ?a ?b; !!y. ?r ?a y ==> ?P y;
         !!y z. [| ?r^++ ?a y; ?r y z; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Transcendental.tendsto_log",
     "[| (?f \<longlongrightarrow> ?a) ?F; (?g \<longlongrightarrow> ?b) ?F;
         0 < ?a; ?a ~= 1; 0 < ?b |]
      ==> ((%x. log (?f x) (?g x)) \<longlongrightarrow> log ?a ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_app (template_hole 6, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_app (template_hole 6, template_var 0)),
              template_var 2)
            ),
        template_inequation (less_than, template_hole 4, template_var 3),
        template_negation
         (template_equation (template_var 3, template_hole 1)),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Transcendental.sin_zero_iff",
     "(sin ?x = 0) =
      ((EX n. even n & ?x = real n * (pi / 2)) |
       (EX n. even n & ?x = - (real n * (pi / 2))))",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         template_hole 13),
       template_app
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app (template_hole 11, t_empty)))),
    ("Transcendental.has_derivative_arcsin",
     "[| - 1 < ?g ?x; ?g ?x < 1;
         (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. arcsin (?g x)) has_derivative
           (%x. ?g' x * inverse (sqrt (1 - (?g ?x)\<^sup>2))))
           (at ?x within ?s)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_app (template_var 3, template_var 2)),
        template_inequation
         (less_than, template_app (template_var 3, template_var 2),
          template_hole 11),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty), t_empty),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_var 0))
           ))),
    ("Transcendental.isCont_log",
     "[| isCont ?f ?a; isCont ?g ?a; 0 < ?f ?a; ?f ?a ~= 1; 0 < ?g ?a |]
      ==> isCont (%x. log (?f x) (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_hole 6)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_hole 6)),
              template_var 0)
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_var 1, template_var 2)),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 2),
              template_hole 1)
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_hole 6)),
             t_empty)
           ))),
    ("Transcendental.continuous_at_within_log",
     "[| continuous (at ?a within ?s) ?f; continuous (at ?a within ?s) ?g;
         0 < ?f ?a; ?f ?a ~= 1; 0 < ?g ?a |]
      ==> continuous (at ?a within ?s) (%x. log (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 0)
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_var 1, template_var 3)),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3),
              template_hole 1)
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_var 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2)),
             t_empty)
           ))),
    ("Transcendental.sums_cos_x_plus_y",
     "(%p. SUM n<=p.
           if even p
           then (real_of_int ((- 1) ^ (p div 2) * int (p choose n)) /
                 fact p) *\<^sub>R
                ?x ^ n *
                ?y ^ (p - n)
           else (0::?'a)) sums
      cos (?x + ?y)",
     template_predicate
      (
         template_app
          (template_app (template_hole 24, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Transfer.transfer_raw",
     "[| Domainp ?B = ?DB1; right_total ?B |]
      ==> Transfer.Rel
           (rel_fun (rel_fun ?A (rel_fun ?B (=)))
             (rel_fun (rel_fun ?B (rel_fun ?C (=)))
               (rel_fun ?A (rel_fun ?C (=)))))
           (%R S x z. EX y:Collect ?DB1. R x y & S y z) (OO)",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 3), template_var 2),
        template_predicate
         (template_app (template_hole 13, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_app
                        (template_app (template_hole 9, template_var 3),
                         template_hole 8))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 3),
                         template_app
                          (template_app (template_hole 5, template_var 0),
                           template_hole 8))),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_hole 8))))),
               t_empty),
             template_hole 0)
           ))),
    ("Transcendental.tendsto_powr'",
     "[| (?f \<longlongrightarrow> ?a) ?F; (?g \<longlongrightarrow> ?b) ?F;
         ?a ~= 0 | 0 < ?b & (\<forall>\<^sub>F x in ?F. 0 <= ?f x) |]
      ==> ((%x. ?f x powr ?g x) \<longlongrightarrow> ?a powr ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_app (template_hole 9, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_app (template_hole 9, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 5))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 5),
                    template_var 0)),
                template_app
                 (template_app (template_hole 2, t_empty), template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Transcendental.has_derivative_arccos",
     "[| - 1 < ?g ?x; ?g ?x < 1;
         (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. arccos (?g x)) has_derivative
           (%x. ?g' x * inverse (- sqrt (1 - (?g ?x)\<^sup>2))))
           (at ?x within ?s)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_app (template_var 3, template_var 2)),
        template_inequation
         (less_than, template_app (template_var 3, template_var 2),
          template_hole 11),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty), t_empty),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_var 0))
           ))),
    ("Transcendental.termdiffs_sums_strong",
     "[| !!z. norm z < ?K ==> (%n. ?c n * z ^ n) sums ?f z;
         (?f has_field_derivative ?f') (at ?z); norm ?z < ?K |]
      ==> (%n. diffs ?c n * ?z ^ n) sums ?f'",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            ),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_var 4)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)
           ))),
    ("Transcendental.cos_zero_iff",
     "(cos ?x = 0) =
      ((EX n. odd n & ?x = real n * (pi / 2)) |
       (EX n. odd n & ?x = - (real n * (pi / 2))))",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app (template_hole 15, template_var 0)),
         template_hole 14),
       template_app
        (template_app
          (template_hole 13, template_app (template_hole 12, t_empty)),
         template_app (template_hole 12, t_empty)))),
    ("Transcendental.polyfun_rootbound",
     "[| ?c ?k ~= (0::?'a); ?k <= ?n |]
      ==> finite {z. (SUM i<=?n. ?c i * z ^ i) = (0::?'a)} &
          card {z. (SUM i<=?n. ?c i * z ^ i) = (0::?'a)} <= ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1),
              template_hole 9)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6, template_app (template_hole 5, t_empty))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 5, t_empty))),
               template_var 0))
           ))),
    ("Cardinal_Order_Relation.Plus_into_Times",
     "[| ?a1.0 ~= ?a2.0 & {?a1.0, ?a2.0} <= ?A;
         ?b1.0 ~= ?b2.0 & {?b1.0, ?b2.0} <= ?B |]
      ==> EX f. inj_on f (?A <+> ?B) & f ` (?A <+> ?B) <= ?A \<times> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4))),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app (template_hole 11, template_var 4),
                      template_hole 10))),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_app
                     (template_app (template_hole 7, template_var 1),
                      template_hole 6))),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Transcendental.termdiffs_strong'",
     "[| !!z. norm z < ?K ==> summable (%n. ?c n * z ^ n); norm ?z < ?K |]
      ==> ((%z. \<Sum>n. ?c n * z ^ n) has_field_derivative
           (\<Sum>n. diffs ?c n * ?z ^ n))
           (at ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 8, template_var 0),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transitive_Closure.relpowp_E2",
     "[| (?P ^^ ?n) ?x ?z; [| ?n = 0; ?x = ?z |] ==> ?Q;
         !!y m. [| ?n = Suc m; ?P ?x y; (?P ^^ m) y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 4)],
          template_implication
           ([template_equation (template_var 2, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_E",
     "[| (?P ^^ ?n) ?x ?z; [| ?n = 0; ?x = ?z |] ==> ?Q;
         !!y m. [| ?n = Suc m; (?P ^^ m) ?x y; ?P y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 4)],
          template_implication
           ([template_equation (template_var 2, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.continuous_log",
     "[| continuous ?F ?f; continuous ?F ?g; 0 < ?f (Lim ?F (%x. x));
         ?f (Lim ?F (%x. x)) ~= 1; 0 < ?g (Lim ?F (%x. x)) |]
      ==> continuous ?F (%x. log (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_var 1,
            template_app
             (template_app (template_hole 4, template_var 2), t_empty))),
        template_negation
         (
            template_equation
             (template_app
               (template_var 1,
                template_app
                 (template_app (template_hole 4, template_var 2), t_empty)),
              template_hole 1)
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_var 0,
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2), t_empty)
           ))),
    ("Transcendental.continuous_on_log",
     "[| continuous_on ?s ?f; continuous_on ?s ?g; ALL x:?s. 0 < ?f x;
         ALL x:?s. ?f x ~= 1; ALL x:?s. 0 < ?g x |]
      ==> continuous_on ?s (%x. log (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2), t_empty)
           ))),
    ("Transcendental.sincos_total_2pi",
     "[| ?x\<^sup>2 + ?y\<^sup>2 = 1;
         !!t. [| 0 <= t; t < 2 * pi; ?x = cos t; ?y = sin t |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_hole 10)))),
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10)))),
          template_hole 9),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.lemma_termdiff5",
     "[| 0 < ?k; summable ?f;
         !!h n.
            [| h ~= (0::?'a); norm h < ?k |]
            ==> norm (?g h n) <= ?f n * norm h |]
      ==> (%h. suminf (?g h)) \<midarrow>0::?'a\<rightarrow> (0::?'b)",
     template_implication
      ([template_inequation (less_than, template_hole 16, template_var 2),
        template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 3, template_hole 2)),
             template_app
              (template_app (template_hole 1, template_hole 10),
               template_hole 0))
           ))),
    ("Topological_Spaces.continuous_inj_imp_mono",
     "[| ?a < ?x; ?x < ?b; continuous_on {?a..?b} ?f; inj_on ?f {?a..?b} |]
      ==> ?f ?a < ?f ?x & ?f ?x < ?f ?b | ?f ?b < ?f ?x & ?f ?x < ?f ?a",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_var 0, template_var 3)),
                     template_app (template_var 0, template_var 2))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 0, template_var 2)),
                   template_app (template_var 0, template_var 1)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 0, template_var 1)),
                   template_app (template_var 0, template_var 2))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 0, template_var 2)),
                 template_app (template_var 0, template_var 3))))
           ))),
    ("Transcendental.tan_mono_lt_eq",
     "[| - (pi / 2) < ?x; ?x < pi / 2; - (pi / 2) < ?y; ?y < pi / 2 |]
      ==> (tan ?x < tan ?y) = (?x < ?y)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_var 0)))),
    ("Transcendental.tan_mono_le_eq",
     "[| - (pi / 2) < ?x; ?x < pi / 2; - (pi / 2) < ?y; ?y < pi / 2 |]
      ==> (tan ?x <= tan ?y) = (?x <= ?y)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transcendental.tan_monotone'",
     "[| - (pi / 2) < ?y; ?y < pi / 2; - (pi / 2) < ?x; ?x < pi / 2 |]
      ==> (?y < ?x) = (tan ?y < tan ?x)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2)))),
        template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.sin_mono_less_eq",
     "[| - (pi / 2) <= ?x; ?x <= pi / 2; - (pi / 2) <= ?y; ?y <= pi / 2 |]
      ==> (sin ?x < sin ?y) = (?x < ?y)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3)))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Transcendental.sin_mono_le_eq",
     "[| - (pi / 2) <= ?x; ?x <= pi / 2; - (pi / 2) <= ?y; ?y <= pi / 2 |]
      ==> (sin ?x <= sin ?y) = (?x <= ?y)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2)))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_var 0)))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F; 0 < ?a1; ?a1 ~= 1; 0 < ?b1;
         log ?a1 ?b1 = ?y |]
      ==> ((%x. log (?f1 x) (?g1 x)) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_app (template_hole 6, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_var 3)
            ),
        template_inequation (less_than, template_hole 4, template_var 4),
        template_negation
         (template_equation (template_var 4, template_hole 1)),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app (template_hole 6, template_var 0)),
             template_var 3)
           ))),
    ("Topological_Spaces.sequentially_imp_eventually_at_right",
     "[| ?a < ?b;
         !!f. [| !!n. ?a < f n; !!n. f n < ?b; decseq f;
                 f \<longlonglongrightarrow> ?a |]
              ==> \<forall>\<^sub>F n in sequentially. ?P (f n) |]
      ==> eventually ?P (at_right ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Topological_Spaces.sequentially_imp_eventually_at_left",
     "[| ?b < ?a;
         !!f. [| !!n. ?b < f n; !!n. f n < ?a; incseq f;
                 f \<longlonglongrightarrow> ?a |]
              ==> \<forall>\<^sub>F n in sequentially. ?P (f n) |]
      ==> eventually ?P (at_left ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Deriv.MVT2",
     "[| ?a < ?b;
         !!x. [| ?a <= x; x <= ?b |]
              ==> (?f has_real_derivative ?f' x) (at x) |]
      ==> EX z>?a. z < ?b & ?f ?b - ?f ?a = (?b - ?a) * ?f' z",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transcendental.sincos_total_pi_half",
     "[| 0 <= ?x; 0 <= ?y; ?x\<^sup>2 + ?y\<^sup>2 = 1 |]
      ==> EX t>=0. t <= pi / 2 & ?x = cos t & ?y = sin t",
     template_implication
      ([template_inequation (less_equals, template_hole 14, template_var 1),
        template_inequation (less_equals, template_hole 14, template_var 0),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_hole 8)))),
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8)))),
          template_hole 7)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Topological_Spaces.IVT",
     "[| ?f ?a <= ?y; ?y <= ?f ?b; ?a <= ?b;
         ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX x>=?a. x <= ?b & ?f x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 3, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Topological_Spaces.IVT2",
     "[| ?f ?b <= ?y; ?y <= ?f ?a; ?a <= ?b;
         ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX x>=?a. x <= ?b & ?f x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 3, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 3, template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transcendental.sin_inj_pi",
     "[| - (pi / 2) <= ?x; ?x <= pi / 2; - (pi / 2) <= ?y; ?y <= pi / 2;
         sin ?x = sin ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2)))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2)))),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.polyfun_linear_factor_root",
     "[| (SUM i<=?n. ?c i * ?a ^ i) = (0::?'a);
         !!b. (!!z. (SUM i<=?n. ?c i * z ^ i) =
                    (z - ?a) * (SUM i<?n. b i * z ^ i)) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, t_empty),
            template_app (template_hole 5, template_var 1)),
          template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclpE2",
     "[| ?r^** (?xa, ?xb) (?za, ?zb); (?xa, ?xb) = (?za, ?zb) ==> ?P;
         !!a b.
            [| ?r (?xa, ?xb) (a, b); ?r^** (a, b) (?za, ?zb) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.tendsto_eq_intros",
     "[| (?f1 \<longlongrightarrow> ?a1) ?F;
         (?g1 \<longlongrightarrow> ?b1) ?F;
         ?a1 ~= 0 | 0 < ?b1 & (\<forall>\<^sub>F x in ?F. 0 <= ?f1 x);
         ?a1 powr ?b1 = ?y |]
      ==> ((%x. ?f1 x powr ?g1 x) \<longlongrightarrow> ?y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_app (template_hole 9, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 9, template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_hole 5))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 5),
                    template_var 1)),
                template_app
                 (template_app (template_hole 2, t_empty), template_var 3)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app (template_hole 9, template_var 0)),
             template_var 3)
           ))),
    ("Transcendental.summable_Leibniz'",
     "[| ?a \<longlonglongrightarrow> 0; !!n. 0 <= ?a n;
         !!n. ?a (Suc n) <= ?a n |]
      ==> (SUM i<2 * ?n. (- 1) ^ i * ?a i) <= (\<Sum>i. (- 1) ^ i * ?a i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 1),
                template_app (template_hole 16, template_hole 15)),
              template_hole 14)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0))),
         template_app (template_hole 0, t_empty)))),
    ("Transitive_Closure.converse_trancl_induct",
     "[| (?a, ?b) : ?r^+; !!y. (y, ?b) : ?r ==> ?P y;
         !!y z. [| (y, z) : ?r; (z, ?b) : ?r^+; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 3)))),
    ("Transitive_Closure.trancl_induct",
     "[| (?a, ?b) : ?r^+; !!y. (?a, y) : ?r ==> ?P y;
         !!y z. [| (?a, y) : ?r^+; (y, z) : ?r; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Transcendental.cos_x_cos_y",
     "(%p. SUM n<=p.
           if even p & even n
           then (real_of_int ((- 1) ^ (p div 2) * int (p choose n)) /
                 fact p) *\<^sub>R
                ?x ^ n *
                ?y ^ (p - n)
           else (0::?'a)) sums
      (cos ?x * cos ?y)",
     template_predicate
      (
         template_app
          (template_app (template_hole 24, t_empty),
           template_app
            (template_app
              (template_hole 16,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Transcendental.DERIV_powr",
     "[| (?g has_real_derivative ?m) (at ?x); 0 < ?g ?x;
         (?f has_real_derivative ?r) (at ?x) |]
      ==> ((%x. ?g x powr ?f x) has_real_derivative
           ?g ?x powr ?f ?x * (?r * ln (?g ?x) + ?m * ?f ?x / ?g ?x))
           (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_var 4, template_var 2)),
                     template_app (template_var 1, template_var 2))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 1,
                         template_app (template_var 4, template_var 2)))),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app (template_var 1, template_var 2))),
                     template_app (template_var 4, template_var 2))))),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_hole 7))
           ))),
    ("Transcendental.DERIV_arctan_series",
     "\<bar>?x\<bar> < 1 ==>
      ((%x'. \<Sum>k.
                (- 1) ^ k *
                (1 / real (k * 2 + 1) *
                 x' ^ (k * 2 + 1))) has_real_derivative
       (\<Sum>k. (- 1) ^ k * ?x ^ (k * 2)))
       (at ?x)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 16, template_var 0),
          template_hole 15)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, t_empty),
               template_app (template_hole 13, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Topological_Spaces.monoseq_le",
     "[| monoseq ?a; ?a \<longlonglongrightarrow> ?x |]
      ==> (ALL n. ?a n <= ?x) & (ALL m n. m <= n --> ?a m <= ?a n) |
          (ALL n. ?x <= ?a n) & (ALL m n. m <= n --> ?a n <= ?a m)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_app (template_hole 7, template_var 0)),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app (template_hole 3, t_empty))),
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               template_app (template_hole 3, t_empty)))
           ))),
    ("Topological_Spaces.tendsto_at_right_sequentially",
     "[| ?a < ?b;
         !!S. [| !!n. ?a < S n; !!n. S n < ?b; decseq S;
                 S \<longlonglongrightarrow> ?a |]
              ==> (%n. ?X (S n)) \<longlonglongrightarrow> ?L |]
      ==> (?X \<longlongrightarrow> ?L) (at_right ?a)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Topological_Spaces.tendsto_at_left_sequentially",
     "[| ?b < ?a;
         !!S. [| !!n. S n < ?a; !!n. ?b < S n; incseq S;
                 S \<longlonglongrightarrow> ?a |]
              ==> (%n. ?X (S n)) \<longlonglongrightarrow> ?L |]
      ==> (?X \<longlongrightarrow> ?L) (at_left ?a)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Transcendental.termdiffs_aux",
     "[| summable (%n. diffs (diffs ?c) n * ?K ^ n); norm ?x < norm ?K |]
      ==> (%h. \<Sum>n.
                  ?c n *
                  (((?x + h) ^ n - ?x ^ n) / h -
                   of_nat n * ?x ^ (n - Suc 0)))
          \<midarrow>0::?'a\<rightarrow> (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 13, template_var 0),
          template_app (template_hole 13, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 12, t_empty),
               template_app (template_hole 3, template_hole 2)),
             template_app
              (template_app (template_hole 1, template_hole 2),
               template_hole 0))
           ))),
    ("Transcendental.summable_Leibniz'",
     "[| ?a \<longlonglongrightarrow> 0; !!n. 0 <= ?a n;
         !!n. ?a (Suc n) <= ?a n |]
      ==> (\<Sum>i. (- 1) ^ i * ?a i)
          <= (SUM i<2 * ?n + 1. (- 1) ^ i * ?a i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 1),
                template_app (template_hole 18, template_hole 17)),
              template_hole 16)
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 12, t_empty),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_var 0)),
               template_hole 0)))))),
    ("Transitive_Closure.relpow_E2",
     "[| (?x, ?z) : ?R ^^ ?n; [| ?n = 0; ?x = ?z |] ==> ?P;
         !!y m. [| ?n = Suc m; (?x, y) : ?R; (y, ?z) : ?R ^^ m |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 4, template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_E",
     "[| (?x, ?z) : ?R ^^ ?n; [| ?n = 0; ?x = ?z |] ==> ?P;
         !!y m. [| ?n = Suc m; (?x, y) : ?R ^^ m; (y, ?z) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 4, template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.sin_x_sin_y",
     "(%p. SUM n<=p.
           if even p & odd n
           then - (real_of_int ((- 1) ^ (p div 2) * int (p choose n)) /
                   fact p) *\<^sub>R
                ?x ^ n *
                ?y ^ (p - n)
           else (0::?'a)) sums
      (sin ?x * sin ?y)",
     template_predicate
      (
         template_app
          (template_app (template_hole 26, t_empty),
           template_app
            (template_app
              (template_hole 17,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Transcendental.summable_Leibniz'",
     "[| ?a \<longlonglongrightarrow> 0; !!n. 0 <= ?a n;
         !!n. ?a (Suc n) <= ?a n |]
      ==> (%n. SUM i<2 * n. (- 1) ^ i * ?a i)
          \<longlonglongrightarrow> (\<Sum>i. (- 1) ^ i * ?a i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 0),
                template_app (template_hole 16, template_hole 15)),
              template_hole 14)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 17, t_empty),
               template_app
                (template_hole 16,
                 template_app (template_hole 0, t_empty))),
             template_hole 14)
           ))),
    ("Topological_Spaces.continuous_on_IccI",
     "[| (?f \<longlongrightarrow> ?f ?a) (at_right ?a);
         (?f \<longlongrightarrow> ?f ?b) (at_left ?b);
         !!x. [| ?a < x; x < ?b |] ==> ?f \<midarrow>x\<rightarrow> ?f x;
         ?a < ?b |]
      ==> continuous_on {?a..?b} ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_hole 8,
                  template_app (template_var 2, template_var 1))),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app (template_hole 6, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_hole 8,
                  template_app (template_var 2, template_var 0))),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_app (template_hole 5, template_var 0)))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Topological_Spaces.continuous_on_cases",
     "[| closed ?s; closed ?t; continuous_on ?s ?f; continuous_on ?t ?g;
         ALL x. x : ?s & ~ ?P x | x : ?t & ?P x --> ?f x = ?g x |]
      ==> continuous_on (?s Un ?t) (%x. if ?P x then ?f x else ?g x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             t_empty)
           ))),
    ("Transcendental.polyfun_diff",
     "1 <= ?n ==>
      (SUM i<=?n. ?a i * ?x ^ i) - (SUM i<=?n. ?a i * ?y ^ i) =
      (?x - ?y) *
      (SUM j<?n. (SUM i = Suc j..?n. ?a i * ?y ^ (i - j - 1)) * ?x ^ j)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 10, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, t_empty),
               template_app (template_hole 4, template_var 3))),
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 4, template_var 3))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 0, template_var 3)))))),
    ("Transcendental.polyfun_diff_alt",
     "1 <= ?n ==>
      (SUM i<=?n. ?a i * ?x ^ i) - (SUM i<=?n. ?a i * ?y ^ i) =
      (?x - ?y) *
      (SUM j<?n. SUM k<?n - j. ?a (j + k + 1) * ?y ^ k * ?x ^ j)",
     template_implication
      ([template_inequation (less_equals, template_hole 9, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 3, template_var 3))),
           template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 3, template_var 3))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 1, template_var 3)))))),
    ("Transcendental.summable_Leibniz'",
     "[| ?a \<longlonglongrightarrow> 0; !!n. 0 <= ?a n;
         !!n. ?a (Suc n) <= ?a n |]
      ==> (%n. SUM i<2 * n + 1. (- 1) ^ i * ?a i)
          \<longlonglongrightarrow> (\<Sum>i. (- 1) ^ i * ?a i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 0),
                template_app (template_hole 18, template_hole 17)),
              template_hole 16)
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 19, t_empty),
               template_app
                (template_hole 18,
                 template_app (template_hole 0, t_empty))),
             template_hole 16)
           ))),
    ("Transitive_Closure.rtranclp_induct2",
     "[| ?r^** (?ax, ?ay) (?bx, ?by); ?P ?ax ?ay;
         !!a b aa ba.
            [| ?r^** (?ax, ?ay) (a, b); ?r (a, b) (aa, ba); ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 4), template_var 3)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Transitive_Closure.converse_rtranclp_induct2",
     "[| ?r^** (?ax, ?ay) (?bx, ?by); ?P ?bx ?by;
         !!a b aa ba.
            [| ?r (a, b) (aa, ba); ?r^** (aa, ba) (?bx, ?by); ?P aa ba |]
            ==> ?P a b |]
      ==> ?P ?ax ?ay",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 4), template_var 3)
           ))),
    ("Transitive_Closure.converse_rtranclE2",
     "[| ((?xa, ?xb), ?za, ?zb) : ?r^*; (?xa, ?xb) = (?za, ?zb) ==> ?P;
         !!a b.
            [| ((?xa, ?xb), a, b) : ?r; ((a, b), ?za, ?zb) : ?r^* |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.tranclp_trans_induct",
     "[| ?r^++ ?x ?y; !!x y. ?r x y ==> ?P x y;
         !!x y z. [| ?r^++ x y; ?P x y; ?r^++ y z; ?P y z |] ==> ?P x z |]
      ==> ?P ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Countable_Set_Type.rel_cset_aux",
     "((ALL t:rcset ?a. EX u:rcset ?b. ?R t u) &
       (ALL t:rcset ?b. EX u:rcset ?a. ?R u t)) =
      ((BNF_Def.Grp {x. rcset x <= {(a, b). ?R a b}} (cimage fst))^--1 OO
       BNF_Def.Grp {x. rcset x <= {(a, b). ?R a b}} (cimage snd))
       ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 19,
           template_app
            (template_app
              (template_hole 18,
               template_app (template_hole 17, template_var 2)),
             t_empty)),
         template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 15, template_var 1)),
           t_empty)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, t_empty)),
                   template_app (template_hole 4, template_hole 3)))),
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 9, t_empty)),
               template_app (template_hole 1, template_hole 0))),
           template_var 2),
         template_var 1))),
    ("Topological_Spaces.continuous_on_compose_Pair",
     "[| continuous_on (Sigma ?A ?B) (%(a, b). ?f a b); continuous_on ?C ?g;
         continuous_on ?C ?h; !!c. c : ?C ==> ?g c : ?A;
         !!c. c : ?C ==> ?h c : ?B (?g c) |]
      ==> continuous_on ?C (%c. ?f (?g c) (?h c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4)),
              template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Transcendental.has_derivative_powr",
     "[| (?g has_derivative ?g') (at ?x within ?X);
         (?f has_derivative ?f') (at ?x within ?X); 0 < ?g ?x; ?x : ?X |]
      ==> ((%x. ?g x powr ?f x) has_derivative
           (%h. ?g ?x powr ?f ?x *
                (?f' h * ln (?g ?x) + ?g' h * ?f ?x / ?g ?x)))
           (at ?x within ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_inequation
         (less_than, template_hole 6,
          template_app (template_var 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty), t_empty),
             template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2))
           ))),
    ("Transcendental.lemma_termdiff2",
     "?h ~= (0::?'a) ==>
      ((?z + ?h) ^ ?n - ?z ^ ?n) / ?h - of_nat ?n * ?z ^ (?n - Suc 0) =
      ?h *
      (SUM p<?n - Suc 0.
       SUM q<?n - Suc 0 - p. (?z + ?h) ^ q * ?z ^ (?n - 2 - q))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 14))],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app (template_hole 10, template_var 1),
                           template_var 2)),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 11, template_var 1),
                     template_var 0))),
               template_var 2)),
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 0)),
             template_app
              (template_app (template_hole 11, template_var 1),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 6, template_hole 5))))),
         template_app
          (template_app (template_hole 9, template_var 2),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 6, template_hole 5)))))))),
    ("Transcendental.summable_Leibniz",
     "[| ?a \<longlonglongrightarrow> 0; monoseq ?a |]
      ==> 0 < ?a 0 -->
          (ALL n.
              (\<Sum>i. (- 1) ^ i * ?a i)
              : {SUM i<2 * n.
                 (- 1) ^ i * ?a i..SUM i<2 * n + 1. (- 1) ^ i * ?a i})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 23, template_var 0),
                template_app (template_hole 22, template_hole 21)),
              template_hole 20)
            ),
        template_predicate
         (template_app (template_hole 19, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app (template_hole 17, template_hole 21),
                 template_app (template_var 0, template_hole 16))),
             template_app (template_hole 15, t_empty))
           ))),
    ("Transcendental.summable_Leibniz",
     "[| ?a \<longlonglongrightarrow> 0; monoseq ?a |]
      ==> ?a 0 < 0 -->
          (ALL n.
              (\<Sum>i. (- 1) ^ i * ?a i)
              : {SUM i<2 * n + 1.
                 (- 1) ^ i * ?a i..SUM i<2 * n. (- 1) ^ i * ?a i})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 23, template_var 0),
                template_app (template_hole 22, template_hole 21)),
              template_hole 20)
            ),
        template_predicate
         (template_app (template_hole 19, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app (template_var 0, template_hole 16)),
                 template_hole 21)),
             template_app (template_hole 15, t_empty))
           ))),
    ("Deriv.MVT",
     "[| ?a < ?b; continuous_on {?a..?b} ?f;
         !!x. [| ?a < x; x < ?b |] ==> ?f differentiable at x |]
      ==> EX l z.
             ?a < z &
             z < ?b &
             (?f has_real_derivative l) (at z) &
             ?f ?b - ?f ?a = (?b - ?a) * l",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Transitive_Closure.rtrancl_induct2",
     "[| ((?ax, ?ay), ?bx, ?by) : ?r^*; ?P ?ax ?ay;
         !!a b aa ba.
            [| ((?ax, ?ay), a, b) : ?r^*; ((a, b), aa, ba) : ?r; ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 5), template_var 4)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 2)
           ))),
    ("Transitive_Closure.converse_rtrancl_induct2",
     "[| ((?ax, ?ay), ?bx, ?by) : ?r^*; ?P ?bx ?by;
         !!a b aa ba.
            [| ((a, b), aa, ba) : ?r; ((aa, ba), ?bx, ?by) : ?r^*;
               ?P aa ba |]
            ==> ?P a b |]
      ==> ?P ?ax ?ay",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 3), template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 5), template_var 4)
           ))),
    ("Transcendental.lemma_termdiff3",
     "[| ?h ~= (0::?'a); norm ?z <= ?K; norm (?z + ?h) <= ?K |]
      ==> norm
           (((?z + ?h) ^ ?n - ?z ^ ?n) / ?h - of_nat ?n * ?z ^ (?n - Suc 0))
          <= real ?n * real (?n - Suc 0) * ?K ^ (?n - 2) * norm ?h",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 17)),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 2),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 3)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 14, template_var 2),
                             template_var 3)),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 11, template_var 2),
                       template_var 0))),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app (template_hole 7, template_hole 6)))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_app (template_hole 7, template_hole 6))))),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))))),
           template_app (template_hole 15, template_var 3))))),
    ("Transcendental.termdiffs",
     "[| summable (%n. ?c n * ?K ^ n); summable (%n. diffs ?c n * ?K ^ n);
         summable (%n. diffs (diffs ?c) n * ?K ^ n); norm ?x < norm ?K |]
      ==> ((%x. \<Sum>n. ?c n * x ^ n) has_field_derivative
           (\<Sum>n. diffs ?c n * ?x ^ n))
           (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transcendental.DERIV_power_series'",
     "[| !!x. x : {- ?R<..<?R} ==>
              summable (%n. ?f n * real (Suc n) * x ^ n);
         ?x0.0 : {- ?R<..<?R}; 0 < ?R |]
      ==> ((%x. \<Sum>n. ?f n * x ^ Suc n) has_real_derivative
           (\<Sum>n. ?f n * real (Suc n) * ?x0.0 ^ n))
           (at ?x0.0)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 2)),
                template_var 2))
            ),
        template_inequation (less_than, template_hole 4, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transitive_Closure.trancl_trans_induct",
     "[| (?x, ?y) : ?r^+; !!x y. (x, y) : ?r ==> ?P x y;
         !!x y z.
            [| (x, y) : ?r^+; ?P x y; (y, z) : ?r^+; ?P y z |] ==> ?P x z |]
      ==> ?P ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 2)
           ))),
    ("Topological_Spaces.continuous_on_If",
     "[| closed ?s; closed ?t; continuous_on ?s ?f; continuous_on ?t ?g;
         !!x. [| x : ?s; ~ ?P x |] ==> ?f x = ?g x;
         !!x. [| x : ?t; ?P x |] ==> ?f x = ?g x |]
      ==> continuous_on (?s Un ?t) (%x. if ?P x then ?f x else ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             t_empty)
           ))),
    ("Transitive_Closure.tranclp_induct2",
     "[| ?r^++ (?ax, ?ay) (?bx, ?by);
         !!a b. ?r (?ax, ?ay) (a, b) ==> ?P a b;
         !!a b aa ba.
            [| ?r^++ (?ax, ?ay) (a, b); ?r (a, b) (aa, ba); ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Transcendental.polynomial_product",
     "[| !!i. ?m < i ==> ?a i = (0::?'a); !!j. ?n < j ==> ?b j = (0::?'a) |]
      ==> (SUM i<=?m. ?a i * ?x ^ i) * (SUM j<=?n. ?b j * ?x ^ j) =
          (SUM r<=?m + ?n. (SUM k<=r. ?a k * ?b (r - k)) * ?x ^ r)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_var 4))),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)))))),
    ("Transcendental.polynomial_product_nat",
     "[| !!i. ?m < i ==> ?a i = 0; !!j. ?n < j ==> ?b j = 0 |]
      ==> (SUM i<=?m. ?a i * ?x ^ i) * (SUM j<=?n. ?b j * ?x ^ j) =
          (SUM r<=?m + ?n. (SUM k<=r. ?a k * ?b (r - k)) * ?x ^ r)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_var 4))),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)))))),
    ("Transitive_Closure.trancl_induct2",
     "[| ((?ax, ?ay), ?bx, ?by) : ?r^+;
         !!a b. ((?ax, ?ay), a, b) : ?r ==> ?P a b;
         !!a b aa ba.
            [| ((?ax, ?ay), a, b) : ?r^+; ((a, b), aa, ba) : ?r; ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 2)
           ))),
    ("Topological_Spaces.filterlim_at_bot_at_right",
     "[| !!x y. [| ?Q x; ?Q y; x <= y |] ==> ?f x <= ?f y;
         !!x. ?P x ==> ?f (?g x) = x; !!x. ?P x ==> ?Q (?g x);
         eventually ?Q (at_right ?a); !!b. ?Q b ==> ?a < b;
         eventually ?P at_bot |]
      ==> filterlim ?f at_bot (at_right ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app (template_hole 4, template_var 0)))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_hole 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_var 0)))
           ))),
    ("Topological_Spaces.filterlim_at_top_at_left",
     "[| !!x y. [| ?Q x; ?Q y; x <= y |] ==> ?f x <= ?f y;
         !!x. ?P x ==> ?f (?g x) = x; !!x. ?P x ==> ?Q (?g x);
         eventually ?Q (at_left ?a); !!b. ?Q b ==> b < ?a;
         eventually ?P at_top |]
      ==> filterlim ?f at_top (at_left ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app (template_hole 4, template_var 0)))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_hole 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_var 0)))
           ))),
    ("MacLaurin.Taylor_down",
     "[| 0 < ?n; ?diff 0 = ?f;
         ALL m t.
            m < ?n & ?a <= t & t <= ?b -->
            (?diff m has_real_derivative ?diff (Suc m) t) (at t);
         ?a < ?c; ?c <= ?b |]
      ==> EX t>?a.
             t < ?c &
             ?f ?a =
             (SUM m<?n. ?diff m ?c / fact m * (?a - ?c) ^ m) +
             ?diff ?n t / fact ?n * (?a - ?c) ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 21, template_var 5),
        template_equation
         (template_app (template_var 4, template_hole 21), template_var 3),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation (less_than, template_var 2, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("MacLaurin.Taylor_up",
     "[| 0 < ?n; ?diff 0 = ?f;
         ALL m t.
            m < ?n & ?a <= t & t <= ?b -->
            (?diff m has_real_derivative ?diff (Suc m) t) (at t);
         ?a <= ?c; ?c < ?b |]
      ==> EX t>?c.
             t < ?b &
             ?f ?b =
             (SUM m<?n. ?diff m ?c / fact m * (?b - ?c) ^ m) +
             ?diff ?n t / fact ?n * (?b - ?c) ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 21, template_var 5),
        template_equation
         (template_app (template_var 4, template_hole 21), template_var 3),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Transcendental.DERIV_series'",
     "[| !!n. ((%x. ?f x n) has_real_derivative ?f' ?x0.0 n) (at ?x0.0);
         !!x. x : {?a<..<?b} ==> summable (?f x); ?x0.0 : {?a<..<?b};
         summable (?f' ?x0.0); summable ?L;
         !!n x y.
            [| x : {?a<..<?b}; y : {?a<..<?b} |]
            ==> \<bar>?f x n - ?f y n\<bar> <= ?L n * \<bar>x - y\<bar> |]
      ==> ((%x. suminf (?f x)) has_real_derivative suminf (?f' ?x0.0))
           (at ?x0.0)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_var 4, template_var 3))
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 4, template_var 3))),
             template_app
              (template_app (template_hole 10, template_var 3),
               template_hole 9))
           ))),
    ("Transcendental.sums_alternating_upper_lower",
     "[| !!n. ?a (Suc n) <= ?a n; !!n. 0 <= ?a n;
         ?a \<longlonglongrightarrow> 0 |]
      ==> EX l. ((ALL n. (SUM i<2 * n. (- 1) ^ i * ?a i) <= l) &
                 (%n. SUM i<2 * n. (- 1) ^ i * ?a i)
                 \<longlonglongrightarrow> l) &
                (ALL n. l <= (SUM i<2 * n + 1. (- 1) ^ i * ?a i)) &
                (%n. SUM i<2 * n + 1. (- 1) ^ i * ?a i)
                \<longlonglongrightarrow> l",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 0),
                template_app (template_hole 16, template_hole 18)),
              template_hole 15)
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("Deriv.GMVT'",
     "[| ?a < ?b; !!z. [| ?a <= z; z <= ?b |] ==> isCont ?f z;
         !!z. [| ?a <= z; z <= ?b |] ==> isCont ?g z;
         !!z. [| ?a < z; z < ?b |]
              ==> (?g has_real_derivative ?g' z) (at z);
         !!z. [| ?a < z; z < ?b |]
              ==> (?f has_real_derivative ?f' z) (at z) |]
      ==> EX c>?a.
             c < ?b & (?f ?b - ?f ?a) * ?g' c = (?g ?b - ?g ?a) * ?f' c",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Deriv.GMVT",
     "[| ?a < ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x;
         ALL x. ?a < x & x < ?b --> ?f differentiable at x;
         ALL x. ?a <= x & x <= ?b --> isCont ?g x;
         ALL x. ?a < x & x < ?b --> ?g differentiable at x |]
      ==> EX g'c f'c c.
             (?g has_real_derivative g'c) (at c) &
             (?f has_real_derivative f'c) (at c) &
             ?a < c &
             c < ?b & (?f ?b - ?f ?a) * g'c = (?g ?b - ?g ?a) * f'c",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("MacLaurin.Taylor",
     "[| 0 < ?n; ?diff 0 = ?f;
         ALL m t.
            m < ?n & ?a <= t & t <= ?b -->
            (?diff m has_real_derivative ?diff (Suc m) t) (at t);
         ?a <= ?c; ?c <= ?b; ?a <= ?x; ?x <= ?b; ?x ~= ?c |]
      ==> EX t. (if ?x < ?c then ?x < t & t < ?c else ?c < t & t < ?x) &
                ?f ?x =
                (SUM m<?n. ?diff m ?c / fact m * (?x - ?c) ^ m) +
                ?diff ?n t / fact ?n * (?x - ?c) ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 23, template_var 6),
        template_equation
         (template_app (template_var 5, template_hole 23), template_var 4),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Transcendental.compute_powr_real",
     "powr_real ?b ?i =
      (if ?b <= 0
       then Code.abort STR ''powr_real with nonpositive base''
             (%_. powr_real ?b ?i)
       else if real_of_int \<lfloor>?i\<rfloor> = ?i
            then if 0 <= ?i then ?b ^ nat \<lfloor>?i\<rfloor>
                 else 1 / ?b ^ nat \<lfloor>- ?i\<rfloor>
            else Code.abort STR ''powr_real with non-integer exponent''
                  (%_. powr_real ?b ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_var 1),
                   template_hole 12)),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 10, template_hole 9),
                                 template_hole 9),
                               template_hole 9),
                             template_hole 9),
                           template_hole 8),
                         template_hole 8),
                       template_hole 8),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 10, template_hole 8),
                                   template_hole 8),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 9),
                           template_hole 8),
                         template_hole 8),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 10, template_hole 8),
                                     template_hole 8),
                                   template_hole 8),
                                 template_hole 9),
                               template_hole 8),
                             template_hole 8),
                           template_hole 8),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 10, template_hole 9), template_hole 8),
                                     template_hole 9),
                                   template_hole 9),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 8),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 10, template_hole 8), template_hole 8),
 template_hole 8),
                                     template_hole 8),
                                   template_hole 8),
                                 template_hole 9),
                               template_hole 8),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 10, template_hole 9), template_hole 8),
   template_hole 9),
 template_hole 9),
                                     template_hole 8),
                                   template_hole 8),
                                 template_hole 8),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 10, template_hole 8), template_hole 9),
     template_hole 8),
   template_hole 9),
 template_hole 9),
                                     template_hole 8),
                                   template_hole 8),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 10, template_hole 8), template_hole 9),
       template_hole 9),
     template_hole 9),
   template_hole 9),
 template_hole 8),
                                     template_hole 8),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 10, template_hole 9),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 9),
   template_hole 8),
 template_hole 8),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 9),
             template_hole 9),
           template_hole 9),
         template_hole 9),
       template_hole 9),
     template_hole 8),
   template_hole 9),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 8),
               template_hole 8),
             template_hole 8),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 8),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_hole 8),
                 template_hole 9),
               template_hole 9),
             template_hole 8),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 9),
                 template_hole 8),
               template_hole 9),
             template_hole 8),
           template_hole 8),
         template_hole 8),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_hole 9),
                   template_hole 9),
                 template_hole 8),
               template_hole 9),
             template_hole 8),
           template_hole 8),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_hole 9),
                     template_hole 9),
                   template_hole 9),
                 template_hole 9),
               template_hole 8),
             template_hole 9),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_hole 8),
                       template_hole 8),
                     template_hole 8),
                   template_hole 9),
                 template_hole 8),
               template_hole 8),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 10, template_hole 8),
                           template_hole 8),
                         template_hole 8),
                       template_hole 8),
                     template_hole 9),
                   template_hole 8),
                 template_hole 8),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 10, template_hole 9),
                             template_hole 8),
                           template_hole 8),
                         template_hole 8),
                       template_hole 9),
                     template_hole 8),
                   template_hole 8),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 10, template_hole 9),
                               template_hole 9),
                             template_hole 9),
                           template_hole 9),
                         template_hole 8),
                       template_hole 8),
                     template_hole 8),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 10, template_hole 8),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 8),
                           template_hole 9),
                         template_hole 8),
                       template_hole 8),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 10, template_hole 8),
                                   template_hole 8),
                                 template_hole 9),
                               template_hole 9),
                             template_hole 8),
                           template_hole 8),
                         template_hole 8),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 10, template_hole 8),
                                     template_hole 9),
                                   template_hole 9),
                                 template_hole 8),
                               template_hole 9),
                             template_hole 8),
                           template_hole 8),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 10, template_hole 9), template_hole 9),
                                     template_hole 8),
                                   template_hole 9),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 8),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 10, template_hole 8), template_hole 9),
 template_hole 9),
                                     template_hole 8),
                                   template_hole 9),
                                 template_hole 8),
                               template_hole 8),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 10, template_hole 9), template_hole 8),
   template_hole 8),
 template_hole 9),
                                     template_hole 8),
                                   template_hole 8),
                                 template_hole 8),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 10, template_hole 8), template_hole 9),
     template_hole 8),
   template_hole 9),
 template_hole 9),
                                     template_hole 8),
                                   template_hole 8),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 10, template_hole 9), template_hole 9),
       template_hole 9),
     template_hole 9),
   template_hole 9),
 template_hole 8),
                                     template_hole 9),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 10, template_hole 9),
           template_hole 8),
         template_hole 9),
       template_hole 9),
     template_hole 9),
   template_hole 8),
 template_hole 8),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 8),
             template_hole 9),
           template_hole 9),
         template_hole 9),
       template_hole 9),
     template_hole 8),
   template_hole 8),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 8),
               template_hole 8),
             template_hole 9),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 8),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_hole 8),
                 template_hole 9),
               template_hole 8),
             template_hole 9),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 7)))))))))))))))))))))))))))))))),
                 t_empty)),
             template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 0))),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app (template_hole 13, template_hole 12),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 5, template_var 0)))),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 0, template_var 0))))))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 10, template_hole 9),
                                 template_hole 9),
                               template_hole 9),
                             template_hole 9),
                           template_hole 8),
                         template_hole 8),
                       template_hole 8),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 10, template_hole 8),
                                   template_hole 8),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 9),
                           template_hole 8),
                         template_hole 8),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 10, template_hole 8),
                                     template_hole 8),
                                   template_hole 8),
                                 template_hole 9),
                               template_hole 8),
                             template_hole 8),
                           template_hole 8),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 10, template_hole 9), template_hole 8),
                                     template_hole 9),
                                   template_hole 9),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 8),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 10, template_hole 8), template_hole 8),
 template_hole 8),
                                     template_hole 8),
                                   template_hole 8),
                                 template_hole 9),
                               template_hole 8),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 10, template_hole 9), template_hole 8),
   template_hole 9),
 template_hole 9),
                                     template_hole 8),
                                   template_hole 8),
                                 template_hole 8),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 10, template_hole 8), template_hole 9),
     template_hole 8),
   template_hole 9),
 template_hole 9),
                                     template_hole 8),
                                   template_hole 8),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 10, template_hole 8), template_hole 9),
       template_hole 9),
     template_hole 9),
   template_hole 9),
 template_hole 8),
                                     template_hole 8),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 10, template_hole 9),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 9),
   template_hole 8),
 template_hole 8),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 9),
             template_hole 9),
           template_hole 9),
         template_hole 9),
       template_hole 9),
     template_hole 8),
   template_hole 9),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 8),
               template_hole 8),
             template_hole 8),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 8),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_hole 8),
                 template_hole 9),
               template_hole 9),
             template_hole 8),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 9),
                 template_hole 8),
               template_hole 9),
             template_hole 8),
           template_hole 8),
         template_hole 8),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_hole 9),
                   template_hole 9),
                 template_hole 8),
               template_hole 9),
             template_hole 8),
           template_hole 8),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_hole 9),
                     template_hole 9),
                   template_hole 9),
                 template_hole 9),
               template_hole 8),
             template_hole 9),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_hole 8),
                       template_hole 8),
                     template_hole 8),
                   template_hole 9),
                 template_hole 8),
               template_hole 8),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 10, template_hole 8),
                           template_hole 8),
                         template_hole 8),
                       template_hole 8),
                     template_hole 9),
                   template_hole 8),
                 template_hole 8),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 10, template_hole 9),
                             template_hole 8),
                           template_hole 8),
                         template_hole 8),
                       template_hole 9),
                     template_hole 8),
                   template_hole 8),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 10, template_hole 8),
                               template_hole 9),
                             template_hole 8),
                           template_hole 8),
                         template_hole 9),
                       template_hole 8),
                     template_hole 9),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 10, template_hole 8),
                                 template_hole 9),
                               template_hole 9),
                             template_hole 8),
                           template_hole 9),
                         template_hole 8),
                       template_hole 8),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 10, template_hole 9),
                                   template_hole 8),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 9),
                           template_hole 8),
                         template_hole 8),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 10, template_hole 9),
                                     template_hole 9),
                                   template_hole 8),
                                 template_hole 9),
                               template_hole 8),
                             template_hole 8),
                           template_hole 8),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 10, template_hole 8), template_hole 9),
                                     template_hole 8),
                                   template_hole 9),
                                 template_hole 9),
                               template_hole 8),
                             template_hole 8),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 10, template_hole 8), template_hole 8),
 template_hole 8),
                                     template_hole 9),
                                   template_hole 9),
                                 template_hole 8),
                               template_hole 8),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 10, template_hole 8), template_hole 9),
   template_hole 8),
 template_hole 9),
                                     template_hole 9),
                                   template_hole 8),
                                 template_hole 8),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 10, template_hole 9), template_hole 8),
     template_hole 9),
   template_hole 9),
 template_hole 8),
                                     template_hole 8),
                                   template_hole 8),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 10, template_hole 9), template_hole 9),
       template_hole 9),
     template_hole 9),
   template_hole 9),
 template_hole 8),
                                     template_hole 9),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 10, template_hole 8),
           template_hole 9),
         template_hole 8),
       template_hole 9),
     template_hole 9),
   template_hole 8),
 template_hole 8),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 9),
             template_hole 9),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 8),
   template_hole 8),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_hole 9),
             template_hole 9),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_hole 8),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_hole 8),
                 template_hole 8),
               template_hole 8),
             template_hole 8),
           template_hole 9),
         template_hole 8),
       template_hole 8),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8),
                 template_hole 8),
               template_hole 8),
             template_hole 9),
           template_hole 8),
         template_hole 8),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_hole 8),
                     template_hole 9),
                   template_hole 8),
                 template_hole 9),
               template_hole 9),
             template_hole 8),
           template_hole 8),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_hole 8),
                     template_hole 8),
                   template_hole 8),
                 template_hole 9),
               template_hole 8),
             template_hole 8),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_hole 9),
                       template_hole 8),
                     template_hole 9),
                   template_hole 8),
                 template_hole 8),
               template_hole 8),
             template_hole 7)))))))))))))))))))))))))))))))))))),
                 t_empty)))
           )))]
