Loading theory "HOL-Cardinals.Fun_More" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
Loading theory "HOL-Cardinals.Order_Union" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
Loading theory "HOL-Cardinals.Order_Relation_More" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation" via "HOL-Cardinals.Wellfounded_More")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.McalcMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Cardinals.Fun_More"
### 0.108s elapsed time, 0.453s cpu time, 0.054s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type" via "HOL-Library.Countable_Set")
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.545s cpu time, 0.054s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.McalcMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Cardinals.Order_Union"
### 0.131s elapsed time, 0.538s cpu time, 0.054s GC time
Loading theory "HOL-Cardinals.Wellorder_Extension" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Cardinals.Wellorder_Extension"
### 0.079s elapsed time, 0.318s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
### theory "HOL-Cardinals.Order_Relation_More"
### 0.237s elapsed time, 0.961s cpu time, 0.054s GC time
Loading theory "HOL-Cardinals.Wellfounded_More" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Cardinals.Wellfounded_More"
### 0.059s elapsed time, 0.223s cpu time, 0.102s GC time
Loading theory "HOL-Cardinals.Wellorder_Relation" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.276s elapsed time, 1.089s cpu time, 0.102s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.McalcMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "HOL-Cardinals.Wellorder_Relation"
### 0.147s elapsed time, 0.582s cpu time, 0.068s GC time
Loading theory "HOL-Cardinals.Wellorder_Embedding" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.283s cpu time, 0.170s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.McalcMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.234s elapsed time, 0.912s cpu time, 0.146s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.McalcMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Cardinals.Wellorder_Embedding"
### 0.184s elapsed time, 0.717s cpu time, 0.078s GC time
Loading theory "HOL-Cardinals.Wellorder_Constructions" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.430s elapsed time, 1.686s cpu time, 0.248s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type" via "HOL-Library.Countable_Set")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Cardinals.Wellorder_Constructions"
### 0.834s elapsed time, 3.149s cpu time, 0.753s GC time
Loading theory "HOL-Cardinals.Cardinal_Order_Relation" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Cardinal_Arithmetic")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.127s elapsed time, 4.292s cpu time, 0.931s GC time
Loading theory "HOL-Cardinals.Ordinal_Arithmetic" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "size <*mlex*> {}"
locale wo_rel2
  fixes r :: "('a * 'a) set"
    and s :: "('b * 'b) set"
  assumes "wo_rel2 r s"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.703s elapsed time, 6.354s cpu time, 2.030s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Library.Countable_Set_Type")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Cardinals.Cardinal_Order_Relation"
### 1.101s elapsed time, 4.141s cpu time, 1.379s GC time
Loading theory "HOL-Cardinals.Cardinal_Arithmetic" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries" via "HOL-Cardinals.Cardinals")
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Cardinals.Ordinal_Arithmetic"
### 1.208s elapsed time, 4.551s cpu time, 1.517s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.McalcMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Cardinals.Cardinal_Arithmetic"
### 0.243s elapsed time, 0.956s cpu time, 0.238s GC time
Loading theory "HOL-Cardinals.Cardinals" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries")
### theory "HOL-Library.Countable_Set"
### 0.509s elapsed time, 2.007s cpu time, 0.340s GC time
Loading theory "HOL-Library.Countable_Set_Type" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses" via "Draft.Preliminaries")
instantiation
  cset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_cset == inf :: 'a cset => 'a cset => 'a cset
  bot_cset == bot :: 'a cset
  sup_cset == sup :: 'a cset => 'a cset => 'a cset
  less_eq_cset == less_eq :: 'a cset => 'a cset => bool
  less_cset == less :: 'a cset => 'a cset => bool
  minus_cset == minus :: 'a cset => 'a cset => 'a cset
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Cardinals"
### 0.256s elapsed time, 1.018s cpu time, 0.088s GC time
### theory "HOL-Library.Tree"
### 2.612s elapsed time, 9.859s cpu time, 2.534s GC time
Loading theory "Draft.Templates" (required by "Draft.McalcMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.229s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.765s elapsed time, 2.378s cpu time, 0.243s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.McalcMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.877s elapsed time, 2.262s cpu time, 1.214s GC time
### theory "HOL-Library.Countable_Set_Type"
### 1.623s elapsed time, 4.493s cpu time, 1.457s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M" via "Draft.TermsAndClauses")
Found termination order: "(%p. length (snd3 p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 0.867s elapsed time, 0.970s cpu time, 0.128s GC time
Loading theory "Draft.Sig" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M")
Loading theory "Draft.TermsAndClauses" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM" via "Draft.M")
locale Signature
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
  assumes "Signature TYPE('tp) wtFsym wtPsym"
### Additional type variable(s) in specification of "tpart1": 'tp
### Additional type variable(s) in specification of "tpart2": 'tp
### Additional type variable(s) in specification of "tinfinite": 'tp
Found termination order: "length <*mlex*> {}"
### theory "Draft.Sig"
### 0.127s elapsed time, 0.256s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.TermsAndClauses"
### 1.458s elapsed time, 1.794s cpu time, 0.270s GC time
Loading theory "Draft.M" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono" via "Draft.CM")
locale Signature
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
  assumes "Signature TYPE('tp) wtFsym wtPsym"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale Tstruct
  fixes intT :: "'tp => 'univ => bool"
  assumes "Tstruct intT"
locale Struct
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and intT :: "'tp => 'univ => bool"
    and intF :: "'fsym => 'univ list => 'univ"
    and intP :: "'psym => 'univ list => bool"
  assumes "Struct wtFsym wtPsym arOf resOf intT intF intP"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale Signature
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
  assumes "Signature TYPE('tp) wtFsym wtPsym"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale Problem
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
  assumes "Problem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale Model
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
    and intT :: "'c => 'd => bool"
    and intF :: "'a => 'd list => 'd"
    and intP :: "'b => 'd list => bool"
  assumes "Model wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
### theory "Draft.M"
### 1.277s elapsed time, 1.430s cpu time, 0.188s GC time
Loading theory "Draft.CM" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc" via "Draft.Mono")
locale CM.Tstruct
  fixes intT :: "'tp => univ => bool"
  assumes "CM.Tstruct intT"
locale CM.Struct
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "CM.Struct wtFsym wtPsym arOf resOf intT intF intP"
locale CM.Model
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "CM.Model wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
### theory "Draft.CM"
### 0.654s elapsed time, 0.705s cpu time, 0.062s GC time
Loading theory "Draft.Mono" (required by "Draft.McalcMoreTemplates" via "Draft.Mcalc")
locale FullStruct
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "FullStruct wtFsym wtPsym arOf resOf intT intF intP"
locale FullModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "FullModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale InfStruct
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "InfStruct wtFsym wtPsym arOf resOf intT intF intP"
locale InfModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "InfModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale Problem
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
  assumes "Problem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale ProblemIk
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
  assumes "ProblemIk wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
locale ModelIk
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIk wtFsym wtPsym arOf resOf parOf \<Phi> infTp intT intF intP"
locale Problem
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
  assumes "Problem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale MonotProblem
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
  assumes "MonotProblem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale MonotProblemIk
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
  assumes "MonotProblemIk wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
locale MonotProblem
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
  assumes "MonotProblem wtFsym wtPsym arOf resOf parOf \<Phi>"
locale MonotModel
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "MonotModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale MonotModel
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
    and intT :: "'c => univ => bool"
    and intF :: "'a => univ list => univ"
    and intP :: "'b => univ list => bool"
  assumes "MonotModel wtFsym wtPsym arOf resOf parOf \<Phi> intT intF intP"
locale InfModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "IInfModel intT intF intP"
locale InfModel
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes "IInfModel intT intF intP"
locale MonotProblem
  fixes wtFsym :: "'a => bool"
    and wtPsym :: "'b => bool"
    and arOf :: "'a => 'c list"
    and resOf :: "'a => 'c"
    and parOf :: "'b => 'c list"
    and \<Phi> :: "('a, 'b) lit list set"
  assumes "MonotProblem wtFsym wtPsym arOf resOf parOf \<Phi>"
### theory "Draft.Mono"
### 4.089s elapsed time, 4.438s cpu time, 0.476s GC time
Loading theory "Draft.Mcalc" (required by "Draft.McalcMoreTemplates")
locale ProblemIk
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
  assumes "ProblemIk wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "mcalc"
  Proving monotonicity ...
locale ProblemIkMcalc
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
  assumes "ProblemIkMcalc wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
locale ModelIkMcalc
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIkMcalc wtFsym wtPsym arOf resOf parOf \<Phi> infTp intT intF
      intP"
locale ModelIkMcalc
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIkMcalc wtFsym wtPsym arOf resOf parOf \<Phi> infTp intT intF
      intP"
locale ModelIkMcalc
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
    and intT :: "'tp => univ => bool"
    and intF :: "'fsym => univ list => univ"
    and intP :: "'psym => univ list => bool"
  assumes
    "ModelIkMcalc wtFsym wtPsym arOf resOf parOf \<Phi> infTp intT intF
      intP"
locale ProblemIkMcalc
  fixes wtFsym :: "'fsym => bool"
    and wtPsym :: "'psym => bool"
    and arOf :: "'fsym => 'tp list"
    and resOf :: "'fsym => 'tp"
    and parOf :: "'psym => 'tp list"
    and \<Phi> :: "('fsym, 'psym) lit list set"
    and infTp :: "'tp => bool"
  assumes "ProblemIkMcalc wtFsym wtPsym arOf resOf parOf \<Phi> infTp"
### theory "Draft.Mcalc"
### 1.894s elapsed time, 2.072s cpu time, 0.239s GC time
Loading theory "Draft.McalcMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.McalcMoreTemplates"
### 0.371s elapsed time, 0.471s cpu time, 0.000s GC time
val it = (): unit
