   [("Euclidean_Division.abs_division_segment",
     "\<bar>division_segment ?k\<bar> = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Euclidean_Division.unit_factor_simps", "unit_factor (Suc ?n) = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Equiv_Relations.quotient_empty", "{} // ?r = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Equiv_Relations.equivclp_conversep", "equivclp ?r^--1 = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.equivclp_symclp",
     "equivclp (symclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.rtranclp_equivclp", "(equivclp ?r)^** = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.symclp_equivclp",
     "symclp (equivclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.tranclp_equivclp", "(equivclp ?r)^++ = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Euclidean_Division.div_by_Suc_0", "?m div Suc 0 = ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Euclidean_Division.mod_by_Suc_0", "?m mod Suc 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("Enum.Collect_code", "Collect ?P = set (filter ?P enum_class.enum)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Enum.all_code", "(ALL x. ?P x) = enum_class.enum_all ?P",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Enum.exists_code", "(EX x. ?P x) = enum_class.enum_ex ?P",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.proj_image",
     "Equiv_Relations.proj ?r ` ?A = ?A // ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Enum.exists1_code", "(EX! x. ?P x) = list_ex1 ?P enum_class.enum",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>1_iff'",
     "(a\<^sub>1 ~= ?x) = (?x = a\<^sub>2)",
     template_bimplication
      (template_negation
        (template_equation (template_hole 1, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>2_iff'",
     "(a\<^sub>2 ~= ?x) = (?x = a\<^sub>1)",
     template_bimplication
      (template_negation
        (template_equation (template_hole 1, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>1_iff",
     "(?x ~= a\<^sub>1) = (?x = a\<^sub>2)",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 1)),
       template_equation (template_var 0, template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>2_iff",
     "(?x ~= a\<^sub>2) = (?x = a\<^sub>1)",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 1)),
       template_equation (template_var 0, template_hole 0))),
    ("Euclidean_Division.coprime_abs_right_iff",
     "coprime ?k \<bar>?l\<bar> = coprime ?k ?l",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Euclidean_Division.coprime_abs_left_iff",
     "coprime \<bar>?k\<bar> ?l = coprime ?k ?l",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Euclidean_Division.add_self_div_2", "(?m + ?m) div 2 = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("Euclidean_Division.add_self_mod_2", "(?m + ?m) mod 2 = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_hole 0)),
    ("Equiv_Relations.quotient_is_empty2", "({} = ?A // ?r) = (?A = {})",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 1, template_hole 0))),
    ("Equiv_Relations.quotient_is_empty", "(?A // ?r = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Euclidean_Division.coprime_int_iff",
     "coprime (int ?m) (int ?n) = coprime ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Euclidean_Division.mod_greater_zero_iff_not_dvd",
     "(0 < ?m mod ?n) = (~ ?n dvd ?m)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Euclidean_Division.coprime_nat_abs_right_iff",
     "coprime ?n (nat \<bar>?k\<bar>) = coprime (int ?n) ?k",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Euclidean_Division.coprime_nat_abs_left_iff",
     "coprime (nat \<bar>?k\<bar>) ?n = coprime ?k (int ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Euclidean_Division.Suc_0_mod_eq",
     "Suc 0 mod ?n = of_bool (?n ~= Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)),
              template_var 0)
            )],
       template_dunno)),
    ("Euclidean_Division.div_mult2_eq",
     "?m div (?n * ?q) = ?m div ?n div ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Euclidean_Division.mod_Suc_eq",
     "Suc (?m mod ?n) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Equiv_Relations.equivp_reflp_symp_transp",
     "equivp ?R = (reflp ?R & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Enum.order_fun",
     "(?f <= ?g) = enum_class.enum_all (%x. ?f x <= ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Enum.dvd_finite_2_unfold",
     "(?x dvd ?y) = (?x = a\<^sub>2 | ?y = a\<^sub>1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Hilbert_Choice.Eps_case_prod",
     "(SOME (x, y). ?P x y) = (SOME xy. ?P (fst xy) (snd xy))",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Enum.vimage_code",
     "?f -` ?B = set (filter (%x. ?f x : ?B) enum_class.enum)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Enum.bacc_upper_bound",
     "bacc ?r (card UNIV) = \<Union> (range (bacc ?r))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app (template_hole 4, template_hole 3)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Equiv_Relations.equivp_equiv",
     "equiv UNIV ?A = equivp (%x y. (x, y) : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Euclidean_Division.mod2_Suc_Suc", "Suc (Suc ?m) mod 2 = ?m mod 2",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Euclidean_Division.mod_Suc_Suc_eq",
     "Suc (Suc (?m mod ?n)) mod ?n = Suc (Suc ?m) mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Euclidean_Division.Suc_mod_mult_self1",
     "Suc (?m + ?k * ?n) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_var 0))),
    ("Euclidean_Division.Suc_mod_mult_self2",
     "Suc (?m + ?n * ?k) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 1),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_var 1))),
    ("Euclidean_Division.Suc_mod_mult_self3",
     "Suc (?k * ?n + ?m) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_var 1),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Euclidean_Division.Suc_mod_mult_self4",
     "Suc (?n * ?k + ?m) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_var 2),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 2))),
    ("Equiv_Relations.singleton_quotient", "{?x} // ?r = {?r `` {?x}}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_hole 0))),
    ("Relation.converse_INTER",
     "(\<Inter> (?r ` ?S))^-1 = (INT x:?S. (?r x)^-1)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Product_Type.split_paired_Ex", "(EX x. ?P x) = (EX a b. ?P (a, b))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Euclidean_Division.div_eq_0_iff",
     "(?m div ?n = 0) = (?m < ?n | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_dunno)),
    ("Euclidean_Division.div_greater_zero_iff",
     "(0 < ?m div ?n) = (?n <= ?m & 0 < ?n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)))),
    ("Hilbert_Choice.split_paired_Eps",
     "(SOME x. ?P x) = (SOME (a, b). ?P (a, b))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Euclidean_Division.mod_if",
     "?m mod ?n = (if ?m < ?n then ?m else (?m - ?n) mod ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)))),
    ("Euclidean_Division.div_Suc_eq_div_add3",
     "?m div Suc (Suc (Suc ?n)) = ?m div (3 + ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_hole 4,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Euclidean_Division.Suc_div_eq_add3_div",
     "Suc (Suc (Suc ?m)) div ?n = (3 + ?m) div ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Euclidean_Division.mod_Suc_eq_mod_add3",
     "?m mod Suc (Suc (Suc ?n)) = ?m mod (3 + ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_hole 4,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Euclidean_Division.Suc_mod_eq_add3_mod",
     "Suc (Suc (Suc ?m)) mod ?n = (3 + ?m) mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Euclidean_Division.div2_Suc_Suc",
     "Suc (Suc ?m) div 2 = Suc (?m div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Equiv_Relations.part_equivp_refl_symp_transp",
     "part_equivp ?R = ((EX x. ?R x x) & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Wellorder_Embedding.embed_embedS_iso",
     "embed ?r ?r' ?f = (embedS ?r ?r' ?f | iso ?r ?r' ?f)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Enum.dvd_finite_3_unfold",
     "(?x dvd ?y) = (?x = a\<^sub>2 | ?x = a\<^sub>3 | ?y = a\<^sub>1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Euclidean_Division.mod2_gr_0", "(0 < ?m mod 2) = (?m mod 2 = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_hole 0))),
    ("Hilbert_Choice.Eps_case_prod_eq",
     "(SOME (x', y'). ?x = x' & ?y = y') = (?x, ?y)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Euclidean_Division.Suc_div_eq_add3_div_numeral",
     "Suc (Suc (Suc ?m)) div numeral ?v = (3 + ?m) div numeral ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Euclidean_Division.Suc_mod_eq_add3_mod_numeral",
     "Suc (Suc (Suc ?m)) mod numeral ?v = (3 + ?m) mod numeral ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Complete_Lattices.INTER_eq",
     "\<Inter> (?B ` ?A) = {y. ALL x:?A. y : ?B x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Enum.order_fun",
     "(?f < ?g) = (?f <= ?g & enum_class.enum_ex (%x. ?f x ~= ?g x))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("Preliminaries.sappend_NE", "(?A @@ ?B ~= {}) = (?A ~= {} & ?B ~= {})",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1)
           ),
       template_dunno)),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(UNIV = \<Inter> (?B ` ?A)) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(\<Inter> (?B ` ?A) = UNIV) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Euclidean_Division.mod_Suc",
     "Suc ?m mod ?n =
      (if Suc (?m mod ?n) = ?n then 0 else Suc (?m mod ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Euclidean_Division.mod_mult2_eq",
     "?m mod (?n * ?q) = ?n * (?m div ?n mod ?q) + ?m mod ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 1)))),
    ("Enum.enum_all_fun_code",
     "enum_class.enum_all ?P =
      (let enum_a = enum_class.enum
       in Enum.all_n_lists (%bs. ?P (the o map_of (zip enum_a bs)))
           (length enum_a))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app (template_hole 7, template_hole 6), t_empty))),
    ("Enum.enum_ex_fun_code",
     "enum_class.enum_ex ?P =
      (let enum_a = enum_class.enum
       in Enum.ex_n_lists (%bs. ?P (the o map_of (zip enum_a bs)))
           (length enum_a))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app (template_hole 7, template_hole 6), t_empty))),
    ("Enum.rtranclp_rtrancl_eq",
     "?r^** ?x ?y = ((?x, ?y) : {(x, y). ?r x y}^*)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Enum.tranclp_unfold", "?r^++ ?a ?b = ((?a, ?b) : {(x, y). ?r x y}^+)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Enum.max_extp_eq",
     "max_extp ?r ?x ?y = ((?x, ?y) : max_ext {(x, y). ?r x y})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Euclidean_Division.div_if",
     "?m div ?n = (if ?m < ?n | ?n = 0 then 0 else Suc ((?m - ?n) div ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Nat.Ex_less_Suc", "(EX i<Suc ?n. ?P i) = (?P ?n | (EX i<?n. ?P i))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Nat.Ex_less_Suc2",
     "(EX i<Suc ?n. ?P i) = (?P 0 | (EX i<?n. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Enum.mlex_eq",
     "?f <*mlex*> ?R = {(x, y). ?f x < ?f y | ?f x <= ?f y & (x, y) : ?R}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_hole 7, template_app (template_hole 6, t_empty)))),
    ("Euclidean_Division.split_div'",
     "?P (?m div ?n) =
      (?n = 0 & ?P 0 | (EX q. (?n * q <= ?m & ?m < ?n * Suc q) & ?P q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Enum.max_ext_eq",
     "max_ext ?R =
      {(X, Y).
       finite X &
       finite Y & Y ~= {} & (ALL x. x : X --> (EX xa:Y. (x, xa) : ?R))}",
     template_equation
      (template_app (template_hole 13, template_var 0),
       template_app
        (template_hole 12, template_app (template_hole 11, t_empty)))),
    ("Euclidean_Division.split_div",
     "?P (?m div ?n) =
      ((?n = 0 --> ?P 0) &
       (?n ~= 0 --> (ALL i j. j < ?n --> ?m = ?n * i + j --> ?P i)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Euclidean_Division.split_mod",
     "?P (?m mod ?n) =
      ((?n = 0 --> ?P ?m) &
       (?n ~= 0 --> (ALL i j. j < ?n --> ?m = ?n * i + j --> ?P j)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Equiv_Relations.UN_UN_split_split_eq",
     "(UN (x1, x2):?X. UN (y1, y2):?Y. ?A x1 x2 y1 y2) =
      (UN x:?X.
          UN y:?Y.
             case x of (x1, x2) => case y of (y1, y2) => ?A x1 x2 y1 y2)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Euclidean_Division.divide_int_unfold",
     "sgn ?k * int ?m div (sgn ?l * int ?n) =
      (if sgn ?l = 0 | sgn ?k = 0 | ?n = 0 then 0
       else if sgn ?k = sgn ?l then int (?m div ?n)
            else - int (?m div ?n + of_bool (~ ?n dvd ?m)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 3)),
                  template_app (template_hole 11, template_var 2))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 11, template_var 0)))
            )],
       template_dunno)),
    ("Euclidean_Division.modulo_int_unfold",
     "sgn ?k * int ?m mod (sgn ?l * int ?n) =
      (if sgn ?l = 0 | sgn ?k = 0 | ?n = 0 then sgn ?k * int ?m
       else if sgn ?k = sgn ?l then sgn ?l * int (?m mod ?n)
            else sgn ?l *
                 (int (?n * of_bool (~ ?n dvd ?m)) - int (?m mod ?n)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 3)),
                  template_app (template_hole 11, template_var 2))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 11, template_var 0)))
            )],
       template_dunno))]
