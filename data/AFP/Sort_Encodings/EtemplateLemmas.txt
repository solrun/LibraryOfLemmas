   [("Equiv_Relations.equivp_evquivclp", "equivp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equiv_Relations.reflp_equivclp", "reflp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equiv_Relations.symp_equivclp", "symp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equiv_Relations.transp_equivclp", "transp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Wellorder_Extension.downset_on_empty", "downset_on {} ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Wellorder_Embedding.id_compat", "compat ?r ?r id",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 0),
           template_hole 0)
         )),
    ("Equiv_Relations.equivclp_refl", "equivclp ?r ?x ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Equiv_Relations.equivp_rtranclp_symclp", "equivp (symclp ?r)^**",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Euclidean_Division.coprime_Suc_0_right", "coprime ?n (Suc 0)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Euclidean_Division.coprime_Suc_0_left", "coprime (Suc 0) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("Wellorder_Extension.extension_on_empty", "extension_on {} ?p ?q",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("HOL.FalseE", "False ==> ?P",
     template_implication
      ([template_predicate (template_hole 0)],
       template_predicate (template_var 0))),
    ("Orderings.bot_boolE", "bot ==> ?P",
     template_implication
      ([template_predicate (template_hole 0)],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_ident", "((%x. x) has_field_derivative (1::?'a)) ?F",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_hole 0),
           template_var 0)
         )),
    ("Deriv.DERIV_const", "((%x. ?k) has_field_derivative (0::?'a)) ?F",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_hole 0),
           template_var 0)
         )),
    ("Euclidean_Division.abs_division_segment",
     "\<bar>division_segment ?k\<bar> = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Euclidean_Division.unit_factor_simps", "unit_factor (Suc ?n) = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Equiv_Relations.quotient_empty", "{} // ?r = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Equiv_Relations.rtranlcp_le_equivclp", "?r^** <= equivclp ?r",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Euclidean_Division.div_le_dividend", "?m div ?n <= ?m",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("Euclidean_Division.mod_less_eq_dividend", "?m mod ?n <= ?m",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("Orderings.bot1E", "bot ?x ==> ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("List.Ex_list_of_length", "EX xs. length xs = ?n",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Equiv_Relations.equivclp_conversep", "equivclp ?r^--1 = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.equivclp_symclp",
     "equivclp (symclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.rtranclp_equivclp", "(equivclp ?r)^** = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.symclp_equivclp",
     "symclp (equivclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.tranclp_equivclp", "(equivclp ?r)^++ = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Euclidean_Division.div_by_Suc_0", "?m div Suc 0 = ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Euclidean_Division.mod_by_Suc_0", "?m mod Suc 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("Equiv_Relations.rtranclp_conversep_le_equivclp",
     "?r^--1^** <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.symclp_rtranclp_le_equivclp",
     "symclp ?r^** <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Euclidean_Division.mod_Suc_le_divisor", "?m mod Suc ?n <= ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Enum.bacc_subseteq_acc", "bacc ?r ?n <= Wellfounded.acc ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Equiv_Relations.equivp_implies_part_equivp",
     "equivp ?R ==> part_equivp ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Equiv_Relations.equivp_imp_transp", "equivp ?R ==> transp ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Countable_Set_Type.cemptyE", "cin ?a cempty ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("HOL.eqTrueE", "?P = True ==> ?P",
     template_implication
      ([template_equation (template_var 0, template_hole 0)],
       template_predicate (template_var 0))),
    ("Orderings.bot2E", "bot ?x ?y ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("Nat.less_zeroE", "?n < 0 ==> ?R",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 0)],
       template_predicate (template_var 0))),
    ("Predicate.botE", "pred.eval bot ?x ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_hole 0),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("Set.emptyE", "?a : {} ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("Transcendental.DERIV_exp",
     "(exp has_field_derivative exp ?x) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Transcendental.DERIV_sin",
     "(sin has_field_derivative cos ?x) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Deriv.DERIV_cmult_Id",
     "((*) ?c has_field_derivative ?c) (at ?x within ?s)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Enum.Collect_code", "Collect ?P = set (filter ?P enum_class.enum)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Enum.all_code", "(ALL x. ?P x) = enum_class.enum_all ?P",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Enum.exists_code", "(EX x. ?P x) = enum_class.enum_ex ?P",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Euclidean_Division.times_div_less_eq_dividend",
     "?n * (?m div ?n) <= ?m",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 0)),
    ("Euclidean_Division.div_times_less_eq_dividend",
     "?m div ?n * ?n <= ?m",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("Equiv_Relations.equivp_reflp", "equivp ?R ==> ?R ?x ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 0), template_var 0)
           ))),
    ("Equiv_Relations.equivp_rtranclp", "symp ?r ==> equivp ?r^**",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("HOL.TrueE", "[| True; ?P |] ==> ?P",
     template_implication
      ([template_predicate (template_hole 0),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Transcendental.DERIV_cos",
     "(cos has_field_derivative - sin ?x) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Deriv.DERIV_Uniq", "?< D. (?f has_field_derivative D) (at ?x)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Equiv_Relations.proj_image",
     "Equiv_Relations.proj ?r ` ?A = ?A // ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Enum.exists1_code", "(EX! x. ?P x) = list_ex1 ?P enum_class.enum",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>1_iff'",
     "(a\<^sub>1 ~= ?x) = (?x = a\<^sub>2)",
     template_bimplication
      (template_negation
        (template_equation (template_hole 1, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>2_iff'",
     "(a\<^sub>2 ~= ?x) = (?x = a\<^sub>1)",
     template_bimplication
      (template_negation
        (template_equation (template_hole 1, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>1_iff",
     "(?x ~= a\<^sub>1) = (?x = a\<^sub>2)",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 1)),
       template_equation (template_var 0, template_hole 0))),
    ("Enum.neq_finite_2_a\<^sub>2_iff",
     "(?x ~= a\<^sub>2) = (?x = a\<^sub>1)",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 1)),
       template_equation (template_var 0, template_hole 0))),
    ("Euclidean_Division.coprime_abs_right_iff",
     "coprime ?k \<bar>?l\<bar> = coprime ?k ?l",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Euclidean_Division.coprime_abs_left_iff",
     "coprime \<bar>?k\<bar> ?l = coprime ?k ?l",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Equiv_Relations.equivclp_OO_equivclp_le_equivclp",
     "equivclp ?r OO equivclp ?r <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Euclidean_Division.Suc_div_le_mono", "?m div ?n <= Suc ?m div ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("HOL.notFalseE", "[| ~ False; ?P |] ==> ?P",
     template_implication
      ([template_negation (template_predicate (template_hole 0)),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("HOL.notE", "[| ~ ?P; ?P |] ==> ?R",
     template_implication
      ([template_negation (template_predicate (template_var 1)),
        template_predicate (template_var 1)],
       template_predicate (template_var 0))),
    ("Complex.rcis_Ex", "EX r a. ?z = rcis r a",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Euclidean_Division.add_self_div_2", "(?m + ?m) div 2 = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("Euclidean_Division.add_self_mod_2", "(?m + ?m) mod 2 = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_hole 0)),
    ("Equiv_Relations.quotient_is_empty2", "({} = ?A // ?r) = (?A = {})",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 1, template_hole 0))),
    ("Equiv_Relations.quotient_is_empty", "(?A // ?r = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Euclidean_Division.coprime_int_iff",
     "coprime (int ?m) (int ?n) = coprime ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equiv_Relations.r_OO_conversep_into_equivclp",
     "?r^** OO ?r^--1^** <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.equivp_vimage2p",
     "equivp ?R ==> equivp (BNF_Def.vimage2p ?f ?f ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 0),
               template_var 1))
           ))),
    ("Series.summable_LIMSEQ_zero",
     "summable ?f ==> ?f \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Equiv_Relations.r_into_equivclp", "?r ?x ?y ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Equiv_Relations.converse_r_into_equivclp",
     "?r ?y ?x ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Record.iso_tuple_surjective_proof_assist_idE",
     "Record.iso_tuple_surjective_proof_assist ?x ?y id ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Wellorder_Embedding.not_embedS_iso",
     "~ (embedS ?r ?r' ?f & iso ?r ?r' ?f)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Topological_Spaces.convergent_LIMSEQ_iff",
     "convergent ?X = ?X \<longlonglongrightarrow> lim ?X",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_hole 0))),
    ("Euclidean_Division.mod_greater_zero_iff_not_dvd",
     "(0 < ?m mod ?n) = (~ ?n dvd ?m)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Euclidean_Division.coprime_nat_abs_right_iff",
     "coprime ?n (nat \<bar>?k\<bar>) = coprime (int ?n) ?k",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Euclidean_Division.coprime_nat_abs_left_iff",
     "coprime (nat \<bar>?k\<bar>) ?n = coprime ?k (int ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Topological_Spaces.LIMSEQ_const_iff",
     "(%n. ?k) \<longlonglongrightarrow> ?l = (?k = ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Euclidean_Division.pos_mod_bound", "0 < ?l ==> ?k mod ?l < ?l",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Euclidean_Division.pos_mod_sign", "0 < ?l ==> 0 <= ?k mod ?l",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Euclidean_Division.neg_mod_bound", "?l < 0 ==> ?l < ?k mod ?l",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 1)],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Euclidean_Division.neg_mod_sign", "?l < 0 ==> ?k mod ?l <= 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_hole 2))),
    ("Euclidean_Division.mod_less_divisor", "0 < ?n ==> ?m mod ?n < ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Euclidean_Division.mod_le_divisor", "0 < ?n ==> ?m mod ?n <= ?n",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Euclidean_Division.div_less", "?m < ?n ==> ?m div ?n = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Euclidean_Division.mod_less", "?m < ?n ==> ?m mod ?n = ?m",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Equiv_Relations.equivclp_sym",
     "equivclp ?r ?x ?y ==> equivclp ?r ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Preliminaries.pick_NE", "?X ~= {} ==> pick ?X : ?X",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Equiv_Relations.rtranclp_into_equivclp",
     "?r^** ?x ?y ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Equiv_Relations.converse_rtranclp_into_equivclp",
     "?r^** ?y ?x ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Map.map_add_le_mapE",
     "?f ++ ?g \<subseteq>\<^sub>m ?h ==> ?g \<subseteq>\<^sub>m ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Limits.LIMSEQ_inverse_real_of_nat_add",
     "(%n. ?r + inverse (real (Suc n))) \<longlonglongrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Euclidean_Division.Suc_0_mod_eq",
     "Suc 0 mod ?n = of_bool (?n ~= Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 3, template_hole 2))))
           ))),
    ("Euclidean_Division.div_mult2_eq",
     "?m div (?n * ?q) = ?m div ?n div ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Euclidean_Division.mod_Suc_eq",
     "Suc (?m mod ?n) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Equiv_Relations.equivp_reflp_symp_transp",
     "equivp ?R = (reflp ?R & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Enum.order_fun",
     "(?f <= ?g) = enum_class.enum_all (%x. ?f x <= ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Enum.dvd_finite_2_unfold",
     "(?x dvd ?y) = (?x = a\<^sub>2 | ?y = a\<^sub>1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("Hilbert_Choice.Eps_case_prod",
     "(SOME (x, y). ?P x y) = (SOME xy. ?P (fst xy) (snd xy))",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Enum.acc_bacc_eq",
     "finite ?A ==> Wellfounded.acc ?A = bacc ?A (card UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("Transfer.Ex_transfer",
     "bi_total ?A ==> rel_fun (rel_fun ?A (=)) (=) Ex Ex",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Equiv_Relations.Union_quotient",
     "equiv ?A ?r ==> \<Union> (?A // ?r) = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Equiv_Relations.equiv_comp_eq", "equiv ?A ?r ==> ?r^-1 O ?r = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0),
         template_var 0))),
    ("Equiv_Relations.equiv_type", "equiv ?A ?r ==> ?r <= ?A \<times> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Equiv_Relations.refl_on_comp_subset",
     "refl_on ?A ?r ==> ?r <= ?r^-1 O ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)))),
    ("Euclidean_Division.division_segment_eq_sgn",
     "?k ~= 0 ==> division_segment ?k = sgn ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Infinite_Set.INFM_EX", "INFM x. ?P x ==> EX x. ?P x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Limits.LIMSEQ_inverse_real_of_nat_add_minus",
     "(%n. ?r + - inverse (real (Suc n))) \<longlonglongrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Enum.vimage_code",
     "?f -` ?B = set (filter (%x. ?f x : ?B) enum_class.enum)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Enum.bacc_upper_bound",
     "bacc ?r (card UNIV) = \<Union> (range (bacc ?r))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app (template_hole 4, template_hole 3)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Equiv_Relations.equivp_equiv",
     "equiv UNIV ?A = equivp (%x y. (x, y) : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Euclidean_Division.div_mult_self_is_m",
     "0 < ?n ==> ?m * ?n div ?n = ?m",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Euclidean_Division.div_mult_self1_is_m",
     "0 < ?n ==> ?n * ?m div ?n = ?m",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Transcendental.DERIV_ln",
     "0 < ?x ==> (ln has_real_derivative inverse ?x) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Euclidean_Division.div_le_mono",
     "?m <= ?n ==> ?m div ?k <= ?n div ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Enum.bacc_mono", "?n <= ?m ==> bacc ?r ?n <= bacc ?r ?m",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Equiv_Relations.proj_preserves",
     "?x : ?A ==> Equiv_Relations.proj ?r ?x : ?A // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Euclidean_Division.less_mult_imp_div_less",
     "?m < ?i * ?n ==> ?m div ?n < ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("HOL.rev_notE", "[| ?P; ~ ?R ==> ~ ?P |] ==> ?R",
     template_implication
      ([template_predicate (template_var 1),
        template_implication
         ([template_negation (template_predicate (template_var 0))],
          template_negation (template_predicate (template_var 1)))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivp_symp",
     "[| equivp ?R; ?R ?x ?y |] ==> ?R ?y ?x",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 0), template_var 1)
           ))),
    ("Equiv_Relations.part_equivp_symp",
     "[| part_equivp ?R; ?R ?x ?y |] ==> ?R ?y ?x",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 0), template_var 1)
           ))),
    ("HOL.notE'", "[| ~ ?P; ~ ?P ==> ?P |] ==> ?R",
     template_implication
      ([template_negation (template_predicate (template_var 1)),
        template_implication
         ([template_negation (template_predicate (template_var 1))],
          template_predicate (template_var 1))],
       template_predicate (template_var 0))),
    ("Transcendental.DERIV_arctan",
     "(arctan has_real_derivative inverse (1 + ?x\<^sup>2)) (at ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Euclidean_Division.mod2_Suc_Suc", "Suc (Suc ?m) mod 2 = ?m mod 2",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Euclidean_Division.mod_Suc_Suc_eq",
     "Suc (Suc (?m mod ?n)) mod ?n = Suc (Suc ?m) mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Euclidean_Division.Suc_mod_mult_self1",
     "Suc (?m + ?k * ?n) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_var 0))),
    ("Euclidean_Division.Suc_mod_mult_self2",
     "Suc (?m + ?n * ?k) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 1),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_var 1))),
    ("Euclidean_Division.Suc_mod_mult_self3",
     "Suc (?k * ?n + ?m) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_var 1),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Euclidean_Division.Suc_mod_mult_self4",
     "Suc (?n * ?k + ?m) mod ?n = Suc ?m mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_var 2),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 2))),
    ("Equiv_Relations.singleton_quotient", "{?x} // ?r = {?r `` {?x}}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_hole 0))),
    ("Relation.converse_INTER",
     "(\<Inter> (?r ` ?S))^-1 = (INT x:?S. (?r x)^-1)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Product_Type.split_paired_Ex", "(EX x. ?P x) = (EX a b. ?P (a, b))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Euclidean_Division.div_eq_0_iff",
     "(?m div ?n = 0) = (?m < ?n | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 2))
           ))),
    ("Euclidean_Division.div_greater_zero_iff",
     "(0 < ?m div ?n) = (?n <= ?m & 0 < ?n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)))),
    ("Hilbert_Choice.split_paired_Eps",
     "(SOME x. ?P x) = (SOME (a, b). ?P (a, b))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Euclidean_Division.Suc_n_div_2_gt_zero",
     "0 < ?n ==> 0 < Suc ?n div 2",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_inequation
        (less_than, template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("NthRoot.LIMSEQ_root_const",
     "0 < ?c ==> (%n. root n ?c) \<longlonglongrightarrow> 1",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.DERIV_ln_divide",
     "0 < ?x ==> (ln has_real_derivative 1 / ?x) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Fun.bij_betwE", "bij_betw ?f ?A ?B ==> ALL a:?A. ?f a : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Euclidean_Division.abs_mod_less",
     "?l ~= 0 ==> \<bar>?k mod ?l\<bar> < \<bar>?l\<bar>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Euclidean_Division.div_2_gt_zero", "Suc 0 < ?n ==> 0 < ?n div 2",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0)],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Deriv.DERIV_isCont",
     "(?f has_field_derivative ?D) (at ?x) ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_var 2)
           ))),
    ("Deriv.DERIV_continuous",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Relation.sym_INTER",
     "ALL x:?S. sym (?r x) ==> sym (\<Inter> (?r ` ?S))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Relation.trans_INTER",
     "ALL x:?S. trans (?r x) ==> trans (\<Inter> (?r ` ?S))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Record.update_accessor_accessor_eqE",
     "Record.iso_tuple_update_accessor_eq_assist ?upd ?ac ?v ?f ?v' ?x ==>
      ?ac ?v = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 4, template_var 3), template_var 0))),
    ("Relation.reflpE", "[| reflp ?r; ?r ?x ?x ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 2)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 2, template_var 1),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Lifting.NEG_trans",
     "[| Lifting.NEG ?A ?B; Lifting.NEG ?B ?C |] ==> Lifting.NEG ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Transcendental.DERIV_cos_add",
     "((%x. cos (x + ?k)) has_field_derivative - sin (?xa + ?k)) (at ?xa)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1)))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Limits.LIMSEQ_inverse_real_of_nat_add_minus_mult",
     "(%n. ?r * (1 + - inverse (real (Suc n))))
      \<longlonglongrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 9, t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Euclidean_Division.mod_if",
     "?m mod ?n = (if ?m < ?n then ?m else (?m - ?n) mod ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)))),
    ("Euclidean_Division.div_Suc_eq_div_add3",
     "?m div Suc (Suc (Suc ?n)) = ?m div (3 + ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_hole 4,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Euclidean_Division.Suc_div_eq_add3_div",
     "Suc (Suc (Suc ?m)) div ?n = (3 + ?m) div ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Euclidean_Division.mod_Suc_eq_mod_add3",
     "?m mod Suc (Suc (Suc ?n)) = ?m mod (3 + ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_hole 4,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Euclidean_Division.Suc_mod_eq_add3_mod",
     "Suc (Suc (Suc ?m)) mod ?n = (3 + ?m) mod ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Euclidean_Division.div2_Suc_Suc",
     "Suc (Suc ?m) div 2 = Suc (?m div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Equiv_Relations.part_equivp_refl_symp_transp",
     "part_equivp ?R = ((EX x. ?R x x) & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Wellorder_Embedding.embed_embedS_iso",
     "embed ?r ?r' ?f = (embedS ?r ?r' ?f | iso ?r ?r' ?f)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Enum.acc_subseteq_bacc",
     "finite ?r ==> Wellfounded.acc ?r <= \<Union> (range (bacc ?r))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0))))),
    ("Topological_Spaces.LIMSEQ_INF",
     "decseq ?X ==> ?X \<longlonglongrightarrow> Inf (range ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_hole 1)))),
             template_hole 0)
           ))),
    ("Topological_Spaces.LIMSEQ_SUP",
     "incseq ?X ==> ?X \<longlonglongrightarrow> Sup (range ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_hole 1)))),
             template_hole 0)
           ))),
    ("Transfer.right_total_Ex_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (=)) (=) (Bex (Collect (Domainp ?A))) Ex",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_hole 4),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("Wellorder_Extension.well_order_extension",
     "wf ?p ==> EX w. ?p <= w & Well_order w",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Euclidean_Division.div_eq_dividend_iff",
     "0 < ?m ==> (?m div ?n = ?m) = (?n = 1)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 1),
         template_equation (template_var 0, template_hole 0)))),
    ("Euclidean_Division.dividend_less_times_div",
     "0 < ?n ==> ?m < ?n + ?n * (?m div ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Euclidean_Division.dividend_less_div_times",
     "0 < ?n ==> ?m < ?n + ?m div ?n * ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 1))))),
    ("Limits.LIMSEQ_inverse_realpow_zero",
     "1 < ?x ==> (%n. inverse (?x ^ n)) \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Euclidean_Division.le_mod_geq",
     "?n <= ?m ==> ?m mod ?n = (?m - ?n) mod ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("Extraction.exI_realizer",
     "?P ?y ?x ==> ?P (snd (?x, ?y)) (fst (?x, ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)))
           ))),
    ("Equiv_Relations.quotientI", "?x : ?A ==> ?r `` {?x} : ?A // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Euclidean_Division.Suc_times_mod_eq",
     "Suc 0 < ?m ==> Suc (?m * ?n) mod ?m = 1",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_var 1),
         template_hole 0))),
    ("Limits.LIMSEQ_abs_realpow_zero2",
     "\<bar>?c\<bar> < 1 ==> (^) ?c \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Limits.LIMSEQ_power_zero",
     "norm ?x < 1 ==> (^) ?x \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Record.update_accessor_updator_eqE",
     "Record.iso_tuple_update_accessor_eq_assist ?upd ?ac ?v ?f ?v' ?x ==>
      ?upd ?f ?v = ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_var 5, template_var 2), template_var 3),
         template_var 1))),
    ("Hilbert_Choice.Eps_cong", "(!!x. ?P x = ?Q x) ==> Eps ?P = Eps ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Equiv_Relations.sym_trans_comp_subset",
     "[| sym ?r; trans ?r |] ==> ?r^-1 O ?r <= ?r",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0),
         template_var 0))),
    ("Wellfounded.wfE_pf", "[| wf ?R; ?A <= ?R `` ?A |] ==> ?A = {}",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation (template_var 0, template_hole 0))),
    ("HOL.allE", "[| ALL x. ?P x; ?P ?x ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 0, t_empty)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Set.ComplE", "[| ?c : - ?A; ?c ~: ?A ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.fsingletonE",
     "[| cin ?b (csingle ?a); ?b = ?a ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Set.singletonE", "[| ?b : {?a}; ?b = ?a ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Set.CollectE", "[| ?a : {x. ?P x}; ?P ?a ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, t_empty))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivpI",
     "[| reflp ?R; symp ?R; transp ?R |] ==> equivp ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Enum.dvd_finite_3_unfold",
     "(?x dvd ?y) = (?x = a\<^sub>2 | ?x = a\<^sub>3 | ?y = a\<^sub>1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0)))
           ))),
    ("Euclidean_Division.mod2_gr_0", "(0 < ?m mod 2) = (?m mod 2 = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_hole 0))),
    ("Hilbert_Choice.Eps_case_prod_eq",
     "(SOME (x', y'). ?x = x' & ?y = y') = (?x, ?y)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Limits.LIMSEQ_divide_realpow_zero",
     "1 < ?x ==> (%n. ?a / ?x ^ n) \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Euclidean_Division.nat_div_distrib",
     "0 <= ?x ==> nat (?x div ?y) = nat ?x div nat ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Euclidean_Division.nat_div_distrib'",
     "0 <= ?y ==> nat (?x div ?y) = nat ?x div nat ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Limits.LIMSEQ_abs_realpow_zero",
     "\<bar>?c\<bar> < 1 ==>
      (^) \<bar>?c\<bar> \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Topological_Spaces.LIMSEQ_Suc",
     "?f \<longlonglongrightarrow> ?l ==>
      (%n. ?f (Suc n)) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_hole 1)
           ))),
    ("Topological_Spaces.LIMSEQ_imp_Suc",
     "(%n. ?f (Suc n)) \<longlonglongrightarrow> ?l ==>
      ?f \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Deriv.DERIV_isconst_all",
     "ALL x. (?f has_real_derivative 0) (at x) ==> ?f ?x = ?f ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Countable_Set.countableE",
     "[| countable ?S; !!f. inj_on f ?S ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Transfer.Ex1_parametric",
     "[| bi_unique ?A; bi_total ?A |]
      ==> rel_fun (rel_fun ?A (=)) (=) Ex1 Ex1",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 2),
               template_hole 1),
             template_hole 0)
           ))),
    ("Transfer.right_totalE",
     "[| right_total ?A; !!x. ?A x ?y ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.in_quotient_imp_subset",
     "[| equiv ?A ?r; ?X : ?A // ?r |] ==> ?X <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("Filter.frequentlyE",
     "[| frequently ?P ?F; !!x. ?P x ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("HOL.conjE", "[| ?P & ?Q; [| ?P; ?Q |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_implication
           ([template_predicate (template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.div_less_dividend",
     "[| 1 < ?n; 0 < ?m |] ==> ?m div ?n < ?m",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("Euclidean_Division.div_pos_pos_trivial",
     "[| 0 <= ?k; ?k < ?l |] ==> ?k div ?l = 0",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 3))),
    ("Euclidean_Division.mod_pos_pos_trivial",
     "[| 0 <= ?k; ?k < ?l |] ==> ?k mod ?l = ?k",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Euclidean_Division.div_neg_neg_trivial",
     "[| ?k <= 0; ?l < ?k |] ==> ?k div ?l = 0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 3))),
    ("Euclidean_Division.mod_neg_neg_trivial",
     "[| ?k <= 0; ?l < ?k |] ==> ?k mod ?l = ?k",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Deriv.DERIV_cong",
     "[| (?f has_field_derivative ?X) ?F; ?X = ?Y |]
      ==> (?f has_field_derivative ?Y) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation (template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Predicate_Compile.pred_of_setE",
     "[| pred.eval (pred_of_set ?A) ?x;
         Predicate_Compile.contains ?A ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Predicate.singleE'",
     "[| pred.eval (Predicate.single ?x) ?y; ?x = ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Predicate.singleE",
     "[| pred.eval (Predicate.single ?x) ?y; ?y = ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("HOL.impE", "[| ?P --> ?Q; ?P; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate (template_var 2),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Orderings.le_boolE", "[| ?P <= ?Q; ?P; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_var 2),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.Suc_div_eq_add3_div_numeral",
     "Suc (Suc (Suc ?m)) div numeral ?v = (3 + ?m) div numeral ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Euclidean_Division.Suc_mod_eq_add3_mod_numeral",
     "Suc (Suc (Suc ?m)) mod numeral ?v = (3 + ?m) mod numeral ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Complete_Lattices.INTER_eq",
     "\<Inter> (?B ` ?A) = {y. ALL x:?A. y : ?B x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Enum.order_fun",
     "(?f < ?g) = (?f <= ?g & enum_class.enum_ex (%x. ?f x ~= ?g x))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("Preliminaries.sappend_NE", "(?A @@ ?B ~= {}) = (?A ~= {} & ?B ~= {})",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)))
           ))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(UNIV = \<Inter> (?B ` ?A)) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(\<Inter> (?B ` ?A) = UNIV) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Series.summable_LIMSEQ'",
     "summable ?f ==>
      (%n. sum ?f {..n}) \<longlonglongrightarrow> suminf ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Series.summable_LIMSEQ",
     "summable ?f ==>
      (%n. sum ?f {..<n}) \<longlonglongrightarrow> suminf ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Equiv_Relations.proj_in_iff",
     "equiv ?A ?r ==> (Equiv_Relations.proj ?r ?x : ?A // ?r) = (?x : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Euclidean_Division.div_less_iff_less_mult",
     "0 < ?q ==> (?m div ?q < ?n) = (?m < ?n * ?q)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Euclidean_Division.less_eq_div_iff_mult_less_eq",
     "0 < ?q ==> (?m <= ?n div ?q) = (?m * ?q <= ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Euclidean_Division.zdiv_zmult2_eq",
     "0 <= ?c ==> ?a div (?b * ?c) = ?a div ?b div ?c",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Wellorder_Embedding.embed_embedS_iff_not_iso",
     "embed ?r ?r' ?f ==> embedS ?r ?r' ?f = (~ iso ?r ?r' ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Topological_Spaces.LIMSEQ_ignore_initial_segment",
     "?f \<longlonglongrightarrow> ?a ==>
      (%n. ?f (n + ?k)) \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_var 1)),
             template_hole 1)
           ))),
    ("Lifting.NEG_pcr_rule",
     "Lifting.NEG (?A OO ?B) ?C ==>
      Lifting.NEG (?A OO ?B OO ?X) (?C OO ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topological_Spaces.LIMSEQ_offset",
     "(%n. ?f (n + ?k)) \<longlonglongrightarrow> ?a ==>
      ?f \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Equiv_Relations.finite_quotient",
     "[| finite ?A; ?r <= ?A \<times> ?A |] ==> finite (?A // ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1), t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Equiv_Relations.in_quotient_imp_non_empty",
     "[| equiv ?A ?r; ?X : ?A // ?r |] ==> ?X ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Orderings.le_funE", "[| ?f <= ?g; ?f ?x <= ?g ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_implication
         ([template_inequation
            (less_equals, template_app (template_var 3, template_var 1),
             template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Relation.DomainpE", "[| Domainp ?r ?a; !!b. ?r ?a b ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Relation.RangepE", "[| Rangep ?r ?b; !!a. ?r a ?b ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivclp_trans",
     "[| equivclp ?r ?a ?b; equivclp ?r ?b ?c |] ==> equivclp ?r ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("HOL.exE", "[| EX x. ?P x; !!x. ?P x ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Predicate.not_predE'",
     "[| pred.eval (Predicate.not_pred ?P) ?x;
         ~ pred.eval ?P ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Product_Type.curryE",
     "[| curry ?f ?a ?b; ?f (?a, ?b) ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_var 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Finite_Set.empty_fold_graphE",
     "[| fold_graph ?f ?z {} ?x; ?x = ?z ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_hole 1),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_0_E",
     "[| (?P ^^ 0) ?x ?y; ?x = ?y ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Predicate_Compile.contains_predE",
     "[| pred.eval (Predicate_Compile.contains_pred ?A ?x) ?y;
         Predicate_Compile.contains ?A ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Predicate.not_predE",
     "[| pred.eval (Predicate.not_pred (pred.Pred (%u. ?P))) ?x;
         ~ ?P ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, t_empty))),
              template_var 1)
            ),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivI",
     "[| refl_on ?A ?r; sym ?r; trans ?r |] ==> equiv ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Deriv.DERIV_pow",
     "((%x. x ^ ?n) has_real_derivative real ?n * ?x ^ (?n - Suc 0))
       (at ?x within ?s)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Transcendental.polar_Ex", "EX r a. ?x = r * cos a & ?y = r * sin a",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Euclidean_Division.mod_Suc",
     "Suc ?m mod ?n =
      (if Suc (?m mod ?n) = ?n then 0 else Suc (?m mod ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0))),
                   template_var 0)),
               template_hole 0),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))
           ))),
    ("Euclidean_Division.mod_mult2_eq",
     "?m mod (?n * ?q) = ?n * (?m div ?n mod ?q) + ?m mod ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 1)))),
    ("Enum.enum_all_fun_code",
     "enum_class.enum_all ?P =
      (let enum_a = enum_class.enum
       in Enum.all_n_lists (%bs. ?P (the o map_of (zip enum_a bs)))
           (length enum_a))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app (template_hole 7, template_hole 6), t_empty))),
    ("Enum.enum_ex_fun_code",
     "enum_class.enum_ex ?P =
      (let enum_a = enum_class.enum
       in Enum.ex_n_lists (%bs. ?P (the o map_of (zip enum_a bs)))
           (length enum_a))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app (template_hole 7, template_hole 6), t_empty))),
    ("Enum.rtranclp_rtrancl_eq",
     "?r^** ?x ?y = ((?x, ?y) : {(x, y). ?r x y}^*)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Enum.tranclp_unfold", "?r^++ ?a ?b = ((?a, ?b) : {(x, y). ?r x y}^+)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Enum.max_extp_eq",
     "max_extp ?r ?x ?y = ((?x, ?y) : max_ext {(x, y). ?r x y})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Topological_Spaces.LIMSEQ_lessThan_iff_atMost",
     "(%n. ?f {..<n}) \<longlonglongrightarrow> ?x =
      (%n. ?f {..n}) \<longlonglongrightarrow> ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 2, template_var 0)),
         template_hole 1))),
    ("NthRoot.DERIV_real_sqrt",
     "0 < ?x ==> (sqrt has_real_derivative inverse (sqrt ?x) / 2) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 7, template_var 0))),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Tree.set_treeE",
     "?a : set_tree ?t ==>
      EX l r. \<langle>l, ?a, r\<rangle> : subtrees ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Euclidean_Division.Suc_times_numeral_mod_eq",
     "numeral ?k ~= 1 ==> Suc (numeral ?k * ?n) mod numeral ?k = 1",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0))),
           template_app (template_hole 4, template_var 1)),
         template_hole 3))),
    ("Enum.map_of_zip_enum_is_Some",
     "length ?ys = length enum_class.enum ==>
      EX y. map_of (zip enum_class.enum ?ys) ?x = Some y",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Int.int_sgnE", "(!!n l. ?k = sgn l * int n ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Set.is_singletonE",
     "[| is_singleton ?A; !!x. ?A = {x} ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Transfer.left_totalE",
     "[| left_total ?R; (!!x. EX y. ?R x y) ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_predicate (template_app (template_hole 1, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.congruentD",
     "[| ?f respects ?r; (?y, ?z) : ?r |] ==> ?f ?y = ?f ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Equiv_Relations.equiv_class_self",
     "[| equiv ?A ?r; ?a : ?A |] ==> ?a : ?r `` {?a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Infinite_Set.enumerate_Ex",
     "[| infinite ?S; ?s : ?S |]
      ==> EX n. wellorder_class.enumerate ?S n = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Euclidean_Division.div_le_mono2",
     "[| 0 < ?m; ?m <= ?n |] ==> ?k div ?n <= ?k div ?m",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Infinite_Set.INFM_E",
     "[| INFM x. ?P x; !!x. ?P x ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.comp_equivI",
     "[| ?r^-1 O ?r = ?r; Domain ?r = ?A |] ==> equiv ?A ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_var 1),
          template_var 1),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Equiv_Relations.equivp_transp",
     "[| equivp ?R; ?R ?x ?y; ?R ?y ?z |] ==> ?R ?x ?z",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 2), template_var 0)
           ))),
    ("Equiv_Relations.part_equivp_transp",
     "[| part_equivp ?R; ?R ?x ?y; ?R ?y ?z |] ==> ?R ?x ?z",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 2), template_var 0)
           ))),
    ("Equiv_Relations.part_equivpI",
     "[| EX x. ?R x x; symp ?R; transp ?R |] ==> part_equivp ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Deriv.DERIV_mirror",
     "(?f has_real_derivative ?y) (at (- ?x)) =
      ((%x. ?f (- x)) has_real_derivative - ?y) (at ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)))),
    ("Deriv.DERIV_minus",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      ((%x. - ?f x) has_field_derivative - ?D) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Real_Vector_Spaces.LIMSEQ_norm_0",
     "(!!n. norm (?f n) < 1 / real (Suc n)) ==>
      ?f \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Wellorder_Extension.downset_on_Union",
     "(!!r. r : ?R ==> downset_on (Field r) ?p) ==>
      downset_on (Field (\<Union> ?R)) ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Countable_Set.countableE_bij",
     "[| countable ?S; !!f C. bij_betw f C ?S ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.div_pos_neg_trivial",
     "[| 0 < ?k; ?k + ?l <= 0 |] ==> ?k div ?l = - 1",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Limits.LIMSEQ_realpow_zero",
     "[| 0 <= ?x; ?x < 1 |] ==> (^) ?x \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 1, template_hole 6)),
             template_hole 0)
           ))),
    ("Record.update_accessor_noopE",
     "[| Record.iso_tuple_update_accessor_cong_assist ?upd ?ac;
         ?f (?ac ?x) = ?ac ?x |]
      ==> ?upd ?f ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_var 1, template_app (template_var 2, template_var 0)),
          template_app (template_var 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 1), template_var 0),
         template_var 0))),
    ("Relation.IdE", "[| ?p : Id; !!x. ?p = (x, x) ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Wellorder_Embedding.comp_compat",
     "[| compat ?r ?r' ?f; compat ?r' ?r'' ?f' |]
      ==> compat ?r ?r'' (?f' o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Boolean_Algebras.inf1E",
     "[| inf ?A ?B ?x; [| ?A ?x; ?B ?x |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_var 2, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Predicate.if_predE",
     "[| pred.eval (Predicate.if_pred ?b) ?x; [| ?b; ?x = () |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("BigO.bigo_LIMSEQ1",
     "[| ?f : O(?g); ?g \<longlonglongrightarrow> 0 |]
      ==> ?f \<longlonglongrightarrow> 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_hole 1)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Topological_Spaces.LIMSEQ_subseq_LIMSEQ",
     "[| ?X \<longlonglongrightarrow> ?L; strict_mono ?f |]
      ==> (?X o ?f) \<longlonglongrightarrow> ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app (template_hole 3, template_var 1)),
             template_hole 2)
           ))),
    ("Transitive_Closure.relpow_0_E",
     "[| (?x, ?y) : ?R ^^ 0; ?x = ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Relation.sympE",
     "[| symp ?r; ?r ?b ?a; ?r ?a ?b ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("HOL.disjE", "[| ?P | ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Boolean_Algebras.sup_boolE",
     "[| sup ?P ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.coprime_common_divisor_nat",
     "[| coprime ?a ?b; ?x dvd ?a; ?x dvd ?b |] ==> ?x = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Euclidean_Division.div_if",
     "?m div ?n = (if ?m < ?n | ?n = 0 then 0 else Suc ((?m - ?n) div ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 2))),
               template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 0)))
           ))),
    ("Deriv.DERIV_shift",
     "(?f has_field_derivative ?y) (at (?x + ?z)) =
      ((%x. ?f (x + ?z)) has_field_derivative ?y) (at ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 0)))),
    ("Wellorder_Extension.total_well_order_extension",
     "wf ?p ==> EX w. ?p <= w & Well_order w & Field w = UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Transcendental.DERIV_log",
     "0 < ?x ==> (log ?b has_real_derivative 1 / (ln ?b * ?x)) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Transcendental.DERIV_tan",
     "cos ?x ~= (0::?'a) ==>
      (tan has_field_derivative inverse ((cos ?x)\<^sup>2)) (at ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 10, template_var 0)),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Euclidean_Division.funpow_mod_eq",
     "(?f ^^ ?n) ?x = ?x ==> (?f ^^ (?m mod ?n)) ?x = (?f ^^ ?m) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1)))),
    ("Relation.refl_on_INTER",
     "ALL x:?S. refl_on (?A x) (?r x) ==>
      refl_on (\<Inter> (?A ` ?S)) (\<Inter> (?r ` ?S))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Deriv.DERIV_continuous_on",
     "(!!x. x : ?s ==> (?f has_field_derivative ?D x) (at x within ?s)) ==>
      continuous_on ?s ?f",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Extraction.conjI_realizer",
     "[| ?P ?p; ?Q ?q |] ==> ?P (fst (?p, ?q)) & ?Q (snd (?p, ?q))",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_var 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)))),
             template_app
              (template_var 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))))
           ))),
    ("Wellorder_Extension.well_order_on_extension",
     "[| wf ?p; Field ?p <= ?A |] ==> EX w. ?p <= w & well_order_on ?A w",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Set.equalityE",
     "[| ?A = ?B; [| ?A <= ?B; ?B <= ?A |] ==> ?P |] ==> ?P",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_var 2)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("HOL.iffE", "[| ?P = ?Q; [| ?P --> ?Q; ?Q --> ?P |] ==> ?R |] ==> ?R",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cequalityE",
     "[| ?A = ?B; [| csubset_eq ?A ?B; csubset_eq ?B ?A |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_var 2)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.mod_pos_neg_trivial",
     "[| 0 < ?k; ?k + ?l <= 0 |] ==> ?k mod ?l = ?k + ?l",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Nat.less_natE",
     "[| ?m < ?n; !!q. ?n = Suc (?m + q) ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivclp_into_equivclp",
     "[| equivclp ?r ?a ?b; ?r ?b ?c | ?r ?c ?b |] ==> equivclp ?r ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app (template_var 3, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_var 3, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Euclidean_Division.sgn_mod",
     "[| ?l ~= 0; ~ ?l dvd ?k |] ==> sgn (?k mod ?l) = sgn ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Finite_Set.card_1_singletonE",
     "[| card ?A = 1; !!x. ?A = {x} ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Wellorder_Embedding.iso_inv_into",
     "[| Well_order ?r; iso ?r ?r' ?f |]
      ==> iso ?r' ?r (inv_into (Field ?r) ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 2)),
               template_var 0))
           ))),
    ("Relation.DomainE",
     "[| ?a : Domain ?r; !!b. (?a, b) : ?r ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Relation.RangeE",
     "[| ?b : Range ?r; !!a. (a, ?b) : ?r ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Fun.surjE", "[| surj ?f; !!x. ?y = ?f x ==> ?C |] ==> ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3),
          template_hole 2),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_unique",
     "[| (?f has_field_derivative ?D) (at ?x);
         (?f has_field_derivative ?E) (at ?x) |]
      ==> ?D = ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Deriv.DERIV_subset",
     "[| (?f has_field_derivative ?f') (at ?x within ?s); ?t <= ?s |]
      ==> (?f has_field_derivative ?f') (at ?x within ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("HOL.impCE'", "[| ?P --> ?Q; ?Q ==> ?R; ~ ?P ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("HOL.impCE", "[| ?P --> ?Q; ~ ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.coprime_common_divisor_int",
     "[| coprime ?a ?b; ?x dvd ?a; ?x dvd ?b |] ==> \<bar>?x\<bar> = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Deriv.DERIV_inverse",
     "?x ~= (0::?'a) ==>
      (inverse has_field_derivative - (inverse ?x ^ Suc (Suc 0)))
       (at ?x within ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 5, template_var 1)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 2, template_hole 1))))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.DERIV_cot",
     "sin ?x ~= (0::?'a) ==>
      (cot has_field_derivative - inverse ((sin ?x)\<^sup>2)) (at ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 11, template_var 0)),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2)))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Deriv.DERIV_cmult",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      ((%x. ?c * ?f x) has_field_derivative ?c * ?D) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Deriv.DERIV_cmult_right",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      ((%x. ?f x * ?c) has_field_derivative ?D * ?c) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Deriv.DERIV_cdivide",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      ((%x. ?f x / ?c) has_field_derivative ?D / ?c) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Equiv_Relations.equivpE",
     "[| equivp ?R; [| reflp ?R; symp ?R; transp ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_implication
         ([template_predicate
            (template_app (template_hole 2, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_hole 1, template_var 1))],
            template_implication
             ([template_predicate
                (template_app (template_hole 0, template_var 1))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.Sup1_E",
     "[| Sup ?A ?a; !!P. [| P : ?A; P ?a |] ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cBexE",
     "[| cBex ?A ?P; !!x. [| cin x ?A; ?P x |] ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Archimedean_Field.nat_approx_posE",
     "[| (0::?'a) < ?e; !!n. (1::?'a) / of_nat (Suc n) < ?e ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.le_div_geq",
     "[| 0 < ?n; ?n <= ?m |] ==> ?m div ?n = Suc ((?m - ?n) div ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 1))))),
    ("Set.psubsetE",
     "[| ?A < ?B; [| ?A <= ?B; ~ ?B <= ?A |] ==> ?R |] ==> ?R",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_implication
           ([template_negation
              (
                 template_inequation
                  (less_equals, template_var 1, template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cpsubsetE",
     "[| csubset ?A ?B; [| csubset_eq ?A ?B; ~ csubset_eq ?B ?A |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_implication
           ([template_negation
              (
                 template_inequation
                  (less_equals, template_var 1, template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.nat_mod_distrib",
     "[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Limits.LIMSEQ_incseq_SUP",
     "[| bdd_above (range ?X); incseq ?X |]
      ==> ?X \<longlonglongrightarrow> Sup (range ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_hole 5)))),
             template_hole 0)
           ))),
    ("Limits.LIMSEQ_decseq_INF",
     "[| bdd_below (range ?X); decseq ?X |]
      ==> ?X \<longlonglongrightarrow> Inf (range ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_hole 5)))),
             template_hole 0)
           ))),
    ("Fun_More.bij_betw_inv_into_LEFT",
     "[| bij_betw ?f ?A ?A'; ?B <= ?A |] ==> inv_into ?A ?f ` ?f ` ?B = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_var 0))),
    ("HOL.allE'",
     "[| ALL x. ?P x; [| ?P ?x; ALL x. ?P x |] ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 0, t_empty)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_implication
           ([template_predicate (template_app (template_hole 0, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("HOL.all_dupE",
     "[| ALL x. ?P x; [| ?P ?x; ALL x. ?P x |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 0, t_empty)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_implication
           ([template_predicate (template_app (template_hole 0, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("List.listspE",
     "[| listsp ?A (?x # ?l); [| ?A ?x; listsp ?A ?l |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.div_nat_eqI",
     "[| ?n * ?q <= ?m; ?m < ?n * Suc ?q |] ==> ?m div ?n = ?q",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app (template_hole 2, template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Extraction.exE_realizer'",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.congruent2_implies_congruent",
     "[| equiv ?A ?r1.0; congruent2 ?r1.0 ?r2.0 ?f; ?a : ?A |]
      ==> ?f ?a respects ?r2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_var 0))
           ))),
    ("HOL.impE'", "[| ?P --> ?Q; ?Q ==> ?R; ?P --> ?Q ==> ?P |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 2))],
       template_predicate (template_var 0))),
    ("Wellorder_Extension.downset_onD",
     "[| downset_on ?A ?r; (?x, ?y) : ?r; ?y : ?A |] ==> ?x : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 3)
           ))),
    ("Nat.Ex_less_Suc", "(EX i<Suc ?n. ?P i) = (?P ?n | (EX i<?n. ?P i))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Equiv_Relations.part_equivp_typedef",
     "part_equivp ?R ==> EX d. d : {c. EX x. ?R x x & c = Collect (?R x)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Lattices_Big.arg_min_SOME_Min",
     "finite ?S ==>
      arg_min_on ?f ?S = (SOME y. y : ?S & ?f y = Min (?f ` ?S))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app (template_hole 5, t_empty)))),
    ("Transcendental.DERIV_fun_exp",
     "(?g has_field_derivative ?m) (at ?x) ==>
      ((%x. exp (?g x)) has_field_derivative exp (?g ?x) * ?m) (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 1,
                     template_app (template_var 2, template_var 0))),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))
           ))),
    ("Transcendental.DERIV_fun_sin",
     "(?g has_field_derivative ?m) (at ?x) ==>
      ((%x. sin (?g x)) has_field_derivative cos (?g ?x) * ?m) (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 2, template_var 0))),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))
           ))),
    ("Equiv_Relations.congruentI",
     "(!!y z. (y, z) : ?r ==> ?f y = ?f z) ==> ?f respects ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Equiv_Relations.card_quotient_disjoint",
     "[| finite ?A; inj_on (%x. {x} // ?r) ?A |]
      ==> card (?A // ?r) = card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Infinite_Set.finite_enumerate_Ex",
     "[| finite ?S; ?s : ?S |]
      ==> EX n<card ?S. wellorder_class.enumerate ?S n = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Hilbert_Choice.wf_no_infinite_down_chainE",
     "[| wf ?r; !!k. (?f (Suc k), ?f k) ~: ?r ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cIntE",
     "[| cin ?c (cInt ?A ?B); [| cin ?c ?A; cin ?c ?B |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Deriv.real_differentiableE",
     "[| ?f differentiable at ?x within ?s;
         !!df. (?f has_real_derivative df) (at ?x within ?s) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.LIMSEQ_linear",
     "[| ?X \<longlonglongrightarrow> ?x; 0 < ?l |]
      ==> (%n. ?X (n * ?l)) \<longlonglongrightarrow> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_hole 3)
            ),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 1)),
             template_hole 3)
           ))),
    ("Boolean_Algebras.inf2E",
     "[| inf ?A ?B ?x ?y; [| ?A ?x ?y; ?B ?x ?y |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Nat.add_leE",
     "[| ?m + ?k <= ?n; [| ?m <= ?n; ?k <= ?n |] ==> ?R |] ==> ?R",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_var 1),
        template_implication
         ([template_inequation
            (less_equals, template_var 3, template_var 1)],
          template_implication
           ([template_inequation
              (less_equals, template_var 2, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Set.IntE",
     "[| ?c : ?A Int ?B; [| ?c : ?A; ?c : ?B |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Set.rangeE", "[| ?b : range ?f; !!x. ?b = ?f x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, t_empty), template_hole 2))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set.countable_infiniteE'",
     "[| countable ?A; infinite ?A; !!g. bij_betw g UNIV ?A ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set.countableE_infinite",
     "[| countable ?S; infinite ?S; !!e. bij_betw e ?S UNIV ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.finite_equiv_class",
     "[| finite ?A; ?r <= ?A \<times> ?A; ?X : ?A // ?r |] ==> finite ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2), t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("Boolean_Algebras.sup1E",
     "[| sup ?A ?B ?x; ?A ?x ==> ?P; ?B ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Nat.Ex_less_Suc2",
     "(EX i<Suc ?n. ?P i) = (?P 0 | (EX i<?n. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Deriv.DERIV_at_within_shift",
     "(?f has_field_derivative ?y) (at (?z + ?x) within (+) ?z ` ?S) =
      ((%x. ?f (?z + x)) has_field_derivative ?y) (at ?x within ?S)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 2)),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Euclidean_Division.zmod_zmult2_eq",
     "0 <= ?c ==> ?a mod (?b * ?c) = ?b * (?a div ?b mod ?c) + ?a mod ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 2))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Transcendental.DERIV_fun_cos",
     "(?g has_field_derivative ?m) (at ?x) ==>
      ((%x. cos (?g x)) has_field_derivative - sin (?g ?x) * ?m) (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_var 2, template_var 0)))),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4))
           ))),
    ("Stream.sdrop_while_sdrop_LEAST",
     "EX n. ?P (?s !! n) ==>
      sdrop_while (Not o ?P) ?s = sdrop (LEAST n. ?P (?s !! n)) ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("Deriv.DERIV_at_within_shift_lemma",
     "(?f has_field_derivative ?y) (at (?z + ?x) within (+) ?z ` ?S) ==>
      (?f o (+) ?z has_field_derivative ?y) (at ?x within ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 2, template_var 2)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app (template_hole 2, template_var 2))),
               template_var 3),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("List.distinct_Ex1",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> EX! i. i < length ?xs & ?xs ! i = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Equiv_Relations.equivE",
     "[| equiv ?A ?r; [| refl_on ?A ?r; sym ?r; trans ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (template_app (template_hole 1, template_var 1))],
            template_implication
             ([template_predicate
                (template_app (template_hole 0, template_var 1))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Record.update_accessor_noop_compE",
     "[| Record.iso_tuple_update_accessor_cong_assist ?upd ?ac;
         ?f (?ac ?x) = ?ac ?x |]
      ==> ?upd (?g o ?f) ?x = ?upd ?g ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_var 2, template_app (template_var 3, template_var 1)),
          template_app (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_var 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_var 4, template_var 0),
           template_var 1)))),
    ("Equiv_Relations.UN_constant_eq",
     "[| ?a : ?A; ALL y:?A. ?f y = ?c |] ==> \<Union> (?f ` ?A) = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_var 0))),
    ("Complete_Lattices.Sup2_E",
     "[| Sup ?A ?a ?b; !!r. [| r : ?A; r ?a ?b |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("HOL.alt_ex1E'",
     "[| EX! x. ?P x; !!x. [| ?P x; ?< x. ?P x |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.UnionE",
     "[| ?A : \<Union> ?C; !!X. [| ?A : X; X : ?C |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cDiffE",
     "[| cin ?c (cDiff ?A ?B); [| cin ?c ?A; ~ cin ?c ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Set.bexE",
     "[| EX x:?A. ?P x; !!x. [| x : ?A; ?P x |] ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Set.DiffE",
     "[| ?c : ?A - ?B; [| ?c : ?A; ?c ~: ?B |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Relation.symE",
     "[| sym ?r; (?b, ?a) : ?r; (?a, ?b) : ?r ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)),
                 template_var 3)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.Inf1_E",
     "[| Inf ?A ?a; ?P ?a ==> ?thesis; ?P ~: ?A ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 1, template_var 2))],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cBallE",
     "[| cBall ?A ?P; ?P ?x ==> ?Q; ~ cin ?x ?A ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.mod_nat_eqI",
     "[| ?r < ?n; ?r <= ?m; ?n dvd ?m - ?r |] ==> ?m mod ?n = ?r",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 2))),
    ("Wellorder_Embedding.one_set_greater",
     "(EX f. f ` ?A <= ?A' & inj_on f ?A) |
      (EX g. g ` ?A' <= ?A & inj_on g ?A')",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app (template_hole 3, t_empty))
         )),
    ("Equiv_Relations.disjnt_equiv_class",
     "equiv ?A ?r ==> disjnt (?r `` {?a}) (?r `` {?b}) = ((?a, ?b) ~: ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("Equiv_Relations.part_equivpE",
     "[| part_equivp ?R;
         !!x. [| ?R x x; symp ?R; transp ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equiv_class_eq",
     "[| equiv ?A ?r; (?a, ?b) : ?r |] ==> ?r `` {?a} = ?r `` {?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Equiv_Relations.equiv_class_subset",
     "[| equiv ?A ?r; (?a, ?b) : ?r |] ==> ?r `` {?a} <= ?r `` {?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Nat.Suc_lessE",
     "[| Suc ?i < ?k; !!j. [| ?i < j; ?k = Suc j |] ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 2, template_var 2),
          template_var 1),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Stream.streamsE",
     "[| ?s : streams ?A; [| shd ?s : ?A; stl ?s : streams ?A |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 0, template_var 2)),
                   template_app (template_hole 3, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Relation.relcomppE",
     "[| (?r OO ?s) ?a ?c; !!b. [| ?r ?a b; ?s b ?c |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("List.listsE",
     "[| ?x # ?l : lists ?A; [| ?x : ?A; ?l : lists ?A |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app (template_hole 1, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Old_Datatype.uprodE2",
     "[| Scons ?M ?N : uprod ?A ?B; [| ?M : ?A; ?N : ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Sum_Type.sumE",
     "[| !!x. ?s = Inl x ==> ?P; !!y. ?s = Inr y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Set.subsetCE",
     "[| ?A <= ?B; ?c ~: ?A ==> ?P; ?c : ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.csubsetCE",
     "[| csubset_eq ?A ?B; ~ cin ?c ?A ==> ?P; cin ?c ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Orderings.linorder_neqE",
     "[| ?x ~= ?y; ?x < ?y ==> ?R; ?y < ?x ==> ?R |] ==> ?R",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_implication
         ([template_inequation (less_than, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_inequation (less_than, template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Nat.linorder_neqE_nat",
     "[| ?x ~= ?y; ?x < ?y ==> ?R; ?y < ?x ==> ?R |] ==> ?R",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_implication
         ([template_inequation (less_than, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_inequation (less_than, template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Nat.less_SucE",
     "[| ?m < Suc ?n; ?m < ?n ==> ?P; ?m = ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_inequation (less_than, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.symclpE",
     "[| symclp ?r ?x ?y; ?r ?x ?y ==> ?thesis; ?r ?y ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transfer.rel_funE",
     "[| rel_fun ?A ?B ?f ?g; ?A ?x ?y; ?B (?f ?x) (?g ?y) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 6, template_var 2), template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 5,
                   template_app (template_var 4, template_var 2)),
                 template_app (template_var 3, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Relation.transpE",
     "[| transp ?r; ?r ?x ?y; ?r ?y ?z; ?r ?x ?z ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 2), template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_D",
     "(?f has_field_derivative ?D) (at ?x) ==>
      (%h. (?f (?x + h) - ?f ?x) / h) \<midarrow>0::?'a\<rightarrow> ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_hole 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 7, template_hole 0),
               template_hole 6))
           ))),
    ("Wellorder_Embedding.embed_cong",
     "(!!a. a : Field ?r ==> ?f a = ?g a) ==>
      embed ?r ?r' ?f = embed ?r ?r' ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Wellorder_Embedding.embedS_cong",
     "(!!a. a : Field ?r ==> ?f a = ?g a) ==>
      embedS ?r ?r' ?f = embedS ?r ?r' ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Wellorder_Embedding.iso_cong",
     "(!!a. a : Field ?r ==> ?f a = ?g a) ==>
      iso ?r ?r' ?f = iso ?r ?r' ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Limits.LIMSEQ_inverse_zero",
     "(!!r. EX N. ALL n>=N. r < ?X n) ==>
      (%n. inverse (?X n)) \<longlonglongrightarrow> 0",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Wellorder_Extension.downset_onI",
     "(!!x y. [| (x, y) : ?r; y : ?A |] ==> x : ?A) ==> downset_on ?A ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Relation.Id_onE",
     "[| ?c : Id_on ?A; !!x. [| x : ?A; ?c = (x, x) |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cimageE",
     "[| cin ?b (cimage ?f ?A);
         !!x. [| ?b = ?f x; cin x ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.LIMSEQ_le_const",
     "[| ?X \<longlonglongrightarrow> ?x; EX N. ALL n>=N. ?a <= ?X n |]
      ==> ?a <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Topological_Spaces.LIMSEQ_le_const2",
     "[| ?X \<longlonglongrightarrow> ?x; EX N. ALL n>=N. ?X n <= ?a |]
      ==> ?x <= ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Predicate.bindE",
     "[| pred.eval (Predicate.bind ?R ?Q) ?y;
         !!x. [| pred.eval ?R x; pred.eval (?Q x) ?y |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Set.vimageE",
     "[| ?a : ?f -` ?B; !!x. [| ?f ?a = x; x : ?B |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Type.SigmaE2",
     "[| (?a, ?b) : Sigma ?A ?B; [| ?a : ?A; ?b : ?B ?a |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app (template_var 1, template_var 4))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.Inf2_E",
     "[| Inf ?A ?a ?b; ?r ?a ?b ==> ?thesis; ?r ~: ?A ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 1, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 4)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Nat.le_SucE",
     "[| ?m <= Suc ?n; ?m <= ?n ==> ?R; ?m = Suc ?n ==> ?R |] ==> ?R",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.InterE",
     "[| ?A : \<Inter> ?C; ?X ~: ?C ==> ?R; ?A : ?X ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)
                   )
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cinsertE",
     "[| cin ?a (cinsert ?b ?A); ?a = ?b ==> ?P; cin ?a ?A ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cuUnE",
     "[| cin ?c (cUn ?A ?B); cin ?c ?A ==> ?P; cin ?c ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Boolean_Algebras.sup2E",
     "[| sup ?A ?B ?x ?y; ?A ?x ?y ==> ?P; ?B ?x ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Predicate.supE",
     "[| pred.eval (sup ?A ?B) ?x; pred.eval ?A ?x ==> ?P;
         pred.eval ?B ?x ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Set.ballE",
     "[| ALL x:?A. ?P x; ?P ?x ==> ?Q; ?x ~: ?A ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3), t_empty)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Set.insertE",
     "[| ?a : insert ?b ?A; ?a = ?b ==> ?P; ?a : ?A ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Set.UnE",
     "[| ?c : ?A Un ?B; ?c : ?A ==> ?P; ?c : ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Hilbert_Choice.Ex_inj_on_UNION_Sigma",
     "EX f. inj_on f (\<Union> (?A ` ?I)) &
            f ` \<Union> (?A ` ?I) <= Sigma ?I ?A",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Enum.mlex_eq",
     "?f <*mlex*> ?R = {(x, y). ?f x < ?f y | ?f x <= ?f y & (x, y) : ?R}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_hole 7, template_app (template_hole 6, t_empty)))),
    ("Wellorder_Extension.chain_subset_extension_on_Union",
     "[| chain\<^sub>\<subseteq> ?R;
         !!r. r : ?R ==> extension_on (Field r) r ?p |]
      ==> extension_on (Field (\<Union> ?R)) (\<Union> ?R) ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Equiv_Relations.equiv_class_nondisjoint",
     "[| equiv ?A ?r; ?x : ?r `` {?a} Int ?r `` {?b} |] ==> (?a, ?b) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_hole 2))),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Limits.BseqE",
     "[| Bseq ?X; !!K. [| 0 < K; ALL n. norm (?X n) <= K |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.eucl_rel_mult2",
     "[| 0 < ?n; 0 < ?q |]
      ==> ?m mod ?n + ?n * (?m div ?n mod ?q) < ?n * ?q",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("Transcendental.DERIV_arcsin",
     "[| - 1 < ?x; ?x < 1 |]
      ==> (arcsin has_real_derivative inverse (sqrt (1 - ?x\<^sup>2)))
           (at ?x)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 11)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 11),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3, template_hole 2))))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Set.subset_imageE",
     "[| ?B <= ?f ` ?A; !!C. [| C <= ?A; ?B = ?f ` C |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Relation.ImageE",
     "[| ?b : ?r `` ?A; !!x. [| (x, ?b) : ?r; x : ?A |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cUN_E",
     "[| cin ?b (cUnion (cimage ?B ?A));
         !!x. [| cin x ?A; cin ?b (?B x) |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.SUP1_E",
     "[| Sup (?B ` ?A) ?b; !!x. [| x : ?A; ?B x ?b |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Wellorder_Embedding.embed_halfcong",
     "[| !!a. a : Field ?r ==> ?f a = ?g a; embed ?r ?r' ?f |]
      ==> embed ?r ?r' ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Filter.eventually_frequentlyE",
     "[| eventually ?P ?F; \<forall>\<^sub>F x in ?F. ~ ?P x | ?Q x;
         ?F ~= bot |]
      ==> frequently ?Q ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Extraction.disjE_realizer3",
     "[| case ?x of Left => ?P | Right => ?Q; ?P ==> ?R ?f; ?Q ==> ?R ?g |]
      ==> ?R (case ?x of Left => ?f | Right => ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_implication
         ([template_predicate (template_var 4)],
          template_predicate
           (template_app (template_var 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("Fun_More.bij_betw_inv_into_LEFT_RIGHT",
     "[| bij_betw ?f ?A ?A'; ?B <= ?A; ?f ` ?B = ?B' |]
      ==> inv_into ?A ?f ` ?B' = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4)),
           template_var 0),
         template_var 1))),
    ("Fun_More.bij_betw_inv_into_RIGHT_LEFT",
     "[| bij_betw ?f ?A ?A'; ?B' <= ?A'; inv_into ?A ?f ` ?B' = ?B |]
      ==> ?f ` ?B = ?B'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 4)),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 0),
         template_var 1))),
    ("Equiv_Relations.finite_refines_finite",
     "[| finite (?A // ?R); ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> finite (?A // ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Limits.BfunE",
     "[| Bfun ?f ?F;
         !!B. [| 0 < B; \<forall>\<^sub>F x in ?F. norm (?f x) <= B |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("HOL.ex1E",
     "[| EX! x. ?P x; !!x. [| ?P x; ALL y. ?P y --> y = x |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.DERIV_arccos",
     "[| - 1 < ?x; ?x < 1 |]
      ==> (arccos has_real_derivative inverse (- sqrt (1 - ?x\<^sup>2)))
           (at ?x)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_hole 11),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 11)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 11),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2)))))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Real_Vector_Spaces.metric_LIMSEQ_D",
     "[| ?X \<longlonglongrightarrow> ?L; 0 < ?r |]
      ==> EX no. ALL n>=no. dist (?X n) ?L < ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app (template_hole 8, template_var 1)),
              template_hole 7)
            ),
        template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transitive_Closure.relpowp_Suc_E2",
     "[| (?P ^^ Suc ?n) ?x ?z; !!y. [| ?P ?x y; (?P ^^ ?n) y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_Suc_E",
     "[| (?P ^^ Suc ?n) ?x ?z; !!y. [| (?P ^^ ?n) ?x y; ?P y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Set.imageE",
     "[| ?b : ?f ` ?A; !!x. [| ?b = ?f x; x : ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, t_empty), template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("List.in_set_zipE",
     "[| (?x, ?y) : set (zip ?xs ?ys);
         [| ?x : set ?xs; ?y : set ?ys |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 2))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.in_quotient_imp_in_rel",
     "[| equiv ?A ?r; ?X : ?A // ?r; {?x, ?y} <= ?X |] ==> (?x, ?y) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("HOL.iffCE",
     "[| ?P = ?Q; [| ?P; ?Q |] ==> ?R; [| ~ ?P; ~ ?Q |] ==> ?R |] ==> ?R",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_implication
         ([template_predicate (template_var 2)],
          template_implication
           ([template_predicate (template_var 1)],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_implication
           ([template_negation (template_predicate (template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Limits.LIMSEQ_iff",
     "?X \<longlonglongrightarrow> ?L =
      (ALL r>0. EX no. ALL n>=no. norm (?X n - ?L) < r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 1),
           template_app (template_hole 10, template_var 0)),
         template_hole 9),
       template_app (template_hole 8, t_empty))),
    ("Deriv.DERIV_atLeastAtMost_imp_continuous_on",
     "(!!x. [| ?a <= x; x <= ?b |]
            ==> EX y. (?f has_field_derivative y) (at x)) ==>
      continuous_on {?a..?b} ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Equiv_Relations.proj_iff",
     "[| equiv ?A ?r; {?x, ?y} <= ?A |]
      ==> (Equiv_Relations.proj ?r ?x = Equiv_Relations.proj ?r ?y) =
          ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Complete_Lattices.inj_on_INTER",
     "[| ?I ~= {}; !!i. i : ?I ==> inj_on ?f (?A i) |]
      ==> inj_on ?f (\<Inter> (?A ` ?I))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Deriv.DERIV_const_ratio_const",
     "[| ?a ~= ?b; !!x. (?f has_real_derivative ?k) (at x) |]
      ==> ?f ?b - ?f ?a = (?b - ?a) * ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 1, template_var 2)),
           template_app (template_var 1, template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_var 0)))),
    ("Deriv.DERIV_const_ratio_const2",
     "[| ?a ~= ?b; !!x. (?f has_real_derivative ?k) (at x) |]
      ==> (?f ?b - ?f ?a) / (?b - ?a) = ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 2)),
               template_app (template_var 1, template_var 3))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3)),
         template_var 0))),
    ("Limits.LIMSEQ_D",
     "[| ?X \<longlonglongrightarrow> ?L; 0 < ?r |]
      ==> EX no. ALL n>=no. norm (?X n - ?L) < ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 9, template_var 1)),
              template_hole 8)
            ),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Equiv_Relations.quotientE",
     "[| ?X : ?A // ?r; !!x. [| ?X = ?r `` {x}; x : ?A |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_chain",
     "[| (?f has_field_derivative ?Da) (at (?g ?x));
         (?g has_field_derivative ?Db) (at ?x within ?s) |]
      ==> (?f o ?g has_field_derivative ?Da * ?Db) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_var 3, template_var 2)),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Complete_Lattices.SUP2_E",
     "[| Sup (?B ` ?A) ?b ?c; !!x. [| x : ?A; ?B x ?b ?c |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.UN_E",
     "[| ?b : \<Union> (?B ` ?A); !!x. [| x : ?A; ?b : ?B x |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 1)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.refines_equiv_image_eq",
     "[| ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> (``) ?S ` ?A // ?R = ?A // ?S",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Equiv_Relations.congruent2D",
     "[| congruent2 ?r1.0 ?r2.0 ?f; (?y1.0, ?z1.0) : ?r1.0;
         (?y2.0, ?z2.0) : ?r2.0 |]
      ==> ?f ?y1.0 ?y2.0 = ?f ?z1.0 ?z2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 3), template_var 1),
         template_app
          (template_app (template_var 4, template_var 2),
           template_var 0)))),
    ("BigO.bigo_LIMSEQ2",
     "[| ?f : ?g +o O(?h); ?h \<longlonglongrightarrow> 0;
         ?f \<longlonglongrightarrow> ?a |]
      ==> ?g \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_hole 1)),
              template_hole 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 0)),
             template_hole 0)
           ))),
    ("Complete_Lattices.INF1_E",
     "[| Inf (?B ` ?A) ?b; ?B ?a ?b ==> ?thesis; ?a ~: ?A ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 3)),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.in_quotient_imp_closed",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?x : ?X; (?x, ?y) : ?r |] ==> ?y : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 2)
           ))),
    ("Transcendental.DERIV_fun_pow",
     "(?g has_real_derivative ?m) (at ?x) ==>
      ((%x. ?g x ^ ?n) has_real_derivative real ?n * ?g ?x ^ (?n - 1) * ?m)
       (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_var 3, template_var 1)),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_hole 0)))),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_hole 5))
           ))),
    ("Real_Vector_Spaces.metric_LIMSEQ_I",
     "(!!r. 0 < r ==> EX no. ALL n>=no. dist (?X n) ?L < r) ==>
      ?X \<longlonglongrightarrow> ?L",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("NthRoot.DERIV_real_root",
     "[| 0 < ?n; 0 < ?x |]
      ==> (root ?n has_real_derivative
           inverse (real ?n * root ?n ?x ^ (?n - Suc 0)))
           (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 1)),
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app
                        (template_hole 2, template_hole 12)))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Predicate_Compile.containsE",
     "[| Predicate_Compile.contains ?A ?x;
         !!A' x'. [| ?A = A'; ?x = x'; ?x : ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Relation.converseE",
     "[| ?yx : ?r^-1; !!x y. [| ?yx = (y, x); (x, y) : ?r |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_chain'",
     "[| (?f has_field_derivative ?D) (at ?x within ?s);
         (?g has_field_derivative ?E) (at (?f ?x)) |]
      ==> ((%x. ?g (?f x)) has_field_derivative ?E * ?D) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_var 5, template_var 3)),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2))
           ))),
    ("Deriv.DERIV_chain2",
     "[| (?f has_field_derivative ?Da) (at (?g ?x));
         (?g has_field_derivative ?Db) (at ?x within ?s) |]
      ==> ((%x. ?f (?g x)) has_field_derivative ?Da * ?Db)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_var 3, template_var 2)),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Equiv_Relations.equiv_imp_dvd_card",
     "[| finite ?A; equiv ?A ?r; !!X. X : ?A // ?r ==> ?k dvd card X |]
      ==> ?k dvd card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Equiv_Relations.UN_equiv_class",
     "[| equiv ?A ?r; ?f respects ?r; ?a : ?A |]
      ==> \<Union> (?f ` ?r `` {?a}) = ?f ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))),
         template_app (template_var 1, template_var 0)))),
    ("Equiv_Relations.quotient_disj",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?Y : ?A // ?r |]
      ==> ?X = ?Y | ?X Int ?Y = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Equiv_Relations.subset_equiv_class",
     "[| equiv ?A ?r; ?r `` {?b} <= ?r `` {?a}; ?b : ?A |]
      ==> (?a, ?b) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Equiv_Relations.refines_equiv_class_eq",
     "[| ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> ?R `` ?S `` {?a} = ?S `` {?a}",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Equiv_Relations.refines_equiv_class_eq2",
     "[| ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> ?S `` ?R `` {?a} = ?S `` {?a}",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Equiv_Relations.eq_equiv_class",
     "[| ?r `` {?a} = ?r `` {?b}; equiv ?A ?r; ?b : ?A |]
      ==> (?a, ?b) : ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4))),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 3)
           ))),
    ("Wellorder_Extension.extension_onD",
     "[| extension_on ?A ?r ?s; ?x : ?A; ?y : ?A; (?x, ?y) : ?s |]
      ==> (?x, ?y) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Euclidean_Division.split_div'",
     "?P (?m div ?n) =
      (?n = 0 & ?P 0 | (EX q. (?n * q <= ?m & ?m < ?n * Suc q) & ?P q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app (template_var 2, template_hole 5))),
             template_app (template_hole 4, t_empty))
           ))),
    ("Deriv.DERIV_power",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      ((%x. ?f x ^ ?n) has_field_derivative
       of_nat ?n * (?D * ?f ?x ^ (?n - Suc 0)))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_var 4, template_var 2)),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app (template_hole 1, template_hole 0)))))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1))
           ))),
    ("Deriv.DERIV_power_Suc",
     "(?f has_field_derivative ?D) (at ?x within ?s) ==>
      ((%x. ?f x ^ Suc ?n) has_field_derivative
       ((1::?'a) + of_nat ?n) * (?D * ?f ?x ^ ?n))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app (template_hole 0, template_var 0))),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_var 4, template_var 2)),
                     template_var 0)))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1))
           ))),
    ("Deriv.DERIV_sum",
     "(!!n. n : ?S ==> ((%x. ?f x n) has_field_derivative ?f' ?x n) ?F) ==>
      ((%x. sum (?f x) ?S) has_field_derivative sum (?f' ?x) ?S) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 1)),
                 template_var 4)),
             template_var 0)
           ))),
    ("Limits.LIMSEQ_I",
     "(!!r. 0 < r ==> EX no. ALL n>=no. norm (?X n - ?L) < r) ==>
      ?X \<longlonglongrightarrow> ?L",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Wellorder_Embedding.iso_iff4",
     "[| Well_order ?r; Well_order ?r' |]
      ==> iso ?r ?r' ?f =
          (embed ?r ?r' ?f & embed ?r' ?r (inv_into (Field ?r) ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 8, template_var 2)),
               template_var 0)))))),
    ("Relation.conversepE",
     "[| ?r^--1 ?a1.0 ?a2.0;
         !!a b. [| ?a1.0 = b; ?a2.0 = a; ?r a b |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Type.mem_case_prodE",
     "[| ?z : (case ?p of (x, xa) => ?c x xa);
         !!x y. [| ?p = (x, y); ?z : ?c x y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_diff",
     "[| (?f has_field_derivative ?D) (at ?x within ?s);
         (?g has_field_derivative ?E) (at ?x within ?s) |]
      ==> ((%x. ?f x - ?g x) has_field_derivative ?D - ?E)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))
           ))),
    ("Deriv.DERIV_add",
     "[| (?f has_field_derivative ?D) (at ?x within ?s);
         (?g has_field_derivative ?E) (at ?x within ?s) |]
      ==> ((%x. ?f x + ?g x) has_field_derivative ?D + ?E)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))
           ))),
    ("Product_Type.case_prodE",
     "[| case ?p of (a, b) => ?c a b;
         !!x y. [| ?p = (x, y); ?c x y |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Relation.relcompEpair",
     "[| (?a, ?c) : ?r O ?s; !!b. [| (?a, b) : ?r; (b, ?c) : ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_image_chain",
     "[| (?f has_field_derivative ?Da) (at (?g ?x) within ?g ` ?s);
         (?g has_field_derivative ?Db) (at ?x within ?s) |]
      ==> (?f o ?g has_field_derivative ?Da * ?Db) (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_var 3, template_var 2)),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("Divides.mod_eq_nat2E",
     "[| ?m mod ?q = ?n mod ?q; ?m <= ?n;
         !!s. ?n = ?m + ?q * s ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 2)),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Divides.mod_eq_nat1E",
     "[| ?m mod ?q = ?n mod ?q; ?n <= ?m;
         !!s. ?m = ?n + ?q * s ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.INF2_E",
     "[| Inf (?B ` ?A) ?b ?c; ?B ?a ?b ?c ==> ?thesis;
         ?a ~: ?A ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_var 5, template_var 1),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 4)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.INT_E",
     "[| ?b : \<Inter> (?B ` ?A); ?b : ?B ?a ==> ?R; ?a ~: ?A ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 2)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app (template_var 3, template_var 1))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Relation.transE",
     "[| trans ?r; (?x, ?y) : ?r; (?y, ?z) : ?r;
         (?x, ?z) : ?r ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 4)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_var 4)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Real_Vector_Spaces.LIMSEQ_iff_nz",
     "?X \<longlonglongrightarrow> ?L =
      (ALL r>0. EX no>0. ALL n>=no. dist (?X n) ?L < r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 1),
           template_app (template_hole 12, template_var 0)),
         template_hole 11),
       template_app (template_hole 10, t_empty))),
    ("Equiv_Relations.equiv_class_eq_iff",
     "equiv ?A ?r ==>
      ((?x, ?y) : ?r) = (?r `` {?x} = ?r `` {?y} & ?x : ?A & ?y : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_var 2)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1))),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 1)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)))
             )))),
    ("List.extract_SomeE",
     "List.extract ?P ?xs = Some (?ys, ?y, ?zs) ==>
      ?xs = ?ys @ ?y # ?zs & ?P ?y & ~ (EX y:set ?ys. ?P y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 4),
            template_var 3),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_var 4, template_var 1)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   t_empty))))
           ))),
    ("Old_Datatype.apfst_convE",
     "[| ?q = apfst ?f ?p;
         !!x y. [| ?p = (x, y); ?q = (?f x, y) |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_compose_FDERIV",
     "[| (?f has_real_derivative ?f') (at (?g ?x));
         (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. ?f (?g x)) has_derivative (%x. ?g' x * ?f'))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_var 3, template_var 2)),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), t_empty),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("NthRoot.sgn_power_injE",
     "[| sgn ?a * \<bar>?a\<bar> ^ ?n = ?x;
         ?x = sgn ?b * \<bar>?b\<bar> ^ ?n; 0 < ?n |]
      ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3)),
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_var 2)),
          template_var 1),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0)),
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_var 2))),
        template_inequation (less_than, template_hole 0, template_var 2)],
       template_equation (template_var 3, template_var 0))),
    ("Equiv_Relations.finite_refines_card_le",
     "[| finite (?A // ?R); ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> card (?A // ?S) <= card (?A // ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1))))),
    ("Fun.bij_pointE",
     "[| bij ?f;
         !!x. [| ?y = ?f x; !!x'. ?y = ?f x' ==> x' = x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("HOL.alt_ex1E",
     "[| EX! x. ?P x;
         !!x. [| ?P x; ALL y y'. ?P y & ?P y' --> y = y' |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Extraction.exE_realizer",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q (?f x y) |]
      ==> ?Q (let (x, y) = ?p in ?f x y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, t_empty)))
           ))),
    ("List.split_list_propE",
     "[| EX x:set ?xs. ?P x;
         !!ys x zs. [| ?xs = ys @ x # zs; ?P x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Type.case_prodE'",
     "[| (case ?p of (a, b) => ?c a b) ?z;
         !!x y. [| ?p = (x, y); ?c x y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Type.case_prodE2",
     "[| ?Q (case ?z of (a, b) => ?P a b);
         !!x y. [| ?z = (x, y); ?Q (?P x y) |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 4, t_empty), template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Nat.lessE",
     "[| ?i < ?k; ?k = Suc ?i ==> ?P;
         !!j. [| ?i < j; ?k = Suc j |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclpE",
     "[| ?r^** ?x ?z; ?x = ?z ==> ?P;
         !!y. [| ?r ?x y; ?r^** y ?z |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_tranclpE",
     "[| ?r^++ ?x ?z; ?r ?x ?z ==> ?P;
         !!y. [| ?r ?x y; ?r^++ y ?z |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Enum.max_ext_eq",
     "max_ext ?R =
      {(X, Y).
       finite X &
       finite Y & Y ~= {} & (ALL x. x : X --> (EX xa:Y. (x, xa) : ?R))}",
     template_equation
      (template_app (template_hole 13, template_var 0),
       template_app
        (template_hole 12, template_app (template_hole 11, t_empty)))),
    ("Topological_Spaces.LIMSEQ_SEQ_conv",
     "(ALL S.
          (ALL n. S n ~= ?a) & S \<longlonglongrightarrow> ?a -->
          (%n. ?X (S n)) \<longlonglongrightarrow> ?L) =
      ?X \<midarrow>?a\<rightarrow> ?L",
     template_equation
      (template_app (template_hole 13, t_empty),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("Wellorder_Extension.extension_onI",
     "(!!x y. [| x : ?A; y : ?A; (x, y) : ?s |] ==> (x, y) : ?r) ==>
      extension_on ?A ?r ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Wellorder_Embedding.embedS_or_iso",
     "[| Well_order ?r; Well_order ?r' |]
      ==> (EX g. embedS ?r ?r' g) |
          (EX h. embedS ?r' ?r h) | (EX f. iso ?r ?r' f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app
                (template_hole 5, template_app (template_hole 2, t_empty)),
               template_app (template_hole 4, t_empty)))
           ))),
    ("Set.subset_UnE",
     "[| ?C <= ?A Un ?B;
         !!A' B'. [| A' <= ?A; B' <= ?B; ?C = A' Un B' |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Old_Datatype.uprodE",
     "[| ?c : uprod ?A ?B;
         !!x y. [| x : ?A; y : ?B; ?c = Scons x y |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("NthRoot.DERIV_odd_real_root",
     "[| odd ?n; ?x ~= 0 |]
      ==> (root ?n has_real_derivative
           inverse (real ?n * root ?n ?x ^ (?n - Suc 0)))
           (at ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_hole 15,
                      template_app (template_hole 14, template_hole 13))),
                  template_var 1)
                )
            ),
        template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app (template_hole 3, template_hole 2)))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Equiv_Relations.quotient_diff1",
     "[| inj_on (%a. {a} // ?r) ?A; ?a : ?A |]
      ==> (?A - {?a}) // ?r = ?A // ?r - {?a} // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4))),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_var 2))))),
    ("Transitive_Closure.relpow_Suc_E2",
     "[| (?x, ?z) : ?R ^^ Suc ?n;
         !!y. [| (?x, y) : ?R; (y, ?z) : ?R ^^ ?n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_Suc_E",
     "[| (?x, ?z) : ?R ^^ Suc ?n;
         !!y. [| (?x, y) : ?R ^^ ?n; (y, ?z) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_chain3",
     "[| !!x. (?g has_field_derivative ?g' x) (at x);
         (?f has_field_derivative ?f') (at ?x) |]
      ==> ((%x. ?g (?f x)) has_field_derivative ?f' * ?g' (?f ?x)) (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_var 3,
                   template_app (template_var 2, template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))
           ))),
    ("Deriv.DERIV_pos_imp_increasing_at_bot",
     "[| !!x. x <= ?b ==> EX y. (?f has_real_derivative y) (at x) & 0 < y;
         (?f \<longlongrightarrow> ?flim) at_bot |]
      ==> ?flim < ?f ?b",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_var 1, template_var 2)))),
    ("Deriv.DERIV_neg_imp_decreasing_at_top",
     "[| !!x. ?b <= x ==> EX y. (?f has_real_derivative y) (at x) & y < 0;
         (?f \<longlongrightarrow> ?flim) at_top |]
      ==> ?flim < ?f ?b",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_var 1, template_var 2)))),
    ("Equiv_Relations.eq_equiv_class_iff",
     "[| equiv ?A ?r; ?x : ?A; ?y : ?A |]
      ==> (?r `` {?x} = ?r `` {?y}) = ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2))),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Equiv_Relations.eq_equiv_class_iff2",
     "[| equiv ?A ?r; ?x : ?A; ?y : ?A |]
      ==> ({?x} // ?r = {?y} // ?r) = ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Topological_Spaces.LIMSEQ_le",
     "[| ?X \<longlonglongrightarrow> ?x; ?Y \<longlonglongrightarrow> ?y;
         EX N. ALL n>=N. ?X n <= ?Y n |]
      ==> ?x <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app (template_hole 6, template_var 2)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_app (template_hole 6, template_var 0)),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Enum.map_of_zip_enum_inject",
     "[| length ?xs = length enum_class.enum;
         length ?ys = length enum_class.enum;
         the o map_of (zip enum_class.enum ?xs) =
         the o map_of (zip enum_class.enum ?ys) |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_hole 6)),
        template_equation
         (template_app (template_hole 8, template_var 0),
          template_app (template_hole 7, template_hole 6)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_hole 3),
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_hole 6),
                template_var 1))),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_hole 6),
                template_var 0))))],
       template_equation (template_var 1, template_var 0))),
    ("Deriv.DERIV_local_const",
     "[| (?f has_real_derivative ?l) (at ?x); 0 < ?d;
         ALL y. \<bar>?x - y\<bar> < ?d --> ?f ?x = ?f y |]
      ==> ?l = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_inequation (less_than, template_hole 5, template_var 0),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 2, template_hole 5))),
    ("Deriv.DERIV_local_max",
     "[| (?f has_real_derivative ?l) (at ?x); 0 < ?d;
         ALL y. \<bar>?x - y\<bar> < ?d --> ?f y <= ?f ?x |]
      ==> ?l = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_hole 8))
            ),
        template_inequation (less_than, template_hole 6, template_var 0),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 2, template_hole 6))),
    ("Deriv.DERIV_local_min",
     "[| (?f has_real_derivative ?l) (at ?x); 0 < ?d;
         ALL y. \<bar>?x - y\<bar> < ?d --> ?f ?x <= ?f y |]
      ==> ?l = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_hole 8))
            ),
        template_inequation (less_than, template_hole 6, template_var 0),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 2, template_hole 6))),
    ("Complete_Partial_Order.chainE",
     "[| Complete_Partial_Order.chain ?ord ?S; ?x : ?S; ?y : ?S;
         ?ord ?x ?y ==> ?thesis; ?ord ?y ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_LIM_iff",
     "(%h. (?f (?a + h) - ?f ?a) / h) \<midarrow>0::?'a\<rightarrow> ?D =
      (%x. (?f x - ?f ?a) / (x - ?a)) \<midarrow>?a\<rightarrow> ?D",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_app
        (template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 0)))),
    ("Topological_Spaces.LIMSEQ_SEQ_conv1",
     "?f \<midarrow>?a\<rightarrow> ?l ==>
      ALL S.
         (ALL n. S n ~= ?a) & S \<longlonglongrightarrow> ?a -->
         (%n. ?f (S n)) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app (template_hole 12, template_var 1)),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_hole 10))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Topological_Spaces.LIMSEQ_SEQ_conv2",
     "ALL S.
         (ALL n. S n ~= ?a) & S \<longlonglongrightarrow> ?a -->
         (%n. ?f (S n)) \<longlonglongrightarrow> ?l ==>
      ?f \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Product_Type.SigmaE",
     "[| ?c : Sigma ?A ?B;
         !!x y. [| x : ?A; y : ?B x; ?c = (x, y) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_inverse'",
     "[| (?f has_field_derivative ?D) (at ?x within ?s);
         ?f ?x ~= (0::?'a) |]
      ==> ((%x. inverse (?f x)) has_field_derivative
           - (inverse (?f ?x) * ?D * inverse (?f ?x)))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 3, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_hole 2,
                           template_app (template_var 3, template_var 1))),
                       template_var 2)),
                   template_app
                    (template_hole 2,
                     template_app (template_var 3, template_var 1))))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))
           ))),
    ("Deriv.DERIV_inverse_fun",
     "[| (?f has_field_derivative ?d) (at ?x within ?s);
         ?f ?x ~= (0::?'a) |]
      ==> ((%x. inverse (?f x)) has_field_derivative
           - (?d * inverse (?f ?x ^ Suc (Suc 0))))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 3, template_var 1),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_var 3, template_var 1)),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1, template_hole 0))))))),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0))
           ))),
    ("Product_Type.prod_fun_imageE",
     "[| ?c : map_prod ?f ?g ` ?R;
         !!x y. [| ?c = (?f x, ?g y); (x, y) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Finite_Set.inf_img_fin_domE",
     "[| finite (?f ` ?A); infinite ?A;
         !!y. [| y : ?f ` ?A; infinite (?f -` {y}) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Extraction.disjE_realizer2",
     "[| case ?x of None => ?P | Some q => ?Q q; ?P ==> ?R ?f;
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of None => ?f | Some q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5), t_empty),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1), t_empty),
               template_var 3))
           ))),
    ("Deriv.CARAT_DERIV",
     "(?f has_field_derivative ?l) (at ?x) =
      (EX g. (ALL z. ?f z - ?f ?x = g z * (z - ?x)) &
             isCont g ?x & g ?x = ?l)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_hole 7)),
       template_app (template_hole 6, t_empty))),
    ("Real.Rats_abs_nat_div_natE",
     "[| ?x : \<rat>;
         !!m n.
            [| n ~= 0; \<bar>?x\<bar> = real m / real n; coprime m n |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_const_average",
     "[| ?a ~= ?b; !!x. (?v has_real_derivative ?k) (at x) |]
      ==> ?v ((?a + ?b) / 2) = (?v ?a + ?v ?b) / 2",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 1, template_var 3)),
               template_app (template_var 1, template_var 2))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Transcendental.DERIV_fun_powr",
     "[| (?g has_real_derivative ?m) (at ?x); 0 < ?g ?x |]
      ==> ((%x. ?g x powr ?r) has_real_derivative
           ?r * ?g ?x powr (?r - real 1) * ?m)
           (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_var 3, template_var 1)),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app
                          (template_hole 1, template_hole 0))))),
                 template_var 2)),
             template_app
              (template_app (template_hole 8, template_var 1),
               template_hole 7))
           ))),
    ("Deriv.DERIV_cong_ev",
     "[| ?x = ?y; \<forall>\<^sub>F x in nhds ?x. ?f x = ?g x; ?u = ?v |]
      ==> (?f has_field_derivative ?u) (at ?x) =
          (?g has_field_derivative ?v) (at ?y)",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty),
              template_app (template_hole 4, template_var 5))
            ),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_hole 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_hole 0))))),
    ("Set.equalityCE",
     "[| ?A = ?B; [| ?c : ?A; ?c : ?B |] ==> ?P;
         [| ?c ~: ?A; ?c ~: ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)
                   )
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Countable_Set_Type.cequalityCE",
     "[| ?A = ?B; [| cin ?c ?A; cin ?c ?B |] ==> ?P;
         [| ~ cin ?c ?A; ~ cin ?c ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)
                   )
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Euclidean_Division.mod_induct",
     "[| ?P ?n; ?n < ?p; ?m < ?p;
         !!n. [| n < ?p; ?P n |] ==> ?P (Suc n mod ?p) |]
      ==> ?P ?m",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_than, template_var 0, template_var 1),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 3, template_var 0)))),
    ("Euclidean_Division.split_div",
     "?P (?m div ?n) =
      ((?n = 0 --> ?P 0) &
       (?n ~= 0 --> (ALL i j. j < ?n --> ?m = ?n * i + j --> ?P i)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app (template_var 2, template_hole 5))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app (template_hole 3, t_empty)))
           ))),
    ("Euclidean_Division.split_mod",
     "?P (?m mod ?n) =
      ((?n = 0 --> ?P ?m) &
       (?n ~= 0 --> (ALL i j. j < ?n --> ?m = ?n * i + j --> ?P j)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app (template_var 2, template_var 1))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app (template_hole 3, t_empty)))
           ))),
    ("Equiv_Relations.congruent2I'",
     "(!!y1 z1 y2 z2.
          [| (y1, z1) : ?r1.0; (y2, z2) : ?r2.0 |]
          ==> ?f y1 y2 = ?f z1 z2) ==>
      congruent2 ?r1.0 ?r2.0 ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Deriv.DERIV_mult'",
     "[| (?f has_field_derivative ?D) (at ?x within ?s);
         (?g has_field_derivative ?E) (at ?x within ?s) |]
      ==> ((%x. ?f x * ?g x) has_field_derivative ?f ?x * ?E + ?D * ?g ?x)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_var 5, template_var 3)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_var 1, template_var 3)))),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2))
           ))),
    ("Deriv.DERIV_mult",
     "[| (?f has_field_derivative ?Da) (at ?x within ?s);
         (?g has_field_derivative ?Db) (at ?x within ?s) |]
      ==> ((%x. ?f x * ?g x) has_field_derivative ?Da * ?g ?x + ?Db * ?f ?x)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app (template_var 1, template_var 3))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_var 5, template_var 3)))),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2))
           ))),
    ("Deriv.DERIV_power_int",
     "[| (?f has_field_derivative ?d) (at ?x within ?s);
         ?f ?x ~= (0::?'a) |]
      ==> ((%x. ?f x powi ?n) has_field_derivative
           of_int ?n * ?f ?x powi (?n - 1) * ?d)
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 4, template_var 2),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_var 4, template_var 2)),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_hole 0)))),
                 template_var 3)),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1))
           ))),
    ("Wellfounded.wfE_min",
     "[| wf ?R; ?x : ?Q;
         !!z. [| z : ?Q; !!y. (y, z) : ?R ==> y ~: ?Q |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Finite_Set.inf_img_fin_domE'",
     "[| finite (?f ` ?A); infinite ?A;
         !!y. [| y : ?f ` ?A; infinite (?f -` {y} Int ?A) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Option.case_optionE",
     "[| case ?x of None => ?P | Some y => ?Q y;
         [| ?x = None; ?P |] ==> ?thesis;
         !!y. [| ?x = Some y; ?Q y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3), t_empty),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_implication
           ([template_predicate (template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.congruent2_implies_congruent_UN",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0; congruent2 ?r1.0 ?r2.0 ?f;
         ?a : ?A2.0 |]
      ==> (%x1. \<Union> (?f x1 ` ?r2.0 `` {?a})) respects ?r1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 4), t_empty)
           ))),
    ("Deriv.DERIV_neg_imp_decreasing",
     "[| ?a < ?b;
         !!x. [| ?a <= x; x <= ?b |]
              ==> EX y. (?f has_real_derivative y) (at x) & y < 0 |]
      ==> ?f ?b < ?f ?a",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_than, template_app (template_var 0, template_var 1),
         template_app (template_var 0, template_var 2)))),
    ("Deriv.DERIV_pos_imp_increasing",
     "[| ?a < ?b;
         !!x. [| ?a <= x; x <= ?b |]
              ==> EX y. (?f has_real_derivative y) (at x) & 0 < y |]
      ==> ?f ?a < ?f ?b",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_than, template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Deriv.DERIV_nonpos_imp_nonincreasing",
     "[| ?a <= ?b;
         !!x. [| ?a <= x; x <= ?b |]
              ==> EX y. (?f has_real_derivative y) (at x) & y <= 0 |]
      ==> ?f ?b <= ?f ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 1),
         template_app (template_var 0, template_var 2)))),
    ("Deriv.DERIV_nonneg_imp_nondecreasing",
     "[| ?a <= ?b;
         !!x. [| ?a <= x; x <= ?b |]
              ==> EX y. (?f has_real_derivative y) (at x) & 0 <= y |]
      ==> ?f ?a <= ?f ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Deriv.DERIV_pos_inc_right",
     "[| (?f has_real_derivative ?l) (at ?x); 0 < ?l |]
      ==> EX d>0. ALL h>0. h < d --> ?f ?x < ?f (?x + h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 8, template_var 0),
                template_hole 7))
            ),
        template_inequation (less_than, template_hole 5, template_var 1)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Deriv.DERIV_pos_inc_left",
     "[| (?f has_real_derivative ?l) (at ?x); 0 < ?l |]
      ==> EX d>0. ALL h>0. h < d --> ?f (?x - h) < ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 8, template_var 0),
                template_hole 7))
            ),
        template_inequation (less_than, template_hole 5, template_var 1)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Deriv.DERIV_neg_dec_left",
     "[| (?f has_real_derivative ?l) (at ?x); ?l < 0 |]
      ==> EX d>0. ALL h>0. h < d --> ?f ?x < ?f (?x - h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 8, template_var 0),
                template_hole 7))
            ),
        template_inequation (less_than, template_var 1, template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Deriv.DERIV_neg_dec_right",
     "[| (?f has_real_derivative ?l) (at ?x); ?l < 0 |]
      ==> EX d>0. ALL h>0. h < d --> ?f (?x + h) < ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 8, template_var 0),
                template_hole 7))
            ),
        template_inequation (less_than, template_var 1, template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Wellfounded.wfE_min'",
     "[| wf ?R; ?Q ~= {};
         !!z. [| z : ?Q; !!y. (y, z) : ?R ==> y ~: ?Q |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("NthRoot.DERIV_even_real_root",
     "[| 0 < ?n; even ?n; ?x < 0 |]
      ==> (root ?n has_real_derivative
           inverse (- real ?n * root ?n ?x ^ (?n - Suc 0)))
           (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_hole 13))),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_hole 11)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 1))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app
                        (template_hole 2, template_hole 17)))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Wellorder_Embedding.comp_embedS",
     "[| Well_order ?r; Well_order ?r'; Well_order ?r''; embedS ?r ?r' ?f;
         embedS ?r' ?r'' ?f' |]
      ==> embedS ?r ?r'' (?f' o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 4)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Deriv.DERIV_isconst_end",
     "[| ?a < ?b; continuous_on {?a..?b} ?f;
         !!x. [| ?a < x; x < ?b |] ==> (?f has_real_derivative 0) (at x) |]
      ==> ?f ?b = ?f ?a",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_var 0, template_var 1),
         template_app (template_var 0, template_var 2)))),
    ("Transitive_Closure.rtranclE",
     "[| (?a, ?b) : ?r^*; ?a = ?b ==> ?thesis;
         !!y. [| (?a, y) : ?r^*; (y, ?b) : ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclE",
     "[| (?x, ?z) : ?r^*; ?x = ?z ==> ?P;
         !!y. [| (?x, y) : ?r; (y, ?z) : ?r^* |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Record.update_accessor_congruence_unfoldE",
     "[| Record.iso_tuple_update_accessor_cong_assist ?upd ?ac; ?r = ?r';
         ?ac ?r' = ?v'; !!v. v = ?v' ==> ?f v = ?f' v |]
      ==> ?upd ?f ?r = ?upd ?f' ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_var 5)
            ),
        template_equation (template_var 4, template_var 3),
        template_equation
         (template_app (template_var 5, template_var 3), template_var 2),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 6, template_var 1), template_var 4),
         template_app
          (template_app (template_var 6, template_var 0),
           template_var 3)))),
    ("Record.update_accessor_congruence_foldE",
     "[| Record.iso_tuple_update_accessor_cong_assist ?upd ?ac; ?r = ?r';
         ?ac ?r' = ?v'; !!v. ?v' = v ==> ?f v = ?f' v |]
      ==> ?upd ?f ?r = ?upd ?f' ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_var 5)
            ),
        template_equation (template_var 4, template_var 3),
        template_equation
         (template_app (template_var 5, template_var 3), template_var 2),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 6, template_var 1), template_var 4),
         template_app
          (template_app (template_var 6, template_var 0),
           template_var 3)))),
    ("Relation.relcompE",
     "[| ?xz : ?r O ?s;
         !!x y z. [| ?xz = (x, z); (x, y) : ?r; (y, z) : ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.rtrancl_Un_separatorE",
     "[| (?a, ?b) : (?P Un ?Q)^*;
         ALL x y. (?a, x) : ?P^* --> (x, y) : ?Q --> x = y |]
      ==> (?a, ?b) : ?P^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_Un_separator_converseE",
     "[| (?a, ?b) : (?P Un ?Q)^*;
         ALL x y. (x, ?b) : ?P^* --> (y, x) : ?Q --> y = x |]
      ==> (?a, ?b) : ?P^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("GCD.Euclid_induct",
     "[| !!a b. ?P a b = ?P b a; !!a. ?P a 0;
         !!a b. ?P a b --> ?P a (a + b) |]
      ==> ?P ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Equiv_Relations.UN_equiv_class_type",
     "[| equiv ?A ?r; ?f respects ?r; ?X : ?A // ?r;
         !!x. x : ?A ==> ?f x : ?B |]
      ==> \<Union> (?f ` ?X) : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 1))),
             template_var 0)
           ))),
    ("List.lexord_sufE",
     "[| (?xs @ ?zs, ?ys @ ?qs) : lexord ?r; ?xs ~= ?ys;
         length ?xs = length ?ys; length ?zs = length ?qs |]
      ==> (?xs, ?ys) : lexord ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (template_equation (template_var 4, template_var 2)),
        template_equation
         (template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 2)),
        template_equation
         (template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 2)),
             template_app (template_hole 4, template_var 0))
           ))),
    ("Equiv_Relations.quotient_eq_iff",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?Y : ?A // ?r; ?x : ?X; ?y : ?Y |]
      ==> (?X = ?Y) = ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 4)))),
    ("Equiv_Relations.UN_UN_split_split_eq",
     "(UN (x1, x2):?X. UN (y1, y2):?Y. ?A x1 x2 y1 y2) =
      (UN x:?X.
          UN y:?Y.
             case x of (x1, x2) => case y of (y1, y2) => ?A x1 x2 y1 y2)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Equiv_Relations.equivclp_induct",
     "[| equivclp ?r ?a ?b; ?P ?a;
         !!y z. [| equivclp ?r ?a y; ?r y z | ?r z y; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Equiv_Relations.converse_equivclp_induct",
     "[| equivclp ?r ?a ?b; ?P ?b;
         !!y z. [| ?r y z | ?r z y; equivclp ?r z ?b; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Transitive_Closure.tranclE",
     "[| (?a, ?b) : ?r^+; (?a, ?b) : ?r ==> ?thesis;
         !!c. [| (?a, c) : ?r^+; (c, ?b) : ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_tranclE",
     "[| (?x, ?z) : ?r^+; (?x, ?z) : ?r ==> ?P;
         !!y. [| (?x, y) : ?r; (y, ?z) : ?r^+ |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.quotient_eqI",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?Y : ?A // ?r; ?x : ?X; ?y : ?Y;
         (?x, ?y) : ?r |]
      ==> ?X = ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_equation (template_var 3, template_var 2))),
    ("List.split_list_last_propE",
     "[| EX x:set ?xs. ?P x;
         !!ys x zs.
            [| ?xs = ys @ x # zs; ?P x; ALL z:set zs. ~ ?P z |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("List.split_list_first_propE",
     "[| EX x:set ?xs. ?P x;
         !!ys x zs.
            [| ?xs = ys @ x # zs; ?P x; ALL y:set ys. ~ ?P y |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.sum_fun_comp",
     "[| finite ?S; finite ?R; ?g ` ?S <= ?R |]
      ==> (SUM x:?S. ?f (?g x)) =
          (SUM y:?R. of_nat (card {x: ?S. ?g x = y}) * ?f y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty), template_var 3),
         template_app
          (template_app (template_hole 7, t_empty), template_var 2)))),
    ("Old_Datatype.usumE",
     "[| ?u : usum ?A ?B; !!x. [| x : ?A; ?u = In0 x |] ==> ?P;
         !!y. [| y : ?B; ?u = In1 y |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Sum_Type.PlusE",
     "[| ?u : ?A <+> ?B; !!x. [| x : ?A; ?u = Inl x |] ==> ?P;
         !!y. [| y : ?B; ?u = Inr y |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Real_Vector_Spaces.increasing_LIMSEQ",
     "[| !!n. ?f n <= ?f (Suc n); !!n. ?f n <= ?l;
         !!e. 0 < e ==> EX n. ?l <= ?f n + e |]
      ==> ?f \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Deriv.has_derivative_iff_Ex",
     "(?f has_derivative ?f') (at ?x) =
      (bounded_linear ?f' &
       (EX e. (ALL h. ?f (?x + h) = ?f ?x + ?f' h + e h) &
              (%h. norm (e h) / norm h) \<midarrow>0::?'a\<rightarrow> 0))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 16, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 15, template_var 0),
           template_hole 14)),
       template_app
        (template_app
          (template_hole 13,
           template_app (template_hole 12, template_var 1)),
         template_app (template_hole 11, t_empty)))),
    ("Extraction.disjE_realizer",
     "[| case ?x of Inl p => ?P p | Inr q => ?Q q; !!p. ?P p ==> ?R (?f p);
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of Inl p => ?f p | Inr q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), t_empty),
               template_var 3))
           ))),
    ("Deriv.DERIV_isconst3",
     "[| ?a < ?b; ?x : {?a<..<?b}; ?y : {?a<..<?b};
         !!x. x : {?a<..<?b} ==> (?f has_real_derivative 0) (at x) |]
      ==> ?f ?x = ?f ?y",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Deriv.DERIV_neg_imp_decreasing_open",
     "[| ?a < ?b;
         !!x. [| ?a < x; x < ?b |]
              ==> EX y. (?f has_real_derivative y) (at x) & y < 0;
         continuous_on {?a..?b} ?f |]
      ==> ?f ?b < ?f ?a",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_than, template_app (template_var 0, template_var 1),
         template_app (template_var 0, template_var 2)))),
    ("Deriv.DERIV_pos_imp_increasing_open",
     "[| ?a < ?b;
         !!x. [| ?a < x; x < ?b |]
              ==> EX y. (?f has_real_derivative y) (at x) & 0 < y;
         continuous_on {?a..?b} ?f |]
      ==> ?f ?a < ?f ?b",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_than, template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Deriv.DERIV_chain_s",
     "[| !!x. x : ?s ==> (?g has_field_derivative ?g' x) (at x);
         (?f has_field_derivative ?f') (at ?x); ?f ?x : ?s |]
      ==> ((%x. ?g (?f x)) has_field_derivative ?f' * ?g' (?f ?x)) (at ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_var 2, template_var 0)),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_var 3,
                   template_app (template_var 2, template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))
           ))),
    ("Old_Datatype.dprodE",
     "[| ?c : dprod ?r ?s;
         !!x y x' y'.
            [| (x, x') : ?r; (y, y') : ?s; ?c = (Scons x y, Scons x' y') |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("List.listrel1E",
     "[| (?xs, ?ys) : listrel1 ?r;
         !!x y us vs.
            [| (x, y) : ?r; ?xs = us @ x # vs; ?ys = us @ y # vs |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("NthRoot.DERIV_real_sqrt_generic",
     "[| ?x ~= 0; 0 < ?x ==> ?D = inverse (sqrt ?x) / 2;
         ?x < 0 ==> ?D = - inverse (sqrt ?x) / 2 |]
      ==> (sqrt has_real_derivative ?D) (at ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_implication
         ([template_inequation
            (less_than, template_hole 11, template_var 1)],
          template_equation
           (template_var 0,
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))))),
        template_implication
         ([template_inequation
            (less_than, template_var 1, template_hole 11)],
          template_equation
           (template_var 0,
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 7),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Transitive_Closure.relpowp_E2",
     "[| (?P ^^ ?n) ?x ?z; [| ?n = 0; ?x = ?z |] ==> ?Q;
         !!y m. [| ?n = Suc m; ?P ?x y; (?P ^^ m) y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 4)],
          template_implication
           ([template_equation (template_var 2, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_E",
     "[| (?P ^^ ?n) ?x ?z; [| ?n = 0; ?x = ?z |] ==> ?Q;
         !!y m. [| ?n = Suc m; (?P ^^ m) ?x y; ?P y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 4)],
          template_implication
           ([template_equation (template_var 2, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_isconst2",
     "[| ?a < ?b; continuous_on {?a..?b} ?f;
         !!x. [| ?a < x; x < ?b |] ==> (?f has_real_derivative 0) (at x);
         ?a <= ?x; ?x <= ?b |]
      ==> ?f ?x = ?f ?a",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 1, template_var 3)))),
    ("Euclidean_Division.divide_int_unfold",
     "sgn ?k * int ?m div (sgn ?l * int ?n) =
      (if sgn ?l = 0 | sgn ?k = 0 | ?n = 0 then 0
       else if sgn ?k = sgn ?l then int (?m div ?n)
            else - int (?m div ?n + of_bool (~ ?n dvd ?m)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 3)),
                  template_app (template_hole 11, template_var 2))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 11, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app (template_hole 12, template_var 1)),
                       template_hole 8)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 15,
                           template_app (template_hole 12, template_var 3)),
                         template_hole 8)),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6)))),
               template_hole 8),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app (template_hole 12, template_var 3)),
                     template_app (template_hole 12, template_var 1))),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 0))),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_var 0)),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 2))))))))
           ))),
    ("Wellorder_Embedding.UNION_bij_betw_ofilter",
     "[| Well_order ?r; !!i. i : ?I ==> ofilter ?r (?A i);
         !!i. i : ?I ==> bij_betw ?f (?A i) (?A' i) |]
      ==> bij_betw ?f (\<Union> (?A ` ?I)) (\<Union> (?A' ` ?I))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 4)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 3))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 3)))
           ))),
    ("Deriv.DERIV_divide",
     "[| (?f has_field_derivative ?D) (at ?x within ?s);
         (?g has_field_derivative ?E) (at ?x within ?s);
         ?g ?x ~= (0::?'a) |]
      ==> ((%x. ?f x / ?g x) has_field_derivative
           (?D * ?g ?x - ?f ?x * ?E) / (?g ?x * ?g ?x))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_app (template_var 1, template_var 3))),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_var 5, template_var 3)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 3)),
                   template_app (template_var 1, template_var 3)))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2))
           ))),
    ("List.zip_eq_ConsE",
     "[| zip ?xs ?ys = ?xy # ?xys;
         !!x xs' y ys'.
            [| ?xs = x # xs'; ?ys = y # ys'; ?xy = (x, y);
               ?xys = zip xs' ys' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.DERIV_quotient",
     "[| (?f has_field_derivative ?d) (at ?x within ?s);
         (?g has_field_derivative ?e) (at ?x within ?s);
         ?g ?x ~= (0::?'a) |]
      ==> ((%y. ?f y / ?g y) has_field_derivative
           (?d * ?g ?x - ?e * ?f ?x) / ?g ?x ^ Suc (Suc 0))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_app (template_var 1, template_var 3))),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app (template_var 5, template_var 3)))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_var 1, template_var 3)),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 1, template_hole 0))))),
             template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2))
           ))),
    ("Transitive_Closure.converse_rtranclpE2",
     "[| ?r^** (?xa, ?xb) (?za, ?zb); (?xa, ?xb) = (?za, ?zb) ==> ?P;
         !!a b.
            [| ?r (?xa, ?xb) (a, b); ?r^** (a, b) (?za, ?zb) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.UN_equiv_class2",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0; congruent2 ?r1.0 ?r2.0 ?f;
         ?a1.0 : ?A1.0; ?a2.0 : ?A2.0 |]
      ==> (UN x1:?r1.0 `` {?a1.0}. \<Union> (?f x1 ` ?r2.0 `` {?a2.0})) =
          ?f ?a1.0 ?a2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app (template_hole 2, template_var 5),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))),
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("List.Cons_listrel1E2",
     "[| (?xs, ?y # ?ys) : listrel1 ?r;
         !!x. [| ?xs = x # ?ys; (x, ?y) : ?r |] ==> ?R;
         !!zs. [| ?xs = ?y # zs; (zs, ?ys) : listrel1 ?r |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2))),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("List.Cons_listrel1E1",
     "[| (?x # ?xs, ?ys) : listrel1 ?r;
         !!y. [| ?ys = y # ?xs; (?x, y) : ?r |] ==> ?R;
         !!zs. [| ?ys = ?x # zs; (?xs, zs) : listrel1 ?r |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transcendental.DERIV_powr",
     "[| (?g has_real_derivative ?m) (at ?x); 0 < ?g ?x;
         (?f has_real_derivative ?r) (at ?x) |]
      ==> ((%x. ?g x powr ?f x) has_real_derivative
           ?g ?x powr ?f ?x * (?r * ln (?g ?x) + ?m * ?f ?x / ?g ?x))
           (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_var 4, template_var 2)),
                     template_app (template_var 1, template_var 2))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 1,
                         template_app (template_var 4, template_var 2)))),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app (template_var 1, template_var 2))),
                     template_app (template_var 4, template_var 2))))),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_hole 7))
           ))),
    ("Transcendental.DERIV_arctan_series",
     "\<bar>?x\<bar> < 1 ==>
      ((%x'. \<Sum>k.
                (- 1) ^ k *
                (1 / real (k * 2 + 1) *
                 x' ^ (k * 2 + 1))) has_real_derivative
       (\<Sum>k. (- 1) ^ k * ?x ^ (k * 2)))
       (at ?x)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 16, template_var 0),
          template_hole 15)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, t_empty),
               template_app (template_hole 13, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Transitive_Closure.relpow_E2",
     "[| (?x, ?z) : ?R ^^ ?n; [| ?n = 0; ?x = ?z |] ==> ?P;
         !!y m. [| ?n = Suc m; (?x, y) : ?R; (y, ?z) : ?R ^^ m |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 4, template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_E",
     "[| (?x, ?z) : ?R ^^ ?n; [| ?n = 0; ?x = ?z |] ==> ?P;
         !!y m. [| ?n = Suc m; (?x, y) : ?R ^^ m; (y, ?z) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 4, template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Old_Datatype.dsumE",
     "[| ?w : dsum ?r ?s;
         !!x x'. [| (x, x') : ?r; ?w = (In0 x, In0 x') |] ==> ?P;
         !!y y'. [| (y, y') : ?s; ?w = (In1 y, In1 y') |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Fun.inj_img_insertE",
     "[| inj_on ?f ?A; ?x ~: ?B; insert ?x ?B = ?f ` ?A;
         !!x' A'.
            [| x' ~: A'; ?A = insert x' A'; ?x = ?f x'; ?B = ?f ` A' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclE2",
     "[| ((?xa, ?xb), ?za, ?zb) : ?r^*; (?xa, ?xb) = (?za, ?zb) ==> ?P;
         !!a b.
            [| ((?xa, ?xb), a, b) : ?r; ((a, b), ?za, ?zb) : ?r^* |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Deriv.has_derivative_at_within_iff_Ex",
     "[| ?x : ?S; open ?S |]
      ==> (?f has_derivative ?f') (at ?x within ?S) =
          (bounded_linear ?f' &
           (EX e. (ALL h.
                      ?x + h : ?S --> ?f (?x + h) = ?f ?x + ?f' h + e h) &
                  (%h. norm (e h) / norm h) \<midarrow>0::?'a
                  \<rightarrow> 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 19, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 17, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 16, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 15,
             template_app (template_hole 14, template_var 0)),
           template_app (template_hole 13, t_empty))))),
    ("Deriv.DERIV_inverse_function",
     "[| (?f has_real_derivative ?D) (at (?g ?x)); ?D ~= 0; ?a < ?x;
         ?x < ?b; !!y. [| ?a < y; y < ?b |] ==> ?f (?g y) = y;
         isCont ?g ?x |]
      ==> (?g has_real_derivative inverse ?D) (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_var 3, template_var 2)),
                template_hole 7))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 4)),
        template_inequation (less_than, template_var 1, template_var 2),
        template_inequation (less_than, template_var 2, template_var 0),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_hole 7)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_app (template_hole 0, template_var 4)),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_hole 7))
           ))),
    ("Equiv_Relations.congruent2_commuteI",
     "[| equiv ?A ?r; !!y z. [| y : ?A; z : ?A |] ==> ?f y z = ?f z y;
         !!y z w. [| w : ?A; (y, z) : ?r |] ==> ?f w y = ?f w z |]
      ==> ?f respects2 ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("Euclidean_Division.modulo_int_unfold",
     "sgn ?k * int ?m mod (sgn ?l * int ?n) =
      (if sgn ?l = 0 | sgn ?k = 0 | ?n = 0 then sgn ?k * int ?m
       else if sgn ?k = sgn ?l then sgn ?l * int (?m mod ?n)
            else sgn ?l *
                 (int (?n * of_bool (~ ?n dvd ?m)) - int (?m mod ?n)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 3)),
                  template_app (template_hole 11, template_var 2))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 11, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app (template_hole 12, template_var 1)),
                       template_hole 8)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 15,
                           template_app (template_hole 12, template_var 3)),
                         template_hole 8)),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6)))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_var 3)),
                 template_app (template_hole 11, template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app (template_hole 12, template_var 3)),
                     template_app (template_hole 12, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_var 1)),
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_var 2)))))),
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 0))))))
           ))),
    ("Transcendental.DERIV_power_series'",
     "[| !!x. x : {- ?R<..<?R} ==>
              summable (%n. ?f n * real (Suc n) * x ^ n);
         ?x0.0 : {- ?R<..<?R}; 0 < ?R |]
      ==> ((%x. \<Sum>n. ?f n * x ^ Suc n) has_real_derivative
           (\<Sum>n. ?f n * real (Suc n) * ?x0.0 ^ n))
           (at ?x0.0)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 2)),
                template_var 2))
            ),
        template_inequation (less_than, template_hole 4, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Equiv_Relations.UN_equiv_class_type2",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0; congruent2 ?r1.0 ?r2.0 ?f;
         ?X1.0 : ?A1.0 // ?r1.0; ?X2.0 : ?A2.0 // ?r2.0;
         !!x1 x2. [| x1 : ?A1.0; x2 : ?A2.0 |] ==> ?f x1 x2 : ?B |]
      ==> (UN x1:?X1.0. \<Union> (?f x1 ` ?X2.0)) : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 6),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2))),
             template_var 0)
           ))),
    ("Equiv_Relations.congruent2I",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0;
         !!y z w. [| w : ?A2.0; (y, z) : ?r1.0 |] ==> ?f y w = ?f z w;
         !!y z w. [| w : ?A1.0; (y, z) : ?r2.0 |] ==> ?f w y = ?f w z |]
      ==> congruent2 ?r1.0 ?r2.0 ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Equiv_Relations.UN_equiv_class_inject",
     "[| equiv ?A ?r; ?f respects ?r;
         \<Union> (?f ` ?X) = \<Union> (?f ` ?Y); ?X : ?A // ?r;
         ?Y : ?A // ?r;
         !!x y. [| x : ?A; y : ?A; ?f x = ?f y |] ==> (x, y) : ?r |]
      ==> ?X = ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, t_empty), template_var 1)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, t_empty), template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Transcendental.DERIV_series'",
     "[| !!n. ((%x. ?f x n) has_real_derivative ?f' ?x0.0 n) (at ?x0.0);
         !!x. x : {?a<..<?b} ==> summable (?f x); ?x0.0 : {?a<..<?b};
         summable (?f' ?x0.0); summable ?L;
         !!n x y.
            [| x : {?a<..<?b}; y : {?a<..<?b} |]
            ==> \<bar>?f x n - ?f y n\<bar> <= ?L n * \<bar>x - y\<bar> |]
      ==> ((%x. suminf (?f x)) has_real_derivative suminf (?f' ?x0.0))
           (at ?x0.0)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_var 4, template_var 3))
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 4, template_var 3))),
             template_app
              (template_app (template_hole 10, template_var 3),
               template_hole 9))
           ))),
    ("NthRoot.DERIV_real_root_generic",
     "[| 0 < ?n; ?x ~= 0;
         [| even ?n; 0 < ?x |]
         ==> ?D = inverse (real ?n * root ?n ?x ^ (?n - Suc 0));
         [| even ?n; ?x < 0 |]
         ==> ?D = - inverse (real ?n * root ?n ?x ^ (?n - Suc 0));
         odd ?n ==> ?D = inverse (real ?n * root ?n ?x ^ (?n - Suc 0)) |]
      ==> (root ?n has_real_derivative ?D) (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 19, template_var 2),
        template_negation
         (template_equation (template_var 1, template_hole 16)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_hole 14,
                     template_app (template_hole 13, template_hole 12))),
                 template_var 2)
               )],
          template_implication
           ([template_inequation
              (less_than, template_hole 16, template_var 1)],
            template_equation
             (template_var 0,
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 2)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 2),
                        template_var 1)),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_app
                       (template_hole 4, template_hole 19)))))))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_hole 14,
                     template_app (template_hole 13, template_hole 12))),
                 template_var 2)
               )],
          template_implication
           ([template_inequation
              (less_than, template_var 1, template_hole 16)],
            template_equation
             (template_var 0,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 2)),
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app (template_hole 6, template_var 2),
                          template_var 1)),
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_app
                         (template_hole 4, template_hole 19))))))))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_hole 14,
                         template_app
                          (template_hole 13, template_hole 12))),
                     template_var 2)
                   )
               )],
          template_equation
           (template_var 0,
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app (template_hole 4, template_hole 19)))))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 6, template_var 2)),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("List.shufflesE",
     "[| ?zs : shuffles ?xs ?ys; [| ?zs = ?xs; ?ys = [] |] ==> ?P;
         [| ?zs = ?ys; ?xs = [] |] ==> ?P;
         !!x xs' z zs'.
            [| ?xs = x # xs'; ?zs = z # zs'; x = z;
               zs' : shuffles xs' ?ys |]
            ==> ?P;
         !!y ys' z zs'.
            [| ?ys = y # ys'; ?zs = z # zs'; y = z;
               zs' : shuffles ?xs ys' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_implication
           ([template_equation (template_var 1, template_hole 4)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 3, template_var 1)],
          template_implication
           ([template_equation (template_var 2, template_hole 4)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0)))]
