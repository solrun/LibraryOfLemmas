Loading theory "Draft.Monads" (required by "Draft.NormalisationMoreTemplates" via "Draft.Normalisation" via "Draft.SeqComposition" via "Draft.ElementaryPolicies" via "Draft.UPFCore")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NormalisationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.NormalisationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NormalisationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.560s cpu time, 0.015s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.NormalisationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.278s elapsed time, 1.121s cpu time, 0.105s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NormalisationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.301s elapsed time, 1.206s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.NormalisationMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Monads"
### 0.483s elapsed time, 1.925s cpu time, 0.200s GC time
Loading theory "Draft.UPFCore" (required by "Draft.NormalisationMoreTemplates" via "Draft.Normalisation" via "Draft.SeqComposition" via "Draft.ElementaryPolicies")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.UPFCore"
### 0.827s elapsed time, 3.117s cpu time, 0.751s GC time
Loading theory "Draft.ElementaryPolicies" (required by "Draft.NormalisationMoreTemplates" via "Draft.Normalisation" via "Draft.SeqComposition")
### theory "HOL-Library.BigO"
### 1.031s elapsed time, 3.920s cpu time, 0.847s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.084s elapsed time, 4.080s cpu time, 0.940s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.ElementaryPolicies"
### 0.181s elapsed time, 0.458s cpu time, 0.093s GC time
Loading theory "Draft.ParallelComposition" (required by "Draft.NormalisationMoreTemplates" via "Draft.Normalisation")
Loading theory "Draft.SeqComposition" (required by "Draft.NormalisationMoreTemplates" via "Draft.Normalisation")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.ParallelComposition"
### 0.223s elapsed time, 0.685s cpu time, 0.080s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.SeqComposition"
### 0.415s elapsed time, 1.115s cpu time, 0.158s GC time
Loading theory "Draft.Normalisation" (required by "Draft.NormalisationMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.081s elapsed time, 6.722s cpu time, 1.251s GC time
Loading theory "Draft.Templates" (required by "Draft.NormalisationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.173s cpu time, 0.064s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NormalisationMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
### theory "Draft.Normalisation"
### 0.866s elapsed time, 1.827s cpu time, 0.200s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.180s cpu time, 0.151s GC time
Loading theory "Draft.NormalisationMoreTemplates"
val templateLemmas =
   [("Normalisation.is_distr_2", "is_distr (\<Otimes>\<^sub>2) ?d ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Normalisation.is_distr_orD",
     "is_distr (\<Otimes>\<^sub>\<or>\<^sub>D) ?d ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Normalisation.is_strict_2", "is_strict (\<Otimes>\<^sub>2) ?d ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Normalisation.is_strict_orD",
     "is_strict (\<Otimes>\<^sub>\<or>\<^sub>D) ?d ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Normalisation.rmnMT", "none_MT_rules ?C (rm_MT_rules ?C ?p)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Normalisation.nMTtail",
     "none_MT_rules ?C ?p ==> none_MT_rules ?C (tl ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Normalisation.not_MTimpnotMT", "not_MT ?C ?p ==> ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Normalisation.rmnMT2",
     "none_MT_rules ?C ?p ==> rm_MT_rules ?C ?p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Normalisation.NMPrm",
     "not_MT ?C ?p ==> not_MT ?C (rm_MT_rules ?C ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Normalisation.SR3nMT", "~ not_MT ?C ?p ==> rm_MT_rules ?C ?p = []",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Normalisation.notDom", "?x : dom ?A ==> ?A ?x ~= \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 0, template_var 1), template_hole 0)
           ))),
    ("Normalisation.list2listNMT", "?x ~= [] ==> map ?sem ?x ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Normalisation.none_MT_rulesconc",
     "none_MT_rules ?C (?a @ [?b]) ==> none_MT_rules ?C ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2), template_var 1)
           ))),
    ("Normalisation.domStart",
     "?t : dom ?p1.0 ==> (?p1.0 \<Oplus> ?p2.0) ?t = ?p1.0 ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("Normalisation.nMTcharn",
     "none_MT_rules ?C ?p = (ALL r:set ?p. dom (?C r) ~= {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         t_empty))),
    ("Normalisation.nMTeqSet",
     "set ?p = set ?s ==> none_MT_rules ?C ?p = none_MT_rules ?C ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Normalisation.none_MT_rules_vs_notMT",
     "[| none_MT_rules ?C ?p; ?p ~= [] |] ==> not_MT ?C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Normalisation.notMTnMT",
     "[| ?a : set ?p; none_MT_rules ?C ?p |] ==> dom (?C ?a) ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 1,
               template_app (template_var 0, template_var 2)),
             template_hole 0)
           ))),
    ("Normalisation.NMPcharn",
     "[| ?a : set ?p; dom (?C ?a) ~= {} |] ==> not_MT ?C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 2)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Normalisation.Norm_Distr_1",
     "(?r o\<^sub>f (?P1.0 \<Otimes>\<^sub>1 list2policy ?P2.0 o ?d)) ?x =
      list2policy
       ((?P1.0 \<Otimes>\<^sub>L ?P2.0) (\<Otimes>\<^sub>1) ?r ?d) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_var 2))),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_hole 3),
               template_var 4),
             template_var 1)),
         template_var 0))),
    ("Normalisation.Norm_Distr_2",
     "(?r o\<^sub>f (?P1.0 \<Otimes>\<^sub>2 list2policy ?P2.0 o ?d)) ?x =
      list2policy
       ((?P1.0 \<Otimes>\<^sub>L ?P2.0) (\<Otimes>\<^sub>2) ?r ?d) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_var 2))),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_hole 3),
               template_var 4),
             template_var 1)),
         template_var 0))),
    ("Normalisation.Norm_Distr_A",
     "(?r o\<^sub>f
       (?P1.0 \<Otimes>\<^sub>\<or>\<^sub>A list2policy ?P2.0 o ?d))
       ?x =
      list2policy
       ((?P1.0 \<Otimes>\<^sub>L ?P2.0) (\<Otimes>\<^sub>\<or>\<^sub>A) ?r
         ?d)
       ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_var 2))),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_hole 3),
               template_var 4),
             template_var 1)),
         template_var 0))),
    ("Normalisation.Norm_Distr_D",
     "(?r o\<^sub>f
       (?P1.0 \<Otimes>\<^sub>\<or>\<^sub>D list2policy ?P2.0 o ?d))
       ?x =
      list2policy
       ((?P1.0 \<Otimes>\<^sub>L ?P2.0) (\<Otimes>\<^sub>\<or>\<^sub>D) ?r
         ?d)
       ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_var 2))),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_hole 3),
               template_var 4),
             template_var 1)),
         template_var 0))),
    ("Normalisation.mrconc",
     "applied_rule_rev ?C ?x ?p = \<lfloor>?a\<rfloor> ==>
      applied_rule_rev ?C ?x (?b # ?p) = \<lfloor>?a\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app (template_hole 1, template_var 1)))),
    ("Normalisation.mreq_end3",
     "applied_rule_rev ?C ?x ?p ~= \<bottom> ==>
      applied_rule_rev ?C ?x (?b # ?p) = applied_rule_rev ?C ?x ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1)))),
    ("Normalisation.mrNoneMT",
     "[| ?r : set ?p; applied_rule_rev ?C ?x ?p = \<bottom> |]
      ==> ?x ~: dom (?C ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0),
            template_var 2),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 3)))
               )
           ))),
    ("Normalisation.mrconcNone",
     "applied_rule_rev ?C ?x ?p = \<bottom> ==>
      applied_rule_rev ?C ?x (?b # ?p) = applied_rule_rev ?C ?x [?b]",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Normalisation.two_conc",
     "(?x \<Otimes>\<^sub>L ?y # ?ys) ?p ?r ?d =
      (?r o\<^sub>f (?p ?x ?y o ?d)) # (?x \<Otimes>\<^sub>L ?ys) ?p ?r ?d",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_var 2, template_var 5),
                   template_var 4)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Normalisation.domSubsetDistr1",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>1 ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Normalisation.domSubsetDistr2",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>2 ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Normalisation.domSubsetDistrA",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>\<or>\<^sub>A ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Normalisation.domSubsetDistrD",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>\<or>\<^sub>D ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Normalisation.mreq_end2",
     "applied_rule_rev ?C ?x ?b = applied_rule_rev ?C ?x ?c ==>
      applied_rule_rev ?C ?x (?a # ?b) = applied_rule_rev ?C ?x (?a # ?c)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Normalisation.mreq_endNone",
     "[| applied_rule_rev ?C ?x ?b = \<bottom>;
         applied_rule_rev ?C ?x ?c = \<bottom> |]
      ==> applied_rule_rev ?C ?x (?a # ?b) =
          applied_rule_rev ?C ?x (?a # ?c)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_var 2),
          template_hole 1),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Normalisation.mreq_end",
     "[| applied_rule_rev ?C ?x ?b = \<lfloor>?r\<rfloor>;
         applied_rule_rev ?C ?x ?c = \<lfloor>?r\<rfloor> |]
      ==> applied_rule_rev ?C ?x (?a # ?b) =
          applied_rule_rev ?C ?x (?a # ?c)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4),
            template_var 1),
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.NormalisationMoreTemplates"
### 0.365s elapsed time, 0.490s cpu time, 0.050s GC time
val it = (): unit
