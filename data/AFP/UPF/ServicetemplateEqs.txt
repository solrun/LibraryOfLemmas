   [("Service.LRsimps",
     "addLRPolicy ?x =
      (if is_addLR (fst ?x) then \<lfloor>allow ()\<rfloor>
       else \<bottom>)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_hole 0))),
    ("Service.LRsimps",
     "createSCRPolicy ?x =
      (if is_createSCR (fst ?x) then \<lfloor>allow ()\<rfloor>
       else \<bottom>)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_hole 0))),
    ("Service.SEsimps",
     "get_entry ?S ?p ?e_id =
      (case ?S ?p of \<bottom> => \<bottom>
       | \<lfloor>Scr\<rfloor> => Scr ?e_id)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), t_empty),
         template_app (template_var 2, template_var 1)))),
    ("Service.SEsimps",
     "userHasAccess ?u ?e = (fst ?e = Open | fst (snd ?e) = ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Service.SEsimps",
     "deleteEntrySE ?x =
      (case ?x of (createSCR int1 role x, S) => \<emptyset> x
       | (appendEntry int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteEntry u r p e_id, S) =>
           case get_entry S p e_id of \<bottom> => \<bottom>
           | \<lfloor>e\<rfloor> =>
               if userHasAccess u e then \<lfloor>allow ()\<rfloor>
               else \<lfloor>deny ()\<rfloor>
       | (readEntry int1 role int2 x, S) => \<emptyset> x
       | (readSCR int1 role x, S) => \<emptyset> x
       | (addLR int1 role int2 int3 x, S) => \<emptyset> x
       | (removeLR int1 role int2 x, S) => \<emptyset> x
       | (changeStatus int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteSCR int1 role x, S) => \<emptyset> x
       | (editEntry int1 role int2 int3 x, S) => \<emptyset> x)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app (template_hole 10, t_empty), template_var 0))),
    ("Service.SEsimps",
     "editEntrySE ?x =
      (case ?x of (createSCR int1 role x, S) => \<emptyset> x
       | (appendEntry int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteEntry int1 role int2 x, S) => \<emptyset> x
       | (readEntry int1 role int2 x, S) => \<emptyset> x
       | (readSCR int1 role x, S) => \<emptyset> x
       | (addLR int1 role int2 int3 x, S) => \<emptyset> x
       | (removeLR int1 role int2 x, S) => \<emptyset> x
       | (changeStatus int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteSCR int1 role x, S) => \<emptyset> x
       | (editEntry u r p e_id s, S) =>
           case get_entry S p e_id of \<bottom> => \<bottom>
           | \<lfloor>e\<rfloor> =>
               if userHasAccess u e then \<lfloor>allow ()\<rfloor>
               else \<lfloor>deny ()\<rfloor>)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app (template_hole 10, t_empty), template_var 0))),
    ("Service.SEsimps",
     "readEntrySE ?x =
      (case ?x of (createSCR int1 role x, S) => \<emptyset> x
       | (appendEntry int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteEntry int1 role int2 x, S) => \<emptyset> x
       | (readEntry u r p e_id, S) =>
           case get_entry S p e_id of \<bottom> => \<bottom>
           | \<lfloor>e\<rfloor> =>
               if userHasAccess u e then \<lfloor>allow ()\<rfloor>
               else \<lfloor>deny ()\<rfloor>
       | (readSCR int1 role x, S) => \<emptyset> x
       | (addLR int1 role int2 int3 x, S) => \<emptyset> x
       | (removeLR int1 role int2 x, S) => \<emptyset> x
       | (changeStatus int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteSCR int1 role x, S) => \<emptyset> x
       | (editEntry int1 role int2 int3 x, S) => \<emptyset> x)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app (template_hole 10, t_empty), template_var 0)))]
