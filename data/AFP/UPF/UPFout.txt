Loading theory "Draft.Monads" (required by "Draft.UPFMoreTemplates" via "Draft.UPF" via "Draft.Normalisation" via "Draft.SeqComposition" via "Draft.ElementaryPolicies" via "Draft.UPFCore")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UPFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UPFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UPFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.592s cpu time, 0.016s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.UPFMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.903s cpu time, 0.109s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UPFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.332s cpu time, 0.109s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UPFMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Monads"
### 0.478s elapsed time, 1.903s cpu time, 0.198s GC time
Loading theory "Draft.UPFCore" (required by "Draft.UPFMoreTemplates" via "Draft.UPF" via "Draft.Normalisation" via "Draft.SeqComposition" via "Draft.ElementaryPolicies")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.972s elapsed time, 3.673s cpu time, 0.929s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.UPFCore"
### 0.886s elapsed time, 3.196s cpu time, 0.956s GC time
Loading theory "Draft.ElementaryPolicies" (required by "Draft.UPFMoreTemplates" via "Draft.UPF" via "Draft.Normalisation" via "Draft.SeqComposition")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.113s elapsed time, 4.022s cpu time, 1.045s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.ElementaryPolicies"
### 0.148s elapsed time, 0.380s cpu time, 0.000s GC time
Loading theory "Draft.ParallelComposition" (required by "Draft.UPFMoreTemplates" via "Draft.UPF" via "Draft.Normalisation")
Loading theory "Draft.SeqComposition" (required by "Draft.UPFMoreTemplates" via "Draft.UPF" via "Draft.Normalisation")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.ParallelComposition"
### 0.218s elapsed time, 0.670s cpu time, 0.101s GC time
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SeqComposition"
### 0.434s elapsed time, 1.148s cpu time, 0.173s GC time
Loading theory "Draft.Analysis" (required by "Draft.UPFMoreTemplates" via "Draft.UPF")
Loading theory "Draft.Normalisation" (required by "Draft.UPFMoreTemplates" via "Draft.UPF")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.065s elapsed time, 6.852s cpu time, 1.419s GC time
Loading theory "Draft.Templates" (required by "Draft.UPFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Analysis"
### 0.288s elapsed time, 0.880s cpu time, 0.107s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UPFMoreTemplates")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.564s elapsed time, 1.197s cpu time, 0.132s GC time
### theory "Draft.Normalisation"
### 0.912s elapsed time, 2.159s cpu time, 0.239s GC time
Loading theory "Draft.NormalisationTestSpecification" (required by "Draft.UPFMoreTemplates" via "Draft.UPF")
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.NormalisationTestSpecification"
### 0.239s elapsed time, 0.283s cpu time, 0.052s GC time
Loading theory "Draft.UPF" (required by "Draft.UPFMoreTemplates")
### theory "Draft.UPF"
### 0.147s elapsed time, 0.148s cpu time, 0.000s GC time
Loading theory "Draft.UPFMoreTemplates"
val templateLemmas =
   [("UPFCore.empty_override", "\<emptyset> \<Oplus> ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("UPFCore.override_empty", "?p \<Oplus> \<emptyset> = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("UPFCore.override_A_empty", "?p \<Oplus>\<^sub>A \<emptyset> = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("UPFCore.empty_override_A", "\<emptyset> \<Oplus>\<^sub>A ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("UPFCore.override_D_empty", "?p \<Oplus>\<^sub>D \<emptyset> = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("UPFCore.empty_override_D", "\<emptyset> \<Oplus>\<^sub>D ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("UPF.UPFDefs", "A\<^sub>U ?p = \<lfloor>allow ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("UPF.UPFDefs", "D\<^sub>U ?p = \<lfloor>deny ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("UPFCore.policy_range_comp_strict",
     "?f o\<^sub>f \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("UPFCore.range_split_strict", "?P \<nabla> \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("UPFCore.range_split_id", "(id, id) \<nabla> ?p = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("UPF.UPFDefs", "A\<^sub>f ?f = A\<^sub>p (Some o ?f)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("UPFCore.range_split_vs_range_compose",
     "(?f, ?f) \<nabla> ?p = ?f o\<^sub>f ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UPFCore.pol_upd_allow_nonempty",
     "?t(?k \<mapsto>\<^sub>+ ?x) ~= \<emptyset>",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("UPFCore.pol_upd_deny_nonempty",
     "?t(?k \<mapsto>\<^sub>- ?x) ~= \<emptyset>",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("UPFCore.override_assoc",
     "?p1.0 \<Oplus> (?p2.0 \<Oplus> ?p3.0) =
      ?p1.0 \<Oplus> ?p2.0 \<Oplus> ?p3.0",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UPFCore.override_A_assoc",
     "?p1.0 \<Oplus>\<^sub>A (?p2.0 \<Oplus>\<^sub>A ?p3.0) =
      ?p1.0 \<Oplus>\<^sub>A ?p2.0 \<Oplus>\<^sub>A ?p3.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("UPFCore.override_D_assoc",
     "?p1.0 \<Oplus>\<^sub>D (?p2.0 \<Oplus>\<^sub>D ?p3.0) =
      ?p1.0 \<Oplus>\<^sub>D ?p2.0 \<Oplus>\<^sub>D ?p3.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("UPF.UPFDefs", "?m |` ?A = (%x. if x : ?A then ?m x else \<bottom>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("UPF.UPFDefs",
     "?m2.0 \<Oplus> ?m1.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>y\<rfloor> => \<lfloor>y\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.pol_upd_neq1",
     "?m(?a \<mapsto>\<^sub>+ ?x) ~= ?n(?a \<mapsto>\<^sub>- ?y)",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 3),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0))))
         )),
    ("UPFCore.pol_upd_triv1",
     "?t ?k = \<lfloor>allow ?x\<rfloor> ==>
      ?t(?k \<mapsto>\<^sub>+ ?x) = ?t",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 2))),
    ("UPFCore.pol_upd_triv2",
     "?t ?k = \<lfloor>deny ?x\<rfloor> ==>
      ?t(?k \<mapsto>\<^sub>- ?x) = ?t",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 2))),
    ("UPFCore.test2",
     "?p(?x \<mapsto>\<^sub>+ ?a, ?x \<mapsto>\<^sub>- ?b) = ?p(?x 
      \<mapsto>\<^sub>- ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("UPFCore.pol_upd_eqD1",
     "?m(?a \<mapsto>\<^sub>+ ?x) = ?n(?a \<mapsto>\<^sub>+ ?y) ==>
      ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))))],
       template_equation (template_var 2, template_var 0))),
    ("UPFCore.pol_upd_eqD2",
     "?m(?a \<mapsto>\<^sub>- ?x) = ?n(?a \<mapsto>\<^sub>- ?y) ==>
      ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))))],
       template_equation (template_var 2, template_var 0))),
    ("UPFCore.range_split_bi_compose",
     "(?f1.0, ?f2.0) \<nabla> (?g1.0, ?g2.0) \<nabla> ?p =
      (?f1.0 o ?g1.0, ?f2.0 o ?g2.0) \<nabla> ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))),
         template_var 0))),
    ("UPF.UPFDefs",
     "?p1.0 \<Otimes>\<^sub>S ?p2.0 =
      ?p1.0 \<Otimes>\<^sub>M ?p2.0 o (%(a, b, c). ((a, b), a, c))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("UPF.UPFDefs",
     "?p1.0 \<Otimes>\<^sub>M ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>d2\<rfloor> => \<lfloor>(d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("UPF.UPFDefs",
     "?f o\<^sub>f ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (?f y)\<rfloor>
           | \<lfloor>deny y\<rfloor> => \<lfloor>deny (?f y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.range_split_charn",
     "(?f, ?g) \<nabla> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow x\<rfloor> => \<lfloor>allow (?f x)\<rfloor>
           | \<lfloor>deny x\<rfloor> => \<lfloor>deny (?g x)\<rfloor>)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       t_empty)),
    ("UPF.UPFDefs",
     "?P \<Delta> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P x)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P x)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("UPF.UPFDefs",
     "?P \<nabla> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P y)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.test",
     "[?x \<mapsto>\<^sub>+ ?a, ?y \<mapsto>\<^sub>- ?b] =
      [?x \<mapsto>\<^sub>+ ?a, ?y \<mapsto>\<^sub>- ?b]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), template_var 3),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)))),
           template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), template_var 3),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)))),
           template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("UPF.UPFDefs",
     "?m2.0 \<Oplus>\<^sub>A ?m1.0 =
      (%x. case ?m1.0 x of \<bottom> => ?m2.0 x
           | \<lfloor>allow a\<rfloor> => \<lfloor>allow a\<rfloor>
           | \<lfloor>deny a\<rfloor> =>
               case ?m2.0 x of \<bottom> => \<lfloor>deny a\<rfloor>
               | \<lfloor>allow b\<rfloor> => \<lfloor>allow b\<rfloor>
               | \<lfloor>deny \<alpha>\<rfloor> =>
                   \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("UPF.UPFDefs",
     "?m1.0 \<Oplus>\<^sub>D ?m2.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>allow a\<rfloor> =>
               case ?m1.0 x of \<bottom> => \<lfloor>allow a\<rfloor>
               | \<lfloor>allow \<alpha>\<rfloor> =>
                   \<lfloor>allow a\<rfloor>
               | \<lfloor>deny b\<rfloor> => \<lfloor>deny b\<rfloor>
           | \<lfloor>deny a\<rfloor> => \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("UPF.UPFDefs",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>A ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty))),
    ("UPF.UPFDefs",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>D ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> => \<lfloor>deny (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty)))]:
   (string * thm * template) list
### theory "Draft.UPFMoreTemplates"
### 0.363s elapsed time, 0.526s cpu time, 0.043s GC time
val it = (): unit
