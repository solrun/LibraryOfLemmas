Loading theory "Draft.Monads" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF" via "Draft.Normalisation" via "Draft.SeqComposition" via "Draft.ElementaryPolicies" via "Draft.UPFCore")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.597s cpu time, 0.025s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.235s elapsed time, 0.927s cpu time, 0.120s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.440s elapsed time, 1.738s cpu time, 0.206s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Monads"
### 0.481s elapsed time, 1.921s cpu time, 0.181s GC time
Loading theory "Draft.UPFCore" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF" via "Draft.Normalisation" via "Draft.SeqComposition" via "Draft.ElementaryPolicies")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.957s elapsed time, 3.620s cpu time, 0.854s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.UPFCore"
### 0.822s elapsed time, 2.976s cpu time, 0.768s GC time
Loading theory "Draft.ElementaryPolicies" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF" via "Draft.Normalisation" via "Draft.SeqComposition")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "Draft.ElementaryPolicies"
### 0.178s elapsed time, 0.546s cpu time, 0.078s GC time
Loading theory "Draft.ParallelComposition" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF" via "Draft.Normalisation")
Loading theory "Draft.SeqComposition" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF" via "Draft.Normalisation")
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 3.830s cpu time, 0.846s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.ParallelComposition"
### 0.223s elapsed time, 0.712s cpu time, 0.084s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.SeqComposition"
### 0.420s elapsed time, 1.146s cpu time, 0.156s GC time
Loading theory "Draft.Analysis" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF")
Loading theory "Draft.Normalisation" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Analysis"
### 0.286s elapsed time, 0.880s cpu time, 0.108s GC time
### theory "HOL-Library.Tree"
### 2.109s elapsed time, 7.041s cpu time, 1.292s GC time
Loading theory "Draft.Templates" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ServiceExampleMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
### theory "Draft.Normalisation"
### 0.908s elapsed time, 2.195s cpu time, 0.264s GC time
Loading theory "Draft.NormalisationTestSpecification" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service" via "Draft.UPF")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.560s elapsed time, 1.201s cpu time, 0.156s GC time
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.NormalisationTestSpecification"
### 0.247s elapsed time, 0.338s cpu time, 0.059s GC time
Loading theory "Draft.UPF" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample" via "Draft.Service")
### theory "Draft.UPF"
### 0.146s elapsed time, 0.148s cpu time, 0.000s GC time
Loading theory "Draft.Service" (required by "Draft.ServiceExampleMoreTemplates" via "Draft.ServiceExample")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va vb. contentOfOp (createSCR v va vb) = undefined
### !!v va vb vc. contentOfOp (deleteEntry v va vb vc) = undefined
### !!v va vb vc. contentOfOp (readEntry v va vb vc) = undefined
### (5 more)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Service"
### 6.533s elapsed time, 8.967s cpu time, 2.576s GC time
Loading theory "Draft.ServiceExample" (required by "Draft.ServiceExampleMoreTemplates")
### theory "Draft.ServiceExample"
### 0.089s elapsed time, 0.132s cpu time, 0.000s GC time
Loading theory "Draft.ServiceExampleMoreTemplates"
val templateLemmas =
   [("ServiceExample.PolSimps", "A\<^sub>U ?p = \<lfloor>allow ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("ServiceExample.PolSimps", "D\<^sub>U ?p = \<lfloor>deny ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("ServiceExample.PolSimps", "A\<^sub>f ?f = A\<^sub>p (Some o ?f)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ServiceExample.PolSimps", "?f o ?g = (%x. ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.MonSimps",
     "unit\<^sub>S\<^sub>E ?e =
      (%\<sigma>. \<lfloor>(?e, \<sigma>)\<rfloor>)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("ServiceExample.Psplits",
     "?P (case ?unit of () => ?f) = (?unit = () --> ?P ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app (template_var 2, template_var 1))
           ))),
    ("ServiceExample.PolSimps",
     "addLRPolicy ?x =
      (if is_addLR (fst ?x) then \<lfloor>allow ()\<rfloor>
       else \<bottom>)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_hole 0))),
    ("ServiceExample.PolSimps",
     "createSCRPolicy ?x =
      (if is_createSCR (fst ?x) then \<lfloor>allow ()\<rfloor>
       else \<bottom>)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_hole 0))),
    ("ServiceExample.PolSimps",
     "?m |` ?A = (%x. if x : ?A then ?m x else \<bottom>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.PolSimps",
     "get_entry ?S ?p ?e_id =
      (case ?S ?p of \<bottom> => \<bottom>
       | \<lfloor>Scr\<rfloor> => Scr ?e_id)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), t_empty),
         template_app (template_var 2, template_var 1)))),
    ("ServiceExample.PolSimps",
     "?m2.0 \<Oplus> ?m1.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>y\<rfloor> => \<lfloor>y\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.PolSimps", "?f ` ?A = {y. EX x:?A. y = ?f x}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("ServiceExample.Psplits",
     "?P (case ?unit of () => ?f) = (~ (?unit = () & ~ ?P ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_var 2, template_var 1)))
               )
           ))),
    ("ServiceExample.MonSimps",
     "(?\<sigma> \<Turnstile> ?m) =
      (?m ?\<sigma> ~= \<bottom> & fst (the (?m ?\<sigma>)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_var 0, template_var 1)),
                   template_hole 2))),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 1))))
           ))),
    ("ServiceExample.PolSimps",
     "?P (if ?Q then ?x else ?y) = ((?Q --> ?P ?x) & (~ ?Q --> ?P ?y))",
     template_equation
      (template_app
        (template_var 3,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_var 3, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_var 3, template_var 0))))),
    ("ServiceExample.MonSimps",
     "bind\<^sub>S\<^sub>E ?f ?g =
      (%\<sigma>.
          case ?f \<sigma> of \<bottom> => \<bottom>
          | \<lfloor>(out, \<sigma>')\<rfloor> => ?g out \<sigma>')",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.Psplits",
     "?P (case ?prod of (x, xa) => ?f x xa) =
      (ALL x1 x2. ?prod = (x1, x2) --> ?P (?f x1 x2))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ServiceExample.PolSimps",
     "?P (if ?Q then ?x else ?y) = (~ (?Q & ~ ?P ?x | ~ ?Q & ~ ?P ?y))",
     template_equation
      (template_app
        (template_var 3,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_hole 2,
                 template_app (template_var 3, template_var 1)))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_app
              (template_hole 2,
               template_app (template_var 3, template_var 0))))))),
    ("ServiceExample.PolSimps",
     "?p1.0 \<Otimes>\<^sub>S ?p2.0 =
      ?p1.0 \<Otimes>\<^sub>M ?p2.0 o (%(a, b, c). ((a, b), a, c))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("ServiceExample.PolSimps",
     "?p1.0 \<Otimes>\<^sub>M ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>d2\<rfloor> => \<lfloor>(d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("ServiceExample.Psplits",
     "?P (case ?prod of (x, xa) => ?f x xa) =
      (\<nexists>x1 x2. ?prod = (x1, x2) & ~ ?P (?f x1 x2))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("ServiceExample.PolSimps",
     "?f o\<^sub>f ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (?f y)\<rfloor>
           | \<lfloor>deny y\<rfloor> => \<lfloor>deny (?f y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.Psplits",
     "?P (case ?option of \<bottom> => ?f1.0
          | \<lfloor>x\<rfloor> => ?f2.0 x) =
      ((?option = \<bottom> --> ?P ?f1.0) &
       (ALL x2. ?option = \<lfloor>x2\<rfloor> --> ?P (?f2.0 x2)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_app (template_var 3, template_var 2))),
             template_app (template_hole 1, t_empty))
           ))),
    ("ServiceExample.PolSimps",
     "?P \<Delta> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P x)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P x)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.PolSimps",
     "?P \<nabla> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P y)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.Psplits",
     "?P (case ?option of \<bottom> => ?f1.0
          | \<lfloor>x\<rfloor> => ?f2.0 x) =
      (~ (?option = \<bottom> & ~ ?P ?f1.0 |
          (EX x2. ?option = \<lfloor>x2\<rfloor> & ~ ?P (?f2.0 x2))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2)),
                     template_app
                      (template_hole 6,
                       template_app (template_var 3, template_var 2)))),
                 template_app (template_hole 1, t_empty))
               )
           ))),
    ("ServiceExample.Psplits",
     "?P (case ?decision of allow x => ?f1.0 x | deny x => ?f2.0 x) =
      ((ALL x1. ?decision = allow x1 --> ?P (?f1.0 x1)) &
       (ALL x2. ?decision = deny x2 --> ?P (?f2.0 x2)))",
     template_equation
      (template_app
        (template_var 3,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 4, t_empty)))),
    ("ServiceExample.Psplits",
     "?P (case ?decision of allow x => ?f1.0 x | deny x => ?f2.0 x) =
      (~ ((EX x1. ?decision = allow x1 & ~ ?P (?f1.0 x1)) |
          (EX x2. ?decision = deny x2 & ~ ?P (?f2.0 x2))))",
     template_equation
      (template_app
        (template_var 3,
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app (template_hole 4, t_empty))))),
    ("ServiceExample.PolSimps",
     "policy2MON ?p =
      (%\<iota> \<sigma>.
          case ?p (\<iota>, \<sigma>) of \<bottom> => \<bottom>
          | \<lfloor>allow (outs, \<sigma>')\<rfloor> =>
              \<lfloor>(allow outs, \<sigma>')\<rfloor>
          | \<lfloor>deny (outs, \<sigma>')\<rfloor> =>
              \<lfloor>(deny outs, \<sigma>')\<rfloor>)",
     template_equation
      (template_app (template_hole 9, template_var 0), t_empty)),
    ("ServiceExample.PolSimps",
     "?m2.0 \<Oplus>\<^sub>A ?m1.0 =
      (%x. case ?m1.0 x of \<bottom> => ?m2.0 x
           | \<lfloor>allow a\<rfloor> => \<lfloor>allow a\<rfloor>
           | \<lfloor>deny a\<rfloor> =>
               case ?m2.0 x of \<bottom> => \<lfloor>deny a\<rfloor>
               | \<lfloor>allow b\<rfloor> => \<lfloor>allow b\<rfloor>
               | \<lfloor>deny \<alpha>\<rfloor> =>
                   \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.PolSimps",
     "?m1.0 \<Oplus>\<^sub>D ?m2.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>allow a\<rfloor> =>
               case ?m1.0 x of \<bottom> => \<lfloor>allow a\<rfloor>
               | \<lfloor>allow \<alpha>\<rfloor> =>
                   \<lfloor>allow a\<rfloor>
               | \<lfloor>deny b\<rfloor> => \<lfloor>deny b\<rfloor>
           | \<lfloor>deny a\<rfloor> => \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("ServiceExample.PolSimps",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>A ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty))),
    ("ServiceExample.PolSimps",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>D ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> => \<lfloor>deny (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty))),
    ("ServiceExample.PolSimps",
     "deleteEntrySE ?x =
      (case ?x of (createSCR int1 role x, S) => \<emptyset> x
       | (appendEntry int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteEntry u r p e_id, S) =>
           case get_entry S p e_id of \<bottom> => \<bottom>
           | \<lfloor>e\<rfloor> =>
               if userHasAccess u e then \<lfloor>allow ()\<rfloor>
               else \<lfloor>deny ()\<rfloor>
       | (readEntry int1 role int2 x, S) => \<emptyset> x
       | (readSCR int1 role x, S) => \<emptyset> x
       | (addLR int1 role int2 int3 x, S) => \<emptyset> x
       | (removeLR int1 role int2 x, S) => \<emptyset> x
       | (changeStatus int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteSCR int1 role x, S) => \<emptyset> x
       | (editEntry int1 role int2 int3 x, S) => \<emptyset> x)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app (template_hole 10, t_empty), template_var 0))),
    ("ServiceExample.PolSimps",
     "editEntrySE ?x =
      (case ?x of (createSCR int1 role x, S) => \<emptyset> x
       | (appendEntry int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteEntry int1 role int2 x, S) => \<emptyset> x
       | (readEntry int1 role int2 x, S) => \<emptyset> x
       | (readSCR int1 role x, S) => \<emptyset> x
       | (addLR int1 role int2 int3 x, S) => \<emptyset> x
       | (removeLR int1 role int2 x, S) => \<emptyset> x
       | (changeStatus int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteSCR int1 role x, S) => \<emptyset> x
       | (editEntry u r p e_id s, S) =>
           case get_entry S p e_id of \<bottom> => \<bottom>
           | \<lfloor>e\<rfloor> =>
               if userHasAccess u e then \<lfloor>allow ()\<rfloor>
               else \<lfloor>deny ()\<rfloor>)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app (template_hole 10, t_empty), template_var 0))),
    ("ServiceExample.PolSimps",
     "readEntrySE ?x =
      (case ?x of (createSCR int1 role x, S) => \<emptyset> x
       | (appendEntry int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteEntry int1 role int2 x, S) => \<emptyset> x
       | (readEntry u r p e_id, S) =>
           case get_entry S p e_id of \<bottom> => \<bottom>
           | \<lfloor>e\<rfloor> =>
               if userHasAccess u e then \<lfloor>allow ()\<rfloor>
               else \<lfloor>deny ()\<rfloor>
       | (readSCR int1 role x, S) => \<emptyset> x
       | (addLR int1 role int2 int3 x, S) => \<emptyset> x
       | (removeLR int1 role int2 x, S) => \<emptyset> x
       | (changeStatus int1 role int2 int3 x, S) => \<emptyset> x
       | (deleteSCR int1 role x, S) => \<emptyset> x
       | (editEntry int1 role int2 int3 x, S) => \<emptyset> x)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app (template_hole 10, t_empty), template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ServiceExampleMoreTemplates"
### 0.423s elapsed time, 0.591s cpu time, 0.061s GC time
val it = (): unit
