Loading theory "Draft.Monads" (required by "Draft.MonadsMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MonadsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MonadsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MonadsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.117s elapsed time, 0.488s cpu time, 0.029s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MonadsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.872s cpu time, 0.029s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MonadsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.338s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MonadsMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Monads"
### 0.499s elapsed time, 1.993s cpu time, 0.194s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.764s elapsed time, 2.573s cpu time, 0.292s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.998s elapsed time, 3.009s cpu time, 0.724s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.834s elapsed time, 4.544s cpu time, 0.864s GC time
Loading theory "Draft.Templates" (required by "Draft.MonadsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MonadsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.503s cpu time, 0.044s GC time
Loading theory "Draft.MonadsMoreTemplates"
val templateLemmas =
   [("Monads.valid_propoagate_3'",
     "~ (?\<sigma>\<^sub>0 \<Turnstile> Map.empty)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0), t_empty)
             )
         )),
    ("Monads.mbind_unit", "mbind [] ?f = unit\<^sub>S\<^sub>E []",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Monads.valid_propagate_1",
     "(?\<sigma> \<Turnstile> unit\<^sub>S\<^sub>E ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Monads.mbind_nofailure", "mbind ?S ?f ?\<sigma> ~= None",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Monads.bind_right_unit_SB",
     "bind\<^sub>S\<^sub>B ?m unit\<^sub>S\<^sub>B = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("Monads.bind_left_unit_SB", "( x := unit\<^sub>S\<^sub>B ?a; ?m) = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_var 0)),
    ("Monads.bind_right_unit_SBE", "bind_SBE ?m unit_SBE = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("Monads.bind_left_unit_SBE", "( x :\<equiv> returning ?a; ?m) = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_var 0)),
    ("Monads.bind_right_unit",
     "bind\<^sub>S\<^sub>E ?m unit\<^sub>S\<^sub>E = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("Monads.bind_left_unit",
     "( x \<leftarrow> unit\<^sub>S\<^sub>E ?a; ?k) = ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_var 0)),
    ("Monads.assert_intro",
     "?Q ?\<sigma> ==>
      ?\<sigma> \<Turnstile>\<^sub>S\<^sub>B\<^sub>E
      assert\<^sub>S\<^sub>B\<^sub>E ?Q",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Monads.malt_SE_cons",
     "\<Sqinter>\<^sub>S\<^sub>E (?a # ?S) =
      (?a \<sqinter>\<^sub>S\<^sub>E \<Sqinter>\<^sub>S\<^sub>E ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Monads.assert_disch3",
     "~ ?P ?\<sigma> ==>
      ~ (?\<sigma> \<Turnstile> assert\<^sub>S\<^sub>E ?P)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Monads.aux", "(None ~= ?b) = (EX y. ?b = Some y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Monads.valid_propoagate_3",
     "(?\<sigma>\<^sub>0 \<Turnstile>
       (%\<sigma>. Some (?f \<sigma>, \<sigma>))) =
      ?f ?\<sigma>\<^sub>0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app (template_var 0, template_var 1))),
    ("Monads.valid_true",
     "(?\<sigma> \<Turnstile>
       ( s \<leftarrow> unit\<^sub>S\<^sub>E
                         ?x; unit\<^sub>S\<^sub>E (?P s))) =
      ?P ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           t_empty)),
       template_app (template_var 0, template_var 1))),
    ("Monads.assume_assert",
     "(?\<sigma> \<Turnstile>\<^sub>S\<^sub>B\<^sub>E
       ( _ :\<equiv> assume\<^sub>S\<^sub>B\<^sub>E
                      ?P; assert\<^sub>S\<^sub>B\<^sub>E ?Q)) =
      (?P ?\<sigma> --> ?Q ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_var 2)),
         template_app (template_var 0, template_var 2)))),
    ("Monads.if_SE_D1",
     "?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile> if\<^sub>S\<^sub>E ?P ?B\<^sub>1 ?B\<^sub>2) =
      (?\<sigma> \<Turnstile> ?B\<^sub>1)",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("Monads.assert_disch2",
     "~ ?P ?\<sigma> ==>
      ~ (?\<sigma> \<Turnstile>
         ( x \<leftarrow> assert\<^sub>S\<^sub>E ?P; ?M ?s))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   t_empty))
               )
           ))),
    ("Monads.valid_failure'",
     "?A ?\<sigma> = None ==>
      ~ (?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 2), t_empty))
               )
           ))),
    ("Monads.bind_assoc_SB",
     "( y :=  x := ?m; ?k; ?h) = ( x := ?m;  y := ?k; ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monads.bind_assoc_SBE",
     "( y :\<equiv>  x :\<equiv> ?m; ?k; ?h) =
      ( x :\<equiv> ?m;  y :\<equiv> ?k; ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monads.bind_assoc",
     "( y \<leftarrow>  x \<leftarrow> ?m; ?k; ?h) =
      ( x \<leftarrow> ?m;  y \<leftarrow> ?k; ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monads.if_SE_D2",
     "~ ?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile> if\<^sub>S\<^sub>E ?P ?B\<^sub>1 ?B\<^sub>2) =
      (?\<sigma> \<Turnstile> ?B\<^sub>2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Monads.valid_successElem",
     "?M ?\<sigma> = Some (?f ?\<sigma>, ?\<sigma>) ==>
      (?\<sigma> \<Turnstile> ?M) = ?f ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 1)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Monads.assert_disch1",
     "?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (assert\<^sub>S\<^sub>E ?P) ?M) =
      (?\<sigma> \<Turnstile> ?M True)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_var 0, template_hole 0))))),
    ("Monads.assert_D",
     "?\<sigma> \<Turnstile>
      bind\<^sub>S\<^sub>E (assert\<^sub>S\<^sub>E ?P) ?M ==>
      ?P ?\<sigma> & (?\<sigma> \<Turnstile> ?M True)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_var 0, template_hole 0)))
           ))),
    ("Monads.assume_D",
     "?\<sigma> \<Turnstile>
      bind\<^sub>S\<^sub>E (assume\<^sub>S\<^sub>E ?P) ?M ==>
      EX \<sigma>. ?P \<sigma> & \<sigma> \<Turnstile> ?M ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                t_empty))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Monads.if_SE_split",
     "(?\<sigma> \<Turnstile> if\<^sub>S\<^sub>E ?P ?B\<^sub>1 ?B\<^sub>2) =
      ((?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>1)) &
       (~ ?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>2)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 3))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Monads.if_SE_split_asm",
     "(?\<sigma> \<Turnstile> if\<^sub>S\<^sub>E ?P ?B\<^sub>1 ?B\<^sub>2) =
      (?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>1) |
       ~ ?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>2))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 3))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Monads.valid_success'",
     "?A ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M) =
      (?\<sigma>' \<Turnstile> ?M ?b)",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 4), t_empty)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_var 0, template_var 2))))),
    ("Monads.valid_failure",
     "?ioprog ?a ?\<sigma> = None ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (mbind (?a # ?S) ?ioprog) ?M) =
      (?\<sigma> \<Turnstile> ?M [])",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 4, template_var 3), template_var 2),
          template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_var 4)),
             t_empty)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app (template_var 0, template_hole 0))))),
    ("Monads.valid_propagate_2'",
     "?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M ==>
      EX a. ?A ?\<sigma> = Some a & snd a \<Turnstile> ?M (fst a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1), t_empty))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Monads.valid_propagate_2''",
     "?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M ==>
      EX v \<sigma>'.
         ?A ?\<sigma> = Some (v, \<sigma>') & \<sigma>' \<Turnstile> ?M v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1), t_empty))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Monads.valid_propagate_2",
     "?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M ==>
      EX v \<sigma>'.
         the (?A ?\<sigma>) = (v, \<sigma>') & \<sigma>' \<Turnstile> ?M v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1), t_empty))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Monads.mbind_try",
     "bind\<^sub>S\<^sub>E (mbind (?a # ?S) ?F) ?M =
      ( a' \<leftarrow> try_SE
                         (?F ?a); if a' = None then ?M []
                                  else ( x \<leftarrow> mbind ?S
                   ?F; ?M (the a' # x)))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 2)),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_var 1, template_var 3))),
         t_empty))),
    ("Monads.valid_success",
     "?ioprog ?a ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (mbind (?a # ?S) ?ioprog) ?M) =
      (?\<sigma>' \<Turnstile>
       ( s \<leftarrow> mbind ?S ?ioprog; ?M (?b # s)))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 6, template_var 5), template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 1)),
                 template_var 6)),
             t_empty)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 6)),
             t_empty))))),
    ("Monads.valid_success''",
     "?ioprog ?a ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile>
       ( s \<leftarrow> mbind (?a # ?S)
                         ?ioprog; unit\<^sub>S\<^sub>E (?P s))) =
      (?\<sigma>' \<Turnstile>
       ( s \<leftarrow> mbind ?S
                         ?ioprog; unit\<^sub>S\<^sub>E (?P (?b # s))))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 6, template_var 5), template_var 4),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 1)),
                 template_var 6)),
             t_empty)),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 6)),
             t_empty))))),
    ("Monads.valid_both",
     "(?\<sigma> \<Turnstile>
       ( s \<leftarrow> mbind (?a # ?S)
                         ?ioprog; unit\<^sub>S\<^sub>E (?P s))) =
      (case ?ioprog ?a ?\<sigma> of
       None => ?\<sigma> \<Turnstile> unit\<^sub>S\<^sub>E (?P [])
       | Some (b, \<sigma>') =>
           \<sigma>' \<Turnstile>
           ( s \<leftarrow> mbind ?S
                             ?ioprog; unit\<^sub>S\<^sub>E (?P (b # s))))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 4),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2)),
               template_var 1)),
           t_empty)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_hole 4,
                 template_app (template_var 0, template_hole 2)))),
           t_empty),
         template_app
          (template_app (template_var 1, template_var 3),
           template_var 4))))]:
   (string * thm * template) list
### theory "Draft.MonadsMoreTemplates"
### 0.325s elapsed time, 0.470s cpu time, 0.070s GC time
val it = (): unit
