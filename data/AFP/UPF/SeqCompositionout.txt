Loading theory "Draft.Monads" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.SeqComposition" via "Draft.ElementaryPolicies" via "Draft.UPFCore")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.611s cpu time, 0.021s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.840s cpu time, 0.021s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.364s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Monads"
### 0.492s elapsed time, 1.957s cpu time, 0.192s GC time
Loading theory "Draft.UPFCore" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.SeqComposition" via "Draft.ElementaryPolicies")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.970s elapsed time, 3.648s cpu time, 0.865s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.UPFCore"
### 0.817s elapsed time, 2.945s cpu time, 0.695s GC time
Loading theory "Draft.ElementaryPolicies" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.SeqComposition")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 3.884s cpu time, 0.853s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.ElementaryPolicies"
### 0.177s elapsed time, 0.476s cpu time, 0.075s GC time
Loading theory "Draft.SeqComposition" (required by "Draft.SeqCompositionMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SeqComposition"
### 0.386s elapsed time, 0.837s cpu time, 0.126s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.938s elapsed time, 5.856s cpu time, 1.067s GC time
Loading theory "Draft.Templates" (required by "Draft.SeqCompositionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.103s cpu time, 0.039s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SeqCompositionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.464s cpu time, 0.000s GC time
Loading theory "Draft.SeqCompositionMoreTemplates"
val templateLemmas =
   [("SeqComposition.comp_1_mt",
     "?p \<circ>\<^sub>1 \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("SeqComposition.mt_comp_1",
     "\<emptyset> \<circ>\<^sub>1 ?p = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       t_empty)),
    ("SeqComposition.comp_2_mt",
     "?p \<circ>\<^sub>2 \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("SeqComposition.mt_comp_2",
     "\<emptyset> \<circ>\<^sub>2 ?p = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       t_empty)),
    ("SeqComposition.comp_orA_mt",
     "?p \<circ>\<^sub>\<or>\<^sub>A \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("SeqComposition.mt_comp_orA",
     "\<emptyset> \<circ>\<^sub>\<or>\<^sub>A ?p = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       t_empty)),
    ("SeqComposition.comp_orD_mt",
     "?p \<circ>\<^sub>orD \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("SeqComposition.mt_comp_orD",
     "\<emptyset> \<circ>\<^sub>orD ?p = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       t_empty)),
    ("SeqComposition.flat_orA_deny",
     "flat_orA ?x = deny ?y ==> ?x = deny (deny ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("SeqComposition.flat_orD_allow",
     "flat_orD ?x = allow ?y ==> ?x = allow (allow ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("SeqComposition.flat_1_allow",
     "flat_1 ?x = allow ?y ==>
      ?x = allow (allow ?y) | ?x = allow (deny ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("SeqComposition.flat_1_deny",
     "flat_1 ?x = deny ?y ==> ?x = deny (deny ?y) | ?x = deny (allow ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("SeqComposition.flat_2_allow",
     "flat_2 ?x = allow ?y ==>
      ?x = allow (allow ?y) | ?x = deny (allow ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("SeqComposition.flat_2_deny",
     "flat_2 ?x = deny ?y ==> ?x = deny (deny ?y) | ?x = allow (deny ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("SeqComposition.flat_orA_allow",
     "flat_orA ?x = allow ?y ==>
      ?x = allow (allow ?y) | ?x = allow (deny ?y) | ?x = deny (allow ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)))),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 0)))))
           ))),
    ("SeqComposition.flat_orD_deny",
     "flat_orD ?x = deny ?y ==>
      ?x = deny (deny ?y) | ?x = allow (deny ?y) | ?x = deny (allow ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 5, template_var 0)))),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 0)))))
           )))]:
   (string * thm * template) list
### theory "Draft.SeqCompositionMoreTemplates"
### 0.355s elapsed time, 0.507s cpu time, 0.053s GC time
val it = (): unit
