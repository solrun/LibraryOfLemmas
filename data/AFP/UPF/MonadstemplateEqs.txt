   [("Monads.mbind_unit", "mbind [] ?f = unit\<^sub>S\<^sub>E []",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Monads.valid_propagate_1",
     "(?\<sigma> \<Turnstile> unit\<^sub>S\<^sub>E ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Monads.bind_right_unit_SB",
     "bind\<^sub>S\<^sub>B ?m unit\<^sub>S\<^sub>B = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("Monads.bind_left_unit_SB", "( x := unit\<^sub>S\<^sub>B ?a; ?m) = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_var 0)),
    ("Monads.bind_right_unit_SBE", "bind_SBE ?m unit_SBE = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("Monads.bind_left_unit_SBE", "( x :\<equiv> returning ?a; ?m) = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_var 0)),
    ("Monads.bind_right_unit",
     "bind\<^sub>S\<^sub>E ?m unit\<^sub>S\<^sub>E = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("Monads.bind_left_unit",
     "( x \<leftarrow> unit\<^sub>S\<^sub>E ?a; ?k) = ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_var 0)),
    ("Monads.malt_SE_cons",
     "\<Sqinter>\<^sub>S\<^sub>E (?a # ?S) =
      (?a \<sqinter>\<^sub>S\<^sub>E \<Sqinter>\<^sub>S\<^sub>E ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Monads.aux", "(None ~= ?b) = (EX y. ?b = Some y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Monads.valid_propoagate_3",
     "(?\<sigma>\<^sub>0 \<Turnstile>
       (%\<sigma>. Some (?f \<sigma>, \<sigma>))) =
      ?f ?\<sigma>\<^sub>0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app (template_var 0, template_var 1))),
    ("Monads.valid_true",
     "(?\<sigma> \<Turnstile>
       ( s \<leftarrow> unit\<^sub>S\<^sub>E
                         ?x; unit\<^sub>S\<^sub>E (?P s))) =
      ?P ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           t_empty)),
       template_app (template_var 0, template_var 1))),
    ("Monads.assume_assert",
     "(?\<sigma> \<Turnstile>\<^sub>S\<^sub>B\<^sub>E
       ( _ :\<equiv> assume\<^sub>S\<^sub>B\<^sub>E
                      ?P; assert\<^sub>S\<^sub>B\<^sub>E ?Q)) =
      (?P ?\<sigma> --> ?Q ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_var 2)),
         template_app (template_var 0, template_var 2)))),
    ("Monads.bind_assoc_SB",
     "( y :=  x := ?m; ?k; ?h) = ( x := ?m;  y := ?k; ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monads.bind_assoc_SBE",
     "( y :\<equiv>  x :\<equiv> ?m; ?k; ?h) =
      ( x :\<equiv> ?m;  y :\<equiv> ?k; ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monads.bind_assoc",
     "( y \<leftarrow>  x \<leftarrow> ?m; ?k; ?h) =
      ( x \<leftarrow> ?m;  y \<leftarrow> ?k; ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monads.if_SE_split",
     "(?\<sigma> \<Turnstile> if\<^sub>S\<^sub>E ?P ?B\<^sub>1 ?B\<^sub>2) =
      ((?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>1)) &
       (~ ?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>2)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 3))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Monads.if_SE_split_asm",
     "(?\<sigma> \<Turnstile> if\<^sub>S\<^sub>E ?P ?B\<^sub>1 ?B\<^sub>2) =
      (?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>1) |
       ~ ?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>2))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 3))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Monads.mbind_try",
     "bind\<^sub>S\<^sub>E (mbind (?a # ?S) ?F) ?M =
      ( a' \<leftarrow> try_SE
                         (?F ?a); if a' = None then ?M []
                                  else ( x \<leftarrow> mbind ?S
                   ?F; ?M (the a' # x)))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 2)),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_var 1, template_var 3))),
         t_empty))),
    ("Monads.valid_both",
     "(?\<sigma> \<Turnstile>
       ( s \<leftarrow> mbind (?a # ?S)
                         ?ioprog; unit\<^sub>S\<^sub>E (?P s))) =
      (case ?ioprog ?a ?\<sigma> of
       None => ?\<sigma> \<Turnstile> unit\<^sub>S\<^sub>E (?P [])
       | Some (b, \<sigma>') =>
           \<sigma>' \<Turnstile>
           ( s \<leftarrow> mbind ?S
                             ?ioprog; unit\<^sub>S\<^sub>E (?P (b # s))))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 4),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2)),
               template_var 1)),
           t_empty)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_hole 4,
                 template_app (template_var 0, template_hole 2)))),
           t_empty),
         template_app
          (template_app (template_var 1, template_var 3),
           template_var 4))))]
