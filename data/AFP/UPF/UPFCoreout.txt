Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UPFCoreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UPFCoreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UPFCoreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "Draft.Monads" (required by "Draft.UPFCoreMoreTemplates" via "Draft.UPFCore")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.555s cpu time, 0.026s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.UPFCoreMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.309s elapsed time, 1.234s cpu time, 0.130s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UPFCoreMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.432s elapsed time, 1.728s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UPFCoreMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Monads"
### 0.550s elapsed time, 2.184s cpu time, 0.210s GC time
Loading theory "Draft.UPFCore" (required by "Draft.UPFCoreMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.981s elapsed time, 3.715s cpu time, 0.795s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.UPFCore"
### 0.817s elapsed time, 3.008s cpu time, 0.715s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.085s elapsed time, 3.815s cpu time, 0.868s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.898s elapsed time, 5.561s cpu time, 1.027s GC time
Loading theory "Draft.Templates" (required by "Draft.UPFCoreMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UPFCoreMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.489s cpu time, 0.044s GC time
Loading theory "Draft.UPFCoreMoreTemplates"
val templateLemmas =
   [("UPFCore.empty_override", "\<emptyset> \<Oplus> ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("UPFCore.override_empty", "?p \<Oplus> \<emptyset> = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("UPFCore.override_A_empty", "?p \<Oplus>\<^sub>A \<emptyset> = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("UPFCore.empty_override_A", "\<emptyset> \<Oplus>\<^sub>A ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("UPFCore.override_D_empty", "?p \<Oplus>\<^sub>D \<emptyset> = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("UPFCore.empty_override_D", "\<emptyset> \<Oplus>\<^sub>D ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("UPFCore.policy_range_comp_strict",
     "?f o\<^sub>f \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("UPFCore.range_split_strict", "?P \<nabla> \<emptyset> = \<emptyset>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("UPFCore.range_split_id", "(id, id) \<nabla> ?p = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("UPFCore.range_split_vs_range_compose",
     "(?f, ?f) \<nabla> ?p = ?f o\<^sub>f ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UPFCore.pol_upd_allow_nonempty",
     "?t(?k \<mapsto>\<^sub>+ ?x) ~= \<emptyset>",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("UPFCore.pol_upd_deny_nonempty",
     "?t(?k \<mapsto>\<^sub>- ?x) ~= \<emptyset>",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("UPFCore.override_assoc",
     "?p1.0 \<Oplus> (?p2.0 \<Oplus> ?p3.0) =
      ?p1.0 \<Oplus> ?p2.0 \<Oplus> ?p3.0",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UPFCore.override_A_assoc",
     "?p1.0 \<Oplus>\<^sub>A (?p2.0 \<Oplus>\<^sub>A ?p3.0) =
      ?p1.0 \<Oplus>\<^sub>A ?p2.0 \<Oplus>\<^sub>A ?p3.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("UPFCore.override_D_assoc",
     "?p1.0 \<Oplus>\<^sub>D (?p2.0 \<Oplus>\<^sub>D ?p3.0) =
      ?p1.0 \<Oplus>\<^sub>D ?p2.0 \<Oplus>\<^sub>D ?p3.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("UPFCore.UPFCoreDefs",
     "?m |` ?A = (%x. if x : ?A then ?m x else \<bottom>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.UPFCoreDefs",
     "?m2.0 \<Oplus> ?m1.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>y\<rfloor> => \<lfloor>y\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.pol_upd_neq1",
     "?m(?a \<mapsto>\<^sub>+ ?x) ~= ?n(?a \<mapsto>\<^sub>- ?y)",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 3),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0))))
         )),
    ("UPFCore.pol_upd_triv1",
     "?t ?k = \<lfloor>allow ?x\<rfloor> ==>
      ?t(?k \<mapsto>\<^sub>+ ?x) = ?t",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 2))),
    ("UPFCore.pol_upd_triv2",
     "?t ?k = \<lfloor>deny ?x\<rfloor> ==>
      ?t(?k \<mapsto>\<^sub>- ?x) = ?t",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 2))),
    ("UPFCore.test2",
     "?p(?x \<mapsto>\<^sub>+ ?a, ?x \<mapsto>\<^sub>- ?b) = ?p(?x 
      \<mapsto>\<^sub>- ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("UPFCore.pol_upd_eqD1",
     "?m(?a \<mapsto>\<^sub>+ ?x) = ?n(?a \<mapsto>\<^sub>+ ?y) ==>
      ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))))],
       template_equation (template_var 2, template_var 0))),
    ("UPFCore.pol_upd_eqD2",
     "?m(?a \<mapsto>\<^sub>- ?x) = ?n(?a \<mapsto>\<^sub>- ?y) ==>
      ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))))],
       template_equation (template_var 2, template_var 0))),
    ("UPFCore.range_split_bi_compose",
     "(?f1.0, ?f2.0) \<nabla> (?g1.0, ?g2.0) \<nabla> ?p =
      (?f1.0 o ?g1.0, ?f2.0 o ?g2.0) \<nabla> ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))),
         template_var 0))),
    ("UPFCore.UPFCoreDefs",
     "?f o\<^sub>f ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (?f y)\<rfloor>
           | \<lfloor>deny y\<rfloor> => \<lfloor>deny (?f y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.range_split_charn",
     "(?f, ?g) \<nabla> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow x\<rfloor> => \<lfloor>allow (?f x)\<rfloor>
           | \<lfloor>deny x\<rfloor> => \<lfloor>deny (?g x)\<rfloor>)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       t_empty)),
    ("UPFCore.UPFCoreDefs",
     "?P \<Delta> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P x)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P x)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.UPFCoreDefs",
     "?P \<nabla> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P y)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.test",
     "[?x \<mapsto>\<^sub>+ ?a, ?y \<mapsto>\<^sub>- ?b] =
      [?x \<mapsto>\<^sub>+ ?a, ?y \<mapsto>\<^sub>- ?b]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), template_var 3),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)))),
           template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), template_var 3),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)))),
           template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("UPFCore.UPFCoreDefs",
     "?m2.0 \<Oplus>\<^sub>A ?m1.0 =
      (%x. case ?m1.0 x of \<bottom> => ?m2.0 x
           | \<lfloor>allow a\<rfloor> => \<lfloor>allow a\<rfloor>
           | \<lfloor>deny a\<rfloor> =>
               case ?m2.0 x of \<bottom> => \<lfloor>deny a\<rfloor>
               | \<lfloor>allow b\<rfloor> => \<lfloor>allow b\<rfloor>
               | \<lfloor>deny \<alpha>\<rfloor> =>
                   \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("UPFCore.UPFCoreDefs",
     "?m1.0 \<Oplus>\<^sub>D ?m2.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>allow a\<rfloor> =>
               case ?m1.0 x of \<bottom> => \<lfloor>allow a\<rfloor>
               | \<lfloor>allow \<alpha>\<rfloor> =>
                   \<lfloor>allow a\<rfloor>
               | \<lfloor>deny b\<rfloor> => \<lfloor>deny b\<rfloor>
           | \<lfloor>deny a\<rfloor> => \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty))]:
   (string * thm * template) list
### theory "Draft.UPFCoreMoreTemplates"
### 0.337s elapsed time, 0.479s cpu time, 0.060s GC time
val it = (): unit
