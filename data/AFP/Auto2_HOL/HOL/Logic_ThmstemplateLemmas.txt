   [("Logic_Thms.ifb_eval", "?P ==> (if ?P then ?x else ?y) = ?x",
     template_implication
      ([template_predicate (template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 1))),
    ("Logic_Thms.if_eval'", "?P ==> (if ~ ?P then ?x else ?y) = ?y",
     template_implication
      ([template_predicate (template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("Logic_Thms.ifb_eval", "?P ==> (if ~ ?P then ?x else ?y) = ?y",
     template_implication
      ([template_predicate (template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("Logic_Thms.ifb_eval", "~ ?P ==> (if ?P then ?x else ?y) = ?y",
     template_implication
      ([template_negation (template_predicate (template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("Logic_Thms.iff_goal", "[| ?A ~= ?B; ?A |] ==> ~ ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_predicate (template_var 1)],
       template_negation (template_predicate (template_var 0)))),
    ("Logic_Thms.iff_goal", "[| ?A ~= ?B; ?B |] ==> ~ ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_predicate (template_var 0)],
       template_negation (template_predicate (template_var 1)))),
    ("Logic_Thms.iff_goal", "[| ?A ~= ?B; ~ ?A |] ==> ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation (template_predicate (template_var 1))],
       template_predicate (template_var 0))),
    ("Logic_Thms.iff_goal", "[| ?A ~= ?B; ~ ?B |] ==> ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation (template_predicate (template_var 0))],
       template_predicate (template_var 1))),
    ("Logic_Thms.iff_goal", "[| ?A ~= (~ ?B); ?B |] ==> ?A",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 1))),
    ("Logic_Thms.iff_goal", "[| (~ ?A) ~= ?B; ?A |] ==> ?B",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate (template_var 1)],
       template_predicate (template_var 0))),
    ("Logic_Thms.pair_inj", "((?a, ?b) = ?c) = (?a = fst ?c & ?b = snd ?c)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Logic_Thms.the1_equality'",
     "[| ?P ?a; EX! x. ?P x |] ==> (THE x. ?P x) = ?a",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Logic_Thms.Least_equality'",
     "[| ?P ?x; ALL y. ?P y --> ?x <= y |] ==> Least ?P = ?x",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Logic_Thms.ex_ex1I'",
     "[| ALL y. ?P y --> ?x = y; ?P ?x |] ==> EX! x. ?P x",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Logic_Thms.exists_split",
     "(EX x y. ?P x & ?Q y) = ((EX x. ?P x) & (EX y. ?Q y))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, t_empty)),
         template_app (template_hole 1, t_empty))))]
