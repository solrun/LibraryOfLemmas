   [("Tangle_Algebra.codomain_make_vert",
     "codomain_block (make_vert_block ?n) = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tangle_Algebra.domain_make_vert",
     "domain_block (make_vert_block ?n) = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tangle_Algebra.Nil_left_tensor", "?xs \<otimes> basic [] = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Tangle_Algebra.Nil_right_tensor", "basic [] \<otimes> ?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Tangle_Algebra.tensor_codomain_wall_additivity",
     "codomain_wall (?xs \<otimes> ?ys) =
      codomain_wall ?xs + codomain_wall ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Tangle_Algebra.tensor_domain_wall_additivity",
     "domain_wall (?xs \<otimes> ?ys) = domain_wall ?xs + domain_wall ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Tangle_Algebra.1",
     "basic ?x \<otimes> basic ?y = basic (?x \<otimes> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Tangle_Algebra.is_tangle_diagramness",
     "is_tangle_diagram ?x & is_tangle_diagram ?y -->
      is_tangle_diagram (?x \<otimes> ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Tangle_Algebra.is_tangle_make_vert_right",
     "is_tangle_diagram ?xs ==>
      is_tangle_diagram (?xs \<otimes> basic (make_vert_block ?n))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Tangle_Algebra.is_tangle_make_vert_left",
     "is_tangle_diagram ?xs ==>
      is_tangle_diagram (basic (make_vert_block ?n) \<otimes> ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_var 1))
           ))),
    ("Tangle_Algebra.tensor_preserves_is_tangle",
     "[| is_tangle_diagram ?x; is_tangle_diagram ?y |]
      ==> is_tangle_diagram (?x \<otimes> ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Tangle_Algebra.4",
     "?x * ?xs \<otimes> ?y * ?ys =
      (?x \<otimes> ?y) * (?xs \<otimes> ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Tangle_Algebra.3",
     "basic ?x \<otimes> ?y * ?ys =
      (if codomain_block ?x = 0 then (?x \<otimes> ?y) * ?ys
       else (?x \<otimes> ?y) *
            (basic (make_vert_block (nat (codomain_block ?x))) \<otimes>
             ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 0,
                         template_app (template_hole 4, template_var 2))))),
                 template_var 0)))
           ))),
    ("Tangle_Algebra.2",
     "?x * ?xs \<otimes> basic ?y =
      (if codomain_block ?y = 0 then (?x \<otimes> ?y) * ?xs
       else (?x \<otimes> ?y) *
            (?xs \<otimes>
             basic (make_vert_block (nat (codomain_block ?y)))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_hole 4, template_var 0)))))))
           ))),
    ("Tangle_Algebra.simp3",
     "is_tangle_diagram ?xs & is_tangle_diagram ?ys -->
      is_tangle_diagram (?xs \<otimes> ?ys) ==>
      is_tangle_diagram (?x * ?xs) & is_tangle_diagram (?y * ?ys) -->
      is_tangle_diagram (?x * ?xs \<otimes> ?y * ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_app (template_hole 2, template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           ))),
    ("Tangle_Algebra.simp2",
     "[| codomain_block ?x ~= 0;
         is_tangle_diagram
          (basic (make_vert_block (nat (codomain_block ?x)))) &
         is_tangle_diagram ?ys -->
         is_tangle_diagram
          (basic (make_vert_block (nat (codomain_block ?x))) \<otimes>
           ?ys) |]
      ==> is_tangle_diagram (basic ?x) & is_tangle_diagram (?y * ?ys) -->
          is_tangle_diagram (basic ?x \<otimes> ?y * ?ys)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 3,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 9, template_var 2)))))),
                  template_app (template_hole 5, template_var 1))),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 9, template_var 2))))),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("Tangle_Algebra.simp1",
     "[| codomain_block ?y ~= 0;
         is_tangle_diagram ?xs &
         is_tangle_diagram
          (basic (make_vert_block (nat (codomain_block ?y)))) -->
         is_tangle_diagram
          (?xs \<otimes>
           basic (make_vert_block (nat (codomain_block ?y)))) |]
      ==> is_tangle_diagram (?x * ?xs) & is_tangle_diagram (basic ?y) -->
          is_tangle_diagram (?x * ?xs \<otimes> basic ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 9, template_var 2))))))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 2,
                        template_app (template_hole 9, template_var 2)))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1))),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_app (template_hole 4, template_var 2))))
           )))]
