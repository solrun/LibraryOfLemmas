Loading theory "Draft.Preliminaries" (required by "Draft.Kauffman_MatrixTemplates" via "Draft.Kauffman_Matrix" via "Draft.Link_Algebra" via "Draft.Tangles")
Loading theory "Draft.Tangle_Relation" (required by "Draft.Kauffman_MatrixTemplates" via "Draft.Kauffman_Matrix" via "Draft.Link_Algebra" via "Draft.Tangle_Moves")
Loading theory "Draft.Templates" (required by "Draft.Kauffman_MatrixTemplates" via "Draft.ExtrEqs")
### theory "Draft.Tangle_Relation"
### 0.035s elapsed time, 0.134s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Kauffman_MatrixTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.108s cpu time, 0.112s GC time
consts
  concatenate :: "brick list => brick list => brick list"
### Ambiguous input (line 56 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_applC" ("_position" basic) ("_position" x))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>compose" ("_applC" ("_position" basic) ("_position" x))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Knot_Theory/Preliminaries.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>compose"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^fixed>compose" ("_position" xs) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^fixed>compose" ("_position" xs) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>compose"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^const>Fun.comp" ("_position" xs) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^const>Fun.comp" ("_position" xs) ("_position" ys))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compose :: "wall => wall => wall"
### Ambiguous input (line 60 of "$AFP/Knot_Theory/Preliminaries.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Knot_Theory/Preliminaries.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  block_length :: "brick list => nat"
consts
  domain :: "brick => int"
consts
  codomain :: "brick => int"
consts
  domain_block :: "brick list => int"
consts
  codomain_block :: "brick list => int"
### Ambiguous input (line 128 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Groups.times_class.times" ("_position" x)
###         ("_position" ys)))
###     ("_applC" ("_position" domain_block) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Preliminaries.wall.prod" ("_position" x) ("_position" ys)))
###     ("_applC" ("_position" domain_block) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  domain_wall :: "wall => int"
### Ambiguous input (line 134 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Groups.times_class.times" ("_position" x)
###         ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Preliminaries.wall.prod" ("_position" x) ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 136 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Preliminaries.compose" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" domain_wall) ("_position" xs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Fun.comp" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" domain_wall) ("_position" xs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Preliminaries.compose" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Fun.comp" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  brick_is_cup :: "brick => bool"
consts
  is_cup :: "brick list => bool"
### Ambiguous input (line 297 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Groups.times_class.times" ("_position" x)
###         ("_position" xs)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("_applC" ("_position" domain_wall) ("_position" xs)))
###       ("_position" False))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.wall.prod" ("_position" x) ("_position" xs)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("_applC" ("_position" domain_wall) ("_position" xs)))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  is_tangle_diagram :: "wall => bool"
### theory "Draft.Preliminaries"
### 0.839s elapsed time, 1.538s cpu time, 0.112s GC time
Loading theory "Draft.Tangles" (required by "Draft.Kauffman_MatrixTemplates" via "Draft.Kauffman_Matrix" via "Draft.Link_Algebra")
### Ambiguous input (line 49 of "$AFP/Knot_Theory/Tangles.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Fun.comp" ("_position" x) ("_position" y))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Knot_Theory/Tangles.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" y))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Fun.comp" ("_position" x) ("_position" y))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/Knot_Theory/Tangles.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" x))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" x))
###         ("_applC" ("_position" domain_wall) ("_position" y)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" x))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" x))
###         ("_applC" ("_position" domain_wall) ("_position" y)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Fun.comp" ("_position" x) ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Knot_Theory/Tangles.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Fun.comp" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Knot_Theory/Tangles.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" domain_wall) ("_position" y))
###       ("_applC" ("_position" codomain_wall) ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Fun.comp" ("_position" x) ("_position" y))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" domain_wall) ("_position" y))
###       ("_applC" ("_position" codomain_wall) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/Knot_Theory/Tangles.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compose_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^fixed>compose_Tangle"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compose_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compose_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/Knot_Theory/Tangles.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Fun.comp" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Fun.comp" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Fun.comp" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangles.compose_Tangle" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangles.compose_Tangle" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangles.compose_Tangle" ("_position" x) ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Tangles"
### 0.110s elapsed time, 0.152s cpu time, 0.060s GC time
Loading theory "Draft.Tangle_Algebra" (required by "Draft.Kauffman_MatrixTemplates" via "Draft.Kauffman_Matrix" via "Draft.Link_Algebra")
consts
  make_vert_block :: "nat => brick list"
### Ambiguous input (line 26 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("_applC" ("_position" basic)
###       ("\<^const>Preliminaries.concatenate" ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("_applC" ("_position" basic)
###       ("\<^fixed>tensor" ("_position" x) ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("_applC" ("_position" basic) ("_position" y))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" y))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" xs))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block)
###                   ("_position" y))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_position" x))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.times_class.times"
###         ("\<^const>Preliminaries.concatenate" ("_position" x)
###           ("_position" y))
###         ("_position" ys))
###       ("\<^const>Preliminaries.wall.prod"
###         ("\<^fixed>tensor" ("_position" x) ("_position" y))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_block) ("_position" x)))))
###           ("_position" ys))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^fixed>tensor" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^fixed>tensor" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^fixed>tensor" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^fixed>tensor" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Preliminaries.concatenate" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Preliminaries.concatenate" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Preliminaries.concatenate" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Preliminaries.wall.prod" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Preliminaries.concatenate" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Preliminaries.wall.prod" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Preliminaries.wall.prod"
###       ("\<^fixed>tensor" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs"
###         ("\<^const>Groups.times_class.times" ("_position" x)
###           ("_position" xs))
###         ("\<^const>Groups.times_class.times" ("_position" y)
###           ("_position" ys))))
###     ("\<^const>Preliminaries.wall.prod"
###       ("\<^fixed>tensor" ("_position" x) ("_position" y))
###       ("\<^fixed>tensor" ("_position" xs) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 44 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate" ("_position" xs)
###       ("_applC" ("_position" basic) ("\<^const>List.list.Nil")))
###     ("_position" xs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###       ("_applC" ("_position" basic) ("\<^const>List.list.Nil")))
###     ("_position" xs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###       ("_position" xs))
###     ("_position" xs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###       ("_position" xs))
###     ("_position" xs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^fixed>tensor_Tangle"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.concatenate"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_list" ("_position" vert)))
###         ("_applC" ("_position" basic) ("_list" ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("\<^const>Preliminaries.concatenate" ("_list" ("_position" vert))
###         ("_list" ("_position" vert))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_list" ("_position" vert)))
###         ("_applC" ("_position" basic) ("_list" ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("\<^const>Tangle_Algebra.tensor" ("_list" ("_position" vert))
###         ("_list" ("_position" vert))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tensor)
###       ("_cargs" ("_applC" ("_position" basic) ("_list" ("_position" vert)))
###         ("_applC" ("_position" basic) ("_list" ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_list" ("_position" vert))
###         ("_list" ("_position" vert))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###         ("_position" ys)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" domain_wall) ("_position" xs))
###       ("_applC" ("_position" domain_wall) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" xs) ("_position" ys)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" domain_wall) ("_position" xs))
###       ("_applC" ("_position" domain_wall) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Preliminaries.concatenate" ("_position" xs)
###         ("_position" ys)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" domain_wall) ("_position" xs))
###       ("_applC" ("_position" domain_wall) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###         ("_position" ys)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" codomain_wall) ("_position" xs))
###       ("_applC" ("_position" codomain_wall) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" xs) ("_position" ys)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" codomain_wall) ("_position" xs))
###       ("_applC" ("_position" codomain_wall) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Preliminaries.concatenate" ("_position" xs)
###         ("_position" ys)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" codomain_wall) ("_position" xs))
###       ("_applC" ("_position" codomain_wall) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 302 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" xs)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###         ("_applC" ("_position" basic)
###           ("_applC" ("_position" make_vert_block) ("_position" n)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" xs)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###         ("_applC" ("_position" basic)
###           ("_applC" ("_position" make_vert_block) ("_position" n)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" xs)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.concatenate" ("_position" xs)
###         ("_applC" ("_position" basic)
###           ("_applC" ("_position" make_vert_block) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 375 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" xs)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("_applC" ("_position" make_vert_block) ("_position" n)))
###         ("_position" xs)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" xs)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_applC" ("_position" basic)
###           ("_applC" ("_position" make_vert_block) ("_position" n)))
###         ("_position" xs)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram) ("_position" xs)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.concatenate"
###         ("_applC" ("_position" basic)
###           ("_applC" ("_position" make_vert_block) ("_position" n)))
###         ("_position" xs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 447 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 36 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" y))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" y)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" x)
###               ("_position" xs)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" y))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("\<^const>Preliminaries.wall.prod" ("_position" x)
###               ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" y))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 504 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 36 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Preliminaries.wall.prod" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" codomain_block) ("_position" x))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" x))))))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor_Tangle"
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block) ("_position" x)))))
###             ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram)
###             ("_applC" ("_position" basic) ("_position" x)))
###           ("_applC" ("_position" is_tangle_diagram)
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic) ("_position" x))
###             ("\<^const>Groups.times_class.times" ("_position" y)
###               ("_position" ys))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 569 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 144 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Preliminaries.concatenate" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ys)))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" xs)
###           ("_position" ys)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" x)
###             ("_position" xs)))
###         ("_applC" ("_position" is_tangle_diagram)
###           ("\<^const>Preliminaries.wall.prod" ("_position" y)
###             ("_position" ys))))
###       ("_applC" ("_position" is_tangle_diagram)
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("\<^const>Groups.times_class.times" ("_position" x)
###             ("_position" xs))
###           ("\<^const>Groups.times_class.times" ("_position" y)
###             ("_position" ys)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 627 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" x)
###       ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Tangle_Algebra.tensor" ("_position" x) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.concatenate" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 633 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Tensor_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Tensor_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Tensor_Tangle)
###       ("_cargs" ("_position" x) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.concatenate"
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" x))
###         ("_applC" ("_position" Rep_Tangle_Diagram) ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 640 of "$AFP/Knot_Theory/Tangle_Algebra.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.concatenate" ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.concatenate" ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor_Tangle"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Preliminaries.concatenate" ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor_Tangle"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" x) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor_Tangle"
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" x))
###       ("_applC" ("_position" Abs_Tangle_Diagram) ("_position" y)))
###     ("_applC" ("_position" Abs_Tangle_Diagram)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" x)
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Tangle_Algebra"
### 0.353s elapsed time, 0.515s cpu time, 0.066s GC time
Loading theory "Draft.Tangle_Moves" (required by "Draft.Kauffman_MatrixTemplates" via "Draft.Kauffman_Matrix" via "Draft.Link_Algebra")
### Ambiguous input (line 31 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cup))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert)))))
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cap))))))
### ("\<^const>Pure.eq" ("_position" right_over)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("_list" ("_args" ("_position" vert) ("_position" cup))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" over) ("_position" vert))))
###       ("_applC" ("_position" basic)
###         ("_list" ("_args" ("_position" vert) ("_position" cap)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_over)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cup)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" right_under)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Nil")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Fun.comp"
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cup)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cap)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" left_under)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" cup)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" cap)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Fun.comp"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Preliminaries.compose"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Tangles.compose_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.eq" ("_position" straight_line)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil")))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Nil")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Preliminaries.compose"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" r_over_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" over)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Preliminaries.compose"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" l_over_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" over)
###           ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Preliminaries.compose"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" r_under_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" under)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 101 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Preliminaries.compose"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangles.compose_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Fun.comp"
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))
###     ("\<^const>Tangle_Algebra.Tensor_Tangle"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Fun.comp"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Tangles.compose_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.eq" ("_position" l_under_braid)
###   ("\<^const>Tangle_Algebra.Tensor_Tangle"
###     ("\<^const>Preliminaries.compose"
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" vert)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil"))))
###       ("_applC" ("_position" basic)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))
###     ("_applC" ("_position" basic)
###       ("\<^const>List.list.Cons" ("_position" vert)
###         ("\<^const>List.list.Cons" ("_position" under)
###           ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_posneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" pull_negpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Nil")))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_topdown)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" straighten_downtop)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Nil")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_toppos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_topneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cap)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cap)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downpos)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" over)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" under)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rotate_downneg)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" cup)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" under)
###               ("\<^const>List.list.Nil"))))))
###     ("\<^const>HOL.eq" ("_position" y)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" vert)
###             ("\<^const>List.list.Cons" ("_position" cup)
###               ("\<^const>List.list.Nil"))))
###         ("_applC" ("_position" basic)
###           ("\<^const>List.list.Cons" ("_position" over)
###             ("\<^const>List.list.Cons" ("_position" vert)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 216 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("\<^const>Fun.comp" ("_position" B)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_wall)
###                     ("_position" B)))))))
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_wall) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" B))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("\<^const>Preliminaries.compose" ("_position" B)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_wall)
###                     ("_position" B)))))))
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_wall) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" B))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("\<^const>Tangles.compose_Tangle" ("_position" B)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_wall)
###                     ("_position" B)))))))
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_wall) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" B))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom1)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" B)
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_wall)
###                     ("_position" B)))))))
###         ("\<^const>HOL.eq" ("_position" y) ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_wall) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" is_tangle_diagram) ("_position" B))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 228 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_bottom)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose" ("_position" B)
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" codomain_wall) ("_position" B)))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle"
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###             ("_position" B)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" domain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" compress_top)
###     ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_wall) ("_position" B)))))
###           ("_position" B)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose" ("_position" B)
###             ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" codomain_wall) ("_position" B))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" is_tangle_diagram) ("_position" B)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 247 of "$AFP/Knot_Theory/Tangle_Moves.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangle_Algebra.Tensor_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Preliminaries.compose"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Tangles.compose_Tangle"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" slide) ("_cargs" ("_position" x) ("_position" y)))
###   ("\<^const>HOL.Ex_binder" ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Tangles.compose_Tangle"
###           ("_applC" ("_position" basic)
###             ("_applC" ("_position" make_vert_block)
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" domain_block) ("_position" B)))))
###           ("_applC" ("_position" basic) ("_position" B))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Preliminaries.compose"
###             ("_applC" ("_position" basic) ("_position" B))
###             ("_applC" ("_position" basic)
###               ("_applC" ("_position" make_vert_block)
###                 ("_applC" ("_position" nat)
###                   ("_applC" ("_position" codomain_block)
###                     ("_position" B)))))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" domain_block) ("_position" B))
###           ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Tangle_Moves"
### 0.428s elapsed time, 0.496s cpu time, 0.020s GC time
Loading theory "Draft.Link_Algebra" (required by "Draft.Kauffman_MatrixTemplates" via "Draft.Kauffman_Matrix")
### Ambiguous input (line 11 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangles.compose_Tangle" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Preliminaries.compose" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence" ("_position" a)
###       ("\<^const>Fun.comp" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangles.compose_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangles.compose_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.compose" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangles.compose_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.compose" ("_position" C) ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Preliminaries.concatenate"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Preliminaries.concatenate"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.concatenate" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.concatenate" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Tangle_Equivalence"
###       ("\<^const>Preliminaries.concatenate"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.concatenate" ("_position" C)
###         ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Tangle_Equivalence"
  Proving monotonicity ...
### Ambiguous input (line 29 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" domain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Tangles.compose_Tangle" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Preliminaries.compose" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_wall) ("_position" a))
###         ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence" ("_position" a)
###       ("\<^const>Fun.comp" ("_position" a)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 31 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangles.compose_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangles.compose_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangles.compose_Tangle" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.compose" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_tangle_diagram) ("_position" D))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" B))
###                     ("_applC" ("_position" codomain_wall) ("_position" A)))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" domain_wall) ("_position" D))
###                     ("_applC" ("_position" codomain_wall)
###                       ("_position" C)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangles.compose_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.compose" ("_position" C) ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Knot_Theory/Link_Algebra.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Preliminaries.concatenate"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Preliminaries.concatenate"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Tangle_Algebra.tensor" ("_position" C) ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.concatenate" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.concatenate" ("_position" C)
###         ("_position" D)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^fixed>Framed_Tangle_Equivalence"
###         ("_constrain" ("_position" B) ("_type_name" wall)) ("_position" D))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>Framed_Tangle_Equivalence"
###           ("_constrain" ("_position" A) ("_type_name" wall))
###           ("_position" C))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_tangle_diagram) ("_position" A))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_tangle_diagram) ("_position" B))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_tangle_diagram) ("_position" C))
###               ("_applC" ("_position" is_tangle_diagram)
###                 ("_position" D))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Framed_Tangle_Equivalence"
###       ("\<^const>Preliminaries.concatenate"
###         ("_constrain" ("_position" A) ("_type_name" wall)) ("_position" B))
###       ("\<^const>Preliminaries.concatenate" ("_position" C)
###         ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Framed_Tangle_Equivalence"
  Proving monotonicity ...
### theory "Draft.Link_Algebra"
### 0.309s elapsed time, 0.316s cpu time, 0.000s GC time
Loading theory "Draft.Kauffman_Matrix" (required by "Draft.Kauffman_MatrixTemplates")
### Ambiguous input (line 42 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" a) ("_position" b)))
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" c) ("_position" d))))
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.wall.prod" ("_position" a) ("_position" d))
###       ("\<^const>Groups.times_class.times" ("_position" c)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" a) ("_position" b)))
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" c) ("_position" d))))
###     ("\<^const>HOL.eq"
###       ("\<^const>Groups.times_class.times" ("_position" a) ("_position" d))
###       ("\<^const>Groups.times_class.times" ("_position" c)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" a) ("_position" b)))
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" c) ("_position" d))))
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.wall.prod" ("_position" a) ("_position" d))
###       ("\<^const>Preliminaries.wall.prod" ("_position" c)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" a) ("_position" b)))
###       ("_applC" ("_position" Fract)
###         ("_cargs" ("_position" c) ("_position" d))))
###     ("\<^const>HOL.eq"
###       ("\<^const>Groups.times_class.times" ("_position" a) ("_position" d))
###       ("\<^const>Preliminaries.wall.prod" ("_position" c)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.times_class.times" ("_position" p) ("_position" q))
###     ("_constrain" ("\<^const>Groups.one_class.one")
###       ("_type_name" rat_poly))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.wall.prod" ("_position" p) ("_position" q))
###     ("_constrain" ("\<^const>Groups.one_class.one")
###       ("_type_name" rat_poly))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rat_poly_times)
###     ("_cargs" ("_position" p) ("_position" q)))
###   ("\<^const>Groups.times_class.times" ("_position" p) ("_position" q)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" rat_poly_times)
###     ("_cargs" ("_position" p) ("_position" q)))
###   ("\<^const>Preliminaries.wall.prod" ("_position" p) ("_position" q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 115 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rat_poly.matrix_mult)
###       ("_cargs"
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.one_class.one")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.zero_class.zero")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args"
###             ("\<^const>Groups.times_class.times" ("_position" A)
###               ("_position" A))
###             ("_position" A)))
###         ("_list"
###           ("_args" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.times_class.times" ("_position" A)
###               ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rat_poly.matrix_mult)
###       ("_cargs"
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.one_class.one")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.zero_class.zero")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args"
###             ("\<^const>Preliminaries.wall.prod" ("_position" A)
###               ("_position" A))
###             ("_position" A)))
###         ("_list"
###           ("_args" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Groups.times_class.times" ("_position" A)
###               ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rat_poly.matrix_mult)
###       ("_cargs"
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.one_class.one")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.zero_class.zero")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args"
###             ("\<^const>Groups.times_class.times" ("_position" A)
###               ("_position" A))
###             ("_position" A)))
###         ("_list"
###           ("_args" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Preliminaries.wall.prod" ("_position" A)
###               ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rat_poly.matrix_mult)
###       ("_cargs"
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.one_class.one")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))
###         ("_list"
###           ("_args"
###             ("_list"
###               ("_args" ("_position" A) ("\<^const>Groups.zero_class.zero")))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_position" A)))))))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args"
###             ("\<^const>Preliminaries.wall.prod" ("_position" A)
###               ("_position" A))
###             ("_position" A)))
###         ("_list"
###           ("_args" ("\<^const>Groups.zero_class.zero")
###             ("\<^const>Preliminaries.wall.prod" ("_position" A)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_list" ("_list" ("\<^const>Groups.one_class.one")))
###       ("_indexdefault") ("_position" M))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate"
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))) ("_position" M))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))) ("_position" M))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor_Tangle"
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))) ("_position" M))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))) ("_position" M))
###     ("_position" M)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Group.monoid.mult_indexed" ("_position" M) ("_indexdefault")
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate" ("_position" M)
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor" ("_position" M)
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" M)
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))))
###     ("_position" M)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" M)
###       ("_list" ("_list" ("\<^const>Groups.one_class.one"))))
###     ("_position" M)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" over))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" A)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("_args"
###                     ("\<^const>Groups.minus_class.minus" ("_position" A)
###                       ("\<^const>Groups.times_class.times"
###                         ("\<^const>Groups.times_class.times" ("_position" B)
###                           ("_position" B))
###                         ("_position" B)))
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" A)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" over))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" A)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("_args"
###                     ("\<^const>Groups.minus_class.minus" ("_position" A)
###                       ("\<^const>Preliminaries.wall.prod" ("_position" B)
###                         ("\<^const>Groups.times_class.times" ("_position" B)
###                           ("_position" B))))
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" A)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" over))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" A)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("_args"
###                     ("\<^const>Groups.minus_class.minus" ("_position" A)
###                       ("\<^const>Preliminaries.wall.prod"
###                         ("\<^const>Groups.times_class.times" ("_position" B)
###                           ("_position" B))
###                         ("_position" B)))
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" A)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" over))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" A)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" B)
###                   ("_args"
###                     ("\<^const>Groups.minus_class.minus" ("_position" A)
###                       ("\<^const>Preliminaries.wall.prod" ("_position" B)
###                         ("\<^const>Preliminaries.wall.prod" ("_position" B)
###                           ("_position" B))))
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" A)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 160 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" under))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" B)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args"
###                 ("\<^const>Groups.minus_class.minus" ("_position" B)
###                   ("\<^const>Groups.times_class.times"
###                     ("\<^const>Groups.times_class.times" ("_position" A)
###                       ("_position" A))
###                     ("_position" A)))
###                 ("_args" ("_position" A)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" A)
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" B)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" under))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" B)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args"
###                 ("\<^const>Groups.minus_class.minus" ("_position" B)
###                   ("\<^const>Preliminaries.wall.prod" ("_position" A)
###                     ("\<^const>Groups.times_class.times" ("_position" A)
###                       ("_position" A))))
###                 ("_args" ("_position" A)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" A)
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" B)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" under))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" B)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args"
###                 ("\<^const>Groups.minus_class.minus" ("_position" B)
###                   ("\<^const>Preliminaries.wall.prod"
###                     ("\<^const>Groups.times_class.times" ("_position" A)
###                       ("_position" A))
###                     ("_position" A)))
###                 ("_args" ("_position" A)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" A)
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" B)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" brickmat) ("_position" under))
###     ("_list"
###       ("_args"
###         ("_list"
###           ("_args" ("_position" B)
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("_args"
###           ("_list"
###             ("_args" ("\<^const>Groups.zero_class.zero")
###               ("_args"
###                 ("\<^const>Groups.minus_class.minus" ("_position" B)
###                   ("\<^const>Preliminaries.wall.prod" ("_position" A)
###                     ("\<^const>Preliminaries.wall.prod" ("_position" A)
###                       ("_position" A))))
###                 ("_args" ("_position" A)
###                   ("\<^const>Groups.zero_class.zero")))))
###           ("_args"
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("_position" A)
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("\<^const>Groups.zero_class.zero")))))
###             ("_list"
###               ("_args" ("\<^const>Groups.zero_class.zero")
###                 ("_args" ("\<^const>Groups.zero_class.zero")
###                   ("_args" ("\<^const>Groups.zero_class.zero")
###                     ("_position" B)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  brickmat :: "brick => int poly fract list list"
### Ambiguous input (line 274 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rowlength)
###       ("_applC" ("_position" Suc) ("_position" k)))
###     ("\<^const>Groups.times_class.times"
###       ("_Numeral" ("_constify" ("_position" 2)))
###       ("_applC" ("_position" Suc) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rowlength)
###       ("_applC" ("_position" Suc) ("_position" k)))
###     ("\<^const>Preliminaries.wall.prod"
###       ("_Numeral" ("_constify" ("_position" 2)))
###       ("_applC" ("_position" Suc) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  rowlength :: "nat => nat"
### Ambiguous input (line 291 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>List.list.Cons" ("_position" l) ("_position" ls)))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" brickmat) ("_position" l)) ("_indexdefault")
###       ("_applC" ("_position" blockmat) ("_position" ls)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>List.list.Cons" ("_position" l) ("_position" ls)))
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" brickmat) ("_position" l))
###       ("_applC" ("_position" blockmat) ("_position" ls)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>List.list.Cons" ("_position" l) ("_position" ls)))
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_applC" ("_position" brickmat) ("_position" l))
###       ("_applC" ("_position" blockmat) ("_position" ls)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>List.list.Cons" ("_position" l) ("_position" ls)))
###     ("\<^const>Tangle_Algebra.tensor_Tangle"
###       ("_applC" ("_position" brickmat) ("_position" l))
###       ("_applC" ("_position" blockmat) ("_position" ls)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>List.list.Cons" ("_position" l) ("_position" ls)))
###     ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###       ("_applC" ("_position" brickmat) ("_position" l))
###       ("_applC" ("_position" blockmat) ("_position" ls)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  blockmat :: "brick list => int poly fract list list"
### Ambiguous input (line 721 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Groups.times_class.times" ("_position" w)
###         ("_position" ws)))
###     ("_applC" ("_position" rat_poly.matrix_mult)
###       ("_cargs" ("_applC" ("_position" blockmat) ("_position" w))
###         ("_applC" ("_position" kauff_mat) ("_position" ws))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Preliminaries.wall.prod" ("_position" w) ("_position" ws)))
###     ("_applC" ("_position" rat_poly.matrix_mult)
###       ("_cargs" ("_applC" ("_position" blockmat) ("_position" w))
###         ("_applC" ("_position" kauff_mat) ("_position" ws))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  kauff_mat :: "wall => int poly fract list list"
### Ambiguous input (line 876 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" domain_wall) ("_position" ws2))
###           ("_applC" ("_position" codomain_wall) ("_position" ws1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" ws1)
###           ("_position" ws2)))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs" ("_applC" ("_position" kauff_mat) ("_position" ws1))
###           ("_applC" ("_position" kauff_mat) ("_position" ws2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" domain_wall) ("_position" ws2))
###           ("_applC" ("_position" codomain_wall) ("_position" ws1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Tangles.compose_Tangle" ("_position" ws1)
###           ("_position" ws2)))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs" ("_applC" ("_position" kauff_mat) ("_position" ws1))
###           ("_applC" ("_position" kauff_mat) ("_position" ws2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" domain_wall) ("_position" ws2))
###           ("_applC" ("_position" codomain_wall) ("_position" ws1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Preliminaries.compose" ("_position" ws1)
###           ("_position" ws2)))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs" ("_applC" ("_position" kauff_mat) ("_position" ws1))
###           ("_applC" ("_position" kauff_mat) ("_position" ws2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" domain_wall) ("_position" ws2))
###           ("_applC" ("_position" codomain_wall) ("_position" ws1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Fun.comp" ("_position" ws1) ("_position" ws2)))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs" ("_applC" ("_position" kauff_mat) ("_position" ws1))
###           ("_applC" ("_position" kauff_mat) ("_position" ws2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 960 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Fun.comp" ("_position" ws)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Preliminaries.compose" ("_position" ws)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Tangles.compose_Tangle" ("_position" ws)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle" ("_position" ws)
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 980 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" ws)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Preliminaries.compose"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" ws)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Tangles.compose_Tangle"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" ws)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kauff_mat) ("_position" ws))
###     ("_applC" ("_position" kauff_mat)
###       ("\<^const>Tangle_Algebra.Tensor_Tangle"
###         ("_applC" ("_position" basic) ("\<^const>List.list.Nil"))
###         ("_position" ws)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1000 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" blockmat) ("\<^const>List.list.Nil"))
###       ("_applC" ("_position" blockmat) ("_position" b)))
###     ("_applC" ("_position" blockmat) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_applC" ("_position" blockmat) ("\<^const>List.list.Nil"))
###       ("_applC" ("_position" blockmat) ("_position" b)))
###     ("_applC" ("_position" blockmat) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tangle_Algebra.tensor_Tangle"
###       ("_applC" ("_position" blockmat) ("\<^const>List.list.Nil"))
###       ("_applC" ("_position" blockmat) ("_position" b)))
###     ("_applC" ("_position" blockmat) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###       ("_applC" ("_position" blockmat) ("\<^const>List.list.Nil"))
###       ("_applC" ("_position" blockmat) ("_position" b)))
###     ("_applC" ("_position" blockmat) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" blockmat) ("\<^const>List.list.Nil"))
###       ("_indexdefault") ("_applC" ("_position" blockmat) ("_position" b)))
###     ("_applC" ("_position" blockmat) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1005 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 625 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.concatenate"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Group.monoid.mult_indexed"
###         ("_applC" ("_position" brickmat) ("_position" a)) ("_indexdefault")
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Tangle_Algebra.tensor"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Tangle_Algebra.tensor"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Tangle_Algebra.tensor"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.concatenate"
###         ("_applC" ("_position" brickmat) ("_position" a))
###         ("\<^const>Tangle_Algebra.tensor"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Group.monoid.mult_indexed"
###         ("_applC" ("_position" brickmat) ("_position" a)) ("_indexdefault")
###         ("\<^const>Tangle_Algebra.tensor"
###           ("_applC" ("_position" blockmat) ("_position" xs))
###           ("_applC" ("_position" blockmat) ("_position" ys))))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("\<^const>Preliminaries.concatenate"
###           ("_applC" ("_position" brickmat) ("_position" a))
###           ("_applC" ("_position" blockmat) ("_position" xs)))
###         ("_indexdefault")
###         ("_applC" ("_position" blockmat) ("_position" ys))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1030 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 25 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Tangle_Algebra.tensor_Tangle"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Group.monoid.mult_indexed"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_indexdefault")
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Preliminaries.concatenate"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Tangle_Algebra.tensor"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Tangle_Algebra.tensor_Tangle"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" xs)
###     ("\<^const>HOL.All_binder" ("_position" ys)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" kauff_mat)
###           ("\<^const>Group.monoid.mult_indexed"
###             ("_applC" ("_position" basic) ("_position" xs))
###             ("_indexdefault")
###             ("_applC" ("_position" basic) ("_position" ys))))
###         ("\<^const>Tangle_Algebra.tensor_Tangle"
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" xs)))
###           ("_applC" ("_position" kauff_mat)
###             ("_applC" ("_position" basic) ("_position" ys))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 25 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Preliminaries.concatenate" ("_position" a)
###         ("_position" b)))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" blockmat) ("_position" a)) ("_indexdefault")
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" a) ("_position" b)))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" blockmat) ("_position" a)) ("_indexdefault")
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" a)
###         ("_position" b)))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" blockmat) ("_position" a)) ("_indexdefault")
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" a)
###         ("_position" b)))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" blockmat) ("_position" a)) ("_indexdefault")
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Group.monoid.mult_indexed" ("_position" a)
###         ("_indexdefault") ("_position" b)))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" blockmat) ("_position" a)) ("_indexdefault")
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Preliminaries.concatenate" ("_position" a)
###         ("_position" b)))
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" blockmat) ("_position" a))
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Tangle_Algebra.tensor" ("_position" a) ("_position" b)))
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" blockmat) ("_position" a))
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" a)
###         ("_position" b)))
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" blockmat) ("_position" a))
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" a)
###         ("_position" b)))
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" blockmat) ("_position" a))
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blockmat)
###       ("\<^const>Group.monoid.mult_indexed" ("_position" a)
###         ("_indexdefault") ("_position" b)))
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" blockmat) ("_position" a))
###       ("_applC" ("_position" blockmat) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1081 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Groups.times_class.times" ("_position" w) ("_position" ws))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.wall.prod" ("_position" w) ("_position" ws))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1096 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Groups.times_class.times" ("_position" w1)
###       ("_position" ws1))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.wall.prod" ("_position" w1)
###       ("_position" ws1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1097 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Groups.times_class.times" ("_position" w2)
###       ("_position" ws2))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.wall.prod" ("_position" w2)
###       ("_position" ws2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1151 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" make_vert_equiv)
###       ("_applC" ("_position" Suc) ("_position" k)))
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" mat1)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_indexdefault")
###       ("_applC" ("_position" make_vert_equiv) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" make_vert_equiv)
###       ("_applC" ("_position" Suc) ("_position" k)))
###     ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###       ("_applC" ("_position" mat1)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_applC" ("_position" make_vert_equiv) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" make_vert_equiv)
###       ("_applC" ("_position" Suc) ("_position" k)))
###     ("\<^const>Tangle_Algebra.tensor_Tangle"
###       ("_applC" ("_position" mat1)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_applC" ("_position" make_vert_equiv) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" make_vert_equiv)
###       ("_applC" ("_position" Suc) ("_position" k)))
###     ("\<^const>Tangle_Algebra.tensor"
###       ("_applC" ("_position" mat1)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_applC" ("_position" make_vert_equiv) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" make_vert_equiv)
###       ("_applC" ("_position" Suc) ("_position" k)))
###     ("\<^const>Preliminaries.concatenate"
###       ("_applC" ("_position" mat1)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_applC" ("_position" make_vert_equiv) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  make_vert_equiv :: "nat => int poly fract list list"
### Ambiguous input (line 1232 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nat_mult)
###     ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^const>Groups.times_class.times"
###     ("_constrain" ("_position" a) ("_type_name" nat)) ("_position" b)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nat_mult)
###     ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^const>Preliminaries.wall.prod"
###     ("_constrain" ("_position" a) ("_type_name" nat)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1261 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less" ("_position" a)
###     ("\<^const>Groups.times_class.times" ("_position" b) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less" ("_position" a)
###     ("\<^const>Preliminaries.wall.prod" ("_position" b) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1700 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Group.monoid.mult_indexed"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_indexdefault") ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.concatenate"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Group.monoid.mult_indexed"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_indexdefault") ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" A2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" A2) ("_position" B1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.concatenate"
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" A1) ("_position" A2)))
###         ("_position" B1))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" A2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1739 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###         ("_indexdefault")
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.concatenate" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###             ("_indexdefault") ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Group.monoid.mult_indexed" ("_position" A1)
###         ("_indexdefault")
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Tangle_Algebra.tensor" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" B2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" weak_matrix_match2)
###       ("_cargs" ("_position" A1)
###         ("_cargs" ("_position" B1) ("_position" B2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Preliminaries.concatenate" ("_position" A1)
###         ("_applC" ("_position" rat_poly.matrix_mult)
###           ("_cargs" ("_position" B1) ("_position" B2))))
###       ("_applC" ("_position" rat_poly.matrix_mult)
###         ("_cargs"
###           ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" A1)
###             ("_position" B1))
###           ("_position" B2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1772 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Groups.times_class.times" ("_position" w1)
###       ("_position" ws1))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.wall.prod" ("_position" w1)
###       ("_position" ws1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1822 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Groups.times_class.times" ("_position" w2)
###       ("_position" ws2))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.wall.prod" ("_position" w2)
###       ("_position" ws2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1872 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Groups.times_class.times" ("_position" b)
###       ("_applC" ("_position" basic)
###         ("_applC" ("_position" make_vert_block)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" codomain_block) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_tangle_diagram)
###     ("\<^const>Preliminaries.wall.prod" ("_position" b)
###       ("_applC" ("_position" basic)
###         ("_applC" ("_position" make_vert_block)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" codomain_block) ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1886 of "$AFP/Knot_Theory/Kauffman_Matrix.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Preliminaries.concatenate" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Tangle_Algebra.tensor" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Group.monoid.mult_indexed" ("_position" ws1)
###           ("_indexdefault") ("_position" ws2)))
###       ("\<^const>Kauffman_Matrix.rat_polymat_tensor"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Preliminaries.concatenate" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Tangle_Algebra.tensor" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Tangle_Algebra.tensor_Tangle" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Kauffman_Matrix.rat_polymat_tensor" ("_position" ws1)
###           ("_position" ws2)))
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws1))
###       ("_applC" ("_position" is_tangle_diagram) ("_position" ws2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" kauff_mat)
###         ("\<^const>Group.monoid.mult_indexed" ("_position" ws1)
###           ("_indexdefault") ("_position" ws2)))
###       ("\<^const>Tangle_Algebra.tensor_Tangle"
###         ("_applC" ("_position" kauff_mat) ("_position" ws1))
###         ("_applC" ("_position" kauff_mat) ("_position" ws2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Kauffman_Matrix"
### 1.519s elapsed time, 2.114s cpu time, 0.697s GC time
Loading theory "Draft.Kauffman_MatrixTemplates"
val templateLemmas =
   [("Kauffman_Matrix.blockmat_make_vert",
     "blockmat (make_vert_block ?n) = make_vert_equiv ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Kauffman_Matrix.eval_pCons", "poly (pCons (0::?'a) 1) ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Kauffman_Matrix.is_tangle_diagram_vert_block",
     "is_tangle_diagram
       (?b * basic (make_vert_block (nat (codomain_block ?b))))",
     template_predicate
      (
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))))
         )),
    ("Kauffman_Matrix.prop_make_vert_equiv",
     "rat_poly.row_length (make_vert_equiv ?n) = 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Kauffman_Matrix.prop_make_vert_equiv",
     "length (make_vert_equiv ?n) = 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Kauffman_Matrix.matrix_blockmat",
     "mat (rat_poly.row_length (blockmat ?ls)) (length (blockmat ?ls))
       (blockmat ?ls)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 1, template_var 0))
         )),
    ("Kauffman_Matrix.prop_make_vert_equiv",
     "mat (rat_poly.row_length (make_vert_equiv ?n))
       (length (make_vert_equiv ?n)) (make_vert_equiv ?n)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 1, template_var 0))
         )),
    ("Kauffman_Matrix.link_diagram_matrix",
     "is_link_diagram ?ws ==> mat 1 1 (kauff_mat ?ws)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Kauffman_Matrix.kauff_mat_non_empty",
     "is_tangle_diagram ?ws ==> kauff_mat ?ws ~= []",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Kauffman_Matrix.row_length_domain_block",
     "rat_poly.row_length (blockmat ?ls) = 2 ^ nat (domain_block ?ls)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Kauffman_Matrix.length_codomain_block",
     "length (blockmat ?ls) = 2 ^ nat (codomain_block ?ls)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Kauffman_Matrix.make_vert_equiv_mat",
     "make_vert_equiv ?n = mat1 (2 ^ ?n)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Kauffman_Matrix.make_vert_block_map_blockmat",
     "blockmat (make_vert_block ?n) = mat1 (2 ^ ?n)",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Kauffman_Matrix.left_id_blockmat",
     "blockmat [] \<otimes> blockmat ?b = blockmat ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_hole 0)),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Kauffman_Matrix.minus_left_distributivity",
     "rat_poly_times ?p (?q - ?r) =
      rat_poly_times ?p ?q - rat_poly_times ?p ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Kauffman_Matrix.minus_right_distributivity",
     "rat_poly_times (?p - ?q) ?r =
      rat_poly_times ?p ?r - rat_poly_times ?q ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Kauffman_Matrix.effective_matrix_kauff_mat",
     "is_tangle_diagram ?ws ==>
      mat (rat_poly.row_length (kauff_mat ?ws)) (length (kauff_mat ?ws))
       (kauff_mat ?ws)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Kauffman_Matrix.is_tangle_diagram_length_rowlength",
     "is_tangle_diagram (?w * ?ws) ==>
      length (blockmat ?w) = rat_poly.row_length (kauff_mat ?ws)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Kauffman_Matrix.blockmat_tensor_distrib",
     "blockmat (?a \<otimes> ?b) = blockmat ?a \<otimes> blockmat ?b",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 3, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Kauffman_Matrix.effective_matrix_kauff_mat",
     "is_tangle_diagram ?ws ==>
      rat_poly.row_length (kauff_mat ?ws) = 2 ^ nat (domain_wall ?ws)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Kauffman_Matrix.effective_matrix_kauff_mat",
     "is_tangle_diagram ?ws ==>
      length (kauff_mat ?ws) = 2 ^ nat (codomain_wall ?ws)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Kauffman_Matrix.mult_inv_non_zero",
     "[| ?p ~= 0; rat_poly_times ?p ?q = 1 |] ==> ?q ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("Kauffman_Matrix.left_mat_compose",
     "[| is_tangle_diagram ?ws; codomain_wall ?ws = 0 |]
      ==> kauff_mat ?ws = kauff_mat (?ws \<circ> basic [])",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_hole 0)))))),
    ("Kauffman_Matrix.right_mat_compose",
     "[| is_tangle_diagram ?ws; domain_wall ?ws = 0 |]
      ==> kauff_mat ?ws = kauff_mat (basic [] \<circ> ?ws)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0))))),
    ("Kauffman_Matrix.equal_div_mod2",
     "(?j div ?a = ?i div ?a & ?j mod ?a = ?i mod ?a) = (?j = ?i)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ),
       template_equation (template_var 2, template_var 0))),
    ("Kauffman_Matrix.is_tangle_diagram_weak_matrix_match",
     "[| is_tangle_diagram (?w1.0 * ?ws1.0); codomain_block ?w2.0 = 0 |]
      ==> weak_matrix_match (blockmat ?w1.0) (kauff_mat ?ws1.0)
           (blockmat ?w2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Kauffman_Matrix.is_tangle_diagram_weak_matrix_match2",
     "[| is_tangle_diagram (?w2.0 * ?ws2.0); codomain_block ?w1.0 = 0 |]
      ==> weak_matrix_match2 (blockmat ?w1.0) (blockmat ?w2.0)
           (kauff_mat ?ws2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Kauffman_Matrix.nat_sum",
     "[| 0 <= ?a; 0 <= ?b |] ==> nat (?a + ?b) = nat ?a + nat ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Kauffman_Matrix.is_tangle_diagram_matrix_match",
     "[| is_tangle_diagram (?w1.0 * ?ws1.0);
         is_tangle_diagram (?w2.0 * ?ws2.0) |]
      ==> rat_poly.matrix_match (blockmat ?w1.0) (kauff_mat ?ws1.0)
           (blockmat ?w2.0) (kauff_mat ?ws2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Kauffman_Matrix.equal_div_mod",
     "[| ?j div ?a = ?i div ?a; ?j mod ?a = ?i mod ?a |] ==> ?j = ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_equation (template_var 2, template_var 0))),
    ("Kauffman_Matrix.Tensor_Invariance",
     "is_tangle_diagram ?ws1.0 & is_tangle_diagram ?ws2.0 ==>
      kauff_mat (?ws1.0 \<otimes> ?ws2.0) =
      kauff_mat ?ws1.0 \<otimes> kauff_mat ?ws2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Kauffman_Matrix.mat_mult_equiv",
     "rat_poly.matrix_mult ?m1.0 ?m2.0 = rat_poly.matrix_mult ?m1.0 ?m2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3), t_empty),
               t_empty),
             template_app (template_hole 0, template_var 1)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_hole 1),
             template_app (template_hole 0, template_var 1)),
           template_var 1),
         template_var 0))),
    ("Kauffman_Matrix.mat1_vert_block",
     "rat_poly.matrix_mult (blockmat ?b)
       (blockmat (make_vert_block (nat (codomain_block ?b)))) =
      blockmat ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_hole 7), t_empty),
               t_empty),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))),
       template_app (template_hole 3, template_var 0))),
    ("Kauffman_Matrix.mult_if_then",
     "?v = (if ?P then 1 else 0) & ?w = (if ?Q then 1 else 0) ==>
      rat_poly_times ?v ?w = (if ?P & ?Q then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_hole 2),
                    template_hole 1))),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2),
                  template_hole 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1)))),
    ("Kauffman_Matrix.mat1_rt_mult",
     "mat ?nr ?nc ?m1.0 ==> rat_poly.matrix_mult ?m1.0 (mat1 ?nc) = ?m1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_hole 5),
                   t_empty),
                 t_empty),
               template_app (template_hole 2, template_var 0)),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 5),
               template_hole 0),
             template_var 1)),
         template_var 0))),
    ("Kauffman_Matrix.matrix_kauff_mat",
     "is_tangle_diagram ?ws ==>
      rat_poly.row_length (kauff_mat ?ws) = 2 ^ nat (domain_wall ?ws) &
      length (kauff_mat ?ws) = 2 ^ nat (codomain_wall ?ws) &
      mat (rat_poly.row_length (kauff_mat ?ws)) (length (kauff_mat ?ws))
       (kauff_mat ?ws)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0))))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 9, template_var 0))),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5))),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 1, template_var 0))))),
               template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 0))),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 9, template_var 0))),
                 template_app (template_hole 9, template_var 0))))
           ))),
    ("Kauffman_Matrix.tangle_compose_matrix",
     "is_tangle_diagram ?ws1.0 &
      is_tangle_diagram ?ws2.0 &
      domain_wall ?ws2.0 = codomain_wall ?ws1.0 ==>
      kauff_mat (?ws1.0 \<circ> ?ws2.0) =
      rat_poly.matrix_mult (kauff_mat ?ws1.0) (kauff_mat ?ws2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 0)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 0)),
                  template_app (template_hole 8, template_var 1))))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   t_empty),
                 t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 6, template_var 1))),
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 6, template_var 0))))),
    ("Kauffman_Matrix.implic",
     "[| ALL i j. ?P i j --> ?Q i j; ALL i j. ?Q i j --> ?R i j |]
      ==> ALL i j. ?P i j --> ?R i j",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Kauffman_Matrix.impl_rule",
     "[| ALL i<?m. ALL j<?n. ?P i & ?Q j; ALL i j. ?P i & ?Q j --> ?R i j |]
      ==> ALL i<?m. ALL j<?n. ?R i j",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Kauffman_Matrix.weak_distributivity1",
     "weak_matrix_match ?A1.0 ?A2.0 ?B1.0 ==>
      rat_poly.matrix_mult ?A1.0 ?A2.0 \<otimes> ?B1.0 =
      rat_poly.matrix_mult (?A1.0 \<otimes> ?B1.0) ?A2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 2),
                       t_empty),
                     t_empty),
                   template_app (template_hole 0, template_var 2)),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   t_empty),
                 t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty), template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Kauffman_Matrix.weak_distributivity2",
     "weak_matrix_match2 ?A1.0 ?B1.0 ?B2.0 ==>
      ?A1.0 \<otimes> rat_poly.matrix_mult ?B1.0 ?B2.0 =
      rat_poly.matrix_mult (?A1.0 \<otimes> ?B1.0) ?B2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 2),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     t_empty),
                   t_empty),
                 template_app (template_hole 0, template_var 1)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   t_empty),
                 t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty), template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Kauffman_Matrix.associative_rat_poly_mat",
     "[| mat (rat_poly.row_length ?m1.0) (rat_poly.row_length ?m2.0) ?m1.0;
         mat (rat_poly.row_length ?m2.0) (rat_poly.row_length ?m3.0) ?m2.0;
         mat (rat_poly.row_length ?m3.0) ?nc ?m3.0 |]
      ==> rat_poly.matrix_mult ?m1.0 (rat_poly.matrix_mult ?m2.0 ?m3.0) =
          rat_poly.matrix_mult (rat_poly.matrix_mult ?m1.0 ?m2.0) ?m3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 3)),
                template_app (template_hole 5, template_var 2)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_app (template_hole 5, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1)),
                template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   t_empty),
                 t_empty),
               template_app (template_hole 5, template_var 3)),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     t_empty),
                   t_empty),
                 template_app (template_hole 5, template_var 2)),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   t_empty),
                 t_empty),
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 2),
                           t_empty),
                         t_empty),
                       template_app (template_hole 5, template_var 3)),
                     template_var 3),
                   template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 2),
                       t_empty),
                     t_empty),
                   template_app (template_hole 5, template_var 3)),
                 template_var 3),
               template_var 2)),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Kauffman_MatrixTemplates"
### 0.661s elapsed time, 0.927s cpu time, 0.179s GC time
val it = (): unit
