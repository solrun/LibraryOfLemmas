Loading theory "Draft.Preliminaries" (required by "Draft.PreliminariesTemplates")
Loading theory "Draft.Templates" (required by "Draft.PreliminariesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PreliminariesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.091s cpu time, 0.092s GC time
consts
  concatenate :: "brick list => brick list => brick list"
### Ambiguous input (line 56 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_applC" ("_position" basic) ("_position" x))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>compose" ("_applC" ("_position" basic) ("_position" x))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Knot_Theory/Preliminaries.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>compose"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^fixed>compose" ("_position" xs) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^fixed>compose" ("_position" xs) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>compose"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^const>Fun.comp" ("_position" xs) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" prod)
###         ("_cargs" ("_position" x) ("_position" xs)))
###       ("_position" ys))
###     ("_applC" ("_position" prod)
###       ("_cargs" ("_position" x)
###         ("\<^const>Fun.comp" ("_position" xs) ("_position" ys))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compose :: "wall => wall => wall"
### Ambiguous input (line 60 of "$AFP/Knot_Theory/Preliminaries.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_constrain" ("_position" x) ("_type_name" wall)) ("_position" y))
###       ("_position" z))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Knot_Theory/Preliminaries.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp"
###       ("\<^const>Preliminaries.compose" ("_position" x) ("_position" y))
###       ("_position" z))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Fun.comp" ("_position" y) ("_position" z)))
###     ("\<^const>Preliminaries.compose" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Preliminaries.compose"
###       ("_constrain" ("_position" x) ("_type_name" wall))
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))
###     ("\<^const>Fun.comp" ("_position" x)
###       ("\<^const>Preliminaries.compose" ("_position" y) ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  block_length :: "brick list => nat"
consts
  domain :: "brick => int"
consts
  codomain :: "brick => int"
consts
  domain_block :: "brick list => int"
consts
  codomain_block :: "brick list => int"
### Ambiguous input (line 128 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Groups.times_class.times" ("_position" x)
###         ("_position" ys)))
###     ("_applC" ("_position" domain_block) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Preliminaries.wall.prod" ("_position" x) ("_position" ys)))
###     ("_applC" ("_position" domain_block) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  domain_wall :: "wall => int"
### Ambiguous input (line 134 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Groups.times_class.times" ("_position" x)
###         ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Preliminaries.wall.prod" ("_position" x) ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 136 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Preliminaries.compose" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" domain_wall) ("_position" xs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" domain_wall)
###       ("\<^const>Fun.comp" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" domain_wall) ("_position" xs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Preliminaries.compose" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" codomain_wall)
###       ("\<^const>Fun.comp" ("_position" xs) ("_position" ys)))
###     ("_applC" ("_position" codomain_wall) ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  brick_is_cup :: "brick => bool"
consts
  is_cup :: "brick list => bool"
### Ambiguous input (line 297 of "$AFP/Knot_Theory/Preliminaries.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Groups.times_class.times" ("_position" x)
###         ("_position" xs)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("_applC" ("_position" domain_wall) ("_position" xs)))
###       ("_position" False))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_tangle_diagram)
###       ("\<^const>Preliminaries.wall.prod" ("_position" x) ("_position" xs)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" is_tangle_diagram) ("_position" xs))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" codomain_block) ("_position" x))
###         ("_applC" ("_position" domain_wall) ("_position" xs)))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  is_tangle_diagram :: "wall => bool"
### theory "Draft.Preliminaries"
### 0.833s elapsed time, 1.485s cpu time, 0.092s GC time
Loading theory "Draft.PreliminariesTemplates"
val templateLemmas =
   [("Preliminaries.abs_non_negative", "0 <= Preliminaries.abs ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Preliminaries.codomain_nonnegative", "0 <= codomain ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Preliminaries.codomain_block_nonnegative", "0 <= codomain_block ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Preliminaries.domain_nonnegative", "0 <= domain ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Preliminaries.domain_block_nonnegative", "0 <= domain_block ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Preliminaries.domain_block_non_negative", "0 <= domain_block ?xs",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Preliminaries.empty_concatenate", "?xs \<otimes> [] = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Preliminaries.codomain_wall_compose",
     "codomain_wall (?xs \<circ> ?ys) = codomain_wall ?ys",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Preliminaries.domain_wall_compose",
     "domain_wall (?xs \<circ> ?ys) = domain_wall ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Preliminaries.brickcount_zero_implies_brick_is_cup",
     "domain ?x = 0 ==> brick_is_cup ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Preliminaries.domain_zero_implies_is_cup",
     "domain_block ?x = 0 ==> is_cup ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Preliminaries.abs_zero", "Preliminaries.abs ?x = 0 ==> ?x = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Preliminaries.brickcount_zero_implies_cup",
     "domain ?x = 0 ==> ?x = cup",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation (template_var 0, template_hole 0))),
    ("Preliminaries.codomain_additive",
     "codomain_block (?x \<otimes> ?y) =
      codomain_block ?x + codomain_block ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Preliminaries.domain_additive",
     "domain_block (?x \<otimes> ?y) = domain_block ?x + domain_block ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Preliminaries.right_associativity",
     "?x \<otimes> ?y \<otimes> ?z = ?x \<otimes> ?y \<otimes> ?z",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Preliminaries.left_associativity",
     "(?x \<otimes> ?y) \<otimes> ?z = ?x \<otimes> ?y \<otimes> ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Preliminaries.compose_rightassociativity",
     "?x \<circ> ?y \<circ> ?z = ?x \<circ> ?y \<circ> ?z",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Preliminaries.compose_leftassociativity",
     "(?x \<circ> ?y) \<circ> ?z = ?x \<circ> ?y \<circ> ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Preliminaries.abs_zero_equality",
     "Preliminaries.abs (?x - ?y) = 0 ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_hole 0)],
       template_equation (template_var 1, template_var 0))),
    ("Preliminaries.abs_non_negative_sum",
     "Preliminaries.abs ?x + Preliminaries.abs ?y = 0 ==>
      Preliminaries.abs ?x = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Preliminaries.abs_non_negative_sum",
     "Preliminaries.abs ?x + Preliminaries.abs ?y = 0 ==>
      Preliminaries.abs ?y = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Preliminaries.domain_zero_sum",
     "domain_block ?x + domain_block ?y = 0 ==> domain_block ?x = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Preliminaries.domain_zero_sum",
     "domain_block ?x + domain_block ?y = 0 ==> domain_block ?y = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Preliminaries.domain_positive",
     "0 < domain_block [?x] | 0 < domain_block ?y ==>
      0 < domain_block (?x # ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_hole 0)))),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_than, template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Preliminaries.codomain_block_positive",
     "[| 0 < codomain_block ?y; ?or; 0 < codomain_block ?y |]
      ==> 0 < codomain_block (?x \<otimes> ?y)",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 2)),
        template_predicate (template_var 1),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Preliminaries.domain_block_positive",
     "[| 0 < domain_block ?y; ?or; 0 < domain_block ?y |]
      ==> 0 < domain_block (?x \<otimes> ?y)",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 2)),
        template_predicate (template_var 1),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.PreliminariesTemplates"
### 0.327s elapsed time, 0.465s cpu time, 0.049s GC time
val it = (): unit
