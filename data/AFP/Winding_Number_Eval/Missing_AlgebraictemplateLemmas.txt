   [("Missing_Algebraic.poly_holomorphic_on", "poly ?p holomorphic_on ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Missing_Algebraic.poly_field_differentiable_at",
     "poly ?p field_differentiable at ?x within ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Missing_Algebraic.deriv_pderiv", "deriv (poly ?p) = poly (pderiv ?p)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Missing_Algebraic.map_poly_degree_leq",
     "degree (map_poly ?f ?p) <= degree ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Missing_Algebraic.pcompose_coeff_0",
     "coeff (?p \<circ>\<^sub>p ?q) 0 = poly ?p (coeff ?q 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Missing_Algebraic.pcompose_pCons_0",
     "?p \<circ>\<^sub>p [:?a:] = [:poly ?p ?a:]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Missing_Algebraic.filterlim_poly_at_infinity",
     "0 < degree ?p ==> filterlim (poly ?p) at_infinity at_infinity",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Missing_Algebraic.filterlim_power_at_infinity",
     "?n ~= 0 ==> LIM x at_infinity. x ^ ?n :> at_infinity",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 0),
             template_hole 0)
           ))),
    ("Missing_Algebraic.poly_eventually_not_zero",
     "?p ~= 0 ==> \<forall>\<^sub>F x in at_infinity. poly ?p x ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_hole 0)
           ))),
    ("Missing_Algebraic.order_zorder",
     "?p ~= 0 ==> order ?z ?p = nat (zorder (poly ?p) ?z)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Missing_Algebraic.poly_divide_tendsto_aux",
     "((%x. poly ?p x / x ^ degree ?p) \<longlongrightarrow> lead_coeff ?p)
       at_infinity",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 3, template_var 0)))),
           template_hole 0)
         )),
    ("Missing_Algebraic.map_poly_degree_eq",
     "?f (lead_coeff ?p) ~= (0::?'a) ==>
      degree (map_poly ?f ?p) = degree ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_var 1,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app (template_hole 4, template_var 0))),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Missing_Algebraic.poly_linepath_comp",
     "poly ?p o linepath ?a ?b =
      poly (?p \<circ>\<^sub>p [:?a, ?b - ?a:]) o of_real",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)),
                   template_hole 1))))),
         template_hole 0))),
    ("Missing_Algebraic.poly_divide_tendsto_0_at_infinity",
     "degree ?q < degree ?p ==>
      ((%x. poly ?q x / poly ?p x) \<longlongrightarrow> (0::?'a))
       at_infinity",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Missing_Algebraic.degree_div_less",
     "[| degree ?x ~= 0; degree ?y ~= 0 |]
      ==> degree (?x div ?y) < degree ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 3, template_var 1)))),
    ("Missing_Algebraic.map_poly_degree_less",
     "[| ?f (lead_coeff ?p) = (0::?'a); degree ?p ~= 0 |]
      ==> degree (map_poly ?f ?p) < degree ?p",
     template_implication
      ([template_equation
         (template_app
           (template_var 1,
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 0))),
          template_hole 6),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 3)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 7, template_var 0)))),
    ("Missing_Algebraic.lead_coeff_map_poly_nz",
     "[| ?f (lead_coeff ?p) ~= (0::?'a); ?f (0::?'b) = (0::?'a) |]
      ==> lead_coeff (map_poly ?f ?p) = ?f (lead_coeff ?p)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_var 1,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 5, template_var 0))),
              template_hole 4)
            ),
        template_equation
         (template_app (template_var 1, template_hole 3), template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_var 0)))))),
    ("Missing_Algebraic.argument_principle_poly",
     "[| ?p ~= 0; valid_path ?g; pathfinish ?g = pathstart ?g;
         path_image ?g <= - proots ?p |]
      ==> contour_integral ?g (%x. deriv (poly ?p) x / poly ?p x) =
          2 * complex_of_real pi * \<i> *
          (SUM x:proots ?p. winding_number ?g x * of_nat (order x ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 24)),
        template_predicate
         (template_app (template_hole 23, template_var 0)),
        template_equation
         (template_app (template_hole 21, template_var 0),
          template_app (template_hole 20, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 18, template_var 0),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, template_var 1),
              template_hole 15)))],
       template_equation
        (template_app
          (template_app (template_hole 14, template_var 0), t_empty),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_hole 7))),
                   template_app (template_hole 6, template_hole 5))),
               template_hole 4)),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 16, template_var 1),
               template_hole 15))))))]
