   [("Missing_Topology.uniform_discrete_insert",
     "uniform_discrete (insert ?a ?S) = uniform_discrete ?S",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Missing_Topology.uniform_discrete_finite_iff",
     "(uniform_discrete ?S & bounded ?S) = finite ?S",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Missing_Topology.discrete_compact_finite_iff",
     "(discrete ?S & compact ?S) = finite ?S",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Missing_Topology.eventually_uminus_at_top_at_bot",
     "eventually (?P o uminus) at_bot = eventually ?P at_top",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 1),
       template_app
        (template_app (template_hole 4, template_var 0), template_hole 0))),
    ("Missing_Topology.eventually_uminus_at_top_at_bot",
     "eventually (?P o uminus) at_top = eventually ?P at_bot",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 1),
       template_app
        (template_app (template_hole 4, template_var 0), template_hole 0))),
    ("Missing_Topology.eventually_comp_filtermap",
     "eventually (?P o ?f) ?F = eventually ?P (filtermap ?f ?F)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Missing_Topology.isolate_islimpt_iff",
     "?x isolate ?S = (~ ?x islimpt ?S & ?x : ?S)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Missing_Topology.isolate_insert",
     "?x isolate insert ?a ?S =
      (?x isolate ?S | ?x = ?a & ~ ?x islimpt ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Missing_Topology.isolate_dist_Ex_iff",
     "?x isolate ?S =
      (?x : ?S & (EX e>0. ALL y:?S. dist ?x y < e --> y = ?x))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app (template_hole 6, t_empty))))]
