   [("ZFC_Library.countable_iff_lepoll",
     "countable ?A = (?A \<lesssim> UNIV)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ZFC_Library.infinite_eqpoll_lists",
     "infinite ?A ==> lists ?A \<approx> ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("ZFC_Library.infinite_times_eqpoll_self",
     "infinite ?A ==> ?A \<times> ?A \<approx> ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0), t_empty)),
             template_var 0)
           ))),
    ("ZFC_Library.infinite_finite_times_lepoll_self",
     "[| infinite ?A; finite ?B |] ==> ?A \<times> ?B \<lesssim> ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1), t_empty)),
             template_var 1)
           ))),
    ("ZFC_Library.lists_n_lepoll_self",
     "infinite ?A ==> {l: lists ?A. length l = ?n} \<lesssim> ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 1)
           )))]
