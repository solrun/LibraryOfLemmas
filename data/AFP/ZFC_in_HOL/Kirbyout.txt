Loading theory "HOL-Cardinals.Fun_More" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
Loading theory "HOL-Library.FuncSet" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Library.Equipollence")
Loading theory "HOL-Cardinals.Order_Union" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
Loading theory "HOL-Cardinals.Order_Relation_More" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation" via "HOL-Cardinals.Wellfounded_More")
### theory "HOL-Cardinals.Fun_More"
### 0.094s elapsed time, 0.398s cpu time, 0.051s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.KirbyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Cardinals.Order_Union"
### 0.114s elapsed time, 0.475s cpu time, 0.051s GC time
Loading theory "HOL-Cardinals.Wellorder_Extension" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.103s elapsed time, 0.406s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Library.Countable_Set")
### theory "HOL-Cardinals.Wellorder_Extension"
### 0.081s elapsed time, 0.321s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.KirbyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Cardinals.Order_Relation_More"
### 0.197s elapsed time, 0.800s cpu time, 0.051s GC time
Loading theory "HOL-Cardinals.Wellfounded_More" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation")
### theory "HOL-Cardinals.Wellfounded_More"
### 0.064s elapsed time, 0.243s cpu time, 0.104s GC time
Loading theory "HOL-Cardinals.Wellorder_Relation" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Cardinals.Wellorder_Relation"
### 0.144s elapsed time, 0.565s cpu time, 0.062s GC time
Loading theory "HOL-Cardinals.Wellorder_Embedding" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.439s elapsed time, 1.733s cpu time, 0.217s GC time
Loading theory "HOL-Library.Equipollence" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library")
### theory "HOL-Library.Infinite_Set"
### 0.288s elapsed time, 1.127s cpu time, 0.166s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.272s cpu time, 0.166s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.KirbyMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Cardinals.Wellorder_Embedding"
### 0.189s elapsed time, 0.738s cpu time, 0.090s GC time
Loading theory "HOL-Cardinals.Wellorder_Constructions" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic")
### theory "HOL-Library.Equipollence"
### 0.248s elapsed time, 0.976s cpu time, 0.090s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.KirbyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.397s elapsed time, 1.417s cpu time, 0.642s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.KirbyMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.643s elapsed time, 2.368s cpu time, 0.846s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Library.Countable_Set")
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Cardinals.Wellorder_Constructions"
### 0.825s elapsed time, 3.104s cpu time, 0.827s GC time
Loading theory "HOL-Cardinals.Cardinal_Order_Relation" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Cardinal_Arithmetic")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.143s elapsed time, 4.348s cpu time, 1.018s GC time
Loading theory "HOL-Cardinals.Ordinal_Arithmetic" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
locale wo_rel2
  fixes r :: "('a * 'a) set"
    and s :: "('b * 'b) set"
  assumes "wo_rel2 r s"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Cardinal_Order_Relation"
### 0.799s elapsed time, 3.123s cpu time, 0.441s GC time
Loading theory "HOL-Cardinals.Cardinal_Arithmetic" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library" via "HOL-Cardinals.Cardinals")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.259s elapsed time, 4.941s cpu time, 0.695s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Cardinal_Arithmetic"
### 0.515s elapsed time, 1.848s cpu time, 1.078s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.KirbyMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Ordinal_Arithmetic"
### 1.177s elapsed time, 4.438s cpu time, 1.472s GC time
Loading theory "HOL-Cardinals.Cardinals" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL" via "Draft.ZFC_Library")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Cardinals.Cardinals"
### 0.251s elapsed time, 0.995s cpu time, 0.072s GC time
### theory "HOL-Library.Countable_Set"
### 0.778s elapsed time, 2.881s cpu time, 1.182s GC time
Loading theory "Draft.ZFC_Library" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals" via "Draft.ZFC_in_HOL")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.368s elapsed time, 8.850s cpu time, 1.926s GC time
Loading theory "Draft.Templates" (required by "Draft.KirbyMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.307s cpu time, 0.098s GC time
### theory "Draft.ZFC_Library"
### 0.433s elapsed time, 1.341s cpu time, 0.147s GC time
Loading theory "Draft.ZFC_in_HOL" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby" via "Draft.ZFC_Cardinals")
### theory "HOL-Library.BigO"
### 0.793s elapsed time, 2.748s cpu time, 0.291s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.KirbyMoreTemplates")
instantiation
  V :: zero
  zero_V == zero_class.zero :: V
instantiation
  V :: one
  one_V == one_class.one :: V
instantiation
  V :: distrib_lattice
  inf_V == inf :: V => V => V
  sup_V == sup :: V => V => V
  less_eq_V == less_eq :: V => V => bool
  less_V == less :: V => V => bool
instantiation
  V :: Sup
  Sup_V == Sup :: V set => V
instantiation
  V :: Inf
  Inf_V == Inf :: V set => V
instantiation
  V :: conditionally_complete_lattice
instantiation
  V :: zero_neq_one
instantiation
  V :: zero_less_one
consts
  ord_of_nat :: "nat => V"
### theory "Draft.ZFC_in_HOL"
### 0.839s elapsed time, 2.171s cpu time, 1.171s GC time
Loading theory "Draft.ZFC_Cardinals" (required by "Draft.KirbyMoreTemplates" via "Draft.Kirby")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.919s elapsed time, 2.382s cpu time, 1.279s GC time
### theory "Draft.ZFC_Cardinals"
### 0.736s elapsed time, 0.896s cpu time, 0.190s GC time
Loading theory "Draft.Kirby" (required by "Draft.KirbyMoreTemplates")
instantiation
  V :: plus
  plus_V == plus :: V => V => V
instantiation
  V :: monoid_add
instantiation
  V :: times
  times_V == times :: V => V => V
instantiation
  V :: monoid_mult
### theory "Draft.Kirby"
### 0.328s elapsed time, 0.421s cpu time, 0.126s GC time
Loading theory "Draft.KirbyMoreTemplates"
val templateLemmas =
   [("Kirby.vle_refl", "?x \<unlhd> ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Kirby.inj_lift", "inj_on (lift ?x) ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Kirby.mult_zero_left", "0 * ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Kirby.mult_zero_right", "?x * 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Kirby.lift_0", "lift 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Kirby.lift_by0", "lift ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Kirby.odiff_0_right", "odiff ?x 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Kirby.odiff_add_cancel_0", "odiff ?x ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Kirby.add_le_cancel_left0", "?x <= ?x + ?z",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Kirby.add_not_less_TC_self", "~ ?x + ?y \<sqsubset> ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 1)
             )
         )),
    ("Kirby.succ_eq_add1", "ZFC_in_HOL.succ ?x = ?x + 1",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Kirby.eqpoll_lift", "elts (lift ?x ?y) \<approx> elts ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app (template_hole 1, template_var 0))
         )),
    ("Kirby.not_add_mem_right", "?x + ?y ~: elts ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app (template_hole 0, template_var 1))
             )
         )),
    ("Kirby.card_lift", "vcard (lift ?x ?y) = vcard ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Kirby.odiff_add_cancel", "odiff (?x + ?y) ?x = ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("Kirby.lift_self_disjoint", "?x \<sqinter> lift ?x ?u = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Kirby.lift_by1", "lift ?x 1 = ZFC_in_HOL.set {?x}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Kirby.TC_sup_lift", "TC ?x \<sqinter> lift ?x ?y = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Kirby.vle1", "?x \<unlhd> ?y ==> ?x <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Kirby.vle2", "?x \<unlhd> ?y ==> ?x \<sqsubseteq> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Kirby.add_less_cancel_left0", "(?x < ?x + ?z) = (0 < ?z)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 0), template_var 0))),
    ("Kirby.lift_le_self", "(lift ?x ?y <= ?x) = (?y = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 1)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Kirby.plus_eq_lift", "?x + ?y = ?x \<squnion> lift ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Kirby.plus_V_succ_right",
     "?x + ZFC_in_HOL.succ ?y = ZFC_in_HOL.succ (?x + ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Kirby.succ_less_\<omega>_imp",
     "ZFC_in_HOL.succ ?x < \<omega> ==> ?x < \<omega>",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 1, template_var 0),
          template_hole 0)],
       template_inequation (less_than, template_var 0, template_hole 0))),
    ("Kirby.mult_succ", "?x * ZFC_in_HOL.succ ?y = ?x * ?y + ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Kirby.rank_add_distrib", "rank (?x + ?y) = rank ?x + rank ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Kirby.rank_mult_distrib", "rank (?x * ?y) = rank ?x * rank ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Kirby.vcard_add", "vcard (?x + ?y) = vcard ?x \<oplus> vcard ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Kirby.vcard_mult", "vcard (?x * ?y) = vcard ?x \<otimes> vcard ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Kirby.ord_of_nat_add",
     "ord_of_nat (?m + ?n) = ord_of_nat ?m + ord_of_nat ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Kirby.ord_of_nat_mult",
     "ord_of_nat (?m * ?n) = ord_of_nat ?m * ord_of_nat ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Kirby.mult_sing_1", "?x * ZFC_in_HOL.set {1} = lift ?x ?x",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Kirby.not_add_less_right", "Ord ?y ==> ~ ?x + ?y < ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_negation
        (
           template_inequation
            (less_than,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 0)
           ))),
    ("Kirby.add_right_cancel", "(?x + ?y = ?x + ?z) = (?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Kirby.add_less_cancel_left", "(?x + ?y < ?x + ?z) = (?y < ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Kirby.add_le_cancel_left", "(?x + ?y <= ?x + ?z) = (?y <= ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Kirby.lift_lift", "lift ?x (lift ?y ?z) = lift (?x + ?y) ?z",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Kirby.odiff_add_cancel_both",
     "odiff (?x + ?y) (?x + ?z) = odiff ?y ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Kirby.mult_le1", "?y ~= 0 ==> ?x \<sqsubseteq> ?x * ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Kirby.not_vle_imp_odiff_0", "~ ?x \<unlhd> ?y ==> odiff ?y ?x = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Kirby.zero_imp_le_mult", "0 : elts ?y ==> ?x <= ?x * ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Kirby.plus_\<omega>_equals_\<omega>",
     "?\<alpha> : elts \<omega> ==> ?\<alpha> + \<omega> = \<omega>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_hole 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_hole 2),
         template_hole 2))),
    ("Kirby.plus",
     "?x + ?y = ?x \<squnion> ZFC_in_HOL.set ((+) ?x ` elts ?y)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Kirby.TC_add", "TC (?x + ?y) = TC ?x \<squnion> lift ?x (TC ?y)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 3, template_var 0))))),
    ("Kirby.mult_2_right", "?x * ZFC_in_HOL.set {0, 1} = ?x + ?x",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 4, template_hole 2),
               template_hole 1)))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Kirby.vle_imp_odiff_eq", "?x \<unlhd> ?y ==> ?x + odiff ?y ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Kirby.odiff_le_odiff",
     "?x \<unlhd> ?y ==> odiff ?x ?z <= odiff ?y ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Kirby.comparable", "?a + ?b = ?c + ?d ==> vle_comparable ?a ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("Kirby.lift_eq_lift", "lift ?x ?y = lift ?x ?z ==> ?y = ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Kirby.Limit_add_Limit",
     "[| Limit ?\<mu>; Ord ?\<beta> |] ==> Limit (?\<beta> + ?\<mu>)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Kirby.Ord_odiff",
     "[| Ord ?\<alpha>; Ord ?\<beta> |] ==> Ord (odiff ?\<beta> ?\<alpha>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Kirby.Ord_add", "[| Ord ?x; Ord ?y |] ==> Ord (?x + ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Kirby.Ord_mult", "[| Ord ?y; Ord ?x |] ==> Ord (?x * ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Kirby.add_eq_0_iff", "(?x + ?y = 0) = (?x = 0 & ?y = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Kirby.mult_eq_0_iff", "(?x * ?y = 0) = (?x = 0 | ?y = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Kirby.add_mem_right_cancel",
     "(?x + ?y : elts (?x + ?z)) = (?y : elts ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Kirby.plus_vinsert",
     "?x + vinsert ?z ?y = vinsert (?x + ?z) (?x + ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Kirby.add_mult_distrib", "?x * (?y + ?z) = ?x * ?y + ?x * ?z",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Kirby.mult_lift", "?x * lift ?y ?z = lift (?x * ?y) (?x * ?z)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Kirby.mult_sup_distrib",
     "?x * (?y \<squnion> ?z) = ?x * ?y \<squnion> ?x * ?z",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Kirby.lift_sup_distrib",
     "lift ?x (?a \<squnion> ?b) = lift ?x ?a \<squnion> lift ?x ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Kirby.vcard_TC_add",
     "vcard (TC (?x + ?y)) = vcard (TC ?x) \<oplus> vcard (TC ?y)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Kirby.vcard_TC_mult",
     "vcard (TC (?x * ?y)) = vcard (TC ?x) \<otimes> vcard (TC ?y)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Kirby.ordertype_image_plus",
     "Ord ?\<alpha> ==>
      ordertype ((+) ?u ` elts ?\<alpha>) VWF = ?\<alpha>",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 1, template_var 1))),
           template_hole 0),
         template_var 1))),
    ("Kirby.succ_0_plus_eq",
     "?\<alpha> : elts \<omega> ==>
      ZFC_in_HOL.succ 0 + ?\<alpha> = ZFC_in_HOL.succ ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0),
         template_app (template_hole 1, template_var 0)))),
    ("Kirby.add_le_left",
     "[| Ord ?\<alpha>; Ord ?\<beta> |]
      ==> ?\<beta> <= ?\<alpha> + ?\<beta>",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Kirby.Ord_odiff_le",
     "[| Ord ?\<alpha>; Ord ?\<beta> |]
      ==> odiff ?\<beta> ?\<alpha> <= ?\<beta>",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("Kirby.vle_antisym",
     "[| ?x \<unlhd> ?y; ?y \<unlhd> ?x |] ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Kirby.vle_trans",
     "[| ?x \<unlhd> ?y; ?y \<unlhd> ?z |] ==> ?x \<unlhd> ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Kirby.mult", "?x * ?y = (SUP u\<in>elts ?y. lift (?x * u) ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Kirby.mult_Limit",
     "Limit ?\<gamma> ==>
      ?x * ?\<gamma> = \<Squnion> ((*) ?x ` elts ?\<gamma>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 0, template_var 1)))))),
    ("Kirby.mult_Sup_distrib",
     "small ?Y ==> ?x * \<Squnion> ?Y = \<Squnion> ((*) ?x ` ?Y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_var 1))))),
    ("Kirby.lift_Sup_distrib",
     "small ?Y ==> lift ?x (\<Squnion> ?Y) = \<Squnion> (lift ?x ` ?Y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_var 1))))),
    ("Kirby.odiff_succ",
     "?y \<unlhd> ?x ==>
      odiff (ZFC_in_HOL.succ ?x) ?y = ZFC_in_HOL.succ (odiff ?x ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Kirby.mult_insert",
     "?x * vinsert ?y ?z = ?x * ?z \<squnion> lift (?x * ?y) ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 2)))),
    ("Kirby.vle_iff_le_Ord",
     "[| Ord ?\<alpha>; Ord ?\<beta> |]
      ==> (?\<alpha> \<unlhd> ?\<beta>) = (?\<alpha> <= ?\<beta>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Kirby.le_mult",
     "[| Ord ?\<beta>; ?\<beta> ~= 0 |]
      ==> ?\<alpha> <= ?\<alpha> * ?\<beta>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Kirby.countable_add",
     "[| countable (elts ?A); countable (elts ?B) |]
      ==> countable (elts (?A + ?B))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Kirby.countable_mult",
     "[| countable (elts ?A); countable (elts ?B) |]
      ==> countable (elts (?A * ?B))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Kirby.zero_mem_mult_iff",
     "(0 : elts (?x * ?y)) = (0 : elts ?x & 0 : elts ?y)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, template_var 0))))),
    ("Kirby.add_Limit",
     "Limit ?\<alpha> ==>
      ?x + ?\<alpha> = \<Squnion> ((+) ?x ` elts ?\<alpha>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("Kirby.odiff_eq_iff",
     "?z \<unlhd> ?x ==> (odiff ?x ?z = ?y) = (?x = ?z + ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Kirby.odiff_less_iff",
     "?z \<unlhd> ?x ==> (odiff ?x ?z < ?y) = (?x < ?z + ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Kirby.odiff_ge_iff",
     "?z \<unlhd> ?x ==> (?y <= odiff ?x ?z) = (?z + ?y <= ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Kirby.odiff_le_iff",
     "?z \<unlhd> ?x ==> (odiff ?x ?z <= ?y) = (?x <= ?z + ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Kirby.zero_less_mult_iff",
     "Ord ?x ==> (0 < ?x * ?y) = (0 < ?x & 0 < ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Kirby.mult_cancellation",
     "?a ~= 0 ==> (?a * ?x = ?a * ?y) = (?x = ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Kirby.plus_Ord_le",
     "[| ?\<alpha> : elts \<omega>; Ord ?\<beta> |]
      ==> ?\<alpha> + ?\<beta> <= ?\<beta> + ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Kirby.mult_add_mem_0",
     "(?a * ?x : elts (?a * ?y)) = (?x : elts ?y & 0 : elts ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app (template_hole 4, template_hole 0),
           template_app (template_hole 2, template_var 2))))),
    ("Kirby.TC_lift",
     "?y ~= 0 ==> TC (lift ?x ?y) = TC ?x \<squnion> lift ?x (TC ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 2, template_var 1)))))),
    ("Kirby.omega_closed_add",
     "[| ?\<alpha> : elts \<omega>; ?\<beta> : elts \<omega> |]
      ==> ?\<alpha> + ?\<beta> : elts \<omega>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_hole 1))
           ))),
    ("Kirby.omega_closed_mult",
     "[| ?\<alpha> : elts \<omega>; ?\<beta> : elts \<omega> |]
      ==> ?\<alpha> * ?\<beta> : elts \<omega>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_hole 1))
           ))),
    ("Kirby.lift_mult_disjoint",
     "?x ~= ?y ==> lift (?a * ?x) ?a \<sqinter> lift (?a * ?y) ?a = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_var 0)),
         template_hole 0))),
    ("Kirby.mult_eq_imp_0",
     "[| ?a * ?x = ?a * ?y + ?b; ?b \<sqsubset> ?a |] ==> ?b = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1)),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Kirby.add_Sup_distrib_id",
     "?A ~= 0 ==>
      ?x + \<Squnion> (elts ?A) = \<Squnion> ((+) ?x ` elts ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty),
             template_app (template_hole 1, template_var 1)))))),
    ("Kirby.sup_lift_eq_lift",
     "?x \<squnion> lift ?x ?u = ?x \<squnion> lift ?x ?v ==>
      lift ?x ?u = lift ?x ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Kirby.ordertype_interval_eq",
     "[| Ord ?\<alpha>; Ord ?\<beta> |]
      ==> ordertype ({?\<alpha>..<?\<alpha> + ?\<beta>} Int ON) VWF =
          ?\<beta>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app (template_hole 1, template_hole 7))),
           template_hole 0),
         template_var 0))),
    ("Kirby.lift_lemma",
     "[| ?x ~= 0; ?y ~= 0 |] ==> ~ lift (?x * ?y) ?x <= ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 1),
             template_var 1)
           ))),
    ("Kirby.Ord_odiff_eq",
     "[| ?\<alpha> <= ?\<beta>; Ord ?\<alpha>; Ord ?\<beta> |]
      ==> ?\<alpha> + odiff ?\<beta> ?\<alpha> = ?\<beta>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Kirby.Ord_odiff_le_odiff",
     "[| ?x <= ?y; Ord ?x; Ord ?y |]
      ==> odiff ?x ?\<alpha> <= odiff ?y ?\<alpha>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Kirby.Ord_odiff_less_imp_less",
     "[| odiff ?x ?\<alpha> < odiff ?y ?\<alpha>; Ord ?x; Ord ?y |]
      ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1)),
        template_predicate (template_app (template_hole 0, template_var 2)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Kirby.TC_add'",
     "(?z \<sqsubset> ?x + ?y) =
      (?z \<sqsubset> ?x | (EX v. v \<sqsubset> ?y & ?z = ?x + v))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("Kirby.lift_mult_TC_disjoint",
     "?x ~= ?y ==>
      lift (?a * ?x) (TC ?a) \<sqinter> lift (?a * ?y) (TC ?a) = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Kirby.mult_add_mem",
     "[| ?a * ?x + ?r : elts (?a * ?y); ?r \<sqsubset> ?a |]
      ==> ?r : elts ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 1, template_var 3))
           ))),
    ("Kirby.mult_add_mem",
     "[| ?a * ?x + ?r : elts (?a * ?y); ?r \<sqsubset> ?a |]
      ==> ?x : elts ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Kirby.Limit_add_Sup_distrib",
     "Limit ?\<alpha> ==>
      ?x + \<Squnion> (?f ` elts ?\<alpha>) =
      (SUP z\<in>elts ?\<alpha>. ?x + ?f z)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 2)))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 2)))))),
    ("Kirby.mult_le2",
     "[| ?x ~= 0; ?y ~= 0; ?y ~= 1 |] ==> ?x \<sqsubset> ?x * ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Kirby.Ord_odiff_le_iff",
     "[| ?\<alpha> <= ?x; Ord ?x; Ord ?\<alpha> |]
      ==> (odiff ?x ?\<alpha> <= ?y) = (?x <= ?\<alpha> + ?y)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Kirby.add_right_mono",
     "[| ?\<alpha> <= ?\<beta>; Ord ?\<alpha>; Ord ?\<beta>;
         Ord ?\<gamma> |]
      ==> ?\<alpha> + ?\<gamma> <= ?\<beta> + ?\<gamma>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Kirby.TC_mult",
     "TC (?x * ?y) =
      (SUP r\<in>elts (TC ?x).
          SUP u\<in>elts (TC ?y). ZFC_in_HOL.set {?x * u + r})",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 8, template_var 1)))))),
    ("Kirby.add_Sup_distrib",
     "?y ~= 0 ==>
      ?x + \<Squnion> (?f ` elts ?y) = (SUP z\<in>elts ?y. ?x + ?f z)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 2)))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 2)))))),
    ("Kirby.ordertype_diff",
     "[| ?\<beta> + ?\<delta> = ?\<alpha>; ?\<delta> : elts ?\<alpha>;
         Ord ?\<alpha> |]
      ==> ordertype (elts ?\<alpha> - elts ?\<beta>) VWF = ?\<delta>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 0)),
               template_app (template_hole 4, template_var 2))),
           template_hole 0),
         template_var 1))),
    ("Kirby.mult_cancellation_half",
     "[| ?a * ?x + ?r <= ?a * ?y + ?s; ?r \<sqsubset> ?a;
         ?s \<sqsubset> ?a |]
      ==> ?x <= ?y",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 1)),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 4)
            )],
       template_inequation (less_equals, template_var 3, template_var 1))),
    ("Kirby.mult_cancel_less_iff",
     "[| Ord ?\<alpha>; Ord ?\<beta>; Ord ?\<gamma> |]
      ==> (?\<alpha> * ?\<beta> < ?\<alpha> * ?\<gamma>) =
          (?\<beta> < ?\<gamma> & 0 < ?\<alpha>)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_var 2))))),
    ("Kirby.mult_cancel_le_iff",
     "[| Ord ?\<alpha>; Ord ?\<beta>; Ord ?\<gamma> |]
      ==> (?\<alpha> * ?\<beta> <= ?\<alpha> * ?\<gamma>) =
          (?\<beta> <= ?\<gamma> | ?\<alpha> = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))
             )))),
    ("Kirby.mult_lift_imp_distrib",
     "?x * lift ?y ?z = lift (?x * ?y) (?x * ?z) ==>
      ?x * (?y + ?z) = ?x * ?y + ?x * ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1)),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Kirby.Ord_odiff_less_odiff",
     "[| ?\<alpha> <= ?x; ?x < ?y; Ord ?x; Ord ?y; Ord ?\<alpha> |]
      ==> odiff ?x ?\<alpha> < odiff ?y ?\<alpha>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Kirby.mult_cancellation_lemma",
     "[| ?a * ?x + ?r = ?a * ?y + ?s; ?r \<sqsubset> ?a;
         ?s \<sqsubset> ?a |]
      ==> ?x = ?y & ?r = ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 4),
                template_var 1)),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))
           ))),
    ("Kirby.add_mult_less",
     "[| ?\<gamma> : elts ?\<alpha>; ?\<nu> : elts ?\<beta>; Ord ?\<alpha>;
         Ord ?\<beta> |]
      ==> ?\<alpha> * ?\<nu> + ?\<gamma> : elts (?\<alpha> * ?\<beta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 3)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Kirby.add_strict_mono",
     "[| ?\<alpha> < ?\<beta>; ?\<gamma> < ?\<delta>; Ord ?\<alpha>;
         Ord ?\<beta>; Ord ?\<gamma>; Ord ?\<delta> |]
      ==> ?\<alpha> + ?\<gamma> < ?\<beta> + ?\<delta>",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Kirby.add_right_strict_mono",
     "[| ?\<alpha> <= ?\<beta>; ?\<gamma> < ?\<delta>; Ord ?\<alpha>;
         Ord ?\<beta>; Ord ?\<gamma>; Ord ?\<delta> |]
      ==> ?\<alpha> + ?\<gamma> < ?\<beta> + ?\<delta>",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Kirby.le_Ord_diff",
     "[| ?\<alpha> <= ?\<beta>; Ord ?\<alpha>; Ord ?\<beta>;
         !!\<gamma>.
            [| ?\<alpha> + \<gamma> = ?\<beta>; \<gamma> <= ?\<beta>;
               Ord \<gamma> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Kirby.mem_plus_V_E",
     "[| ?l : elts (?x + ?y); ?l : elts ?x ==> ?thesis;
         !!z. [| z : elts ?y; ?l = ?x + z |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2))
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Kirby.mult_Suc_add_less",
     "[| ?\<alpha> < ?\<gamma>; ?\<beta> < ?\<gamma>; Ord ?\<alpha>;
         Ord ?\<beta>; Ord ?\<gamma> |]
      ==> ?\<gamma> * ord_of_nat ?m + ?\<alpha>
          < ?\<gamma> * ord_of_nat (Suc ?m) + ?\<beta>",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 2),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 0))),
           template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))),
           template_var 1)))),
    ("Kirby.elts_multE",
     "[| ?z : elts (?x * ?y);
         !!u v.
            [| u : elts ?x; v : elts ?y; ?z = ?x * v + u |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Kirby.mult_nat_less_add_less",
     "[| ?m < ?n; ?\<alpha> < ?\<gamma>; ?\<beta> < ?\<gamma>;
         Ord ?\<alpha>; Ord ?\<beta>; Ord ?\<gamma> |]
      ==> ?\<gamma> * ord_of_nat ?m + ?\<alpha>
          < ?\<gamma> * ord_of_nat ?n + ?\<beta>",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_than, template_var 0, template_var 1),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 4))),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 3))),
           template_var 0)))),
    ("Kirby.mult_cancellation_less",
     "[| ?a * ?x + ?r < ?a * ?y + ?s; ?r \<sqsubset> ?a; ?s \<sqsubset> ?a;
         ?x < ?y ==> ?thesis; [| ?x = ?y; ?r < ?s |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 2)),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 5)
            ),
        template_implication
         ([template_inequation (less_than, template_var 4, template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_inequation
              (less_than, template_var 3, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Kirby.elts_mult_\<omega>E",
     "[| ?x : elts (?y * \<omega>);
         !!n. [| n ~= 0; ?x : elts (?y * ord_of_nat n);
                 !!m. m < n ==> ?x ~: elts (?y * ord_of_nat m) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Kirby.add_mult_less_add_mult",
     "[| ?x < ?y; ?x : elts ?\<beta>; ?y : elts ?\<beta>;
         ?\<mu> : elts ?\<alpha>; ?\<nu> : elts ?\<alpha>; Ord ?\<alpha>;
         Ord ?\<beta> |]
      ==> ?\<alpha> * ?x + ?\<mu> < ?\<alpha> * ?y + ?\<nu>",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4)),
           template_var 0)))),
    ("Kirby.Ord_add_mult_iff",
     "[| ?\<beta> : elts ?\<gamma>; ?\<beta>' : elts ?\<gamma>;
         Ord ?\<alpha>; Ord ?\<alpha>'; Ord ?\<gamma> |]
      ==> (?\<gamma> * ?\<alpha> + ?\<beta>
           : elts (?\<gamma> * ?\<alpha>' + ?\<beta>')) =
          (?\<alpha> : elts ?\<alpha>' |
           ?\<alpha> = ?\<alpha>' & ?\<beta> : elts ?\<beta>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 1)),
                    template_var 4)),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 0)),
                    template_var 2)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_app (template_hole 7, template_var 0))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app (template_hole 7, template_var 2))))
             )))),
    ("Kirby.ordertype_Times",
     "[| small ?A; small ?B; wf ?r; trans ?r; total_on ?A ?r; wf ?s;
         trans ?s; total_on ?B ?s |]
      ==> ordertype (?A \<times> ?B) (?r <*lex*> ?s) =
          ordertype ?B ?s * ordertype ?A ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3), t_empty)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.KirbyMoreTemplates"
### 0.748s elapsed time, 1.869s cpu time, 1.397s GC time
val it = (): unit
