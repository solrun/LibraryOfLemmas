   [("Ordinal_Exp.oexp_1_right", "?\<alpha> \<up> 1 = ?\<alpha>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ordinal_Exp.oexp_0_right", "?\<alpha> \<up> 0 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Ordinal_Exp.omega_le_Limit", "Limit ?\<mu> ==> \<omega> <= ?\<mu>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Ordinal_Exp.oexp_1", "Ord ?\<alpha> ==> 1 \<up> ?\<alpha> = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0))),
    ("Ordinal_Exp.ord_of_nat_oexp",
     "ord_of_nat (?m ^ ?n) = ord_of_nat ?m \<up> ord_of_nat ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ordinal_Exp.Ord_oexp",
     "[| Ord ?\<alpha>; Ord ?\<beta> |] ==> Ord (?\<alpha> \<up> ?\<beta>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ordinal_Exp.oexp_0",
     "Ord ?\<alpha> ==>
      0 \<up> ?\<alpha> = (if ?\<alpha> = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 2)),
                 template_hole 0),
               template_hole 2)
             )))),
    ("Ordinal_Exp.oexp_succ",
     "Ord ?\<beta> ==>
      ?\<alpha> \<up> ZFC_in_HOL.succ ?\<beta> =
      ?\<alpha> \<up> ?\<beta> * ?\<alpha>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 0)))),
    ("Ordinal_Exp.countable_oexp",
     "?\<alpha> : elts \<omega>1 ==>
      \<omega> \<up> ?\<alpha> : elts \<omega>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))
           ))),
    ("Ordinal_Exp.Limit_omega_oexp",
     "[| Ord ?\<delta>; ?\<delta> ~= 0 |]
      ==> Limit (\<omega> \<up> ?\<delta>)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Ordinal_Exp.\<omega>_power_succ_gtr",
     "Ord ?\<alpha> ==>
      \<omega> \<up> ?\<alpha> * ord_of_nat ?n
      < \<omega> \<up> ZFC_in_HOL.succ ?\<alpha>",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 0, template_var 1))))),
    ("Ordinal_Exp.oexp_\<omega>_Limit",
     "Limit ?\<beta> ==>
      \<omega> \<up> ?\<beta> =
      \<Squnion> ((\<up>) \<omega> ` elts ?\<beta>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Ordinal_Exp.finite_omega_power",
     "[| 1 < ?n; ?n : elts \<omega> |] ==> ?n \<up> \<omega> = \<omega>",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_hole 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_hole 2),
         template_hole 2))),
    ("Ordinal_Exp.oexp_mult_commute",
     "Ord ?\<alpha> ==>
      ?\<alpha> \<up> ord_of_nat ?j * ?\<alpha> =
      ?\<alpha> * ?\<alpha> \<up> ord_of_nat ?j",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Ordinal_Exp.oexp_gt_0_iff",
     "Ord ?\<beta> ==>
      (0 < ?\<alpha> \<up> ?\<beta>) = (0 < ?\<alpha> | ?\<beta> = 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 3))
             )))),
    ("Ordinal_Exp.Limit_oexp",
     "[| Limit ?\<gamma>; Ord ?\<alpha>; 1 < ?\<alpha> |]
      ==> Limit (?\<alpha> \<up> ?\<gamma>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Ordinal_Exp.oexp_eq_0_iff",
     "Ord ?\<beta> ==>
      (?\<alpha> \<up> ?\<beta> = 0) = (?\<alpha> = 0 & ?\<beta> ~= 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1),
           template_hole 2),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 2)),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 2)))
             )))),
    ("Ordinal_Exp.omega_closed_oexp",
     "[| ?\<alpha> : elts \<omega>; ?\<beta> : elts \<omega> |]
      ==> ?\<alpha> \<up> ?\<beta> : elts \<omega>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_hole 1))
           ))),
    ("Ordinal_Exp.le_oexp'",
     "[| Ord ?\<alpha>; 1 < ?\<alpha>; Ord ?\<beta> |]
      ==> ?\<beta> <= ?\<alpha> \<up> ?\<beta>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_than, template_hole 2, template_var 1),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ordinal_Exp.\<omega>_oexp_iff",
     "[| Ord ?\<alpha>; Ord ?\<beta> |]
      ==> (\<omega> \<up> ?\<alpha> = \<omega> \<up> ?\<beta>) =
          (?\<alpha> = ?\<beta>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Ordinal_Exp.le_oexp",
     "[| Ord ?\<alpha>; Ord ?\<beta>; ?\<beta> ~= 0 |]
      ==> ?\<alpha> <= ?\<alpha> \<up> ?\<beta>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ordinal_Exp.oexp_Limit",
     "Limit ?\<beta> ==>
      ?\<alpha> \<up> ?\<beta> =
      (if ?\<alpha> = 0 then 0
       else \<Squnion> ((\<up>) ?\<alpha> ` elts ?\<beta>))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 3)),
                 template_hole 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_app (template_hole 0, template_var 1))))
             )))),
    ("Ordinal_Exp.oexp_mult",
     "[| Ord ?\<alpha>; Ord ?\<beta>; Ord ?\<gamma> |]
      ==> ?\<alpha> \<up> (?\<beta> * ?\<gamma>) =
          (?\<alpha> \<up> ?\<beta>) \<up> ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Ordinal_Exp.oexp_add",
     "[| Ord ?\<alpha>; Ord ?\<beta>; Ord ?\<gamma> |]
      ==> ?\<alpha> \<up> (?\<beta> + ?\<gamma>) =
          ?\<alpha> \<up> ?\<beta> * ?\<alpha> \<up> ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Ordinal_Exp.oexp_Limit_le",
     "[| ?\<beta> < ?\<gamma>; Limit ?\<gamma>; Ord ?\<beta>;
         0 < ?\<alpha> |]
      ==> ?\<alpha> \<up> ?\<beta> <= ?\<alpha> \<up> ?\<gamma>",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ordinal_Exp.oexp_mono",
     "[| Ord ?\<alpha>; ?\<alpha> ~= 0; Ord ?\<beta>;
         ?\<gamma> \<sqsubseteq> ?\<beta> |]
      ==> ?\<alpha> \<up> ?\<gamma> <= ?\<alpha> \<up> ?\<beta>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Ordinal_Exp.oexp_less",
     "[| ?\<beta> : elts ?\<gamma>; Ord ?\<gamma>; 1 < ?\<alpha>;
         Ord ?\<alpha> |]
      ==> ?\<alpha> \<up> ?\<beta> < ?\<alpha> \<up> ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_than, template_hole 1, template_var 0),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ordinal_Exp.oexp_mono_le",
     "[| ?\<gamma> <= ?\<beta>; ?\<alpha> ~= 0; Ord ?\<alpha>; Ord ?\<beta>;
         Ord ?\<gamma> |]
      ==> ?\<alpha> \<up> ?\<gamma> <= ?\<alpha> \<up> ?\<beta>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 2)),
        template_predicate (template_app (template_hole 1, template_var 0)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ordinal_Exp.oexp_sup",
     "[| ?\<alpha> ~= 0; Ord ?\<alpha>; Ord ?\<beta>; Ord ?\<gamma> |]
      ==> ?\<alpha> \<up> (?\<beta> \<squnion> ?\<gamma>) =
          ?\<alpha> \<up> ?\<beta> \<squnion> ?\<alpha> \<up> ?\<gamma>",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Ordinal_Exp.oexp_less_iff",
     "[| 0 < ?\<alpha>; Ord ?\<alpha>; Ord ?\<beta>; Ord ?\<gamma> |]
      ==> (?\<alpha> \<up> ?\<beta> < ?\<alpha> \<up> ?\<gamma>) =
          (?\<beta> : elts ?\<gamma> & 1 < ?\<alpha>)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 8, template_hole 0),
             template_var 2))))),
    ("Ordinal_Exp.oexp_Sup",
     "[| ?\<alpha> ~= 0; Ord ?\<alpha>; ?X <= ON; small ?X; ?X ~= {} |]
      ==> ?\<alpha> \<up> \<Squnion> ?X =
          \<Squnion> ((\<up>) ?\<alpha> ` ?X)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 6, template_hole 8)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0)))))]
