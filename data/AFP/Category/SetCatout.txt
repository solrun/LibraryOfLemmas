Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetCatMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetCatMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetCatMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.FuncSet" (required by "Draft.SetCatMoreTemplates" via "Draft.SetCat" via "Draft.Cat")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.662s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetCatMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.887s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetCatMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.390s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetCatMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.504s elapsed time, 2.009s cpu time, 0.224s GC time
Loading theory "Draft.Cat" (required by "Draft.SetCatMoreTemplates" via "Draft.SetCat")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
locale category
  fixes CC :: "('b, 'a, 'c) category_scheme"  (structure)
  assumes "category CC"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Cat"
### 0.352s elapsed time, 1.394s cpu time, 0.133s GC time
Loading theory "Draft.SetCat" (required by "Draft.SetCatMoreTemplates")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.928s elapsed time, 3.500s cpu time, 0.828s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.007s elapsed time, 3.639s cpu time, 0.774s GC time
### theory "Draft.SetCat"
### 0.525s elapsed time, 1.682s cpu time, 0.553s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.864s elapsed time, 5.187s cpu time, 0.994s GC time
Loading theory "Draft.Templates" (required by "Draft.SetCatMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.070s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetCatMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.449s elapsed time, 0.487s cpu time, 0.042s GC time
Loading theory "Draft.SetCatMoreTemplates"
val templateLemmas =
   [("SetCat.set_cat_cat", "category (set_cat ?U)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SetCat.set_cod", "Cod\<^bsub>set_cat ?U\<^esub> ?f = set_cod ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetCat.set_dom", "Dom\<^bsub>set_cat ?U\<^esub> ?f = set_dom ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetCat.set_id", "Id\<^bsub>set_cat ?U\<^esub> ?A = set_id ?U ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetCat.set_comp",
     "?g \<bullet>\<^bsub>set_cat ?U\<^esub> ?f = ?g \<odot> ?f",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetCat.set_objectI", "?A <= ?U ==> ?A : Ob\<^bsub>set_cat ?U\<^esub>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SetCat.set_objectE", "?A : Ob\<^bsub>set_cat ?U\<^esub> ==> ?A <= ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("SetCat.set_dom_cod_object_subset",
     "?f : Ar\<^bsub>set_cat ?U\<^esub> ==> set_cod ?f <= ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("SetCat.set_dom_cod_object_subset",
     "?f : Ar\<^bsub>set_cat ?U\<^esub> ==> set_dom ?f <= ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("SetCat.set_homE",
     "?f : Hom\<^bsub>set_cat ?U\<^esub> ?A ?B ==> ?A <= ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 2))),
    ("SetCat.set_homE",
     "?f : Hom\<^bsub>set_cat ?U\<^esub> ?A ?B ==> ?B <= ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("SetCat.set_homE",
     "?f : Hom\<^bsub>set_cat ?U\<^esub> ?A ?B ==> set_cod ?f = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 3), template_var 0))),
    ("SetCat.set_homE",
     "?f : Hom\<^bsub>set_cat ?U\<^esub> ?A ?B ==> set_dom ?f = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 3), template_var 1))),
    ("SetCat.set_id_right",
     "?f : Ar\<^bsub>set_cat ?U\<^esub> ==>
      ?f \<odot> set_id ?U (set_dom ?f) = ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))),
         template_var 1))),
    ("SetCat.set_id_left",
     "?f : Ar\<^bsub>set_cat ?U\<^esub> ==>
      set_id ?U (set_cod ?f) \<odot> ?f = ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_var 1),
         template_var 1))),
    ("SetCat.set_dom_cod_object_subset",
     "?f : Ar\<^bsub>set_cat ?U\<^esub> ==>
      Cod\<^bsub>set_cat ?U\<^esub> ?f : Ob\<^bsub>set_cat ?U\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 0)),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)))
           ))),
    ("SetCat.set_dom_cod_object_subset",
     "?f : Ar\<^bsub>set_cat ?U\<^esub> ==>
      Dom\<^bsub>set_cat ?U\<^esub> ?f : Ob\<^bsub>set_cat ?U\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 0)),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)))
           ))),
    ("SetCat.set_homE",
     "?f : Hom\<^bsub>set_cat ?U\<^esub> ?A ?B ==>
      set_func ?f : ?A \<rightarrow> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("SetCat.set_id_hom",
     "?A : Ob\<^bsub>set_cat ?U\<^esub> ==>
      Id\<^bsub>set_cat ?U\<^esub> ?A
      : Hom\<^bsub>set_cat ?U\<^esub> ?A ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 0)),
                 template_var 1),
               template_var 1))
           ))),
    ("SetCat.set_comp_types",
     "(\<bullet>\<^bsub>set_cat ?U\<^esub>)
      : Hom\<^bsub>set_cat ?U\<^esub> ?B ?C \<rightarrow>
        Hom\<^bsub>set_cat ?U\<^esub> ?A ?B \<rightarrow>
        Hom\<^bsub>set_cat ?U\<^esub> ?A ?C",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 3, template_var 3)),
                   template_var 2),
                 template_var 1)),
             t_empty))
         )),
    ("SetCat.set_homI",
     "[| ?A <= ?U; ?B <= ?U; ?f : ?A \<rightarrow> ?B;
         ?f : extensional ?A |]
      ==> (| set_dom = ?A, set_func = ?f, set_cod = ?B |)
          : Hom\<^bsub>set_cat ?U\<^esub> ?A ?B",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 3), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 5, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 0),
                   template_var 1),
                 template_hole 2)),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 3),
               template_var 1))
           ))),
    ("SetCat.set_comp_associative",
     "[| ?f : Ar\<^bsub>set_cat ?U\<^esub>;
         ?g : Ar\<^bsub>set_cat ?U\<^esub>;
         ?h : Ar\<^bsub>set_cat ?U\<^esub>;
         Cod\<^bsub>set_cat ?U\<^esub> ?h =
         Dom\<^bsub>set_cat ?U\<^esub> ?g;
         Cod\<^bsub>set_cat ?U\<^esub> ?g =
         Dom\<^bsub>set_cat ?U\<^esub> ?f |]
      ==> ?f \<bullet>\<^bsub>set_cat ?U\<^esub>
          (?g \<bullet>\<^bsub>set_cat ?U\<^esub> ?h) =
          ?f \<bullet>\<^bsub>set_cat ?U\<^esub>
          ?g \<bullet>\<^bsub>set_cat ?U\<^esub>
          ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 2)),
            template_var 0),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 5, template_var 2)),
            template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 5, template_var 2)),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 5, template_var 2)),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 5, template_var 2)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 5, template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 2)),
                 template_var 3),
               template_var 1)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.SetCatMoreTemplates"
### 0.329s elapsed time, 0.471s cpu time, 0.063s GC time
val it = (): unit
