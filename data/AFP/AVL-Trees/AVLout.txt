Loading theory "Draft.AVL" (required by "Draft.AVLMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AVLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AVLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AVLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.572s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AVLMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.251s elapsed time, 1.023s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AVLMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.384s elapsed time, 1.536s cpu time, 0.137s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AVLMoreTemplates" via "Draft.ExtrEqs")
consts
  height :: "'a tree => nat"
consts
  avl :: "'a tree => bool"
consts
  is_ord :: "'a tree => bool"
consts
  is_in :: "'a => 'a tree => bool"
consts
  ht :: "'a tree => nat"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  insert :: "'a => 'a tree => 'a tree"
### Missing patterns in function definition:
### delete_max ET = undefined
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### delete_root ET = undefined
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  delete :: "'a => 'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.066s elapsed time, 3.991s cpu time, 0.942s GC time
### Missing patterns in function definition:
### rightmost_item ET = undefined
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.AVL"
### 1.457s elapsed time, 5.436s cpu time, 0.988s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.151s elapsed time, 4.109s cpu time, 0.947s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.975s elapsed time, 5.715s cpu time, 1.094s GC time
Loading theory "Draft.Templates" (required by "Draft.AVLMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AVLMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.469s elapsed time, 0.508s cpu time, 0.047s GC time
Loading theory "Draft.AVLMoreTemplates"
val templateLemmas =
   [("AVL.avl_delete", "avl ?t ==> avl (delete ?x ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("AVL.avl_insert", "avl ?t ==> avl (AVL.insert ?x ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("AVL.ritem_in_rset", "?r ~= ET ==> rightmost_item ?r : set_of ?r",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("AVL.is_in_correct", "is_ord ?t ==> is_in ?k ?t = (?k : set_of ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("AVL.fst_delete_max_eq_ritem",
     "?t ~= ET ==> fst (delete_max ?t) = rightmost_item ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("AVL.is_ord_delete",
     "[| avl ?t; is_ord ?t |] ==> is_ord (delete ?x ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("AVL.is_ord_insert",
     "[| avl ?t; is_ord ?t |] ==> is_ord (AVL.insert ?x ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("AVL.set_of_insert",
     "avl ?t ==> set_of (AVL.insert ?x ?t) = Set.insert ?x (set_of ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("AVL.is_ord_mkt_bal_l",
     "is_ord (MKT ?n ?l ?r ?h) ==> is_ord (mkt_bal_l ?n ?l ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("AVL.is_ord_mkt_bal_r",
     "is_ord (MKT ?n ?l ?r ?h) ==> is_ord (mkt_bal_r ?n ?l ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("AVL.avl_delete_root",
     "[| avl ?t; ?t ~= ET |] ==> avl (delete_root ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0))
           ))),
    ("AVL.avl_delete_max",
     "[| avl ?x; ?x ~= ET |] ==> avl (snd (delete_max ?x))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("AVL.is_ord_delete_root",
     "[| avl ?t; is_ord ?t; ?t ~= ET |] ==> is_ord (delete_root ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0))
           ))),
    ("AVL.is_ord_delete_max",
     "[| avl ?t; is_ord ?t; ?t ~= ET |] ==> is_ord (snd (delete_max ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("AVL.set_of_delete",
     "[| avl ?t; is_ord ?t |] ==> set_of (delete ?x ?t) = set_of ?t - {?x}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("AVL.avl_delete_aux",
     "avl ?t ==>
      AVL.height ?t = AVL.height (delete ?x ?t) |
      AVL.height ?t = AVL.height (delete ?x ?t) + 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1))),
                 template_hole 0)))
           ))),
    ("AVL.avl_insert_aux",
     "avl ?t ==>
      AVL.height (AVL.insert ?x ?t) = AVL.height ?t |
      AVL.height (AVL.insert ?x ?t) = AVL.height ?t + 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1))),
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 1)),
                 template_hole 0)))
           ))),
    ("AVL.set_of_mkt_bal_l",
     "[| avl ?l; avl ?r |]
      ==> set_of (mkt_bal_l ?n ?l ?r) =
          Set.insert ?n (set_of ?l Un set_of ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 1)))))),
    ("AVL.set_of_mkt_bal_r",
     "[| avl ?l; avl ?r |]
      ==> set_of (mkt_bal_r ?n ?l ?r) =
          Set.insert ?n (set_of ?l Un set_of ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 1)))))),
    ("AVL.height_delete_root",
     "[| avl ?t; ?t ~= ET |]
      ==> AVL.height ?t = AVL.height (delete_root ?t) |
          AVL.height ?t = AVL.height (delete_root ?t) + 1",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_hole 0)))
           ))),
    ("AVL.set_of_delete_max",
     "[| avl ?t; is_ord ?t; ?t ~= ET |]
      ==> set_of (snd (delete_max ?t)) = set_of ?t - {rightmost_item ?t}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("AVL.avl_delete_max",
     "[| avl ?x; ?x ~= ET |]
      ==> AVL.height ?x = AVL.height (snd (delete_max ?x)) |
          AVL.height ?x = AVL.height (snd (delete_max ?x)) + 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)))),
                 template_hole 0)))
           ))),
    ("AVL.ritem_greatest_in_rset",
     "[| ?r ~= ET; is_ord ?r |]
      ==> ALL x.
             x : set_of ?r -->
             x ~= rightmost_item ?r --> x < rightmost_item ?r",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("AVL.avl_dist",
     "[| avl (MKT ?n ?l ?r ?h); is_ord (MKT ?n ?l ?r ?h); ?x : set_of ?l |]
      ==> ?x ~: set_of ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 2))
               )
           ))),
    ("AVL.set_of_delete_root",
     "[| ?t = MKT ?n ?l ?r ?h; avl ?t; is_ord ?t |]
      ==> set_of (delete_root ?t) = set_of ?t - {?n}",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (template_app (template_hole 6, template_var 4))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 4)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 4)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("AVL.ritem_not_in_ltree",
     "[| avl (MKT ?n ?l ?r ?h); is_ord (MKT ?n ?l ?r ?h); ?r ~= ET |]
      ==> rightmost_item ?r ~: set_of ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("AVL.avl_dist2",
     "[| avl (MKT ?n ?l ?r ?h); is_ord (MKT ?n ?l ?r ?h);
         ?x : set_of ?l | ?x : set_of ?r |]
      ==> ?x ~= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 3))),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_var 2)))
            )],
       template_negation
        (template_equation (template_var 0, template_var 4)))),
    ("AVL.height_mkt_bal_l2",
     "[| avl ?l; avl ?r; AVL.height ?l ~= AVL.height ?r + 2 |]
      ==> AVL.height (mkt_bal_l ?n ?l ?r) =
          1 + max (AVL.height ?l) (AVL.height ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 1)),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 7, template_var 2)),
             template_app (template_hole 7, template_var 1)))))),
    ("AVL.height_mkt_bal_r2",
     "[| avl ?l; avl ?r; AVL.height ?r ~= AVL.height ?l + 2 |]
      ==> AVL.height (mkt_bal_r ?n ?l ?r) =
          1 + max (AVL.height ?l) (AVL.height ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 2)),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 7, template_var 2)),
             template_app (template_hole 7, template_var 1)))))),
    ("AVL.avl_mkt",
     "[| avl ?l; avl ?r;
         AVL.height ?l = AVL.height ?r |
         AVL.height ?l = AVL.height ?r + 1 |
         AVL.height ?r = AVL.height ?l + 1 |]
      ==> avl (mkt ?x ?l ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_app
                     (template_app
                       (template_hole 2,
                        template_app (template_hole 3, template_var 1)),
                      template_hole 1))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 3, template_var 2)),
                    template_hole 1))))
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("AVL.height_mkt_bal_l",
     "[| AVL.height ?l = AVL.height ?r + 2; avl ?l; avl ?r |]
      ==> AVL.height (mkt_bal_l ?n ?l ?r) = AVL.height ?r + 2 |
          AVL.height (mkt_bal_l ?n ?l ?r) = AVL.height ?r + 3",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 8, template_var 1)),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4)))),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 1)),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 8, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_hole 4)))))
           ))),
    ("AVL.height_mkt_bal_r",
     "[| AVL.height ?r = AVL.height ?l + 2; avl ?l; avl ?r |]
      ==> AVL.height (mkt_bal_r ?n ?l ?r) = AVL.height ?l + 2 |
          AVL.height (mkt_bal_r ?n ?l ?r) = AVL.height ?l + 3",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 8, template_var 1)),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4)))),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 1),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 1)),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 8, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_hole 4)))))
           ))),
    ("AVL.avl_mkt_bal_l",
     "[| avl ?l; avl ?r;
         AVL.height ?l = AVL.height ?r |
         AVL.height ?l = AVL.height ?r + 1 |
         AVL.height ?r = AVL.height ?l + 1 |
         AVL.height ?l = AVL.height ?r + 2 |]
      ==> avl (mkt_bal_l ?n ?l ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)),
                  template_app (template_hole 6, template_var 1))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 6, template_var 1)),
                      template_hole 4))),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 1)),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app (template_hole 6, template_var 2)),
                        template_hole 4))),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 6, template_var 1)),
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            )],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("AVL.avl_mkt_bal_r",
     "[| avl ?l; avl ?r;
         AVL.height ?l = AVL.height ?r |
         AVL.height ?l = AVL.height ?r + 1 |
         AVL.height ?r = AVL.height ?l + 1 |
         AVL.height ?r = AVL.height ?l + 2 |]
      ==> avl (mkt_bal_r ?n ?l ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)),
                  template_app (template_hole 6, template_var 1))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 6, template_var 1)),
                      template_hole 4))),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 1)),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app (template_hole 6, template_var 2)),
                        template_hole 4))),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 6, template_var 2)),
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            )],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("AVL.delete_max_induct",
     "[| !!n l h. ?P (MKT n l ET h);
         !!n l v va vb vc h.
            ?P (MKT v va vb vc) ==> ?P (MKT n l (MKT v va vb vc) h);
         ?P ET |]
      ==> ?P ?a0.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_var 1, template_hole 0))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("AVL.delete_root_cases",
     "[| !!n r h. ?x = MKT n ET r h ==> ?P;
         !!n v va vb vc h. ?x = MKT n (MKT v va vb vc) ET h ==> ?P;
         !!n v va vb vc vd ve vf vg h.
            ?x = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h ==> ?P;
         ?x = ET ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.AVLMoreTemplates"
### 0.303s elapsed time, 0.433s cpu time, 0.059s GC time
val it = (): unit
