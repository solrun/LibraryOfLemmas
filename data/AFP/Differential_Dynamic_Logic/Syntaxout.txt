Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SyntaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SyntaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.SyntaxMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SyntaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.567s cpu time, 0.045s GC time
Loading theory "Draft.Ids" (required by "Draft.SyntaxMoreTemplates" via "Draft.Syntax")
locale ids
  fixes vid1 :: "'sz"
    and vid2 :: "'sz"
    and vid3 :: "'sz"
    and fid1 :: "'sf"
    and fid2 :: "'sf"
    and fid3 :: "'sf"
    and pid1 :: "'sc"
    and pid2 :: "'sc"
    and pid3 :: "'sc"
    and pid4 :: "'sc"
  assumes "ids vid1 vid2 vid3 fid1 fid2 fid3 pid1 pid2 pid3 pid4"
locale ids
  fixes vid1 :: "'sz"
    and vid2 :: "'sz"
    and vid3 :: "'sz"
    and fid1 :: "'sf"
    and fid2 :: "'sf"
    and fid3 :: "'sf"
    and pid1 :: "'sc"
    and pid2 :: "'sc"
    and pid3 :: "'sc"
    and pid4 :: "'sc"
  assumes "ids vid1 vid2 vid3 fid1 fid2 fid3 pid1 pid2 pid3 pid4"
### theory "Draft.Ids"
### 0.056s elapsed time, 0.227s cpu time, 0.000s GC time
Loading theory "Draft.Syntax" (required by "Draft.SyntaxMoreTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.841s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SyntaxMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.350s elapsed time, 1.396s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SyntaxMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.911s elapsed time, 3.449s cpu time, 0.779s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.937s elapsed time, 3.416s cpu time, 0.698s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.848s elapsed time, 6.011s cpu time, 0.975s GC time
Loading theory "Draft.Templates" (required by "Draft.SyntaxMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SyntaxMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.515s elapsed time, 1.085s cpu time, 0.113s GC time
consts
  sizeF :: "('sf, 'sc, 'sz) formula => nat"
  sizeP :: "('sf, 'sc, 'sz) hp => nat"
Found termination order: "{}"
locale ids
  fixes vid1 :: "'sz"
    and vid2 :: "'sz"
    and vid3 :: "'sz"
    and fid1 :: "'sf"
    and fid2 :: "'sf"
    and fid3 :: "'sf"
    and pid1 :: "'sc"
    and pid2 :: "'sc"
    and pid3 :: "'sc"
    and pid4 :: "'sc"
  assumes "ids vid1 vid2 vid3 fid1 fid2 fid3 pid1 pid2 pid3 pid4"
Found termination order: "{}"
Proofs for inductive predicate(s) "dfree"
  Proving monotonicity ...
Proofs for inductive predicate(s) "dsafe"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "osafe"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hpfree", "ffree"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hpsafe", "fsafe"
  Proving monotonicity ...
### Ambiguous input (line 328 of "$AFP/Differential_Dynamic_Logic/Syntax.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_applC" ("\<^const>Syntax.hp.Pvar") ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" x1) ("_position" x2))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" P)
###           ("\<^const>Syntax.hp.Assign" ("_position" x1) ("_position" x2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" x1) ("_position" x2))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P)
###             ("_applC" ("_position" DiffAssign)
###               ("_cargs" ("_position" x1) ("_position" x2))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>Pure.all_binder" ("_position" x)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_applC" ("\<^const>Syntax.hp.Test") ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" x1) ("_position" x2))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" EvolveODE)
###                   ("_cargs" ("_position" x1) ("_position" x2))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" x1) ("_position" x2))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" x1)))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x2)))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P)
###                       ("\<^const>Syntax.hp.Choice" ("_position" x1)
###                         ("_position" x2)))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" x1) ("_position" x2))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x1)))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x2)))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("\<^const>Syntax.hp.Sequence" ("_position" x1)
###                           ("_position" x2)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>Pure.all_binder" ("_position" x)
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x)))
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Syntax.hp.Loop"
###                         ("_applC" ("_position" P) ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" hp)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_applC" ("\<^const>Syntax.hp.Pvar") ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" x1) ("_position" x2))
###       ("\<^const>HOL.Trueprop"
###         ("_Update" ("_position" P)
###           ("_updbind" ("_position" x1) ("_position" x2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" x1) ("_position" x2))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P)
###             ("_applC" ("_position" DiffAssign)
###               ("_cargs" ("_position" x1) ("_position" x2))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>Pure.all_binder" ("_position" x)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_applC" ("\<^const>Syntax.hp.Test") ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" x1) ("_position" x2))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" EvolveODE)
###                   ("_cargs" ("_position" x1) ("_position" x2))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" x1) ("_position" x2))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" x1)))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x2)))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P)
###                       ("\<^const>Syntax.hp.Choice" ("_position" x1)
###                         ("_position" x2)))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" x1) ("_position" x2))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x1)))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x2)))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("\<^const>Syntax.hp.Sequence" ("_position" x1)
###                           ("_position" x2)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>Pure.all_binder" ("_position" x)
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x)))
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Syntax.hp.Loop"
###                         ("_applC" ("_position" P) ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" hp)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_applC" ("\<^const>Syntax.hp.Pvar") ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" x1) ("_position" x2))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" P)
###           ("\<^const>Syntax.hp.Assign" ("_position" x1) ("_position" x2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" x1) ("_position" x2))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P)
###             ("_applC" ("_position" DiffAssign)
###               ("_cargs" ("_position" x1) ("_position" x2))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>Pure.all_binder" ("_position" x)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_applC" ("\<^const>Syntax.hp.Test") ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" x1) ("_position" x2))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" EvolveODE)
###                   ("_cargs" ("_position" x1) ("_position" x2))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" x1) ("_position" x2))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" x1)))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x2)))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P)
###                       ("\<^const>Syntax.hp.Choice" ("_position" x1)
###                         ("_position" x2)))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" x1) ("_position" x2))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x1)))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x2)))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("\<^const>Syntax.hp.Sequence" ("_position" x1)
###                           ("_position" x2)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>Pure.all_binder" ("_position" x)
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x)))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("\<^const>Syntax.hp.Loop" ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" hp)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_applC" ("\<^const>Syntax.hp.Pvar") ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" x1) ("_position" x2))
###       ("\<^const>HOL.Trueprop"
###         ("_Update" ("_position" P)
###           ("_updbind" ("_position" x1) ("_position" x2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" x1) ("_position" x2))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P)
###             ("_applC" ("_position" DiffAssign)
###               ("_cargs" ("_position" x1) ("_position" x2))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>Pure.all_binder" ("_position" x)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_applC" ("\<^const>Syntax.hp.Test") ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" x1) ("_position" x2))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" EvolveODE)
###                   ("_cargs" ("_position" x1) ("_position" x2))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" x1) ("_position" x2))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" x1)))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x2)))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P)
###                       ("\<^const>Syntax.hp.Choice" ("_position" x1)
###                         ("_position" x2)))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" x1) ("_position" x2))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" P) ("_position" x1)))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x2)))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("\<^const>Syntax.hp.Sequence" ("_position" x1)
###                           ("_position" x2)))))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>Pure.all_binder" ("_position" x)
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P) ("_position" x)))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("\<^const>Syntax.hp.Loop" ("_position" x))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P) ("_position" hp)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale ids
  fixes vid1 :: "'sz"
    and vid2 :: "'sz"
    and vid3 :: "'sz"
    and fid1 :: "'sf"
    and fid2 :: "'sf"
    and fid3 :: "'sf"
    and pid1 :: "'sc"
    and pid2 :: "'sc"
    and pid3 :: "'sc"
    and pid4 :: "'sc"
  assumes "ids vid1 vid2 vid3 fid1 fid2 fid3 pid1 pid2 pid3 pid4"
### theory "Draft.Syntax"
### 6.197s elapsed time, 11.225s cpu time, 2.214s GC time
Loading theory "Draft.SyntaxMoreTemplates"
val templateLemmas =
   [("Syntax.expr_diseq", "?p ~= ! ?p",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 0, template_var 0))
         )),
    ("Syntax.dfree_Const_simps", "dfree (Const ?r) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dfree_DiffVar_simps", "dfree ($' ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dfree_Differential_simps", "dfree (Differential ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dfree_Var_simps", "dfree (Var ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dsafe_Const_simps", "dsafe (Const ?r) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dsafe_DiffVar_simps", "dsafe ($' ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dsafe_Var_simps", "dsafe (Var ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.hpsafe_Pvar_simps", "hpsafe ($\<alpha> ?a) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.osafe_OVar_simps", "osafe (OVar ?c) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.expr_diseq", "?p ~= (?p \<leftrightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (?p \<rightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (?p || ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (?p && ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (\<langle> ?a \<rangle> ?p)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?p ~= Exists ?x ?p",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?p ~= InContext ?C ?p",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p \<leftrightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p \<rightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p || ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p && ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.dsafe_Diff_simps", "dsafe (Differential ?a) = dfree ?a",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.fsafe_Not_simps", "fsafe (! ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.hpsafe_Loop_simps", "hpsafe ?a** = hpsafe ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.hpsafe_Test_simps", "hpsafe (? ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.dfree_is_dsafe", "dfree ?\<theta> ==> dsafe ?\<theta>",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Syntax.fsafe_Exists_simps", "fsafe (Exists ?x ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.fsafe_Context_simps", "fsafe (InContext ?C ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.hpsafe_Assign_simps", "hpsafe (?x := ?e) = dsafe ?e",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.hpsafe_DiffAssign_simps",
     "hpsafe (DiffAssign ?x ?e) = dsafe ?e",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.osafe_OSing_simps",
     "osafe (OSing ?x ?\<theta>) = dfree ?\<theta>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.dfree_Fun_simps",
     "dfree ($f ?i ?args) = (ALL x. dfree (?args x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Syntax.dfree_Plus_simps",
     "dfree (Plus ?a ?b) = (dfree ?a & dfree ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.dfree_Times_simps",
     "dfree (Times ?a ?b) = (dfree ?a & dfree ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.dsafe_Fun_simps",
     "dsafe ($f ?i ?args) = (ALL x. dsafe (?args x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Syntax.dsafe_Plus_simps",
     "dsafe (Plus ?a ?b) = (dsafe ?a & dsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.dsafe_Times_simps",
     "dsafe (Times ?a ?b) = (dsafe ?a & dsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.fsafe_And_simps", "fsafe (?p && ?q) = (fsafe ?p & fsafe ?q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.fsafe_Diamond_simps",
     "fsafe (\<langle> ?a \<rangle> ?p) = (hpsafe ?a & fsafe ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Syntax.fsafe_Geq_simps",
     "fsafe (Geq ?t1.0 ?t2.0) = (dsafe ?t1.0 & dsafe ?t2.0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Syntax.fsafe_Prop_simps",
     "fsafe ($\<phi> ?p ?args) = (ALL x. dsafe (?args x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Syntax.hpsafe_Choice_simps",
     "hpsafe (?a \<union>\<union> ?b) = (hpsafe ?a & hpsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.hpsafe_ODE_simps",
     "hpsafe (EvolveODE ?ODE ?p) = (osafe ?ODE & fsafe ?p)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Syntax.hpsafe_Sequence_simps",
     "hpsafe (?a ;; ?b) = (hpsafe ?a & hpsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.sizeF_diseq", "sizeF ?p ~= sizeF ?q ==> ?p ~= ?q",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Syntax.osafe_OProd_simps",
     "osafe (OProd ?ODE1.0 ?ODE2.0) =
      (osafe ?ODE1.0 &
       osafe ?ODE2.0 & ODE_dom ?ODE1.0 Int ODE_dom ?ODE2.0 = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_app (template_hole 1, template_var 0))),
                 template_hole 0)))
           ))),
    ("Syntax.fml_induct",
     "[| !!t1 t2. ?P (Geq t1 t2); !!p args. ?P ($\<phi> p args);
         !!p. ?P p ==> ?P (! p); !!p q. [| ?P p; ?P q |] ==> ?P (p && q);
         !!x p. ?P p ==> ?P (Exists x p);
         !!a p. ?P p ==> ?P (\<langle> a \<rangle> p);
         !!C p. ?P p ==> ?P (InContext C p) |]
      ==> ?P ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Syntax.hp_induct",
     "[| !!x. ?P ($\<alpha> x); !!x1 x2. ?P (x1 := x2);
         !!x1 x2. ?P (DiffAssign x1 x2); !!x. ?P (? x);
         !!x1 x2. ?P (EvolveODE x1 x2);
         !!x1 x2. [| ?P x1; ?P x2 |] ==> ?P (x1 \<union>\<union> x2);
         !!x1 x2. [| ?P x1; ?P x2 |] ==> ?P (x1 ;; x2);
         !!x. ?P x ==> ?P x** |]
      ==> ?P ?hp",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.SyntaxMoreTemplates"
### 0.376s elapsed time, 0.515s cpu time, 0.035s GC time
val it = (): unit
