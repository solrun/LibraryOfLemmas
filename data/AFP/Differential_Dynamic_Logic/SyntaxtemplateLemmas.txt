   [("Syntax.expr_diseq", "?p ~= ! ?p",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 0, template_var 0))
         )),
    ("Syntax.dfree_Const_simps", "dfree (Const ?r) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dfree_DiffVar_simps", "dfree ($' ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dfree_Differential_simps", "dfree (Differential ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dfree_Var_simps", "dfree (Var ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dsafe_Const_simps", "dsafe (Const ?r) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dsafe_DiffVar_simps", "dsafe ($' ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.dsafe_Var_simps", "dsafe (Var ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.hpsafe_Pvar_simps", "hpsafe ($\<alpha> ?a) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.osafe_OVar_simps", "osafe (OVar ?c) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Syntax.expr_diseq", "?p ~= (?p \<leftrightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (?p \<rightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (?p || ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (?p && ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Syntax.expr_diseq", "?p ~= (\<langle> ?a \<rangle> ?p)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?p ~= Exists ?x ?p",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?p ~= InContext ?C ?p",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p \<leftrightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p \<rightarrow> ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p || ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.expr_diseq", "?q ~= (?p && ?q)",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Syntax.dsafe_Diff_simps", "dsafe (Differential ?a) = dfree ?a",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.fsafe_Not_simps", "fsafe (! ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.hpsafe_Loop_simps", "hpsafe ?a** = hpsafe ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.hpsafe_Test_simps", "hpsafe (? ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.dfree_is_dsafe", "dfree ?\<theta> ==> dsafe ?\<theta>",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Syntax.fsafe_Exists_simps", "fsafe (Exists ?x ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.fsafe_Context_simps", "fsafe (InContext ?C ?p) = fsafe ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Syntax.hpsafe_Assign_simps", "hpsafe (?x := ?e) = dsafe ?e",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.hpsafe_DiffAssign_simps",
     "hpsafe (DiffAssign ?x ?e) = dsafe ?e",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.osafe_OSing_simps",
     "osafe (OSing ?x ?\<theta>) = dfree ?\<theta>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syntax.dfree_Fun_simps",
     "dfree ($f ?i ?args) = (ALL x. dfree (?args x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Syntax.dfree_Plus_simps",
     "dfree (Plus ?a ?b) = (dfree ?a & dfree ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.dfree_Times_simps",
     "dfree (Times ?a ?b) = (dfree ?a & dfree ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.dsafe_Fun_simps",
     "dsafe ($f ?i ?args) = (ALL x. dsafe (?args x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Syntax.dsafe_Plus_simps",
     "dsafe (Plus ?a ?b) = (dsafe ?a & dsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.dsafe_Times_simps",
     "dsafe (Times ?a ?b) = (dsafe ?a & dsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.fsafe_And_simps", "fsafe (?p && ?q) = (fsafe ?p & fsafe ?q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.fsafe_Diamond_simps",
     "fsafe (\<langle> ?a \<rangle> ?p) = (hpsafe ?a & fsafe ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Syntax.fsafe_Geq_simps",
     "fsafe (Geq ?t1.0 ?t2.0) = (dsafe ?t1.0 & dsafe ?t2.0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Syntax.fsafe_Prop_simps",
     "fsafe ($\<phi> ?p ?args) = (ALL x. dsafe (?args x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Syntax.hpsafe_Choice_simps",
     "hpsafe (?a \<union>\<union> ?b) = (hpsafe ?a & hpsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.hpsafe_ODE_simps",
     "hpsafe (EvolveODE ?ODE ?p) = (osafe ?ODE & fsafe ?p)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Syntax.hpsafe_Sequence_simps",
     "hpsafe (?a ;; ?b) = (hpsafe ?a & hpsafe ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Syntax.sizeF_diseq", "sizeF ?p ~= sizeF ?q ==> ?p ~= ?q",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Syntax.osafe_OProd_simps",
     "osafe (OProd ?ODE1.0 ?ODE2.0) =
      (osafe ?ODE1.0 &
       osafe ?ODE2.0 & ODE_dom ?ODE1.0 Int ODE_dom ?ODE2.0 = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_app (template_hole 1, template_var 0))),
                 template_hole 0)))
           ))),
    ("Syntax.fml_induct",
     "[| !!t1 t2. ?P (Geq t1 t2); !!p args. ?P ($\<phi> p args);
         !!p. ?P p ==> ?P (! p); !!p q. [| ?P p; ?P q |] ==> ?P (p && q);
         !!x p. ?P p ==> ?P (Exists x p);
         !!a p. ?P p ==> ?P (\<langle> a \<rangle> p);
         !!C p. ?P p ==> ?P (InContext C p) |]
      ==> ?P ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Syntax.hp_induct",
     "[| !!x. ?P ($\<alpha> x); !!x1 x2. ?P (x1 := x2);
         !!x1 x2. ?P (DiffAssign x1 x2); !!x. ?P (? x);
         !!x1 x2. ?P (EvolveODE x1 x2);
         !!x1 x2. [| ?P x1; ?P x2 |] ==> ?P (x1 \<union>\<union> x2);
         !!x1 x2. [| ?P x1; ?P x2 |] ==> ?P (x1 ;; x2);
         !!x. ?P x ==> ?P x** |]
      ==> ?P ?hp",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]
