Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DRA_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DRA_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DRA_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.DRA_ModelsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.553s cpu time, 0.044s GC time
Loading theory "Draft.Test_Dioid" (required by "Draft.DRA_ModelsTemplates" via "Draft.DRA_Models" via "Draft.DRAT" via "Draft.KAT" via "Draft.Conway_Tests")
Found termination order: "size_list size <*mlex*> {}"
class n_op = type +
  fixes n_op :: "'a => 'a"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.829s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DRA_ModelsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.305s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DRA_ModelsTemplates" via "Draft.ExtrEqs")
class test_monoid = monoid_mult + n_op +
  assumes "tm1": "n n (1::'a) = (1::'a)"
    and "tm2": "!!x. n x \<cdot> n n x = n (1::'a)"
    and
    "tm3":
      "!!x z y.
          n x \<cdot> n (n n z \<cdot> n n y) =
          n (n (n x \<cdot> n y) \<cdot> n (n x \<cdot> n z))"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
class test_near_semiring_zerol = ab_near_semiring_one_zerol + plus_ord +
  n_op +
  assumes "test_one": "n n (1::'a) = (1::'a)"
    and "test_mult": "!!x y. n n (n x \<cdot> n y) = n x \<cdot> n y"
    and "test_mult_comp": "!!x. n x \<cdot> n n x = (0::'a)"
    and "test_de_morgan": "!!x y. n (n n x \<cdot> n n y) = n x + n y"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.002s elapsed time, 3.736s cpu time, 0.821s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.075s elapsed time, 3.862s cpu time, 0.776s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.056s elapsed time, 6.518s cpu time, 1.025s GC time
Loading theory "Draft.Templates" (required by "Draft.DRA_ModelsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DRA_ModelsTemplates")
class test_near_semiring_zerol_distrib = test_near_semiring_zerol +
  assumes
    "n_left_distrib":
      "!!x y z. !x \<cdot> (y + z) = !x \<cdot> y + !x \<cdot> z"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.531s elapsed time, 1.094s cpu time, 0.082s GC time
### theory "Draft.Test_Dioid"
### 4.003s elapsed time, 8.723s cpu time, 1.143s GC time
Loading theory "Draft.Conway_Tests" (required by "Draft.DRA_ModelsTemplates" via "Draft.DRA_Models" via "Draft.DRAT" via "Draft.KAT")
### theory "Draft.Conway_Tests"
### 1.135s elapsed time, 1.216s cpu time, 0.073s GC time
Loading theory "Draft.KAT" (required by "Draft.DRA_ModelsTemplates" via "Draft.DRA_Models" via "Draft.DRAT")
### theory "Draft.KAT"
### 1.866s elapsed time, 1.935s cpu time, 0.110s GC time
Loading theory "Draft.DRAT" (required by "Draft.DRA_ModelsTemplates" via "Draft.DRA_Models")
### theory "Draft.DRAT"
### 1.026s elapsed time, 1.071s cpu time, 0.063s GC time
Loading theory "Draft.DRA_Models" (required by "Draft.DRA_ModelsTemplates")
### Ambiguous input (line 49 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" N) ("_position" f))
###   ("\<^const>DRA_Models.fun_inter"
###     ("\<^const>Fun.comp" ("_applC" ("_position" adjoint) ("_position" f))
###       ("_position" bot))
###     ("_position" id)))
### ("\<^const>Pure.eq" ("_applC" ("_position" N) ("_position" f))
###   ("\<^const>DRA_Models.fun_inter"
###     ("_applC" ("_position" adjoint)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_position" bot))))
###     ("_position" id)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_inter"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_position" top)))
###       ("_applC" ("_position" adjoint)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###             ("_position" bot)))))
###     ("_position" bot)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_inter"
###       ("\<^const>Fun.comp" ("_position" f) ("_position" top))
###       ("_applC" ("_position" adjoint)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###             ("_position" bot)))))
###     ("_position" bot)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_inter"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_position" top)))
###       ("\<^const>Fun.comp" ("_applC" ("_position" adjoint) ("_position" f))
###         ("_position" bot)))
###     ("_position" bot)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_inter"
###       ("\<^const>Fun.comp" ("_position" f) ("_position" top))
###       ("\<^const>Fun.comp" ("_applC" ("_position" adjoint) ("_position" f))
###         ("_position" bot)))
###     ("_position" bot)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_union"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_position" top)))
###       ("_applC" ("_position" adjoint)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###             ("_position" bot)))))
###     ("_position" top)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_union"
###       ("\<^const>Fun.comp" ("_position" f) ("_position" top))
###       ("_applC" ("_position" adjoint)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###             ("_position" bot)))))
###     ("_position" top)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_union"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_position" top)))
###       ("\<^const>Fun.comp" ("_applC" ("_position" adjoint) ("_position" f))
###         ("_position" bot)))
###     ("_position" top)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DRA_Models.fun_union"
###       ("\<^const>Fun.comp" ("_position" f) ("_position" top))
###       ("\<^const>Fun.comp" ("_applC" ("_position" adjoint) ("_position" f))
###         ("_position" bot)))
###     ("_position" top)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" adjoint)
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_position" g))))
###     ("_applC" ("_position" adjoint)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_cargs" ("_position" adjoint) ("_position" g)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" adjoint)
###       ("\<^const>Fun.comp" ("_position" f) ("_position" g)))
###     ("_applC" ("_position" adjoint)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_cargs" ("_position" adjoint) ("_position" g)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" adjoint)
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_position" g))))
###     ("\<^const>Fun.comp" ("_applC" ("_position" adjoint) ("_position" f))
###       ("_applC" ("_position" adjoint) ("_position" g)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" adjoint)
###       ("\<^const>Fun.comp" ("_position" f) ("_position" g)))
###     ("\<^const>Fun.comp" ("_applC" ("_position" adjoint) ("_position" f))
###       ("_applC" ("_position" adjoint) ("_position" g)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" N) ("_applC" ("_position" N) ("_position" f)))
###       ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###         ("_cargs" ("_position" N) ("_position" f))))
###     ("_position" bot)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" N) ("_applC" ("_position" N) ("_position" f)))
###       ("_applC" ("_position" N) ("_position" f)))
###     ("_position" bot)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp" ("_applC" ("_position" N) ("_position" f))
###       ("_applC" ("_position" N) ("_applC" ("_position" N) ("_position" f))))
###     ("_position" bot)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" N)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_applC" ("_position" N)
###             ("_applC" ("_position" N) ("_position" f))))))
###     ("_position" bot)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" N)
###       ("_cargs" ("_applC" ("_position" N) ("_position" f))
###         ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###           ("_cargs" ("_position" N)
###             ("_applC" ("_position" N) ("_position" g))))))
###     ("\<^const>DRA_Models.fun_inter"
###       ("_applC" ("_position" N) ("_applC" ("_position" N) ("_position" f)))
###       ("_applC" ("_position" N)
###         ("_applC" ("_position" N) ("_position" g))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Fun.comp"
###       ("_applC" ("_position" N) ("_applC" ("_position" N) ("_position" f)))
###       ("_applC" ("_position" N) ("_applC" ("_position" N) ("_position" g))))
###     ("\<^const>DRA_Models.fun_inter"
###       ("_applC" ("_position" N) ("_applC" ("_position" N) ("_position" f)))
###       ("_applC" ("_position" N)
###         ("_applC" ("_position" N) ("_position" g))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 2 parse trees:
### ("_Coll"
###   ("_idtyp" ("_position" f)
###     ("_tapp" ("_position_sort" 'a) ("_type_name" bfun)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" g) ("_position" h))
###     ("\<^const>HOL.conj" ("_applC" ("_position" mono) ("_position" f))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>DRA_Models.fun_union"
###             ("\<^const>Fun.comp" ("_position" f) ("_position" g))
###             ("\<^const>Fun.comp" ("_position" f) ("_position" h)))
###           ("\<^const>Fun.comp" ("_position" f)
###             ("\<^const>DRA_Models.fun_union" ("_position" g)
###               ("_position" h))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" bot)
###             ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###               ("_position" f)))
###           ("_position" bot))))))
### ("_Coll"
###   ("_idtyp" ("_position" f)
###     ("_tapp" ("_position_sort" 'a) ("_type_name" bfun)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" g) ("_position" h))
###     ("\<^const>HOL.conj" ("_applC" ("_position" mono) ("_position" f))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>DRA_Models.fun_union"
###             ("\<^const>Fun.comp" ("_position" f) ("_position" g))
###             ("\<^const>Fun.comp" ("_position" f) ("_position" h)))
###           ("\<^const>Fun.comp" ("_position" f)
###             ("\<^const>DRA_Models.fun_union" ("_position" g)
###               ("_position" h))))
###         ("\<^const>HOL.eq"
###           ("\<^const>Fun.comp" ("_position" bot) ("_position" f))
###           ("_position" bot))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  bool_op :: (type) dioid_one_zerol
  less_eq_bool_op == less_eq :: 'a bool_op => 'a bool_op => bool
  less_bool_op == less :: 'a bool_op => 'a bool_op => bool
  zero_bool_op == zero_class.zero :: 'a bool_op
  one_bool_op == one_class.one :: 'a bool_op
  times_bool_op == times :: 'a bool_op => 'a bool_op => 'a bool_op
  plus_bool_op == plus :: 'a bool_op => 'a bool_op => 'a bool_op
instantiation
  bool_op :: (type) test_semiring_zerol
  n_op_bool_op == n_op :: 'a bool_op => 'a bool_op
### Ambiguous input (line 151 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" fun_star) ("_position" f))
###     ("_applC" ("_position" lfp)
###       ("_lambda" ("_position" r)
###         ("\<^const>DRA_Models.fun_union"
###           ("_applC" ("_position" f)
###             ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###               ("_position" r)))
###           ("_position" id))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" fun_star) ("_position" f))
###     ("_applC" ("_position" lfp)
###       ("_lambda" ("_position" r)
###         ("\<^const>DRA_Models.fun_union"
###           ("\<^const>Fun.comp" ("_position" f) ("_position" r))
###           ("_position" id))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/KAT_and_DRA/SingleSorted/DRA_Models.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" fun_iteration) ("_position" f))
###     ("_applC" ("_position" gfp)
###       ("_lambda" ("_position" g)
###         ("\<^const>DRA_Models.fun_union"
###           ("_applC" ("_position" f)
###             ("_cargs" ("\<^const>Test_Dioid.test_monoid_class.a_zero")
###               ("_position" g)))
###           ("_position" id))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" fun_iteration) ("_position" f))
###     ("_applC" ("_position" gfp)
###       ("_lambda" ("_position" g)
###         ("\<^const>DRA_Models.fun_union"
###           ("\<^const>Fun.comp" ("_position" f) ("_position" g))
###           ("_position" id))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DRA_Models"
### 0.320s elapsed time, 0.349s cpu time, 0.034s GC time
Loading theory "Draft.DRA_ModelsTemplates"
val templateLemmas =
   [("DRA_Models.bot_min", "DRA_Models.bot \<le> ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("DRA_Models.top_max", "?f \<le> DRA_Models.top",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("DRA_Models.adjoint_idem", "adjoint (adjoint ?f) = ?f",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("DRA_Models.N_comp1", "N (N ?f) + N ?f = id",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("DRA_Models.N_comp3", "N ?f o N (N ?f) = DRA_Models.bot",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("DRA_Models.N_comp2", "N (N ?f) o N ?f = DRA_Models.bot",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("DRA_Models.adjoint_mult",
     "adjoint (?f o ?g) = adjoint ?f o adjoint ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("DRA_Models.adjoint_prop1",
     "?f o DRA_Models.top \<sqinter> adjoint ?f o DRA_Models.bot =
      DRA_Models.bot",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)),
       template_hole 0)),
    ("DRA_Models.adjoint_prop2",
     "?f o DRA_Models.top + adjoint ?f o DRA_Models.bot = DRA_Models.top",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)),
       template_hole 2)),
    ("DRA_Models.N_de_morgan",
     "N (N ?f) o N (N ?g) = N (N ?f) \<sqinter> N (N ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 1, template_var 0))))),
    ("DRA_Models.conj_pred_aux",
     "(%p. ?x p Un ?y p) = ?y ==> ALL p. ?x p <= ?y p",
     template_implication
      ([template_equation (t_empty, template_var 0)],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.DRA_ModelsTemplates"
### 0.392s elapsed time, 0.505s cpu time, 0.000s GC time
val it = (): unit
