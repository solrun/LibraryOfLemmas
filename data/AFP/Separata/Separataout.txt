Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.SeparataMoreTemplates" via "Draft.Separata" via "HOL-Eisbach.Eisbach_Tools")
Loading theory "HOL-Library.Cancellation" (required by "Draft.SeparataMoreTemplates" via "Draft.Separata" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SeparataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SeparataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.586s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SeparataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
structure Eisbach_Rule_Insts: sig end
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.267s cpu time, 0.094s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SeparataMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.800s cpu time, 0.060s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SeparataMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.435s elapsed time, 1.697s cpu time, 0.143s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SeparataMoreTemplates" via "Draft.Separata")
### theory "HOL-Eisbach.Eisbach"
### 0.468s elapsed time, 1.827s cpu time, 0.143s GC time
Loading theory "HOL-Eisbach.Eisbach_Tools" (required by "Draft.SeparataMoreTemplates" via "Draft.Separata")
val try_map = fn: 'a Seq.seq -> 'a Seq.seq -> 'a Seq.seq
val uncurry_rule = fn: thm -> thm
val curry_rule = fn: thm -> thm
### theory "HOL-Eisbach.Eisbach_Tools"
### 0.033s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SeparataMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.109s elapsed time, 4.245s cpu time, 0.855s GC time
Loading theory "Separation_Algebra.Separation_Algebra" (required by "Draft.SeparataMoreTemplates" via "Draft.Separata")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.027s elapsed time, 3.930s cpu time, 0.806s GC time
class pre_sep_algebra = plus + zero +
  fixes sep_disj :: "'a => 'a => bool"
  assumes "sep_disj_zero": "!!x. x ## (0::'a)"
  assumes "sep_disj_commuteI": "!!x y. x ## y ==> y ## x"
  assumes "sep_add_zero": "!!x. x + (0::'a) = x"
  assumes "sep_add_commute": "!!x y. x ## y ==> x + y = y + x"
  assumes
    "sep_add_assoc":
      "!!x y z. [| x ## y; y ## z; x ## z |] ==> x + y + z = x + (y + z)"
Found termination order: "size <*mlex*> {}"
class sep_algebra = pre_sep_algebra +
  assumes "sep_disj_addD1": "!!x y z. [| x ## y + z; y ## z |] ==> x ## y"
  assumes
    "sep_disj_addI1": "!!x y z. [| x ## y + z; y ## z |] ==> x + y ## z"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<and>*) \<box> ?xs == foldr (\<and>*) ?xs \<box>
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Separation_Algebra.sep_algebra_class.sep_conj" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<and>*) \<box> ?g (set ?xs) ==
### sep.sum_list (map ?g (remdups ?xs))
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class stronger_sep_algebra = pre_sep_algebra +
  assumes
    "sep_add_disj_eq": "!!y z x. y ## z ==> x ## y + z = (x ## y & x ## z)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class cancellative_sep_algebra = sep_algebra +
  assumes
    "sep_add_cancelD":
      "!!x z y. [| x + z = y + z; x ## z; y ## z |] ==> x = y"
### theory "Separation_Algebra.Separation_Algebra"
### 1.183s elapsed time, 3.734s cpu time, 1.032s GC time
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.372s elapsed time, 8.096s cpu time, 1.888s GC time
Loading theory "Draft.Templates" (required by "Draft.SeparataMoreTemplates" via "Draft.ExtrEqs")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SeparataMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.565s elapsed time, 1.213s cpu time, 0.189s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.504s elapsed time, 9.700s cpu time, 2.114s GC time
Loading theory "Draft.Separata" (required by "Draft.SeparataMoreTemplates")
class heap_sep_algebra = cancellative_sep_algebra +
  assumes
    "sep_add_ind_unit":
      "!!x y. [| x + y = (0::'a); x ## y |] ==> x = (0::'a)"
  assumes "sep_add_disj": "!!x. x ## x ==> x = (0::'a)"
  assumes
    "sep_add_cross_split":
      "!!a b w c d.
          [| a + b = w; c + d = w; a ## b; c ## d |]
          ==> EX e f g h.
                 e + f = a &
                 g + h = b &
                 e + g = c & f + h = d & e ## f & g ## h & e ## g & f ## h"
  assumes
    "disj_dstri": "!!x y z. [| x ## y; y ## z; x ## z |] ==> x ## y + z"
class heap_sep_algebra = cancellative_sep_algebra +
  assumes
    "sep_add_ind_unit":
      "!!x y. [| x + y = (0::'a); x ## y |] ==> x = (0::'a)"
  assumes "sep_add_disj": "!!x. x ## x ==> x = (0::'a)"
  assumes
    "sep_add_cross_split":
      "!!a b w c d.
          [| a + b = w; c + d = w; a ## b; c ## d |]
          ==> EX e f g h.
                 e + f = a &
                 g + h = b &
                 e + g = c & f + h = d & e ## f & g ## h & e ## g & f ## h"
  assumes
    "disj_dstri": "!!x y z. [| x ## y; y ## z; x ## z |] ==> x ## y + z"
### theory "Draft.Separata"
### 1.135s elapsed time, 2.025s cpu time, 1.035s GC time
Loading theory "Draft.SeparataMoreTemplates"
val templateLemmas =
   [("Separata.lspasl_topr", "?gamma ==> True | ?Delta",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Separata.lspasl_botl", "?Gamma & False ==> ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("Separata.ax_iu", "\<box> ?h & (?A \<and>* ?B) ?h --> ?A ?h",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2))),
           template_app (template_var 1, template_var 2))
         )),
    ("Separata.lspasl_id", "?Gamma & ?A ?h ==> ?A ?h | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app (template_var 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_var 0)
           ))),
    ("Separata.unique_subheap",
     "?\<sigma>1.0,?\<sigma>2.0\<triangleright>?\<sigma> ==>
      EX! \<sigma>2'. ?\<sigma>1.0,\<sigma>2'\<triangleright>?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Separata.sep_substate_tran",
     "?x \<preceq> ?y & ?y \<preceq> ?z ==> ?x \<preceq> ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Separata.precise_sep_conj",
     "[| precise ?I; precise ?I' |] ==> precise (?I \<and>* ?I')",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Separata.sep_split_substate",
     "?\<sigma>1.0,?\<sigma>2.0\<triangleright>?\<sigma> ==>
      ?\<sigma>1.0 \<preceq> ?\<sigma> & ?\<sigma>2.0 \<preceq> ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Separata.lspasl_notl",
     "?Gamma --> ?A ?h | ?Delta ==> ?Gamma & ~ ?A ?h --> ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_var 2, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 1)))),
             template_var 0)
           ))),
    ("Separata.lspasl_notr",
     "?Gamma & ?A ?h --> ?Delta ==> ?Gamma --> ~ ?A ?h | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_var 2, template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 1))),
               template_var 0))
           ))),
    ("Separata.lspasl_notr_inv",
     "?Gamma --> ~ ?A ?h | ?Delta ==> ?Gamma & ?A ?h --> ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_var 2, template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app (template_var 2, template_var 1))),
             template_var 0)
           ))),
    ("Separata.lspasl_notl_inv",
     "?Gamma & ~ ?A ?h --> ?Delta ==> ?Gamma --> ?A ?h | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app
                   (template_hole 1,
                    template_app (template_var 2, template_var 1)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 1)),
               template_var 0))
           ))),
    ("Separata.lspasl_orr",
     "?Gamma --> ?A ?h | ?B ?h | ?Delta ==>
      ?Gamma --> (?A ?h | ?B ?h) | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_app
               (template_app
                 (template_hole 0,
                  template_app (template_var 3, template_var 2)),
                template_app
                 (template_app
                   (template_hole 0,
                    template_app (template_var 1, template_var 2)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 2)),
                   template_app (template_var 1, template_var 2))),
               template_var 0))
           ))),
    ("Separata.lspasl_orr_inv",
     "?Gamma --> (?A ?h | ?B ?h) | ?Delta ==>
      ?Gamma --> ?A ?h | ?B ?h | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app
                     (template_hole 0,
                      template_app (template_var 3, template_var 2)),
                    template_app (template_var 1, template_var 2))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 2)),
                 template_var 0)))
           ))),
    ("Separata.lspasl_impr_inv",
     "?Gamma --> (?A ?h --> ?B ?h) | ?Delta ==>
      ?Gamma & ?A ?h --> ?B ?h | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_var 3, template_var 2)),
                    template_app (template_var 1, template_var 2))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app (template_var 3, template_var 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 1, template_var 2)),
               template_var 0))
           ))),
    ("Separata.lspasl_impr",
     "?Gamma & ?A ?h --> ?B ?h | ?Delta ==>
      ?Gamma --> (?A ?h --> ?B ?h) | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_app (template_var 3, template_var 2))),
              template_app
               (template_app
                 (template_hole 0,
                  template_app (template_var 1, template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_var 3, template_var 2)),
                   template_app (template_var 1, template_var 2))),
               template_var 0))
           ))),
    ("Separata.lspasl_andl",
     "?Gamma & ?A ?h & ?B ?h --> ?Delta ==>
      ?Gamma & ?A ?h & ?B ?h --> ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_app
                   (template_app
                     (template_hole 0,
                      template_app (template_var 3, template_var 2)),
                    template_app (template_var 1, template_var 2)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 2)),
                   template_app (template_var 1, template_var 2)))),
             template_var 0)
           ))),
    ("Separata.lspasl_andr_inv",
     "?Gamma --> ?A ?h & ?B ?h | ?Delta ==>
      (?Gamma --> ?A ?h | ?Delta) & (?Gamma --> ?B ?h | ?Delta)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 0,
                      template_app (template_var 3, template_var 2)),
                    template_app (template_var 1, template_var 2))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_var 3, template_var 2)),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 1, template_var 2)),
                 template_var 0)))
           ))),
    ("Separata.lspasl_orl_inv",
     "?Gamma & (?A ?h | ?B ?h) --> ?Delta ==>
      (?Gamma & ?A ?h --> ?Delta) & (?Gamma & ?B ?h --> ?Delta)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_app
                   (template_app
                     (template_hole 0,
                      template_app (template_var 3, template_var 2)),
                    template_app (template_var 1, template_var 2)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app (template_var 3, template_var 2))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_var 1, template_var 2))),
               template_var 0))
           ))),
    ("Separata.lspasl_impl_inv",
     "?Gamma & (?A ?h --> ?B ?h) --> ?Delta ==>
      (?Gamma --> ?A ?h | ?Delta) & (?Gamma & ?B ?h --> ?Delta)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_var 3, template_var 2)),
                    template_app (template_var 1, template_var 2)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 2)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_var 1, template_var 2))),
               template_var 0))
           ))),
    ("Separata.lspasl_andr",
     "[| ?Gamma --> ?A ?h | ?Delta; ?Gamma --> ?B ?h | ?Delta |]
      ==> ?Gamma --> ?A ?h & ?B ?h | ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_var 3, template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_var 0, template_var 2)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 2)),
                   template_app (template_var 0, template_var 2))),
               template_var 1))
           ))),
    ("Separata.lspasl_impl",
     "[| ?Gamma --> ?A ?h | ?Delta; ?Gamma & ?B ?h --> ?Delta |]
      ==> ?Gamma & (?A ?h --> ?B ?h) --> ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_var 3, template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_app (template_var 0, template_var 2))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_var 3, template_var 2)),
                   template_app (template_var 0, template_var 2)))),
             template_var 1)
           ))),
    ("Separata.lspasl_orl",
     "[| ?Gamma & ?A ?h --> ?Delta; ?Gamma & ?B ?h --> ?Delta |]
      ==> ?Gamma & (?A ?h | ?B ?h) --> ?Delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_app (template_var 3, template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_app (template_var 0, template_var 2))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 2)),
                   template_app (template_var 0, template_var 2)))),
             template_var 1)
           ))),
    ("Separata.fm_partial",
     "((%s. ~ ((%s. True) \<longrightarrow>* (%s. ~ \<box> s)) s) \<and>*
       (%s. ~ ((%s. True) \<longrightarrow>* (%s. ~ \<box> s)) s))
       ?h -->
      ~ ((%s. True) \<longrightarrow>* (%s. ~ \<box> s)) ?h",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), t_empty),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), t_empty),
               template_var 0)))
         )),
    ("Separata.fm_hard",
     "(\<box> ?h -->
       (?p0.0 \<longrightarrow>*
        (?p0.0 \<and>* (?p0.0 \<longrightarrow>* ?p1.0)) \<and>*
        (%s. ~ ?p1.0 s) \<longrightarrow>*
        ?p0.0 \<and>*
        ?p0.0 \<and>*
        (?p0.0 \<longrightarrow>* ?p1.0) \<and>* (%s. ~ ?p1.0 s))
        ?h) -->
      ((%s. ((\<box> \<and>* ?p0.0) \<and>*
             ?p0.0 \<and>*
             (?p0.0 \<longrightarrow>* ?p1.0) \<and>* (%s. ~ ?p1.0 s))
             s -->
            (((?p0.0 \<and>* ?p0.0) \<and>*
              (?p0.0 \<longrightarrow>* ?p1.0)) \<and>*
             (%s. ~ ?p1.0 s))
             s) \<and>*
       \<box>)
       ?h",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_app
                              (template_app
                                (template_hole 2, template_var 1),
                               template_var 0))),
                         t_empty)),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 2, template_var 1),
                               template_var 0)),
                           t_empty))))),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_hole 3),
             template_var 2))
         ))]:
   (string * thm * template) list
### theory "Draft.SeparataMoreTemplates"
### 0.387s elapsed time, 0.600s cpu time, 0.059s GC time
val it = (): unit
