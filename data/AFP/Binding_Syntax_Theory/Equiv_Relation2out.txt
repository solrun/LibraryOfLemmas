Loading theory "Draft.Pick" (required by "Draft.Equiv_Relation2Templates" via "Draft.Equiv_Relation2")
Loading theory "Draft.Preliminaries" (required by "Draft.Equiv_Relation2Templates" via "Draft.Equiv_Relation2")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Equiv_Relation2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Equiv_Relation2Templates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Pick"
### 0.040s elapsed time, 0.189s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Equiv_Relation2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.511s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Equiv_Relation2Templates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.259s elapsed time, 0.996s cpu time, 0.128s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Equiv_Relation2Templates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.436s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Equiv_Relation2Templates" via "Draft.ExtrEqs")
### theory "Draft.Preliminaries"
### 0.654s elapsed time, 2.593s cpu time, 0.234s GC time
Loading theory "Draft.Equiv_Relation2" (required by "Draft.Equiv_Relation2Templates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Draft.Equiv_Relation2"
### 0.311s elapsed time, 1.219s cpu time, 0.128s GC time
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.853s elapsed time, 3.194s cpu time, 0.307s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.146s elapsed time, 3.895s cpu time, 0.954s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.014s elapsed time, 5.540s cpu time, 1.122s GC time
Loading theory "Draft.Templates" (required by "Draft.Equiv_Relation2Templates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.076s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Equiv_Relation2Templates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.488s elapsed time, 0.552s cpu time, 0.080s GC time
Loading theory "Draft.Equiv_Relation2Templates"
val templateLemmas =
   [("Equiv_Relation2.R2P_P2R", "R2P (P2R ?\<phi>) = ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Equiv_Relation2.S2P_Collect", "S2P (Collect ?\<phi>) = ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Equiv_Relation2.Collect_S2P", "Collect (S2P ?r) = ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Equiv_Relation2.P2R_R2P", "P2R (R2P ?r) = ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Equiv_Relation2.symP_R2P", "symP (R2P ?r) = sym ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relation2.transP_R2P", "transP (R2P ?r) = trans ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relation2.sym_P2R", "sym (P2R ?\<phi>) = symP ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relation2.trans_P2R", "trans (P2R ?\<phi>) = transP ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relation2.S2P_app", "S2P ?r ?x = (?x : ?r)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Equiv_Relation2.congruent_P2R",
     "?f respects P2R ?\<phi> = ?f respectsP ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equiv_Relation2.equivP_R2P", "equivP (S2P ?A) (R2P ?r) = equiv ?A ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equiv_Relation2.reflP_R2P", "reflP (S2P ?A) (R2P ?r) = refl_on ?A ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equiv_Relation2.equiv_P2R",
     "equiv (Collect ?P) (P2R ?\<phi>) = equivP ?P ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equiv_Relation2.refl_on_P2R",
     "refl_on (Collect ?P) (P2R ?\<phi>) = reflP ?P ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equiv_Relation2.proj_P2R_raw",
     "proj ?\<phi> = (%x. P2R ?\<phi> `` {x})",
     template_equation
      (template_app (template_hole 4, template_var 0), t_empty)),
    ("Equiv_Relation2.proj_P2R", "proj ?\<phi> ?x = P2R ?\<phi> `` {?x}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Equiv_Relation2.proj_image",
     "proj ?\<phi> ` Collect ?P = Collect (?P /// ?\<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Equiv_Relation2.R2P_app", "R2P ?r ?x ?y = ((?x, ?y) : ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("Equiv_Relation2.in_P2R",
     "(?xy : P2R ?\<phi>) = ?\<phi> (fst ?xy) (snd ?xy)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_var 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Equiv_Relation2.in_P2R_pair",
     "((?x, ?y) : P2R ?\<phi>) = ?\<phi> ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 0, template_var 2), template_var 1))),
    ("Equiv_Relation2.proj_preserves",
     "?P ?x ==> (?P /// ?\<phi>) (proj ?\<phi> ?x)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Equiv_Relation2.equivP_pick_inj_on",
     "equivP ?P ?\<phi> ==> inj_on pick (Collect (?P /// ?\<phi>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Equiv_Relation2.in_P2R_Im_singl",
     "(?y : P2R ?\<phi> `` {?x}) = ?\<phi> ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_app (template_var 1, template_var 0), template_var 2))),
    ("Equiv_Relation2.proj_in_iff",
     "equivP ?P ?\<phi> ==> (?P /// ?\<phi>) (proj ?\<phi> ?x) = ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Equiv_Relation2.in_proj",
     "[| equivP ?P ?\<phi>; ?P ?x |] ==> ?x : proj ?\<phi> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Equiv_Relation2.equivP_pick_preserves",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X |] ==> ?P (pick ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_var 2, template_app (template_hole 0, template_var 0))
           ))),
    ("Equiv_Relation2.pick_proj",
     "[| equivP ?P ?\<phi>; ?P ?x |]
      ==> ?\<phi> (pick (proj ?\<phi> ?x)) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 0)
           ))),
    ("Equiv_Relation2.in_quotientP_imp_non_empty",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X |] ==> ?X ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Equiv_Relation2.in_quotientP_imp_subset",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X |] ==> ?X <= Collect ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 2)))),
    ("Equiv_Relation2.equivP_pick_in",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X |] ==> pick ?X : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Equiv_Relation2.proj_pick",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X |]
      ==> proj ?\<phi> (pick ?X) = ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Equiv_Relation2.univ_commute",
     "[| equivP ?P ?\<phi>; ?f respectsP ?\<phi>; ?P ?x |]
      ==> Equiv_Relation2.univ ?f (proj ?\<phi> ?x) = ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Equiv_Relation2.proj_iff",
     "[| equivP ?P ?\<phi>; ?P ?x; ?P ?y |]
      ==> (proj ?\<phi> ?x = proj ?\<phi> ?y) = ?\<phi> ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_var 3, template_var 1)),
        template_predicate (template_app (template_var 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("Equiv_Relation2.in_quotientP_imp_in_rel",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X; ?x : ?X; ?y : ?X |]
      ==> ?\<phi> ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Equiv_Relation2.in_quotientP_imp_closed",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X; ?x : ?X; ?\<phi> ?x ?y |]
      ==> ?y : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Equiv_Relation2.equivP_pick_iff",
     "[| equivP ?P ?\<phi>; (?P /// ?\<phi>) ?X; (?P /// ?\<phi>) ?Y |]
      ==> ?\<phi> (pick ?X) (pick ?Y) = (?X = ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_var 2,
                  template_app (template_hole 1, template_var 1)),
                template_app (template_hole 1, template_var 0))
              )],
         template_equation (template_var 1, template_var 0)))),
    ("Equiv_Relation2.univ_preserves",
     "[| equivP ?P ?\<phi>; ?f respectsP ?\<phi>; !!x. ?P x ==> ?f x : ?B |]
      ==> ALL X. (?P /// ?\<phi>) X --> Equiv_Relation2.univ ?f X : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Equiv_Relation2.univ_unique",
     "[| equivP ?P ?\<phi>; ?f respectsP ?\<phi>;
         !!x. ?P x ==> ?G (proj ?\<phi> x) = ?f x |]
      ==> ALL X. (?P /// ?\<phi>) X --> ?G X = Equiv_Relation2.univ ?f X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Equiv_Relation2Templates"
### 0.322s elapsed time, 0.417s cpu time, 0.000s GC time
val it = (): unit
