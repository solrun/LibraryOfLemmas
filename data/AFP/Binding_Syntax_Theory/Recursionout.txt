Loading theory "Draft.Pick" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms" via "Draft.Terms" via "Draft.Transition_QuasiTerms_Terms" via "Draft.Equiv_Relation2")
Loading theory "Draft.Preliminaries" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms" via "Draft.Terms" via "Draft.Transition_QuasiTerms_Terms" via "Draft.QuasiTerms_Environments_Substitution" via "Draft.QuasiTerms_PickFresh_Alpha" via "Draft.QuasiTerms_Swap_Fresh")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RecursionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RecursionTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Pick"
### 0.039s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RecursionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.530s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RecursionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.246s elapsed time, 0.952s cpu time, 0.116s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RecursionTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.296s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RecursionTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Preliminaries"
### 0.655s elapsed time, 2.590s cpu time, 0.271s GC time
Loading theory "Draft.Equiv_Relation2" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms" via "Draft.Terms" via "Draft.Transition_QuasiTerms_Terms")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Equiv_Relation2"
### 0.485s elapsed time, 1.726s cpu time, 0.658s GC time
Loading theory "Draft.QuasiTerms_Swap_Fresh" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms" via "Draft.Terms" via "Draft.Transition_QuasiTerms_Terms" via "Draft.QuasiTerms_Environments_Substitution" via "Draft.QuasiTerms_PickFresh_Alpha")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.962s elapsed time, 3.593s cpu time, 0.859s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.045s elapsed time, 3.820s cpu time, 0.859s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.999s elapsed time, 6.253s cpu time, 1.237s GC time
Loading theory "Draft.Templates" (required by "Draft.RecursionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.183s cpu time, 0.074s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RecursionTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.784s elapsed time, 1.882s cpu time, 0.823s GC time
Proofs for inductive predicate(s) "qSwappedp"
  Proving monotonicity ...
### theory "Draft.QuasiTerms_Swap_Fresh"
### 3.050s elapsed time, 5.814s cpu time, 1.408s GC time
Loading theory "Draft.QuasiTerms_PickFresh_Alpha" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms" via "Draft.Terms" via "Draft.Transition_QuasiTerms_Terms" via "Draft.QuasiTerms_Environments_Substitution")
locale FixVars
  fixes dummyV :: "'var"
    and dummyVS :: "'varSort"
  assumes "FixVars TYPE('var) TYPE('varSort)"
locale FixVars
  fixes dummyV :: "'var"
    and dummyVS :: "'varSort"
  assumes "FixVars TYPE('var) TYPE('varSort)"
Found termination order: "{}"
locale FixVars
  fixes dummyV :: "'var"
    and dummyVS :: "'varSort"
  assumes "FixVars TYPE('var) TYPE('varSort)"
"binp"
  :: "'a"
"X'"
  :: "'a"
### theory "Draft.QuasiTerms_PickFresh_Alpha"
### 1.667s elapsed time, 2.346s cpu time, 0.947s GC time
Loading theory "Draft.QuasiTerms_Environments_Substitution" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms" via "Draft.Terms" via "Draft.Transition_QuasiTerms_Terms")
locale FixVars
  fixes dummyV :: "'var"
    and dummyVS :: "'varSort"
  assumes "FixVars TYPE('var) TYPE('varSort)"
### theory "Draft.QuasiTerms_Environments_Substitution"
### 0.553s elapsed time, 0.641s cpu time, 0.123s GC time
Loading theory "Draft.Transition_QuasiTerms_Terms" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms" via "Draft.Terms")
locale FixVars
  fixes dummyV :: "'var"
    and dummyVS :: "'varSort"
  assumes "FixVars TYPE('var) TYPE('varSort)"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale FixVars
  fixes dummyV :: "'var"
    and dummyVS :: "'varSort"
  assumes "FixVars TYPE('var) TYPE('varSort)"
Proofs for inductive predicate(s) "swappedp"
  Proving monotonicity ...
### theory "Draft.Transition_QuasiTerms_Terms"
### 2.794s elapsed time, 3.069s cpu time, 0.385s GC time
Loading theory "Draft.Terms" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration" via "Draft.Well_Sorted_Terms")
locale FixVars
  fixes dummyV :: "'var"
    and dummyVS :: "'varSort"
  assumes "FixVars TYPE('var) TYPE('varSort)"
### theory "Draft.Terms"
### 0.967s elapsed time, 1.058s cpu time, 0.132s GC time
Loading theory "Draft.Well_Sorted_Terms" (required by "Draft.RecursionTemplates" via "Draft.Recursion" via "Draft.Iteration")
locale FixSyn
  fixes dummyV :: "'var"
    and Delta :: "('index, 'bindex, 'varSort, 'sort, 'opSym) signature"
  assumes "FixSyn TYPE('var) Delta"
locale FixSyn
  fixes dummyV :: "'var"
    and Delta :: "('index, 'bindex, 'varSort, 'sort, 'opSym) signature"
  assumes "FixSyn TYPE('var) Delta"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale FixSyn
  fixes dummyV :: "'var"
    and Delta :: "('index, 'bindex, 'varSort, 'sort, 'opSym) signature"
  assumes "FixSyn TYPE('var) Delta"
Proofs for inductive predicate(s) "wls", "wlsAbs", "wlsInp", "wlsBinp"
  Proving monotonicity ...
### Ignoring duplicate rewrite rule:
### [| wlsOpS ?delta1; barOf ?delta1 ?i1 = Some (?us1, ?s1) |]
### ==> isInBar (?us1, ?s1) == True
### Rewrite rule not in simpset:
### [| good ?y; goodEnv ?rhoa1; !!zs z. freshEnv zs z ?rhoa1 | fresh zs z ?y |]
### ==> ?y #[?rhoa1] == ?y
### Rewrite rule not in simpset:
### [| goodAbs ?y; goodEnv ?rhoa1;
###    !!zs z. freshEnv zs z ?rhoa1 | freshAbs zs z ?y |]
### ==> ?y $[?rhoa1] == ?y
### Rewrite rule not in simpset:
### termsOf (Par ?uu1 ?XLa1 ?uv1 ?uw1) == set ?XLa1
### Rewrite rule not in simpset:
### absOf (Par ?uu1 ?uva1 ?ALa1 ?uw1) == set ?ALa1
### Rewrite rule not in simpset:
### envsOf (Par ?uu1 ?uva1 ?uwa1 ?rhoL1) == set ?rhoL1
### Rewrite rule not in simpset:
### [| !!X. X : set ?XL1 ==> good X; !!A. A : set ?AL1 ==> goodAbs A;
###    !!rho. rho : set ?rhoLa1 ==> goodEnv rho |]
### ==> goodPar (Par ?xL1 ?XL1 ?AL1 ?rhoLa1) == True
### Rewrite rule not in simpset:
### good (Var ?xsa1 ?xa1) == True
### Rewrite rule not in simpset:
### [| goodInp ?inp1; goodBinp ?binpa1 |]
### ==> good (Op ?delta1 ?inp1 ?binpa1) == True
### Rewrite rule not in simpset:
### good ?X1 ==> goodAbs (Abs ?xsa1 ?xa1 ?X1) == True
### Rewrite rule not in simpset:
### good ?X1 ==> good (?X1 #[?xa1 \<and> ?y1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodAbs ?A1 ==> goodAbs (?A1 $[?xa1 \<and> ?y1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodInp ?inpa1 ==> goodInp (?inpa1 %[?xa1 \<and> ?y1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodBinp ?binp1 ==> goodBinp (?binp1 %%[?xa1 \<and> ?y1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodEnv ?rhoa1 ==> goodEnv (?rhoa1 &[?xa1 \<and> ?y1]_?xsa1) == True
### Rewrite rule not in simpset:
### [| goodEnv ?rhoa1; good ?X1 |] ==> good ?X1 #[?rhoa1] == True
### Rewrite rule not in simpset:
### [| goodEnv ?rhoa1; goodAbs ?A1 |] ==> goodAbs ?A1 $[?rhoa1] == True
### Rewrite rule not in simpset:
### [| goodEnv ?rhoa1; goodInp ?inpb1 |] ==> goodInp ?inpb1 %[?rhoa1] == True
### Rewrite rule not in simpset:
### [| goodEnv ?rhoa1; goodBinp ?binpb1 |]
### ==> goodBinp ?binpb1 %%[?rhoa1] == True
### Rewrite rule not in simpset:
### [| goodEnv ?rhoa1; goodEnv ?rho'1 |] ==> goodEnv ?rhoa1 &[?rho'1] == True
### Rewrite rule not in simpset:
### [| good ?X1; goodEnv ?rhoa1 |]
### ==> goodEnv (?rhoa1 [?xa1 \<leftarrow> ?X1]_?xsa1) == True
### Rewrite rule not in simpset:
### [| goodEnv ?rho1; ?rho1 ?xs1 ?x1 = Some ?Xa1 |] ==> good ?Xa1 == True
### Rewrite rule not in simpset:
### [| good ?X1; good ?Y1 |] ==> good (?Y1 #[?X1 / ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### [| good ?X1; goodAbs ?A1 |] ==> goodAbs (?A1 $[?X1 / ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### [| good ?X1; goodInp ?inpb1 |]
### ==> goodInp (?inpb1 %[?X1 / ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### [| good ?X1; goodBinp ?binpb1 |]
### ==> goodBinp (?binpb1 %%[?X1 / ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### [| good ?X1; goodEnv ?rhoa1 |]
### ==> goodEnv (?rhoa1 &[?X1 / ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### good ?Y1 ==> good (?Y1 #[?x1.1 // ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodAbs ?A1 ==> goodAbs (?A1 $[?x1.1 // ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodInp ?inpa1 ==> goodInp (?inpa1 %[?x1.1 // ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodBinp ?binp1 ==> goodBinp (?binp1 %%[?x1.1 // ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### goodEnv ?rhoa1 ==> goodEnv (?rhoa1 &[?x1.1 // ?xa1]_?xsa1) == True
### Rewrite rule not in simpset:
### qSkel (qVar ?xsa1 ?xa1) == Branch Map.empty Map.empty
### Rewrite rule not in simpset:
### qSkel (qOp ?deltaa1 ?qinp1 ?qbinp1) ==
### Branch (qSkelInp ?qinp1) (qSkelBinp ?qbinp1)
### Rewrite rule not in simpset:
### qFresh ?xs1 ?x1 (qVar ?ys1 ?y1) == ?xs1 ~= ?ys1 | ?x1 ~= ?y1
### Rewrite rule not in simpset:
### qFresh ?xsb1 ?xb1 (qOp ?delta1 ?qinpa1 ?qbinpa1) ==
### qFreshInp ?xsb1 ?xb1 ?qinpa1 & qFreshBinp ?xsb1 ?xb1 ?qbinpa1
### Rewrite rule not in simpset:
### qVar ?zs'1 ?z1 #[[?x1 \<and> ?y1]]_?zs1 ==
### qVar ?zs'1 (?z1 @?zs'1[?x1 \<and> ?y1]_?zs1)
### Rewrite rule not in simpset:
### qOp ?deltaa1 ?qinp1 ?qbinp1 #[[?xa1 \<and> ?ya1]]_?xsa1 ==
### qOp ?deltaa1 (qSwapInp ?xsa1 ?xa1 ?ya1 ?qinp1)
###  (qSwapBinp ?xsa1 ?xa1 ?ya1 ?qbinp1)
### Rewrite rule not in simpset:
### qVar ?xsb1 ?xb1 #[[?rhoa1]] ==
### case ?rhoa1 ?xsb1 ?xb1 of None => qVar ?xsb1 ?xb1 | Some X => X
### Rewrite rule not in simpset:
### qOp ?delta1 ?qinpa1 ?qbinpa1 #[[?rho1]] ==
### qOp ?delta1 (?qinpa1 %[[?rho1]]) (?qbinpa1 %%[[?rho1]])
### Rewrite rule not in simpset:
### qGood (qVar ?xsb1 ?xb1) == True
### Rewrite rule not in simpset:
### qGood (qOp ?delta1 ?qinpa1 ?qbinpa1) ==
### qGoodInp ?qinpa1 & qGoodBinp ?qbinpa1
### Rewrite rule not in simpset:
### qVar ?xsa1 ?xa1 #= qVar ?xs'1 ?x'1 == ?xsa1 = ?xs'1 & ?xa1 = ?x'1
### Rewrite rule not in simpset:
### qOp ?deltaa1 ?qinp1 ?qbinp1 #= qOp ?delta'1 ?qinp'1 ?qbinp'1 ==
### ?deltaa1 = ?delta'1 &
### (?qinp1, ?qinp'1) : alphaInp & (?qbinp1, ?qbinp'1) : alphaBinp
### Rewrite rule not in simpset:
### qAbs ?xsa1 ?xa1 ?X1 $= qAbs ?xs'1 ?x'1 ?X'1 ==
### ?xsa1 = ?xs'1 &
### (EX y. y ~: {?xa1, ?x'1} &
###        qAFresh ?xsa1 y ?X1 &
###        qAFresh ?xs'1 y ?X'1 &
###        ?X1 #[[y \<and> ?xa1]]_?xsa1 #= ?X'1 #[[y \<and> ?x'1]]_?xs'1)
### Rewrite rule not in simpset:
### ?y #[[?xa1 \<and> ?xa1]]_?zsa1 == ?y
### Rewrite rule not in simpset:
### ?y #[[?xa1 \<and> ?ya1]]_?zsa1 #[[?xa1 \<and> ?ya1]]_?zsa1 == ?y
### Rewrite rule not in simpset:
### [| qAFresh ?zs1 ?z1.1 ?y; qAFresh ?zs1 ?z2.1 ?y |]
### ==> ?y #[[?z1.1 \<and> ?z2.1]]_?zs1 == ?y
### Rewrite rule not in simpset:
### qAFresh ?ys1 (?y1 @?ys1[?z1.1 \<and> ?z2.1]_?zs1)
###  (?Xa1 #[[?z1.1 \<and> ?z2.1]]_?zs1) ==
### qAFresh ?ys1 ?y1 ?Xa1
### Rewrite rule not in simpset:
### qAFresh ?xs1 ?x1 (qVar ?ys1 ?y1) == ?xs1 ~= ?ys1 | ?x1 ~= ?y1
### Rewrite rule not in simpset:
### qAFresh ?xs1 ?x1 (qOp ?deltaa1 ?inp1 ?binp1) ==
### liftAll (qAFresh ?xs1 ?x1) ?inp1 & liftAll (qAFreshAbs ?xs1 ?x1) ?binp1
### Rewrite rule not in simpset:
### qGoodItem (termIn ?qX1) == qGood ?qX1
### Rewrite rule not in simpset:
### qGoodItem (absIn ?qA1) == qGoodAbs ?qA1
### Rewrite rule not in simpset:
### [| ?f1 respectsP alphaGood; qGood ?Xa1 |]
### ==> Equiv_Relation2.univ ?f1 (asTerm ?Xa1) == ?f1 ?Xa1
### Rewrite rule not in simpset:
### [| ?fAbs1 respectsP alphaAbsGood; qGoodAbs ?Aa1 |]
### ==> Equiv_Relation2.univ ?fAbs1 (asAbs ?Aa1) == ?fAbs1 ?Aa1
### Rewrite rule not in simpset:
### [| ?f1 respectsP (#=); qGood ?Xa1 |]
### ==> Equiv_Relation2.univ ?f1 (asTerm ?Xa1) == ?f1 ?Xa1
### Rewrite rule not in simpset:
### [| ?fAbs1 respectsP ($=); qGoodAbs ?Aa1 |]
### ==> Equiv_Relation2.univ ?fAbs1 (asAbs ?Aa1) == ?fAbs1 ?Aa1
### Rewrite rule not in simpset:
### [| good ?X1; good ?Y1 |] ==> pick ?X1 = pick ?Y1 == ?X1 = ?Y1
### Rewrite rule not in simpset:
### [| goodAbs ?A1; goodAbs ?B1 |] ==> pick ?A1 = pick ?B1 == ?A1 = ?B1
### theory "Draft.Well_Sorted_Terms"
### 3.751s elapsed time, 4.141s cpu time, 0.550s GC time
Loading theory "Draft.Iteration" (required by "Draft.RecursionTemplates" via "Draft.Recursion")
locale FixSyn
  fixes dummyV :: "'var"
    and Delta :: "('index, 'bindex, 'varSort, 'sort, 'opSym) signature"
  assumes "FixSyn TYPE('var) Delta"
locale FixSyn
  fixes dummyV :: "'var"
    and Delta :: "('index, 'bindex, 'varSort, 'sort, 'opSym) signature"
  assumes "FixSyn TYPE('var) Delta"
### theory "Draft.Iteration"
### 6.223s elapsed time, 7.031s cpu time, 1.139s GC time
Loading theory "Draft.Recursion" (required by "Draft.RecursionTemplates")
locale FixSyn
  fixes dummyV :: "'var"
    and Delta :: "('index, 'bindex, 'varSort, 'sort, 'opSym) signature"
  assumes "FixSyn TYPE('var) Delta"
### theory "Draft.Recursion"
### 4.510s elapsed time, 5.418s cpu time, 1.294s GC time
Loading theory "Draft.RecursionTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.RecursionTemplates"
### 0.501s elapsed time, 0.805s cpu time, 0.198s GC time
val it = (): unit
