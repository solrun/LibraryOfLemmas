Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.Blue_Eyes")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.629s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Combinatorics.Transposition"
### 0.155s elapsed time, 0.634s cpu time, 0.039s GC time
Loading theory "Draft.Blue_Eyes" (required by "Draft.Blue_EyesMoreTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.839s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.374s elapsed time, 1.488s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (fst p)) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
### theory "Draft.Blue_Eyes"
### 0.404s elapsed time, 1.592s cpu time, 0.144s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.745s elapsed time, 2.580s cpu time, 0.272s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.017s elapsed time, 3.011s cpu time, 0.786s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.889s elapsed time, 4.600s cpu time, 0.923s GC time
Loading theory "Draft.Templates" (required by "Draft.Blue_EyesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Blue_EyesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.473s elapsed time, 0.517s cpu time, 0.054s GC time
Loading theory "Draft.Blue_EyesMoreTemplates"
val templateLemmas =
   [("Blue_Eyes.people_finite",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> finite ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_hole 2)))))
            ),
        template_predicate
         (template_app (template_hole 1, template_hole 0))],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Blue_Eyes.try_swap_inv",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2
           (try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w) =
          ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 5, template_var 6),
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_hole 4)))))
            ),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Blue_Eyes.possible_refl",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         valid ?blue ?guru ?w |]
      ==> possible ?blue ?guru ?n ?p ?w ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 5, template_var 6),
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_hole 4)))))
            ),
        template_predicate
         (template_app (template_hole 3, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 7),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2),
             template_var 2)
           ))),
    ("Blue_Eyes.try_swap_valid",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> valid ?blue ?guru (try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w) =
          valid ?blue ?guru ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 8),
             template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 8),
             template_var 4),
           template_var 0)))),
    ("Blue_Eyes.possible_sym",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> possible ?blue ?guru ?n ?p ?w ?w' =
          possible ?blue ?guru ?n ?p ?w' ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 7),
                  template_app
                   (template_app (template_hole 5, template_var 6),
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_hole 4)))))
            ),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0),
           template_var 1)))),
    ("Blue_Eyes.blues_seen_same",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w' |]
      ==> blues_seen ?blue ?w' ?p = blues_seen ?blue ?w ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 8),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 8),
             template_var 1),
           template_var 2)))),
    ("Blue_Eyes.only_blue_eyes_leave",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         leaves ?blue ?guru ?n ?p ?w; valid ?blue ?guru ?w |]
      ==> ?w ?p = ?blue",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 7),
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 7),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 7),
                template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_var 7))),
    ("Blue_Eyes.possibleD_colors",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w'; ?p' ~= ?p |]
      ==> ?w' ?p' = ?w ?p'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 9),
                template_app
                 (template_app (template_hole 7, template_var 8),
                  template_app
                   (template_app (template_hole 7, template_var 7),
                    template_app
                     (template_app (template_hole 7, template_var 6),
                      template_hole 6)))))
            ),
        template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_var 3))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Blue_Eyes.try_swap_eq",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> (try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w ?x =
           try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w' ?x) =
          (?w ?x = ?w' ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 9),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 9),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 9),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)),
         template_equation
          (template_app (template_var 2, template_var 1),
           template_app (template_var 0, template_var 1))))),
    ("Blue_Eyes.leaves_try_swap",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         valid ?blue ?guru ?w |]
      ==> leaves ?blue ?guru ?n ?p
           (try_swap ?blue ?p' ?c\<^sub>1 ?c\<^sub>2 ?w) =
          leaves ?blue ?guru ?n ?p ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 10),
                template_app
                 (template_app (template_hole 7, template_var 9),
                  template_app
                   (template_app (template_hole 7, template_var 8),
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_hole 6)))))
            ),
        template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 10),
                template_var 6),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 10),
                 template_var 6),
               template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 10),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 10),
                 template_var 6),
               template_var 4),
             template_var 3),
           template_var 5)))),
    ("Blue_Eyes.possible_trans",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w1.0 ?w2.0;
         possible ?blue ?guru ?n ?p ?w2.0 ?w3.0 |]
      ==> possible ?blue ?guru ?n ?p ?w1.0 ?w3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 9),
                template_app
                 (template_app (template_hole 4, template_var 8),
                  template_app
                   (template_app (template_hole 4, template_var 7),
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_hole 3)))))
            ),
        template_predicate
         (template_app (template_hole 2, template_hole 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 9),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Blue_Eyes.blues_seen_others",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         ?w ?p' = ?blue; ?p ~= ?p'; ?w ?p = ?blue |]
      ==> card (blues_seen ?blue ?w ?p) = card (blues_seen ?blue ?w ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 6),
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_hole 8)))))
            ),
        template_predicate
         (template_app (template_hole 7, template_hole 6)),
        template_equation
         (template_app (template_var 2, template_var 1), template_var 6),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_equation
         (template_app (template_var 2, template_var 0), template_var 6)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 1))))),
    ("Blue_Eyes.blues_seen_others",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         ?w ?p' = ?blue; ?p ~= ?p'; ?w ?p ~= ?blue |]
      ==> card (blues_seen ?blue ?w ?p) =
          Suc (card (blues_seen ?blue ?w ?p'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 6),
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 10, template_var 3),
                      template_hole 9)))))
            ),
        template_predicate
         (template_app (template_hole 8, template_hole 7)),
        template_equation
         (template_app (template_var 2, template_var 1), template_var 6),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 0), template_var 6)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 2),
               template_var 1)))))),
    ("Blue_Eyes.blue_leaves",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV; ?w ?p = ?blue;
         valid ?blue ?guru ?w; ?w ?guru ~= ?blue |]
      ==> leaves ?blue ?guru ?n ?p ?w =
          (card (blues_seen ?blue ?w ?p) <= ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app (template_hole 11, template_var 4),
                      template_hole 10)))))
            ),
        template_predicate
         (template_app (template_hole 9, template_hole 8)),
        template_equation
         (template_app (template_var 3, template_var 2), template_var 7),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 1),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 3, template_var 1), template_var 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 7),
                 template_var 1),
               template_var 0),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 3),
                 template_var 2))),
           template_var 0)))),
    ("Blue_Eyes.possible_blues_seen",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w'; ?w ?p' = ?blue; ?p ~= ?p';
         ?w' ?p = ?blue |]
      ==> card (blues_seen ?blue ?w ?p) = card (blues_seen ?blue ?w' ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 9),
                template_app
                 (template_app (template_hole 10, template_var 8),
                  template_app
                   (template_app (template_hole 10, template_var 7),
                    template_app
                     (template_app (template_hole 10, template_var 6),
                      template_hole 9)))))
            ),
        template_predicate
         (template_app (template_hole 8, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_var 2, template_var 0), template_var 9),
        template_negation
         (template_equation (template_var 3, template_var 0)),
        template_equation
         (template_app (template_var 1, template_var 3), template_var 9)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 9),
               template_var 2),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 9),
               template_var 1),
             template_var 0))))),
    ("Blue_Eyes.blue_eyes",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         card {p. ?w p = ?blue} = Suc ?n; valid ?blue ?guru ?w;
         ?w ?guru ~= ?blue |]
      ==> leaves ?blue ?guru ?k ?p ?w = (?w ?p = ?blue & ?n <= ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 8),
                template_app
                 (template_app (template_hole 14, template_var 7),
                  template_app
                   (template_app (template_hole 14, template_var 6),
                    template_app
                     (template_app (template_hole 14, template_var 5),
                      template_hole 13)))))
            ),
        template_predicate
         (template_app (template_hole 12, template_hole 11)),
        template_equation
         (template_app
           (template_hole 9, template_app (template_hole 8, t_empty)),
          template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 8),
                template_var 2),
              template_var 4)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 4, template_var 2), template_var 8)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 2),
                    template_var 1),
                  template_var 0),
                template_var 4)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 4, template_var 0)),
                   template_var 8)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1))
             )))),
    ("Blue_Eyes.possible_blues_seen",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w'; ?w ?p' = ?blue; ?p ~= ?p';
         ?w' ?p ~= ?blue |]
      ==> card (blues_seen ?blue ?w ?p) =
          Suc (card (blues_seen ?blue ?w' ?p'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 9),
                template_app
                 (template_app (template_hole 11, template_var 8),
                  template_app
                   (template_app (template_hole 11, template_var 7),
                    template_app
                     (template_app (template_hole 11, template_var 6),
                      template_hole 10)))))
            ),
        template_predicate
         (template_app (template_hole 9, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_var 2, template_var 0), template_var 9),
        template_negation
         (template_equation (template_var 3, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3), template_var 9)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 9),
               template_var 2),
             template_var 3)),
         template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 9),
                 template_var 1),
               template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.Blue_EyesMoreTemplates"
### 0.296s elapsed time, 0.452s cpu time, 0.052s GC time
val it = (): unit
