   [("Blue_Eyes.people_finite",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> finite ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_hole 2)))))
            ),
        template_predicate
         (template_app (template_hole 1, template_hole 0))],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Blue_Eyes.try_swap_inv",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2
           (try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w) =
          ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 5, template_var 6),
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_hole 4)))))
            ),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Blue_Eyes.possible_refl",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         valid ?blue ?guru ?w |]
      ==> possible ?blue ?guru ?n ?p ?w ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 5, template_var 6),
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_hole 4)))))
            ),
        template_predicate
         (template_app (template_hole 3, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 7),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2),
             template_var 2)
           ))),
    ("Blue_Eyes.try_swap_valid",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> valid ?blue ?guru (try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w) =
          valid ?blue ?guru ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 8),
             template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 8),
             template_var 4),
           template_var 0)))),
    ("Blue_Eyes.possible_sym",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> possible ?blue ?guru ?n ?p ?w ?w' =
          possible ?blue ?guru ?n ?p ?w' ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 7),
                  template_app
                   (template_app (template_hole 5, template_var 6),
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_hole 4)))))
            ),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0),
           template_var 1)))),
    ("Blue_Eyes.blues_seen_same",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w' |]
      ==> blues_seen ?blue ?w' ?p = blues_seen ?blue ?w ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 8),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 8),
             template_var 1),
           template_var 2)))),
    ("Blue_Eyes.only_blue_eyes_leave",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         leaves ?blue ?guru ?n ?p ?w; valid ?blue ?guru ?w |]
      ==> ?w ?p = ?blue",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 7),
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 7),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 7),
                template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_var 7))),
    ("Blue_Eyes.possibleD_colors",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w'; ?p' ~= ?p |]
      ==> ?w' ?p' = ?w ?p'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 9),
                template_app
                 (template_app (template_hole 7, template_var 8),
                  template_app
                   (template_app (template_hole 7, template_var 7),
                    template_app
                     (template_app (template_hole 7, template_var 6),
                      template_hole 6)))))
            ),
        template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_var 3))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Blue_Eyes.try_swap_eq",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV |]
      ==> (try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w ?x =
           try_swap ?blue ?p ?c\<^sub>1 ?c\<^sub>2 ?w' ?x) =
          (?w ?x = ?w' ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 9),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_hole 5)))))
            ),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 9),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 9),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)),
         template_equation
          (template_app (template_var 2, template_var 1),
           template_app (template_var 0, template_var 1))))),
    ("Blue_Eyes.leaves_try_swap",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         valid ?blue ?guru ?w |]
      ==> leaves ?blue ?guru ?n ?p
           (try_swap ?blue ?p' ?c\<^sub>1 ?c\<^sub>2 ?w) =
          leaves ?blue ?guru ?n ?p ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 10),
                template_app
                 (template_app (template_hole 7, template_var 9),
                  template_app
                   (template_app (template_hole 7, template_var 8),
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_hole 6)))))
            ),
        template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 10),
                template_var 6),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 10),
                 template_var 6),
               template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 10),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 10),
                 template_var 6),
               template_var 4),
             template_var 3),
           template_var 5)))),
    ("Blue_Eyes.possible_trans",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w1.0 ?w2.0;
         possible ?blue ?guru ?n ?p ?w2.0 ?w3.0 |]
      ==> possible ?blue ?guru ?n ?p ?w1.0 ?w3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 9),
                template_app
                 (template_app (template_hole 4, template_var 8),
                  template_app
                   (template_app (template_hole 4, template_var 7),
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_hole 3)))))
            ),
        template_predicate
         (template_app (template_hole 2, template_hole 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 9),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Blue_Eyes.blues_seen_others",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         ?w ?p' = ?blue; ?p ~= ?p'; ?w ?p = ?blue |]
      ==> card (blues_seen ?blue ?w ?p) = card (blues_seen ?blue ?w ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 6),
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_hole 8)))))
            ),
        template_predicate
         (template_app (template_hole 7, template_hole 6)),
        template_equation
         (template_app (template_var 2, template_var 1), template_var 6),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_equation
         (template_app (template_var 2, template_var 0), template_var 6)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 1))))),
    ("Blue_Eyes.blues_seen_others",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         ?w ?p' = ?blue; ?p ~= ?p'; ?w ?p ~= ?blue |]
      ==> card (blues_seen ?blue ?w ?p) =
          Suc (card (blues_seen ?blue ?w ?p'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 6),
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 10, template_var 3),
                      template_hole 9)))))
            ),
        template_predicate
         (template_app (template_hole 8, template_hole 7)),
        template_equation
         (template_app (template_var 2, template_var 1), template_var 6),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 0), template_var 6)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 2),
               template_var 1)))))),
    ("Blue_Eyes.blue_leaves",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV; ?w ?p = ?blue;
         valid ?blue ?guru ?w; ?w ?guru ~= ?blue |]
      ==> leaves ?blue ?guru ?n ?p ?w =
          (card (blues_seen ?blue ?w ?p) <= ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app (template_hole 11, template_var 4),
                      template_hole 10)))))
            ),
        template_predicate
         (template_app (template_hole 9, template_hole 8)),
        template_equation
         (template_app (template_var 3, template_var 2), template_var 7),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 1),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 3, template_var 1), template_var 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 7),
                 template_var 1),
               template_var 0),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 3),
                 template_var 2))),
           template_var 0)))),
    ("Blue_Eyes.possible_blues_seen",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w'; ?w ?p' = ?blue; ?p ~= ?p';
         ?w' ?p = ?blue |]
      ==> card (blues_seen ?blue ?w ?p) = card (blues_seen ?blue ?w' ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 9),
                template_app
                 (template_app (template_hole 10, template_var 8),
                  template_app
                   (template_app (template_hole 10, template_var 7),
                    template_app
                     (template_app (template_hole 10, template_var 6),
                      template_hole 9)))))
            ),
        template_predicate
         (template_app (template_hole 8, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_var 2, template_var 0), template_var 9),
        template_negation
         (template_equation (template_var 3, template_var 0)),
        template_equation
         (template_app (template_var 1, template_var 3), template_var 9)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 9),
               template_var 2),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 9),
               template_var 1),
             template_var 0))))),
    ("Blue_Eyes.blue_eyes",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         card {p. ?w p = ?blue} = Suc ?n; valid ?blue ?guru ?w;
         ?w ?guru ~= ?blue |]
      ==> leaves ?blue ?guru ?k ?p ?w = (?w ?p = ?blue & ?n <= ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 8),
                template_app
                 (template_app (template_hole 14, template_var 7),
                  template_app
                   (template_app (template_hole 14, template_var 6),
                    template_app
                     (template_app (template_hole 14, template_var 5),
                      template_hole 13)))))
            ),
        template_predicate
         (template_app (template_hole 12, template_hole 11)),
        template_equation
         (template_app
           (template_hole 9, template_app (template_hole 8, t_empty)),
          template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 8),
                template_var 2),
              template_var 4)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 4, template_var 2), template_var 8)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 2),
                    template_var 1),
                  template_var 0),
                template_var 4)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 4, template_var 0)),
                   template_var 8)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1))
             )))),
    ("Blue_Eyes.possible_blues_seen",
     "[| distinct [?blue, ?brown, ?green, ?red]; finite UNIV;
         possible ?blue ?guru ?n ?p ?w ?w'; ?w ?p' = ?blue; ?p ~= ?p';
         ?w' ?p ~= ?blue |]
      ==> card (blues_seen ?blue ?w ?p) =
          Suc (card (blues_seen ?blue ?w' ?p'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 9),
                template_app
                 (template_app (template_hole 11, template_var 8),
                  template_app
                   (template_app (template_hole 11, template_var 7),
                    template_app
                     (template_app (template_hole 11, template_var 6),
                      template_hole 10)))))
            ),
        template_predicate
         (template_app (template_hole 9, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_var 2, template_var 0), template_var 9),
        template_negation
         (template_equation (template_var 3, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3), template_var 9)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 9),
               template_var 2),
             template_var 3)),
         template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 9),
                 template_var 1),
               template_var 0))))))]
