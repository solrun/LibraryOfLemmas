Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Algebra7MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Algebra7MoreTemplates" via "Draft.Algebra7" via "Draft.Algebra6" via "Draft.Algebra5" via "Draft.Algebra4" via "Draft.Algebra3" via "Draft.Algebra2" via "Draft.Algebra1")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Algebra7MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Algebra7MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.088s elapsed time, 0.373s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Algebra7MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.260s elapsed time, 0.944s cpu time, 0.269s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Algebra7MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.388s elapsed time, 1.445s cpu time, 0.318s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Algebra7MoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.493s elapsed time, 1.849s cpu time, 0.417s GC time
Loading theory "Draft.Algebra1" (required by "Draft.Algebra7MoreTemplates" via "Draft.Algebra7" via "Draft.Algebra6" via "Draft.Algebra5" via "Draft.Algebra4" via "Draft.Algebra3" via "Draft.Algebra2")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.851s elapsed time, 3.243s cpu time, 0.862s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  nasc_seq :: "nat set => nat => nat => nat"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.937s elapsed time, 3.389s cpu time, 0.900s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  ndec_seq :: "nat set => nat => nat => nat"
Found termination order: "size <*mlex*> {}"
consts
  dec_seq :: "int set => int => nat => int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  ant :: {minus,one,plus,times,uminus,zero,ord}
  less_eq_ant == less_eq :: ant => ant => bool
  less_ant == less :: ant => ant => bool
  zero_ant == zero_class.zero :: ant
  uminus_ant == uminus :: ant => ant
  times_ant == times :: ant => ant => ant
  plus_ant == plus :: ant => ant => ant
  one_ant == one_class.one :: ant
  minus_ant == minus :: ant => ant => ant
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  Amin :: "nat => (nat => ant) => ant"
consts
  Amax :: "nat => (nat => ant) => ant"
consts
  aasc_seq :: "ant set => ant => nat => ant"
consts
  ASum :: "(nat => ant) => nat => ant"
### theory "HOL-Library.Tree"
### 1.905s elapsed time, 5.937s cpu time, 1.494s GC time
Loading theory "Draft.Templates" (required by "Draft.Algebra7MoreTemplates" via "Draft.ExtrEqs")
consts
  Zmax :: "nat => (nat => int) => int"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Algebra7MoreTemplates")
locale Order
  fixes D :: "('a, 'b) Order_scheme"  (structure)
  assumes "Order D"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.728s elapsed time, 1.755s cpu time, 0.720s GC time
locale Torder
  fixes D :: "('a, 'b) Order_scheme"  (structure)
  assumes "Torder D"
locale Worder
  fixes D :: "('a, 'b) Order_scheme"  (structure)
  assumes "Worder D"
### theory "Draft.Algebra1"
### 2.867s elapsed time, 6.805s cpu time, 1.941s GC time
Loading theory "Draft.Algebra2" (required by "Draft.Algebra7MoreTemplates" via "Draft.Algebra7" via "Draft.Algebra6" via "Draft.Algebra5" via "Draft.Algebra4" via "Draft.Algebra3")
locale Group
  fixes G :: "('a, 'b) Group_scheme"  (structure)
  assumes "Group G"
### theory "Draft.Algebra2"
### 2.063s elapsed time, 2.997s cpu time, 1.292s GC time
Loading theory "Draft.Algebra3" (required by "Draft.Algebra7MoreTemplates" via "Draft.Algebra7" via "Draft.Algebra6" via "Draft.Algebra5" via "Draft.Algebra4")
[| ?i <= ?n; ?j <= ?n; ?i ~= ?j |] ==> inj_on (transpos ?i ?j) {i. i <= ?n}
### theory "Draft.Algebra3"
### 1.873s elapsed time, 2.236s cpu time, 0.489s GC time
Loading theory "Draft.Algebra4" (required by "Draft.Algebra7MoreTemplates" via "Draft.Algebra7" via "Draft.Algebra6" via "Draft.Algebra5")
locale aGroup
  fixes A :: "('a, 'b) aGroup_scheme"  (structure)
  assumes "aGroup A"
locale Ring
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
  assumes "Ring R"
consts
  nscal :: "('a, 'more) Ring_scheme => 'a => nat => 'a"
consts
  npow :: "('a, 'more) Ring_scheme => 'a => nat => 'a"
consts
  nprod :: "('a, 'more) Ring_scheme => (nat => 'a) => nat => 'a"
consts
  nsum :: "('a, 'more) aGroup_scheme => (nat => 'a) => nat => 'a"
consts
  sum_pr_ideals :: "('a, 'm) Ring_scheme => (nat => 'a) => nat => 'a set"
consts
  ideal_n_prod :: "('a, 'm) Ring_scheme => nat => (nat => 'a set) => 'a set"
consts
  ideal_pow :: "'a set => ('a, 'more) Ring_scheme => nat => 'a set"
locale Idomain
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
  assumes "Idomain R"
locale Corps
  fixes K :: "('a, 'b) Ring_scheme"  (structure)
  assumes "Corps K"
### theory "Draft.Algebra4"
### 2.942s elapsed time, 4.339s cpu time, 1.909s GC time
Loading theory "Draft.Algebra5" (required by "Draft.Algebra7MoreTemplates" via "Draft.Algebra7" via "Draft.Algebra6")
consts
  ac_fProd_Rg ::
    "nat => (nat => ('a, 'more) Ring_scheme) => (nat => 'a) set"
locale TwoRings
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
    and R' :: "('c, 'd) Ring_scheme"  (structure)
  assumes "TwoRings R R'"
locale PolynRg
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
    and S :: "('a, 'c) Ring_scheme"  (structure)
    and X :: "'a"  (structure)
  assumes "PolynRg R S X"
### theory "Draft.Algebra5"
### 1.843s elapsed time, 2.206s cpu time, 0.481s GC time
Loading theory "Draft.Algebra6" (required by "Draft.Algebra7MoreTemplates" via "Draft.Algebra7")
### Ignoring duplicate rewrite rule:
### ?b1 <= ?y ==> max ?y ?b1 == ?y
### Ignoring duplicate rewrite rule:
### ?a1 <= ?y ==> max ?a1 ?y == ?y
### Ambiguous input (line 4679 of "$AFP/Group-Ring-Module/Algebra6.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Hensel_next" ("_position" R) ("_position" S) ("_position" X)
###       ("_position" t) ("_position" R') ("_position" Y) ("_position" f)
###       ("_position" m) ("_position" gh))
###     ("_Eps" ("_position" gh1)
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" gh1)
###           ("\<^const>Product_Type.Times"
###             ("_applC" ("_position" carrier) ("_position" R))
###             ("_applC" ("_position" carrier) ("_position" R))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("_applC" ("_position" deg)
###               ("_cargs" ("_position" R)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" X)
###                     ("_applC" ("_position" fst) ("_position" gh1))))))
###             ("_applC" ("_position" deg)
###               ("_cargs" ("_position" R')
###                 ("_cargs"
###                   ("\<^const>Algebra4.QRING" ("_position" S)
###                     ("\<^const>Algebra4.Rxa" ("_position" S)
###                       ("_position" t)))
###                   ("_cargs" ("_position" Y)
###                     ("_applC" ("_position" erH)
###                       ("_cargs" ("_position" R)
###                         ("_cargs" ("_position" S)
###                           ("_cargs" ("_position" X)
###                             ("_cargs" ("_position" R')
###                               ("_cargs"
###                                 ("\<^const>Algebra4.QRING" ("_position" S)
###                                   ("\<^const>Algebra4.Rxa" ("_position" S)
###                                     ("_position" t)))
###                                 ("_cargs" ("_position" Y)
###                                   ("_cargs"
###                                     ("_applC" ("_position" pj)
### ("_cargs" ("_position" S)
###   ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
###                                     ("_applC" ("_position" fst)
### ("_position" gh1)))))))))))))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" P_mod)
###               ("_cargs" ("_position" R)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" X)
###                     ("_cargs"
###                       ("\<^const>Algebra4.Rxa" ("_position" S)
###                         ("\<^const>Algebra4.NPOW" ("_position" t)
###                           ("_position" S) ("_position" m)))
###                       ("\<^const>Algebra4.aGroup.pop_indexed"
###                         ("_applC" ("_position" fst) ("_position" gh))
###                         ("_index" ("_position" R))
###                         ("\<^const>Algebra4.aGroup.mop_indexed"
###                           ("_index" ("_position" R))
###                           ("_applC" ("_position" fst)
###                             ("_position" gh1)))))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.less_eq"
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_applC" ("_position" deg)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X)
###                           ("_applC" ("_position" snd) ("_position" gh1))))))
###                   ("_applC" ("_position" deg)
###                     ("_cargs" ("_position" R')
###                       ("_cargs"
###                         ("\<^const>Algebra4.QRING" ("_position" S)
###                           ("\<^const>Algebra4.Rxa" ("_position" S)
###                             ("_position" t)))
###                         ("_cargs" ("_position" Y)
###                           ("_applC" ("_position" erH)
###                             ("_cargs" ("_position" R)
###                               ("_cargs" ("_position" S)
###                                 ("_cargs" ("_position" X)
###                                   ("_cargs" ("_position" R')
###                                     ("_cargs"
### ("\<^const>Algebra4.QRING" ("_position" S)
###   ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t)))
### ("_cargs" ("_position" Y)
###   ("_cargs"
###     ("_applC" ("_position" pj)
###       ("_cargs" ("_position" S)
###         ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
###     ("_applC" ("_position" fst) ("_position" gh1)))))))))))))))
###                 ("_applC" ("_position" deg)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" X) ("_position" f))))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P_mod)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" X)
###                         ("_cargs"
###                           ("\<^const>Algebra4.Rxa" ("_position" S)
###                             ("\<^const>Algebra4.NPOW" ("_position" t)
###                               ("_position" S) ("_position" m)))
###                           ("\<^const>Algebra4.aGroup.pop_indexed"
###                             ("_applC" ("_position" snd) ("_position" gh))
###                             ("_index" ("_position" R))
###                             ("\<^const>Algebra4.aGroup.mop_indexed"
###                               ("_index" ("_position" R))
###                               ("_applC" ("_position" snd)
###                                 ("_position" gh1)))))))))
###                 ("_applC" ("_position" P_mod)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" X)
###                         ("_cargs"
###                           ("\<^const>Algebra4.Rxa" ("_position" S)
###                             ("\<^const>Algebra4.NPOW" ("_position" t)
###                               ("_position" S)
###                               ("_applC" ("_position" Suc) ("_position" m))))
###                           ("\<^const>Algebra4.aGroup.pop_indexed"
###                             ("_position" f) ("_index" ("_position" R))
###                             ("\<^const>Algebra4.aGroup.mop_indexed"
###                               ("_index" ("_position" R))
###                               ("\<^const>Algebra4.Ring.tp_indexed"
###                                 ("_applC" ("_position" fst)
###                                   ("_position" gh1))
###                                 ("_index" ("_position" R))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" gh1))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Hensel_next" ("_position" R) ("_position" S) ("_position" X)
###     ("_position" t) ("_position" R') ("_position" Y) ("_position" f)
###     ("_position" m)
###     ("\<^const>HOL.eq" ("_position" gh)
###       ("_Eps" ("_position" gh1)
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" gh1)
###             ("\<^const>Product_Type.Times"
###               ("_applC" ("_position" carrier) ("_position" R))
###               ("_applC" ("_position" carrier) ("_position" R))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" deg)
###                 ("_cargs" ("_position" R)
###                   ("_cargs" ("_position" S)
###                     ("_cargs" ("_position" X)
###                       ("_applC" ("_position" fst) ("_position" gh1))))))
###               ("_applC" ("_position" deg)
###                 ("_cargs" ("_position" R')
###                   ("_cargs"
###                     ("\<^const>Algebra4.QRING" ("_position" S)
###                       ("\<^const>Algebra4.Rxa" ("_position" S)
###                         ("_position" t)))
###                     ("_cargs" ("_position" Y)
###                       ("_applC" ("_position" erH)
###                         ("_cargs" ("_position" R)
###                           ("_cargs" ("_position" S)
###                             ("_cargs" ("_position" X)
###                               ("_cargs" ("_position" R')
###                                 ("_cargs"
###                                   ("\<^const>Algebra4.QRING" ("_position" S)
###                                     ("\<^const>Algebra4.Rxa" ("_position" S)
### ("_position" t)))
###                                   ("_cargs" ("_position" Y)
###                                     ("_cargs"
### ("_applC" ("_position" pj)
###   ("_cargs" ("_position" S)
###     ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
### ("_applC" ("_position" fst) ("_position" gh1)))))))))))))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" P_mod)
###                 ("_cargs" ("_position" R)
###                   ("_cargs" ("_position" S)
###                     ("_cargs" ("_position" X)
###                       ("_cargs"
###                         ("\<^const>Algebra4.Rxa" ("_position" S)
###                           ("\<^const>Algebra4.NPOW" ("_position" t)
###                             ("_position" S) ("_position" m)))
###                         ("\<^const>Algebra4.aGroup.pop_indexed"
###                           ("_applC" ("_position" fst) ("_position" gh))
###                           ("_index" ("_position" R))
###                           ("\<^const>Algebra4.aGroup.mop_indexed"
###                             ("_index" ("_position" R))
###                             ("_applC" ("_position" fst)
###                               ("_position" gh1)))))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" deg)
###                       ("_cargs" ("_position" R)
###                         ("_cargs" ("_position" S)
###                           ("_cargs" ("_position" X)
###                             ("_applC" ("_position" snd)
###                               ("_position" gh1))))))
###                     ("_applC" ("_position" deg)
###                       ("_cargs" ("_position" R')
###                         ("_cargs"
###                           ("\<^const>Algebra4.QRING" ("_position" S)
###                             ("\<^const>Algebra4.Rxa" ("_position" S)
###                               ("_position" t)))
###                           ("_cargs" ("_position" Y)
###                             ("_applC" ("_position" erH)
###                               ("_cargs" ("_position" R)
###                                 ("_cargs" ("_position" S)
###                                   ("_cargs" ("_position" X)
###                                     ("_cargs" ("_position" R')
### ("_cargs"
###   ("\<^const>Algebra4.QRING" ("_position" S)
###     ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t)))
###   ("_cargs" ("_position" Y)
###     ("_cargs"
###       ("_applC" ("_position" pj)
###         ("_cargs" ("_position" S)
###           ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
###       ("_applC" ("_position" fst) ("_position" gh1)))))))))))))))
###                   ("_applC" ("_position" deg)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X) ("_position" f))))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" P_mod)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X)
###                           ("_cargs"
###                             ("\<^const>Algebra4.Rxa" ("_position" S)
###                               ("\<^const>Algebra4.NPOW" ("_position" t)
###                                 ("_position" S) ("_position" m)))
###                             ("\<^const>Algebra4.aGroup.pop_indexed"
###                               ("_applC" ("_position" snd) ("_position" gh))
###                               ("_index" ("_position" R))
###                               ("\<^const>Algebra4.aGroup.mop_indexed"
###                                 ("_index" ("_position" R))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" gh1)))))))))
###                   ("_applC" ("_position" P_mod)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X)
###                           ("_cargs"
###                             ("\<^const>Algebra4.Rxa" ("_position" S)
###                               ("\<^const>Algebra4.NPOW" ("_position" t)
###                                 ("_position" S)
###                                 ("_applC" ("_position" Suc)
###                                   ("_position" m))))
###                             ("\<^const>Algebra4.aGroup.pop_indexed"
###                               ("_position" f) ("_index" ("_position" R))
###                               ("\<^const>Algebra4.aGroup.mop_indexed"
###                                 ("_index" ("_position" R))
###                                 ("\<^const>Algebra4.Ring.tp_indexed"
###                                   ("_applC" ("_position" fst)
###                                     ("_position" gh1))
###                                   ("_index" ("_position" R))
###                                   ("_applC" ("_position" snd)
###                                     ("_position" gh1)))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  Hensel_pair ::
    "('a, 'b) Ring_scheme
     => ('a, 'c) Ring_scheme
        => 'a => 'a => ('a set, 'm) Ring_scheme
                       => 'a set => 'a => 'a => 'a => nat => 'a * 'a"
### theory "Draft.Algebra6"
### 1.901s elapsed time, 2.219s cpu time, 0.420s GC time
Loading theory "Draft.Algebra7" (required by "Draft.Algebra7MoreTemplates")
locale Module
  fixes M :: "('a, 'b, 'c) Module_scheme"  (structure)
    and R :: "('b, 'd) Ring_scheme"  (structure)
  assumes "Module M R"
[| R module N; R module M; invmfun R M N f : mHom R N M; ?m : carrier N |]
==> invmfun R M N f ?m : carrier M
[| ?R module ?M; ?R module ?N; ?f : mHom ?R ?M ?N |]
==> ?f\<^sup>\<flat>\<^bsub>?R ?M, ?N\<^esub>
    : mHom ?R (?M /\<^sub>m (ker\<^bsub>?M,?N\<^esub> ?f)) ?N
consts
  natm :: "('a, 'm) aGroup_scheme => nat => 'a => 'a"
[| ?R module ?M; submodule ?R ?M ?H |]
==> mpj ?M ?H : mHom ?R ?M (?M /\<^sub>m ?H)
### theory "Draft.Algebra7"
### 2.128s elapsed time, 2.606s cpu time, 0.628s GC time
Loading theory "Draft.Algebra7MoreTemplates"
val templateLemmas =
   [("Algebra7.zeroi_func",
     "[| Ring ?R; ideal ?R ?A |]
      ==> zeroi ?R : {j. j <= 0} \<rightarrow> ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               t_empty))
           ))),
    ("Algebra7.card_Nset_im",
     "?f : {j. j <= ?n} \<rightarrow> ?A ==>
      Suc 0 <= card (?f ` {j. j <= ?n})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                t_empty))
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_hole 5, t_empty)))))),
    ("Algebra7.two_func_imageTr",
     "[| ?h : {j. j <= Suc ?n} \<rightarrow> ?B;
         ?f : {j. j <= ?m} \<rightarrow> ?h ` {j. j <= Suc ?n};
         ?h (Suc ?n) ~: ?f ` {j. j <= ?m} |]
      ==> ?f : {j. j <= ?m} \<rightarrow> ?h ` {j. j <= ?n}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                t_empty))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 0,
                    template_app
                     (template_var 4,
                      template_app (template_hole 3, template_var 3))),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_app (template_hole 5, t_empty)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app
                (template_hole 6, template_app (template_hole 5, t_empty)),
               t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Algebra7MoreTemplates"
### 0.430s elapsed time, 0.642s cpu time, 0.105s GC time
val it = (): unit
