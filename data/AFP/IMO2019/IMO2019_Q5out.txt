Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IMO2019_Q5MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IMO2019_Q5MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IMO2019_Q5MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.IMO2019_Q5MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.622s cpu time, 0.067s GC time
Loading theory "Draft.IMO2019_Q5" (required by "Draft.IMO2019_Q5MoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.319s elapsed time, 1.279s cpu time, 0.067s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IMO2019_Q5MoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.416s elapsed time, 1.641s cpu time, 0.177s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IMO2019_Q5MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "Draft.IMO2019_Q5"
### 0.522s elapsed time, 2.035s cpu time, 0.228s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.170s elapsed time, 3.880s cpu time, 1.052s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.188s elapsed time, 3.766s cpu time, 0.942s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.283s elapsed time, 6.201s cpu time, 1.239s GC time
Loading theory "Draft.Templates" (required by "Draft.IMO2019_Q5MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IMO2019_Q5MoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 0.607s cpu time, 0.076s GC time
Loading theory "Draft.IMO2019_Q5MoreTemplates"
val templateLemmas =
   [("IMO2019_Q5.finite_seqs", "finite (seqs ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("IMO2019_Q5.heads_le_length", "heads ?xs <= length ?xs",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("IMO2019_Q5.length_harry_step", "length (harry_step ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("IMO2019_Q5.harry_sum_correct",
     "harry_sum ?n = sum harry_meas (seqs ?n)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("IMO2019_Q5.heads_False", "heads (False # ?xs) = heads ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("IMO2019_Q5.length_flip", "length (flip ?xs ?i) = length ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("IMO2019_Q5.seqs_rev", "rev ` seqs ?n = seqs ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("IMO2019_Q5.True_notin_funpow_harry_step",
     "True ~: set ((harry_step ^^ harry_meas ?xs) ?xs)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_hole 0),
                   template_var 0)))
             )
         )),
    ("IMO2019_Q5.card_seqs", "card (seqs ?n) = 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("IMO2019_Q5.harry_meas_True_start",
     "harry_meas (True # ?xs) = 1 + harry_meas ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 4, template_var 0)))),
    ("IMO2019_Q5.heads_True", "heads (True # ?xs) = 1 + heads ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 4, template_var 0)))),
    ("IMO2019_Q5.harry_meas_False_end",
     "harry_meas (?xs @ [False]) = harry_meas ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))),
       template_app (template_hole 4, template_var 0))),
    ("IMO2019_Q5.heads_pos_iff", "(0 < heads ?xs) = (True : set ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("IMO2019_Q5.heads_append", "heads (?xs @ ?ys) = heads ?xs + heads ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("IMO2019_Q5.harry_meas_eq_0_iff",
     "(harry_meas ?xs = 0) = (True ~: set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("IMO2019_Q5.heads_eq_0_iff", "(heads ?xs = 0) = (True ~: set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("IMO2019_Q5.flip_Cons_0", "flip (?x # ?xs) 0 = (~ ?x) # ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("IMO2019_Q5.heads_pos", "True : set ?xs ==> 0 < heads ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("IMO2019_Q5.length_seqs", "?xs : seqs ?n ==> length ?xs = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IMO2019_Q5.harry_meas_eq_0", "True ~: set ?xs ==> harry_meas ?xs = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("IMO2019_Q5.heads_eq_0", "True ~: set ?xs ==> heads ?xs = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("IMO2019_Q5.heads_Cons",
     "heads (?x # ?xs) = (if ?x then heads ?xs + 1 else heads ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 0)),
             template_hole 0)),
         template_app (template_hole 4, template_var 0)))),
    ("IMO2019_Q5.True_in_funpow_harry_step",
     "?n < harry_meas ?xs ==> True : set ((harry_step ^^ ?n) ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0),
                 template_var 0)))
           ))),
    ("IMO2019_Q5.harry_meas_step_aux",
     "True : set ?xs ==>
      harry_meas ?xs = Suc (harry_meas (harry_step ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))))),
    ("IMO2019_Q5.harry_meas_step",
     "True : set ?xs ==> harry_meas (harry_step ?xs) = harry_meas ?xs - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("IMO2019_Q5.harry_meas_Falses_True",
     "harry_meas (replicate ?n False @ [True]) = 2 * ?n + 1",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_hole 9)),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_hole 6))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_hole 0))),
    ("IMO2019_Q5.harry_step_True_start",
     "harry_step (True # ?xs) =
      (if True : set ?xs then True # harry_step ?xs else False # ?xs)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 4),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_app (template_hole 5, template_hole 0),
           template_var 0)))),
    ("IMO2019_Q5.flip_append1",
     "?n < length ?xs ==> flip (?xs @ ?ys) ?n = flip ?xs ?n @ ?ys",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("IMO2019_Q5.flip_Cons_pos",
     "0 < ?n ==> flip (?x # ?xs) ?n = ?x # flip ?xs (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)))))),
    ("IMO2019_Q5.harry_sum_closed_form",
     "harry_sum ?n = ?n * (?n + 1) * 2 ^ ?n div 4",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("IMO2019_Q5.harry_sum_closed_form_aux",
     "4 * harry_sum ?n = ?n * (?n + 1) * 2 ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 5, template_hole 4)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)))),
    ("IMO2019_Q5.seqs_Suc",
     "seqs (Suc ?n) = (#) True ` seqs ?n Un (#) False ` seqs ?n",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 6, template_var 0))))),
    ("IMO2019_Q5.harry_step_False_end",
     "True : set ?xs ==>
      harry_step (?xs @ [False]) = harry_step ?xs @ [False]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("IMO2019_Q5.harry_meas_False_True",
     "harry_meas (False # ?xs @ [True]) =
      harry_meas ?xs + 2 * length ?xs + 3",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, template_hole 10),
           template_app
            (template_app (template_hole 9, template_var 0),
             template_app
              (template_app (template_hole 11, template_hole 8),
               template_hole 7)))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 12, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_hole 2))))),
    ("IMO2019_Q5.seqs_Suc'",
     "seqs (Suc ?n) =
      (%xs. xs @ [True]) ` seqs ?n Un (%xs. xs @ [False]) ` seqs ?n",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 8, template_var 0))),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 8, template_var 0))))),
    ("IMO2019_Q5.harry_step_False_True",
     "True : set ?xs ==>
      harry_step (False # ?xs @ [True]) = False # harry_step ?xs @ [True]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 3, template_hole 7),
                 template_hole 0)))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 7),
               template_hole 0)))))),
    ("IMO2019_Q5.harry_step_Falses_True",
     "0 < ?n ==>
      harry_step (replicate ?n False @ [True]) =
      True # replicate (?n - 1) False @ [True]",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 0)],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)),
                 template_hole 5)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)))))),
    ("IMO2019_Q5.Suc_Suc_induct",
     "[| ?P 0; ?P (Suc 0);
         !!n. [| ?P n; ?P (Suc n) |] ==> ?P (Suc (Suc n)) |]
      ==> ?P ?n",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 2)),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app (template_hole 1, template_hole 2))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("IMO2019_Q5.flip_append2",
     "[| length ?xs <= ?n; ?n < length ?xs + length ?ys |]
      ==> flip (?xs @ ?ys) ?n = ?xs @ flip ?ys (?n - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 6, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 6, template_var 2))))))),
    ("IMO2019_Q5.head_last_cases",
     "[| ?xs = [] ==> ?P; !!ys. ?xs = True # ys ==> ?P;
         !!ys. ?xs = ys @ [False] ==> ?P;
         !!ys. ?xs = False # ys @ [True] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.IMO2019_Q5MoreTemplates"
### 0.314s elapsed time, 0.412s cpu time, 0.000s GC time
val it = (): unit
