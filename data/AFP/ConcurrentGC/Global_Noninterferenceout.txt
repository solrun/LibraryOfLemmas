Loading theory "ConcurrentIMP.CIMP_pred" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "ConcurrentIMP.CIMP_pred"
### 0.159s elapsed time, 0.655s cpu time, 0.038s GC time
Loading theory "ConcurrentIMP.Infinite_Sequences" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP" via "ConcurrentIMP.CIMP_lang" via "ConcurrentIMP.LTL")
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.662s cpu time, 0.038s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.190s elapsed time, 0.785s cpu time, 0.038s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
consts
  stake :: "nat => (nat => 'a) => 'a list"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "size_list size <*mlex*> {}"
consts
  shift :: "'a list => (nat => 'a) => nat => 'a"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.074s elapsed time, 0.294s cpu time, 0.000s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model")
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.383s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.ExtrEqs")
### theory "ConcurrentIMP.Infinite_Sequences"
### 0.237s elapsed time, 0.939s cpu time, 0.067s GC time
Loading theory "ConcurrentIMP.LTL" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP" via "ConcurrentIMP.CIMP_lang")
### theory "HOL-Library.Set_Algebras"
### 0.255s elapsed time, 1.006s cpu time, 0.067s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "ConcurrentIMP.LTL"
### 0.371s elapsed time, 1.444s cpu time, 0.220s GC time
Loading theory "ConcurrentIMP.CIMP_lang" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for inductive predicate(s) "list_emb"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.162s elapsed time, 4.369s cpu time, 1.016s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.625s elapsed time, 6.202s cpu time, 1.214s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.822s elapsed time, 2.875s cpu time, 0.382s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.478s elapsed time, 8.471s cpu time, 2.288s GC time
Loading theory "Draft.Templates" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.203s cpu time, 0.079s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Global_NoninterferenceMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.108s cpu time, 0.116s GC time
Proofs for inductive predicate(s) "small_step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "system_step"
  Proving monotonicity ...
consts
  atC :: "('answer, 'location, 'question, 'state) com => 'location set"
consts
  atCs ::
    "('answer, 'location, 'question, 'state) com list => 'location set"
### theory "ConcurrentIMP.CIMP_lang"
### 4.525s elapsed time, 10.894s cpu time, 3.290s GC time
Loading theory "ConcurrentIMP.CIMP_vcg" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "basic_com"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctxtp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "vcg"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "ConcurrentIMP.CIMP_vcg"
### 2.528s elapsed time, 2.928s cpu time, 0.333s GC time
Loading theory "ConcurrentIMP.CIMP_vcg_rules" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
### theory "ConcurrentIMP.CIMP_vcg_rules"
### 0.250s elapsed time, 0.293s cpu time, 0.045s GC time
Loading theory "ConcurrentIMP.CIMP" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model")
val ss_only = fn: thm list -> Proof.context -> Proof.context
val HOL_ss_only = fn: thm list -> Proof.context -> Proof.context
signature CIMP =
  sig
    val com_locs_fold: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_fold_no_response: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_map: (term -> 'a) -> term -> 'a list
    val com_locs_map_no_response: (term -> 'a) -> term -> 'a list
    val def_locset: thm -> local_theory -> local_theory
    val intern_com: Facts.ref -> local_theory -> local_theory
  end
structure Cimp: CIMP
### theory "ConcurrentIMP.CIMP"
### 0.116s elapsed time, 0.116s cpu time, 0.000s GC time
Loading theory "Draft.Model" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants" via "Draft.Proofs_Basis")
locale mut_m
  fixes m :: "'mut"
locale mut_m'
  fixes m :: "'mut"
    and m' :: "'mut"
  assumes "mut_m' m m'"
locale gc
locale sys
locale sys
locale mut_m
  fixes m :: "'mut"
locale gc
locale sys
locale mut_m
  fixes m :: "'mut"
locale gc
consts
  gc_coms ::
    "'mut process_name
     => (('field, 'payload, 'ref) response, char list,
         'mut process_name * ('field, 'mut, 'payload, 'ref) request_op,
         ('field, 'mut, 'payload, 'ref) Model.local_state) com"
### theory "Draft.Model"
### 7.700s elapsed time, 8.552s cpu time, 1.072s GC time
Loading theory "Draft.Proofs_Basis" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas" via "Draft.Global_Invariants")
locale gc
locale mut_m
  fixes m :: "'mut"
locale sys
locale mut_m
  fixes m :: "'mut"
### theory "Draft.Proofs_Basis"
### 4.588s elapsed time, 4.789s cpu time, 0.256s GC time
Loading theory "Draft.Global_Invariants" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference" via "Draft.Global_Invariants_Lemmas")
Loading theory "Draft.Tactics" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference")
### Cannot skip proof of schematic goal statement
locale mut_m
  fixes m :: "'mut"
consts
  mutator_phase_inv_aux ::
    "hs_phase
     => ('mut process_name
         => ('field, 'mut, 'payload, 'ref) Model.local_state)
        => bool"
consts
  sys_phase_inv_aux ::
    "hs_phase
     => ('mut process_name
         => ('field, 'mut, 'payload, 'ref) Model.local_state)
        => bool"
locale gc_system
  fixes initial_mark :: "bool"
### theory "Draft.Global_Invariants"
### 0.412s elapsed time, 0.850s cpu time, 0.060s GC time
Loading theory "Draft.Global_Invariants_Lemmas" (required by "Draft.Global_NoninterferenceMoreTemplates" via "Draft.Global_Noninterference")
### Rewrite rule not in simpset:
### (!!x. x = ?a ==> PROP ?P x) == PROP ?P ?a
### Rewrite rule not in simpset:
### (!!x. ?a = x ==> PROP ?P x) == PROP ?P ?a
### Simplification procedure "HOL.defined_all" not in simpset
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale mut_m
  fixes m :: "'mut"
signature GC_VCG =
  sig
    val loc_mem_tac: Proof.context -> int -> tactic
    val nuke_schematic_prems: Proof.context -> int -> tactic
    val thin_post_inv_tac: bool -> Proof.context -> int -> tactic
    val thin_pre_inv_tac: Proof.context -> int -> tactic
    val vcg_chainsaw_tac: bool -> thm list -> Proof.context -> int -> tactic
    val vcg_fragments_tac: Proof.context -> int -> tactic
    val vcg_inv_tac: bool -> bool -> Proof.context -> int -> tactic
    val vcg_jackhammer_tac: bool -> bool -> Proof.context -> int -> tactic
    val vcg_name_cases_tac: term list -> thm list -> context_tactic
    val vcg_sem_tac: Proof.context -> int -> tactic
  end
structure GC_VCG: GC_VCG
### theory "Draft.Tactics"
### 1.222s elapsed time, 2.533s cpu time, 0.215s GC time
locale mut_m
  fixes m :: "'mut"
locale mut_m
  fixes m :: "'mut"
locale mut_m
  fixes m :: "'mut"
### theory "Draft.Global_Invariants_Lemmas"
### 1.265s elapsed time, 2.161s cpu time, 0.199s GC time
Loading theory "Draft.Global_Noninterference" (required by "Draft.Global_NoninterferenceMoreTemplates")
locale sys
### theory "Draft.Global_Noninterference"
### 0.264s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "Draft.Global_NoninterferenceMoreTemplates"
val templateLemmas =
   [("Global_Noninterference.black_heap_valid_ref_marked_insertions",
     "[| black_heap ?s; valid_refs_inv ?s |]
      ==> mut_m.marked_insertions ?m ?s",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Global_Noninterference.black_heap_reachable",
     "[| mut_m.reachable ?m ?y ?s; black_heap ?s; valid_refs_inv ?s |]
      ==> black ?y ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Global_NoninterferenceMoreTemplates"
### 0.565s elapsed time, 0.808s cpu time, 0.088s GC time
val it = (): unit
