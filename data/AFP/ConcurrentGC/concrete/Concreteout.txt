Loading theory "ConcurrentIMP.CIMP_pred" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.605s cpu time, 0.040s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "HOL-Library.Saturated" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
### theory "ConcurrentIMP.CIMP_pred"
### 0.150s elapsed time, 0.622s cpu time, 0.040s GC time
Loading theory "ConcurrentIMP.Infinite_Sequences" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP" via "ConcurrentIMP.CIMP_lang" via "ConcurrentIMP.LTL")
consts
  stake :: "nat => (nat => 'a) => 'a list"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.194s elapsed time, 0.797s cpu time, 0.040s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis")
consts
  shift :: "'a list => (nat => 'a) => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.086s elapsed time, 0.329s cpu time, 0.055s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.291s cpu time, 0.094s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs")
### theory "ConcurrentIMP.Infinite_Sequences"
### 0.186s elapsed time, 0.728s cpu time, 0.055s GC time
Loading theory "ConcurrentIMP.LTL" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP" via "ConcurrentIMP.CIMP_lang")
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.770s cpu time, 0.095s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model")
### theory "HOL-Library.Phantom_Type"
### 0.544s elapsed time, 2.138s cpu time, 0.227s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "HOL-Library.Saturated" via "HOL-Library.Numeral_Type")
### theory "ConcurrentIMP.LTL"
### 0.398s elapsed time, 1.553s cpu time, 0.229s GC time
Loading theory "ConcurrentIMP.CIMP_lang" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  prefixes :: "'a list => 'a list list"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Additional type variable(s) in locale specification "card2": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  flat :: "'a list stream => 'a stream"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
### theory "HOL-Library.Stream"
### 1.156s elapsed time, 4.389s cpu time, 0.916s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
consts
  suffixes :: "'a list => 'a list list"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.951s elapsed time, 3.586s cpu time, 0.858s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "HOL-Library.Saturated")
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
### theory "HOL-Library.Sublist"
### 2.085s elapsed time, 7.850s cpu time, 2.202s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs")
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Numeral_Type"
### 1.033s elapsed time, 3.858s cpu time, 1.311s GC time
Loading theory "HOL-Library.Type_Length" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "HOL-Library.Saturated")
Found termination order: "size <*mlex*> {}"
class len0 = type +
  fixes len_of :: "'a itself => nat"
class len = len0 +
  assumes "len_gt_0": "0 < LENGTH('a)"
Found termination order: "size <*mlex*> {}"
instantiation
  0 :: len0
  1 :: len0
  len_of_num0 == len_of :: 0 itself => nat
  len_of_num1 == len_of :: 1 itself => nat
instantiation
  bit0 :: (len0) len0
  bit1 :: (len0) len0
  len_of_bit0 == len_of :: 'a bit0 itself => nat
  len_of_bit1 == len_of :: 'a bit1 itself => nat
instantiation
  Enum.finite_1 :: len
  len_of_finite_1 == len_of :: Enum.finite_1 itself => nat
instantiation
  Enum.finite_2 :: len
  len_of_finite_2 == len_of :: Enum.finite_2 itself => nat
instantiation
  Enum.finite_3 :: len
  len_of_finite_3 == len_of :: Enum.finite_3 itself => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "HOL-Library.Type_Length"
### 0.567s elapsed time, 2.249s cpu time, 0.238s GC time
Loading theory "HOL-Library.Saturated" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  sat :: (len) linorder
  less_eq_sat == less_eq :: 'a sat => 'a sat => bool
  less_sat == less :: 'a sat => 'a sat => bool
instantiation
  sat :: (len) {minus,comm_semiring_1}
  zero_sat == zero_class.zero :: 'a sat
  plus_sat == plus :: 'a sat => 'a sat => 'a sat
  one_sat == one_class.one :: 'a sat
  times_sat == times :: 'a sat => 'a sat => 'a sat
  minus_sat == minus :: 'a sat => 'a sat => 'a sat
instantiation
  sat :: (len) ordered_comm_semiring
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  sat :: (len) equal
  equal_sat == equal_class.equal :: 'a sat => 'a sat => bool
### theory "HOL-Library.BigO"
### 0.853s elapsed time, 3.364s cpu time, 0.368s GC time
instantiation
  sat :: (len) {bounded_lattice,distrib_lattice}
  bot_sat == bot :: 'a sat
  sup_sat == sup :: 'a sat => 'a sat => 'a sat
  top_sat == top :: 'a sat
  inf_sat == inf :: 'a sat => 'a sat => 'a sat
instantiation
  sat :: (len) {Inf,Sup}
  Sup_sat == Sup :: 'a sat set => 'a sat
  Inf_sat == Inf :: 'a sat set => 'a sat
### theory "HOL-Library.Saturated"
### 0.613s elapsed time, 2.104s cpu time, 1.190s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.702s elapsed time, 9.549s cpu time, 2.944s GC time
Loading theory "Draft.Templates" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConcreteMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.532s elapsed time, 1.125s cpu time, 0.139s GC time
Proofs for inductive predicate(s) "small_step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "system_step"
  Proving monotonicity ...
consts
  atC :: "('answer, 'location, 'question, 'state) com => 'location set"
consts
  atCs ::
    "('answer, 'location, 'question, 'state) com list => 'location set"
### theory "ConcurrentIMP.CIMP_lang"
### 4.927s elapsed time, 14.549s cpu time, 3.898s GC time
Loading theory "ConcurrentIMP.CIMP_vcg" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "basic_com"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctxtp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "vcg"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "ConcurrentIMP.CIMP_vcg"
### 2.477s elapsed time, 2.867s cpu time, 0.320s GC time
Loading theory "ConcurrentIMP.CIMP_vcg_rules" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model" via "ConcurrentIMP.CIMP")
### theory "ConcurrentIMP.CIMP_vcg_rules"
### 0.253s elapsed time, 0.313s cpu time, 0.065s GC time
Loading theory "ConcurrentIMP.CIMP" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis" via "Draft.Model")
val ss_only = fn: thm list -> Proof.context -> Proof.context
val HOL_ss_only = fn: thm list -> Proof.context -> Proof.context
signature CIMP =
  sig
    val com_locs_fold: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_fold_no_response: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_map: (term -> 'a) -> term -> 'a list
    val com_locs_map_no_response: (term -> 'a) -> term -> 'a list
    val def_locset: thm -> local_theory -> local_theory
    val intern_com: Facts.ref -> local_theory -> local_theory
  end
structure Cimp: CIMP
### theory "ConcurrentIMP.CIMP"
### 0.114s elapsed time, 0.114s cpu time, 0.000s GC time
Loading theory "Draft.Model" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants" via "Draft.Proofs_Basis")
locale mut_m
  fixes m :: "'mut"
locale mut_m'
  fixes m :: "'mut"
    and m' :: "'mut"
  assumes "mut_m' m m'"
locale gc
locale sys
locale sys
locale mut_m
  fixes m :: "'mut"
locale gc
locale sys
locale mut_m
  fixes m :: "'mut"
locale gc
consts
  gc_coms ::
    "'mut process_name
     => (('field, 'payload, 'ref) response, char list,
         'mut process_name * ('field, 'mut, 'payload, 'ref) request_op,
         ('field, 'mut, 'payload, 'ref) Model.local_state) com"
### theory "Draft.Model"
### 8.287s elapsed time, 10.433s cpu time, 2.853s GC time
Loading theory "Draft.Proofs_Basis" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap" via "Draft.Global_Invariants")
locale gc
locale mut_m
  fixes m :: "'mut"
locale sys
locale mut_m
  fixes m :: "'mut"
### theory "Draft.Proofs_Basis"
### 4.532s elapsed time, 4.743s cpu time, 0.270s GC time
Loading theory "Draft.Global_Invariants" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Concrete_heap")
locale mut_m
  fixes m :: "'mut"
consts
  mutator_phase_inv_aux ::
    "hs_phase
     => ('mut process_name
         => ('field, 'mut, 'payload, 'ref) Model.local_state)
        => bool"
consts
  sys_phase_inv_aux ::
    "hs_phase
     => ('mut process_name
         => ('field, 'mut, 'payload, 'ref) Model.local_state)
        => bool"
locale gc_system
  fixes initial_mark :: "bool"
### theory "Draft.Global_Invariants"
### 0.396s elapsed time, 0.450s cpu time, 0.074s GC time
Loading theory "Draft.Concrete_heap" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete")
locale gc_system
  fixes initial_mark :: "bool"
### theory "Draft.Concrete_heap"
### 0.380s elapsed time, 0.381s cpu time, 0.000s GC time
Loading theory "Draft.Concrete" (required by "Draft.ConcreteMoreTemplates")
locale gc_system
  fixes initial_mark :: "bool"
consts
  lookup :: "('k * 'v) list => 'v => 'k => 'v"
### theory "Draft.Concrete"
### 0.100s elapsed time, 0.167s cpu time, 0.091s GC time
Loading theory "Draft.ConcreteMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ConcreteMoreTemplates"
### 0.694s elapsed time, 0.934s cpu time, 0.064s GC time
val it = (): unit
