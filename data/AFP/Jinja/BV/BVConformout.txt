Loading theory "Draft.Auxiliary" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Auxiliary"
### 0.116s elapsed time, 0.464s cpu time, 0.041s GC time
Loading theory "Draft.Type" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.568s cpu time, 0.041s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.255s elapsed time, 1.019s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.322s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.321s elapsed time, 1.253s cpu time, 0.174s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices" via "Draft.Err" via "Draft.Semilat")
### theory "Draft.Type"
### 0.395s elapsed time, 1.553s cpu time, 0.174s GC time
Loading theory "Draft.Decl" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.053s elapsed time, 0.215s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
Found termination order: "{}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "widen"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "HOL-Library.While_Combinator"
### 0.424s elapsed time, 1.688s cpu time, 0.160s GC time
Loading theory "Draft.Semilat" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices" via "Draft.Err")
Proofs for inductive predicate(s) "Methods"
consts
  sdrop :: "nat => 'a stream => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Semilat"
### 0.526s elapsed time, 1.884s cpu time, 0.675s GC time
Loading theory "Draft.Err" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
### theory "HOL-Library.Stream"
### 1.116s elapsed time, 4.219s cpu time, 0.916s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.421s elapsed time, 5.429s cpu time, 1.021s GC time
Loading theory "Draft.Value" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Err"
### 0.625s elapsed time, 2.471s cpu time, 0.186s GC time
Loading theory "Draft.Listn" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
consts
  coalesce :: "'a err list => 'a list err"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.841s elapsed time, 3.311s cpu time, 0.336s GC time
Loading theory "Draft.Opt" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
### theory "Draft.Opt"
### 0.125s elapsed time, 0.486s cpu time, 0.058s GC time
Loading theory "Draft.Product" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
### theory "Draft.Listn"
### 0.380s elapsed time, 1.483s cpu time, 0.208s GC time
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.484s elapsed time, 1.879s cpu time, 0.208s GC time
Loading theory "Draft.Objects" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
### theory "HOL-Library.Tree"
### 2.228s elapsed time, 8.555s cpu time, 1.404s GC time
Loading theory "Draft.Templates" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Product"
### 0.124s elapsed time, 0.405s cpu time, 0.070s GC time
Loading theory "Draft.Semilattices" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.273s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BVConformMoreTemplates")
### theory "Draft.Objects"
### 0.154s elapsed time, 0.474s cpu time, 0.070s GC time
Loading theory "Draft.Exceptions" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions" via "Draft.JVMInstructions")
### theory "Draft.JVMState"
### 0.027s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions")
### theory "Draft.Exceptions"
### 0.109s elapsed time, 0.422s cpu time, 0.052s GC time
Loading theory "Draft.Conform" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform")
### Ambiguous input (line 26 of "$AFP/Jinja/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Semilattices"
### 0.281s elapsed time, 1.043s cpu time, 0.052s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
### theory "Draft.Conform"
### 0.168s elapsed time, 0.662s cpu time, 0.055s GC time
### theory "Draft.SystemClasses"
### 0.069s elapsed time, 0.265s cpu time, 0.055s GC time
Loading theory "Draft.WellForm" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
### theory "Draft.WellForm"
### 0.253s elapsed time, 0.764s cpu time, 0.065s GC time
Loading theory "Draft.SemiType" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.673s elapsed time, 2.295s cpu time, 0.220s GC time
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
### theory "Draft.SemiType"
### 0.289s elapsed time, 0.699s cpu time, 0.123s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
### theory "Draft.JVM_SemiType"
### 0.505s elapsed time, 1.406s cpu time, 0.950s GC time
### theory "Draft.JVMInstructions"
### 1.560s elapsed time, 4.144s cpu time, 1.245s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
Loading theory "Draft.JVMExecInstr" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.JVMExec")
consts
  match_ex_table ::
    "(char list *
      char list *
      (char list * ty) list * (char list * ty list * ty * 'm) list) list
     => char list
        => nat
           => (nat * nat * char list * nat * nat) list
              => (nat * nat) option"
consts
  find_handler ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => nat
        => (nat
            => (char list * (char list * char list => val option)) option)
           => (val list * val list * char list * char list * nat) list
              => nat option *
                 (nat
                  => (char list *
                      (char list * char list => val option)) option) *
                 (val list * val list * char list * char list * nat) list"
### theory "Draft.JVMExceptions"
### 0.168s elapsed time, 0.371s cpu time, 0.048s GC time
Loading theory "Draft.Effect" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec")
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
locale prog
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
locale jvm_method
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### theory "Draft.JVMExecInstr"
### 0.371s elapsed time, 0.804s cpu time, 0.089s GC time
Loading theory "Draft.JVMExec" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform")
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (10 more)
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 0.528s elapsed time, 1.113s cpu time, 0.100s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale eff
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 4.998s elapsed time, 8.339s cpu time, 1.752s GC time
Loading theory "Draft.BVSpec" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform")
### theory "Draft.BVSpec"
### 0.087s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "Draft.BVConform" (required by "Draft.BVConformMoreTemplates")
consts
  conf_fs ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => (nat => (char list * (char list * char list => val option)) option)
        => (char list => char list => (ty list * ty err list) option list)
           => char list
              => nat
                 => ty => (val list *
                           val list * char list * char list * nat) list
                          => bool"
### theory "Draft.BVConform"
### 0.345s elapsed time, 0.367s cpu time, 0.030s GC time
Loading theory "Draft.BVConformMoreTemplates"
val templateLemmas =
   [("BVConform.confT_Err", "?P,?h |- ?x :<=T Err",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("BVConform.confTs_Err",
     "?P,?h |- replicate ?n ?v [:<=T] replicate ?n Err",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))
         )),
    ("BVConform.confT_OK",
     "(?P,?h |- ?x :<=T OK ?T) = (?P,?h \<turnstile> ?x :\<le> ?T)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("BVConform.reg_widen_Err",
     "?P |- replicate ?n Err [<=T] ?LT = (?LT = replicate ?n Err)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 1)))),
    ("BVConform.confTs_map",
     "(?P,?h |- ?vs [:<=T] map OK ?Ts) =
      (?P,?h \<turnstile> ?vs [:\<le>] ?Ts)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("BVConform.confT_hext",
     "[| ?P,?h |- ?x :<=T ?T; ?h \<unlhd> ?h' |] ==> ?P,?h' |- ?x :<=T ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("BVConform.confT_widen",
     "[| ?P,?h |- ?x :<=T ?T; ?P |- ?T <=T ?T' |] ==> ?P,?h |- ?x :<=T ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("BVConform.confTs_hext",
     "[| ?P,?h |- ?loc [:<=T] ?LT; ?h \<unlhd> ?h' |]
      ==> ?P,?h' |- ?loc [:<=T] ?LT",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("BVConform.confTs_widen",
     "[| ?P,?h |- ?loc [:<=T] ?LT; ?P |- ?LT [<=T] ?LT' |]
      ==> ?P,?h |- ?loc [:<=T] ?LT'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 0)
           ))),
    ("BVConform.confT_cases",
     "(?P,?h |- ?x :<=T ?X) =
      (?X = Err | (EX T. ?X = OK T & ?P,?h \<turnstile> ?x :\<le> T))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_app (template_hole 3, t_empty))
           ))),
    ("BVConform.conf_fs_hext",
     "[| conf_fs ?P ?h ?\<Phi> ?M ?n ?T\<^sub>r ?frs; ?h \<unlhd> ?h' |]
      ==> conf_fs ?P ?h' ?\<Phi> ?M ?n ?T\<^sub>r ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 6),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 0),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("BVConform.confTs_Cons1",
     "(?P,?h |- ?x # ?xs [:<=T] ?ys) =
      (EX z zs.
          ?ys = z # zs & ?P,?h |- ?x :<=T z & ?P,?h |- ?xs [:<=T] zs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("BVConform.confTs_confT_sup",
     "[| ?P,?h |- ?loc [:<=T] ?LT; ?n < length ?LT; ?LT ! ?n = OK ?T;
         subtype ?P ?T ?T' |]
      ==> ?P,?h \<turnstile> ?loc ! ?n :\<le> ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5)),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 5),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.BVConformMoreTemplates"
### 0.374s elapsed time, 0.509s cpu time, 0.042s GC time
val it = (): unit
