Loading theory "Draft.Auxiliary" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Auxiliary"
### 0.142s elapsed time, 0.582s cpu time, 0.057s GC time
Loading theory "Draft.Type" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.579s cpu time, 0.057s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
### theory "HOL-Library.Set_Algebras"
### 0.235s elapsed time, 0.949s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.504s elapsed time, 2.009s cpu time, 0.169s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.368s elapsed time, 1.452s cpu time, 0.113s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices" via "Draft.Err" via "Draft.Semilat")
Found termination order: "{}"
### theory "Draft.Type"
### 0.610s elapsed time, 2.414s cpu time, 0.211s GC time
Loading theory "Draft.Decl" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.084s elapsed time, 0.324s cpu time, 0.102s GC time
Loading theory "Draft.TypeRel" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.While_Combinator"
### 0.515s elapsed time, 2.024s cpu time, 0.276s GC time
Loading theory "Draft.Semilat" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices" via "Draft.Err")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "widen"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Proofs for inductive predicate(s) "Methods"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
consts
  sdrop :: "nat => 'a stream => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
### theory "Draft.Semilat"
### 0.524s elapsed time, 1.930s cpu time, 0.658s GC time
Loading theory "Draft.Err" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
### theory "HOL-Library.Stream"
### 1.284s elapsed time, 4.917s cpu time, 1.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Err"
### 0.689s elapsed time, 2.720s cpu time, 0.277s GC time
Loading theory "Draft.Listn" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
consts
  coalesce :: "'a err list => 'a list err"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.522s elapsed time, 5.854s cpu time, 1.078s GC time
Loading theory "Draft.Value" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Listn"
### 0.365s elapsed time, 1.437s cpu time, 0.152s GC time
Loading theory "Draft.Opt" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
### theory "Draft.Opt"
### 0.139s elapsed time, 0.548s cpu time, 0.086s GC time
Loading theory "Draft.Product" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.Semilattices")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.496s elapsed time, 1.946s cpu time, 0.248s GC time
Loading theory "Draft.Objects" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Product"
### 0.164s elapsed time, 0.639s cpu time, 0.077s GC time
Loading theory "Draft.Semilattices" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Draft.Objects"
### 0.173s elapsed time, 0.680s cpu time, 0.061s GC time
Loading theory "Draft.Exceptions" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "HOL-Library.BigO"
### 1.254s elapsed time, 4.947s cpu time, 0.545s GC time
Loading theory "Draft.JVMState" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
### theory "Draft.JVMState"
### 0.040s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "HOL-Library.Tree"
### 2.863s elapsed time, 11.139s cpu time, 1.699s GC time
Loading theory "Draft.Templates" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Exceptions"
### 0.102s elapsed time, 0.409s cpu time, 0.000s GC time
Loading theory "Draft.Conform" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.104s elapsed time, 0.391s cpu time, 0.086s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
### Ambiguous input (line 26 of "$AFP/Jinja/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SystemClasses"
### 0.055s elapsed time, 0.220s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
### theory "Draft.Conform"
### 0.194s elapsed time, 0.762s cpu time, 0.086s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BVNoTypeErrorMoreTemplates")
### theory "Draft.Semilattices"
### 0.464s elapsed time, 1.815s cpu time, 0.217s GC time
### theory "Draft.WellForm"
### 0.265s elapsed time, 0.930s cpu time, 0.070s GC time
Loading theory "Draft.SemiType" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType")
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
### theory "Draft.SemiType"
### 0.721s elapsed time, 2.333s cpu time, 1.322s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.121s elapsed time, 3.626s cpu time, 1.495s GC time
### theory "Draft.JVM_SemiType"
### 0.286s elapsed time, 0.789s cpu time, 0.103s GC time
### theory "Draft.JVMInstructions"
### 1.838s elapsed time, 5.153s cpu time, 1.631s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec")
Loading theory "Draft.JVMExecInstr" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec")
consts
  match_ex_table ::
    "(char list *
      char list *
      (char list * ty) list * (char list * ty list * ty * 'm) list) list
     => char list
        => nat
           => (nat * nat * char list * nat * nat) list
              => (nat * nat) option"
consts
  find_handler ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => nat
        => (nat
            => (char list * (char list * char list => val option)) option)
           => (val list * val list * char list * char list * nat) list
              => nat option *
                 (nat
                  => (char list *
                      (char list * char list => val option)) option) *
                 (val list * val list * char list * char list * nat) list"
### theory "Draft.JVMExceptions"
### 0.183s elapsed time, 0.398s cpu time, 0.048s GC time
Loading theory "Draft.Effect" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec")
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
locale prog
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
locale jvm_method
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
### theory "Draft.JVMExecInstr"
### 0.421s elapsed time, 0.900s cpu time, 0.102s GC time
Loading theory "Draft.JVMExec" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive")
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (10 more)
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 0.599s elapsed time, 1.264s cpu time, 0.125s GC time
Loading theory "Draft.JVMDefensive" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  check_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => bool"
Proofs for inductive predicate(s) "exec_1_dp"
  Proving monotonicity ...
### theory "Draft.JVMDefensive"
### 1.139s elapsed time, 2.766s cpu time, 0.297s GC time
Found termination order: "{}"
Found termination order: "{}"
locale eff
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 6.268s elapsed time, 12.057s cpu time, 2.600s GC time
Loading theory "Draft.BVSpec" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform")
### theory "Draft.BVSpec"
### 0.100s elapsed time, 0.157s cpu time, 0.035s GC time
Loading theory "Draft.BVConform" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe")
consts
  conf_fs ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => (nat => (char list * (char list * char list => val option)) option)
        => (char list => char list => (ty list * ty err list) option list)
           => char list
              => nat
                 => ty => (val list *
                           val list * char list * char list * nat) list
                          => bool"
### theory "Draft.BVConform"
### 0.368s elapsed time, 0.368s cpu time, 0.000s GC time
Loading theory "Draft.BVSpecTypeSafe" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError")
"find_handler"
  :: "(char list *
       char list *
       (char list * ty) list *
       (char list *
        ty list *
        ty *
        nat *
        nat *
        instr list * (nat * nat * char list * nat * nat) list) list) list
      => nat
         => (nat
             => (char list * (char list * char list => val option)) option)
            => (val list * val list * char list * char list * nat) list
               => nat option *
                  (nat
                   => (char list *
                       (char list * char list => val option)) option) *
                  (val list * val list * char list * char list * nat) list"
### Ambiguous input (line 54 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 353 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 477 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 479 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 568 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 580 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 632 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 658 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 661 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 724 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 727 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 801 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 817 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 819 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 865 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 881 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 896 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 927 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 943 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 961 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 999 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1031 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1066 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1086 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVSpecTypeSafe"
### 0.697s elapsed time, 0.759s cpu time, 0.086s GC time
Loading theory "Draft.BVNoTypeError" (required by "Draft.BVNoTypeErrorMoreTemplates")
### Ambiguous input (line 71 of "$AFP/Jinja/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 226 of "$AFP/Jinja/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 251 of "$AFP/Jinja/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BVNoTypeError.cnf
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and
    \<Phi> ::
      "char list => char list => (ty list * ty err list) option list"
    and
    \<sigma> ::
      "nat option *
       (nat => (char list * (char list * char list => val option)) option) *
       (val list * val list * char list * char list * nat) list"
  assumes "cnf P \<Phi> \<sigma>"
locale start
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and C :: "char list"
    and M :: "char list"
    and
    \<sigma> ::
      "(nat option *
        (nat
         => (char list * (char list * char list => val option)) option) *
        (val list *
         val list * char list * char list * nat) list) type_error"
    and T :: "ty"
    and
    b :: "nat * nat * instr list * (nat * nat * char list * nat * nat) list"
  assumes "start P C M T b"
  defines "\<sigma> == Normal (start_state P C M)"
### theory "Draft.BVNoTypeError"
### 0.284s elapsed time, 0.310s cpu time, 0.036s GC time
Loading theory "Draft.BVNoTypeErrorMoreTemplates"
val templateLemmas =
   [("BVNoTypeError.is_BoolI",
     "?P,?h \<turnstile> ?v :\<le> Boolean ==> is_Bool ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("BVNoTypeError.is_IntgI",
     "?P,?h \<turnstile> ?v :\<le> Integer ==> is_Intg ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("BVNoTypeError.not_TypeError_eq",
     "(?x ~= TypeError) = (EX t. ?x = Normal t)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("BVNoTypeError.typeof_NoneD",
     "typeof ?v = \<lfloor>?x\<rfloor> ==> ~ is_Addr ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, t_empty), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("BVNoTypeError.is_RefI",
     "[| ?P,?h \<turnstile> ?v :\<le> ?T; is_refT ?T |] ==> is_Ref ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("BVNoTypeError.has_methodI",
     "?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = ?m in ?D ==>
      ?P \<turnstile> ?C has ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 5),
             template_var 4)
           ))),
    ("BVNoTypeError.no_type_error",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- ?\<sigma> [ok] |]
      ==> exec_d ?P ?\<sigma> ~= TypeError",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("BVNoTypeError.welltyped_commutes",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- ?\<sigma> [ok] |]
      ==> ?P |- Normal ?\<sigma> -jvmd-> Normal ?\<sigma>' = ?P |-
          ?\<sigma> -jvm-> ?\<sigma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BVNoTypeError.welltyped_initial_commutes",
     "[| wf_jvm_prog ?P;
         ?P \<turnstile> ?C sees ?M: []\<rightarrow>?T = ?b in ?C |]
      ==> ?P |- Normal (start_state ?P ?C ?M) -jvmd-> Normal ?\<sigma>' =
          ?P |- start_state ?P ?C ?M -jvm-> ?\<sigma>'",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 3))),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_var 3)),
           template_var 0)))),
    ("BVNoTypeError.wt_jvm_prog_states",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = (?mxs, ?mxl, ?ins,
                     ?et) in ?C;
         ?\<Phi> ?C ?M ! ?pc = ?\<tau>; ?pc < length ?ins |]
      ==> OK ?\<tau> : states ?P ?mxs (1 + length ?Ts + ?mxl)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 10),
                        template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app (template_hole 12, template_var 5),
                  template_app
                   (template_app (template_hole 11, template_var 4),
                    template_app
                     (template_app (template_hole 10, template_var 3),
                      template_var 2)))),
              template_var 9)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_var 11, template_var 9),
                template_var 8)),
            template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 10),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app (template_hole 0, template_var 7))),
                 template_var 4)))
           )))]:
   (string * thm * template) list
### theory "Draft.BVNoTypeErrorMoreTemplates"
### 0.466s elapsed time, 0.615s cpu time, 0.054s GC time
val it = (): unit
