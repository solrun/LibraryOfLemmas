Loading theory "Draft.Auxiliary" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Correctness2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Correctness2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Correctness2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Auxiliary"
### 0.105s elapsed time, 0.433s cpu time, 0.040s GC time
Loading theory "Draft.Type" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.533s cpu time, 0.040s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2")
### theory "HOL-Library.Set_Algebras"
### 0.195s elapsed time, 0.791s cpu time, 0.040s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.378s elapsed time, 1.507s cpu time, 0.148s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Correctness2MoreTemplates" via "Draft.ExtrEqs")
consts
  prefixes :: "'a list => 'a list list"
### theory "Draft.Type"
### 0.396s elapsed time, 1.561s cpu time, 0.177s GC time
Loading theory "Draft.Decl" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.304s elapsed time, 1.192s cpu time, 0.177s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Correctness2MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Decl"
### 0.061s elapsed time, 0.241s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
Proofs for inductive predicate(s) "list_emb"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.128s elapsed time, 4.284s cpu time, 1.002s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Correctness2MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.743s elapsed time, 6.702s cpu time, 1.327s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.432s elapsed time, 5.482s cpu time, 1.223s GC time
Loading theory "Draft.Value" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.821s elapsed time, 2.944s cpu time, 0.387s GC time
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.441s elapsed time, 1.310s cpu time, 0.213s GC time
Loading theory "Draft.Objects" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Draft.Objects"
### 0.395s elapsed time, 1.126s cpu time, 0.844s GC time
Loading theory "Draft.Exceptions" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
Found termination order: "size <*mlex*> {}"
### theory "Draft.JVMState"
### 0.039s elapsed time, 0.113s cpu time, 0.028s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.Exceptions"
### 0.089s elapsed time, 0.268s cpu time, 0.028s GC time
Loading theory "Draft.Expr" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.J1" via "Draft.BigStep")
Loading theory "Draft.State" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.J1" via "Draft.BigStep")
### theory "Draft.State"
### 0.045s elapsed time, 0.179s cpu time, 0.000s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm")
### theory "HOL-Library.Tree"
### 2.544s elapsed time, 8.920s cpu time, 2.388s GC time
Loading theory "Draft.Templates" (required by "Draft.Correctness2MoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.SystemClasses"
### 0.080s elapsed time, 0.304s cpu time, 0.079s GC time
Loading theory "Draft.WellForm" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.PCompiler")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Correctness2MoreTemplates")
### theory "Draft.WellForm"
### 0.254s elapsed time, 1.001s cpu time, 0.076s GC time
Loading theory "Draft.PCompiler" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2")
### theory "Draft.PCompiler"
### 0.241s elapsed time, 0.944s cpu time, 0.199s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.045s elapsed time, 3.689s cpu time, 1.481s GC time
### theory "Draft.JVMInstructions"
### 1.696s elapsed time, 5.448s cpu time, 1.633s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec")
Loading theory "Draft.JVMExecInstr" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec")
consts
  match_ex_table ::
    "(char list *
      char list *
      (char list * ty) list * (char list * ty list * ty * 'm) list) list
     => char list
        => nat
           => (nat * nat * char list * nat * nat) list
              => (nat * nat) option"
consts
  find_handler ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => nat
        => (nat
            => (char list * (char list * char list => val option)) option)
           => (val list * val list * char list * char list * nat) list
              => nat option *
                 (nat
                  => (char list *
                      (char list * char list => val option)) option) *
                 (val list * val list * char list * char list * nat) list"
### theory "Draft.JVMExceptions"
### 0.196s elapsed time, 0.615s cpu time, 0.114s GC time
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
### theory "Draft.JVMExecInstr"
### 0.408s elapsed time, 1.057s cpu time, 0.150s GC time
Loading theory "Draft.JVMExec" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2")
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 0.573s elapsed time, 1.262s cpu time, 0.239s GC time
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 3.823s elapsed time, 8.931s cpu time, 2.160s GC time
Loading theory "Draft.BigStep" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.J1")
### Ambiguous input (line 83 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/Jinja/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 204 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 1.708s elapsed time, 2.162s cpu time, 0.255s GC time
Loading theory "Draft.J1" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2" via "Draft.Compiler2")
### Ambiguous input (line 25 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_vars)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_vars)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_vars :: "'a exp => nat"
  max_varss :: "'a exp list => nat"
### Ambiguous input (line 86 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_applC" ("_position" ls)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss" ("_position" i)
###                   ("_position" v)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_LUpdate" ("_position" ls)
###               ("_lupdbind" ("_position" i) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" ls\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_LUpdate" ("_position" ls\<^sub>1)
###                       ("_lupdbind" ("_position" i)
###                         ("_applC" ("_position" Addr) ("_position" a))))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_arg" ("_position" ls\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg" ("_position" ls\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" ls\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" ls\<^sub>1)
###                       ("_list"
###                         ("\<^const>Expr.exp.LAss" ("_position" i)
###                           ("_applC" ("_position" Addr) ("_position" a)))))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_arg" ("_position" ls\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg" ("_position" ls\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval\<^sub>1", "evals\<^sub>1"
  Proving monotonicity ...
### theory "Draft.J1"
### 0.865s elapsed time, 1.008s cpu time, 0.130s GC time
Loading theory "Draft.Compiler2" (required by "Draft.Correctness2MoreTemplates" via "Draft.Correctness2")
### Ambiguous input (line 21 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compE\<^sub>2 :: "nat exp => instr list"
  compEs\<^sub>2 :: "nat exp list => instr list"
### Ambiguous input (line 62 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compxE\<^sub>2 ::
    "nat exp => nat => nat => (nat * nat * char list * nat * nat) list"
  compxEs\<^sub>2 ::
    "nat exp list => nat => nat => (nat * nat * char list * nat * nat) list"
### Ambiguous input (line 90 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_stack :: "nat exp => nat"
  max_stacks :: "nat exp list => nat"
### theory "Draft.Compiler2"
### 0.413s elapsed time, 0.484s cpu time, 0.062s GC time
Loading theory "Draft.Correctness2" (required by "Draft.Correctness2MoreTemplates")
### Ambiguous input (line 206 of "$AFP/Jinja/Compiler/Correctness2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###       ("_position" xt) ("_position" I) ("_position" d))
###     ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###       ("_position" M) ("_position" xt) ("_position" I) ("_position" d))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("\<^const>Correctness2.before"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I))
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M) ("_position" xt))
###     ("_position" I) ("_position" d)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("_position" xt)
###     ("\<^const>Correctness2.before" ("_position" I)
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I)))
###     ("_position" d)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/Jinja/Compiler/Correctness2.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" xt\<^sub>1)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>2)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))))
###           ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.before"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2)))
###         ("_position" I) ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>HOL.conj"
###           ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###             ("_position" M) ("_position" xt\<^sub>2)
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("_position" d))
###           ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2))
###             ("_position" I) ("_position" d)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>1) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2)))
###           ("_position" I) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.Correctness2"
### 1.000s elapsed time, 1.290s cpu time, 0.245s GC time
Loading theory "Draft.Correctness2MoreTemplates"
val templateLemmas =
   [("Correctness2.atLeast0AtMost", "{0..?n} = {..?n}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Correctness2.atLeast0LessThan", "{0..<?n} = {..<?n}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Correctness2.pcs_subset",
     "pcs (compxE\<^sub>2 ?e ?pc ?d)
      <= {?pc..<?pc + length (compE\<^sub>2 ?e)}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("Correctness2.pcs_subset",
     "pcs (compxEs\<^sub>2 ?es ?pc ?d)
      <= {?pc..<?pc + length (compEs\<^sub>2 ?es)}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("Correctness2.beforexD1",
     "?P,?C,?M \<rhd> ?xt / ?I,?d ==> pcs ?xt <= ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Correctness2.aux_isin", "[| ?B <= ?A; ?a : ?B |] ==> ?a : ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Correctness2.beforex_mono",
     "[| ?P,?C,?M \<rhd> ?xt / ?I,?d'; ?d' <= ?d |]
      ==> ?P,?C,?M \<rhd> ?xt / ?I,?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Correctness2.beforeM",
     "?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = ?body in ?D ==>
      compP\<^sub>2 ?P,?D,?M,0 \<rhd> compE\<^sub>2 ?body @ [Return]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 6)),
                   template_var 0),
                 template_var 4),
               template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Correctness2.beforexM",
     "?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = ?body in ?D ==>
      compP\<^sub>2 ?P,?D,?M \<rhd> compxE\<^sub>2 ?body 0 0 
        / {..<length (compE\<^sub>2 ?body)},0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 6)),
                     template_var 0),
                   template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))),
             template_hole 3)
           ))),
    ("Correctness2.match_ex_table_app",
     "ALL xte:set ?xt\<^sub>1. ~ matches_ex_entry ?P ?D ?pc xte ==>
      match_ex_table ?P ?D ?pc (?xt\<^sub>1 @ ?xt) =
      match_ex_table ?P ?D ?pc ?xt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Correctness2.match_ex_entry",
     "matches_ex_entry ?P ?C ?pc (?start, ?end, ?catch_type, ?handler) =
      (?start <= ?pc &
       ?pc < ?end & ?P \<turnstile> ?C \<preceq>\<^sup>* ?catch_type)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app (template_hole 9, template_var 3),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 4)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 6))))))),
    ("Correctness2.match_ex_table_SomeD1",
     "[| match_ex_table ?P ?D ?pc (ex_table_of ?P ?C ?M) =
         \<lfloor>(?pc', ?d')\<rfloor>;
         ?P,?C,?M \<rhd> ?xt / ?I,?d; ?pc : ?I; ?pc ~: pcs ?xt |]
      ==> ?d' <= ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 14, template_var 9),
                template_var 8),
              template_var 7),
            template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_app
                           (template_app (template_hole 7, template_var 9),
                            template_var 6),
                          template_var 5)))))))),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 9),
                      template_var 6),
                    template_var 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 7),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 7),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_inequation (less_equals, template_var 3, template_var 0))),
    ("Correctness2.comp\<^sub>2_correct",
     "[| ?P\<^sub>1 \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = ?body in ?C;
         ?P\<^sub>1 \<turnstile>\<^sub>1 \<langle>?body,
    (?h, ?ls)\<rangle> \<Rightarrow>
   \<langle>?e',(?h', ?ls')\<rangle> |]
      ==> compP\<^sub>2 ?P\<^sub>1 |-
          (None, ?h, [([], ?ls, ?C, ?M, 0)]) -jvm->
          (exception ?e', ?h', [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 10),
                        template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 15, template_var 10),
                    template_var 5),
                  template_app
                   (template_app (template_hole 14, template_var 4),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 10)),
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_hole 6),
                         template_app
                          (template_app (template_hole 5, template_var 3),
                           template_app
                            (template_app (template_hole 4, template_var 9),
                             template_app
                              (template_app
                                (template_hole 3, template_var 8),
                               template_hole 2))))),
                     template_hole 1)))),
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_hole 1)))
           ))),
    ("Correctness2.beforex_appendD1",
     "[| ?P,?C,?M \<rhd> ?xt\<^sub>1 @ ?xt\<^sub>2 @ [(?f, ?t, ?D, ?h, ?d)] 
           / ?I,?d;
         pcs ?xt\<^sub>1 <= ?J; ?J <= ?I; ?J Int pcs ?xt\<^sub>2 = {} |]
      ==> ?P,?C,?M \<rhd> ?xt\<^sub>1 / ?J,?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_app
                   (template_app (template_hole 11, template_var 8),
                    template_app
                     (template_app (template_hole 11, template_var 7),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 6),
                            template_app
                             (template_app
                               (template_hole 8, template_var 5),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 4),
                                template_app
                                 (template_app
                                   (template_hole 6, template_var 3),
                                  template_var 2))))),
                        template_hole 5)))),
                template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 8),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0),
            template_app (template_hole 3, template_var 7)),
          template_hole 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, template_var 11),
                     template_var 10),
                   template_var 9),
                 template_var 8),
               template_var 0),
             template_var 2)
           ))),
    ("Correctness2.beforex_appendD2",
     "[| ?P,?C,?M \<rhd> ?xt\<^sub>1 @ ?xt\<^sub>2 @ [(?f, ?t, ?D, ?h, ?d)] 
           / ?I,?d;
         pcs ?xt\<^sub>2 <= ?J; ?J <= ?I; ?J Int pcs ?xt\<^sub>1 = {} |]
      ==> ?P,?C,?M \<rhd> ?xt\<^sub>2 / ?J,?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_app
                   (template_app (template_hole 11, template_var 8),
                    template_app
                     (template_app (template_hole 11, template_var 7),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 6),
                            template_app
                             (template_app
                               (template_hole 8, template_var 5),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 4),
                                template_app
                                 (template_app
                                   (template_hole 6, template_var 3),
                                  template_var 2))))),
                        template_hole 5)))),
                template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 7),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0),
            template_app (template_hole 3, template_var 8)),
          template_hole 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, template_var 11),
                     template_var 10),
                   template_var 9),
                 template_var 7),
               template_var 0),
             template_var 2)
           ))),
    ("Correctness2.beforex_append",
     "pcs ?xt\<^sub>1 Int pcs ?xt\<^sub>2 = {} ==>
      (?P,?C,?M \<rhd> ?xt\<^sub>1 @ ?xt\<^sub>2 / ?I,?d) =
      (?P,?C,?M \<rhd> ?xt\<^sub>1 / ?I - pcs ?xt\<^sub>2,?d &
       ?P,?C,?M \<rhd> ?xt\<^sub>2 / ?I - pcs ?xt\<^sub>1,?d &
       ?P,?C,?M \<triangleright> ?xt\<^sub>1 @ ?xt\<^sub>2 /?I,?d)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 6)),
            template_app (template_hole 7, template_var 5)),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 6),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 7, template_var 5))),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 4, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 5),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 7, template_var 6))),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 6),
                     template_var 5)),
                 template_var 1),
               template_var 0)))))),
    ("Correctness2.handle_append",
     "[| ?P,?C,?M \<rhd> ?xt / ?I,?d; ?d <= length ?vs; ?pc : ?I;
         ?pc ~: pcs ?xt |]
      ==> handle ?P ?C ?M ?xa ?h (?ws @ ?vs) ?ls ?pc ?frs =
          handle ?P ?C ?M ?xa ?h ?vs ?ls ?pc ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 12),
                      template_var 11),
                    template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_inequation
         (less_equals, template_var 7,
          template_app (template_hole 6, template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 8)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app (template_hole 3, template_var 9))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 12),
                         template_var 11),
                       template_var 10),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 6)),
               template_var 1),
             template_var 5),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 12),
                         template_var 11),
                       template_var 10),
                     template_var 4),
                   template_var 3),
                 template_var 6),
               template_var 1),
             template_var 5),
           template_var 0)))),
    ("Correctness2.match_ex_table_SomeD2",
     "[| match_ex_table ?P ?D ?pc (ex_table_of ?P ?C ?M) =
         \<lfloor>(?pc', ?d')\<rfloor>;
         ?P,?C,?M \<rhd> ?xt / ?I,?d;
         ALL x:set ?xt. ~ matches_ex_entry ?P ?D ?pc x; ?pc : ?I |]
      ==> ?d' <= ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 16, template_var 9),
                template_var 8),
              template_var 7),
            template_app
             (template_hole 15,
              template_app
               (template_hole 14,
                template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_app (template_hole 9, template_var 9),
                            template_var 6),
                          template_var 5)))))))),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 9),
                      template_var 6),
                    template_var 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 7),
              template_var 1)
            )],
       template_inequation (less_equals, template_var 3, template_var 0))),
    ("Correctness2.handle_Cons",
     "[| ?P,?C,?M \<rhd> ?xt / ?I,?d; ?d <= length ?vs; ?pc : ?I;
         ALL x:set ?xt. ~ matches_ex_entry ?P (cname_of ?h ?xa) ?pc x |]
      ==> handle ?P ?C ?M ?xa ?h (?v # ?vs) ?ls ?pc ?frs =
          handle ?P ?C ?M ?xa ?h ?vs ?ls ?pc ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 12),
                      template_var 11),
                    template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_inequation
         (less_equals, template_var 7,
          template_app (template_hole 10, template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 9)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 12),
                         template_var 11),
                       template_var 10),
                     template_var 3),
                   template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 6)),
               template_var 1),
             template_var 5),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 12),
                         template_var 11),
                       template_var 10),
                     template_var 3),
                   template_var 4),
                 template_var 6),
               template_var 1),
             template_var 5),
           template_var 0)))),
    ("Correctness2.Jcc",
     "[| ?P\<^sub>1 \<turnstile>\<^sub>1 \<langle>?e,
    (?h\<^sub>0, ?ls\<^sub>0)\<rangle> \<Rightarrow>
   \<langle>?ef,(?h\<^sub>1, ?ls\<^sub>1)\<rangle>;
         compP\<^sub>2 ?P\<^sub>1,?C,?M,?pc \<rhd> compE\<^sub>2 ?e;
         compP\<^sub>2 ?P\<^sub>1,?C,?M \<rhd>
           compxE\<^sub>2 ?e ?pc (length ?vs) / ?I,length ?vs;
         {?pc..<?pc + length (compE\<^sub>2 ?e)} <= ?I |]
      ==> (?ef = Val ?v --> compP\<^sub>2 ?P\<^sub>1 |-
           (None, ?h\<^sub>0, (?vs, ?ls\<^sub>0, ?C, ?M, ?pc) # ?frs) -jvm->
           (None, ?h\<^sub>1,
            (?v # ?vs, ?ls\<^sub>1, ?C, ?M,
             ?pc + length (compE\<^sub>2 ?e)) #
            ?frs)) &
          (?ef = Throw ?xa -->
           (EX pc\<^sub>1>=?pc.
               pc\<^sub>1 < ?pc + length (compE\<^sub>2 ?e) &
               ~ caught (compP\<^sub>2 ?P\<^sub>1) pc\<^sub>1 ?h\<^sub>1 ?xa
                  (compxE\<^sub>2 ?e ?pc (length ?vs)) &
               compP\<^sub>2 ?P\<^sub>1 |-
               (None, ?h\<^sub>0,
                (?vs, ?ls\<^sub>0, ?C, ?M, ?pc) # ?frs) -jvm->
               handle (compP\<^sub>2 ?P\<^sub>1) ?C ?M ?xa ?h\<^sub>1 ?vs
                ?ls\<^sub>1 pc\<^sub>1 ?frs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 33, template_var 14),
                    template_var 13),
                  template_app
                   (template_app (template_hole 32, template_var 12),
                    template_var 11)),
                template_var 10),
              template_app
               (template_app (template_hole 32, template_var 9),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 31,
                      template_app (template_hole 30, template_var 14)),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app (template_hole 29, template_var 13))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 28,
                        template_app (template_hole 30, template_var 14)),
                      template_var 7),
                    template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 27, template_var 13),
                      template_var 5),
                    template_app (template_hole 26, template_var 4))),
                template_var 3),
              template_app (template_hole 26, template_var 4))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 24, template_var 5),
            template_app
             (template_app (template_hole 23, template_var 5),
              template_app
               (template_hole 22,
                template_app (template_hole 29, template_var 13)))),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_app (template_hole 19, template_var 10),
                     template_app (template_hole 18, template_var 2))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 17,
                       template_app (template_hole 30, template_var 14)),
                     template_app
                      (template_app (template_hole 16, template_hole 15),
                       template_app
                        (template_app (template_hole 14, template_var 12),
                         template_app
                          (template_app
                            (template_hole 13,
                             template_app
                              (template_app
                                (template_hole 12, template_var 4),
                               template_app
                                (template_app
                                  (template_hole 11, template_var 11),
                                 template_app
                                  (template_app
                                    (template_hole 10, template_var 7),
                                   template_app
                                    (template_app
(template_hole 9, template_var 6),
                                     template_var 5))))),
                           template_var 1)))),
                   template_app
                    (template_app (template_hole 16, template_hole 15),
                     template_app
                      (template_app (template_hole 14, template_var 9),
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_app
                                  (template_hole 8, template_var 2),
                                 template_var 4)),
                             template_app
                              (template_app
                                (template_hole 11, template_var 8),
                               template_app
                                (template_app
                                  (template_hole 10, template_var 7),
                                 template_app
                                  (template_app
                                    (template_hole 9, template_var 6),
                                   template_app
                                    (template_app
(template_hole 23, template_var 5),
                                     template_app
(template_hole 22, template_app (template_hole 29, template_var 13)))))))),
                         template_var 1)))))),
             template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app (template_hole 19, template_var 10),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 18,
                       template_app (template_hole 6, template_var 0))))),
               template_app (template_hole 5, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.Correctness2MoreTemplates"
### 0.453s elapsed time, 0.736s cpu time, 0.123s GC time
val it = (): unit
