Loading theory "Draft.Auxiliary" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Auxiliary"
### 0.110s elapsed time, 0.456s cpu time, 0.037s GC time
Loading theory "Draft.Type" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.114s elapsed time, 0.474s cpu time, 0.037s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.186s elapsed time, 0.760s cpu time, 0.037s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.383s elapsed time, 1.534s cpu time, 0.142s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
consts
  prefixes :: "'a list => 'a list list"
### theory "HOL-Library.Transitive_Closure_Table"
### 0.297s elapsed time, 1.167s cpu time, 0.163s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Type"
### 0.398s elapsed time, 1.568s cpu time, 0.163s GC time
Loading theory "Draft.Decl" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.053s elapsed time, 0.205s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Methods"
consts
  suffixes :: "'a list => 'a list list"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Proofs for inductive predicate(s) "list_emb"
consts
  sdrop :: "nat => 'a stream => 'a stream"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.130s elapsed time, 4.277s cpu time, 0.951s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.661s elapsed time, 6.377s cpu time, 1.113s GC time
Loading theory "List-Index.List_Index" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1" via "Draft.Hidden")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.435s elapsed time, 5.487s cpu time, 0.997s GC time
Loading theory "Draft.Value" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.425s elapsed time, 1.666s cpu time, 0.173s GC time
Loading theory "Draft.Hidden" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
### theory "Draft.Hidden"
### 0.048s elapsed time, 0.193s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.850s elapsed time, 3.350s cpu time, 0.304s GC time
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.518s elapsed time, 1.804s cpu time, 0.241s GC time
Loading theory "Draft.Objects" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
Found termination order: "size <*mlex*> {}"
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Draft.Objects"
### 0.119s elapsed time, 0.243s cpu time, 0.000s GC time
Loading theory "Draft.Exceptions" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
### theory "Draft.JVMState"
### 0.034s elapsed time, 0.101s cpu time, 0.000s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "HOL-Library.Tree"
### 2.217s elapsed time, 8.044s cpu time, 1.284s GC time
Loading theory "Draft.Templates" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Exceptions"
### 0.098s elapsed time, 0.296s cpu time, 0.046s GC time
Loading theory "Draft.Expr" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WWellForm")
Loading theory "Draft.State" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.DefAss" via "Draft.BigStep")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.208s cpu time, 0.000s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm")
### theory "Draft.State"
### 0.046s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CompilerMoreTemplates")
### theory "Draft.SystemClasses"
### 0.050s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
### theory "Draft.WellForm"
### 0.261s elapsed time, 1.022s cpu time, 0.103s GC time
Loading theory "Draft.PCompiler" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
### theory "Draft.PCompiler"
### 0.221s elapsed time, 0.858s cpu time, 0.126s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.710s elapsed time, 2.611s cpu time, 0.283s GC time
### theory "Draft.JVMInstructions"
### 1.674s elapsed time, 5.155s cpu time, 1.422s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec")
Loading theory "Draft.JVMExecInstr" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec")
consts
  match_ex_table ::
    "(char list *
      char list *
      (char list * ty) list * (char list * ty list * ty * 'm) list) list
     => char list
        => nat
           => (nat * nat * char list * nat * nat) list
              => (nat * nat) option"
consts
  find_handler ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => nat
        => (nat
            => (char list * (char list * char list => val option)) option)
           => (val list * val list * char list * char list * nat) list
              => nat option *
                 (nat
                  => (char list *
                      (char list * char list => val option)) option) *
                 (val list * val list * char list * char list * nat) list"
### theory "Draft.JVMExceptions"
### 0.173s elapsed time, 0.530s cpu time, 0.028s GC time
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
### theory "Draft.JVMExecInstr"
### 0.381s elapsed time, 0.954s cpu time, 0.057s GC time
Loading theory "Draft.JVMExec" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2")
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 0.933s elapsed time, 2.367s cpu time, 1.229s GC time
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 4.097s elapsed time, 9.585s cpu time, 2.804s GC time
Loading theory "Draft.BigStep" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.DefAss")
Loading theory "Draft.WellType" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
Loading theory "Draft.WWellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
### Ambiguous input (line 63 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ambiguous input (line 83 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/Jinja/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WWellForm"
### 0.153s elapsed time, 0.516s cpu time, 0.042s GC time
### Ambiguous input (line 175 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 150 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 153 of "$AFP/Jinja/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 168 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.521s elapsed time, 1.291s cpu time, 0.080s GC time
### Ambiguous input (line 204 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 1.776s elapsed time, 2.856s cpu time, 0.231s GC time
Loading theory "Draft.DefAss" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
Loading theory "Draft.J1" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm")
### Ambiguous input (line 25 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_vars)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_vars)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_vars :: "'a exp => nat"
  max_varss :: "'a exp list => nat"
### Ambiguous input (line 86 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_applC" ("_position" ls)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss" ("_position" i)
###                   ("_position" v)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_LUpdate" ("_position" ls)
###               ("_lupdbind" ("_position" i) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/Jinja/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" ls\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_LUpdate" ("_position" ls\<^sub>1)
###                       ("_lupdbind" ("_position" i)
###                         ("_applC" ("_position" Addr) ("_position" a))))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_arg" ("_position" ls\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg" ("_position" ls\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" ls\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" ls\<^sub>1)
###                       ("_list"
###                         ("\<^const>Expr.exp.LAss" ("_position" i)
###                           ("_applC" ("_position" Addr) ("_position" a)))))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_arg" ("_position" ls\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg" ("_position" ls\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<A> :: "'a exp => 'a set option"
  \<A>s :: "'a exp list => 'a set option"
### Ambiguous input (line 95 of "$AFP/Jinja/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "'a exp => 'a set option => bool"
  \<D>s :: "'a exp list => 'a set option => bool"
### theory "Draft.DefAss"
### 0.187s elapsed time, 0.448s cpu time, 0.046s GC time
Loading theory "Draft.JWellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm")
Proofs for inductive predicate(s) "eval\<^sub>1", "evals\<^sub>1"
  Proving monotonicity ...
### Ambiguous input (line 15 of "$AFP/Jinja/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T)
###           ("_pattern" ("_position" pns) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>HOL.conj"
###                 ("\<^const>WellType.WT" ("_position" P)
###                   ("_Map"
###                     ("_Maplets"
###                       ("_maplet" ("_position" this)
###                         ("_applC" ("_position" Class) ("_position" C)))
###                       ("_maplets" ("_position" pns) ("_position" Ts))))
###                   ("_position" body) ("_position" T'))
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T)
###           ("_pattern" ("_position" pns) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body)
###                 ("\<^const>HOL.conj" ("_position" T')
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T)))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Jinja/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_args" ("_position" pns)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" this)
###           ("_applC" ("_position" set) ("_position" pns)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>WellType.WT" ("_position" P)
###               ("_Map"
###                 ("_Maplets"
###                   ("_maplet" ("_position" this)
###                     ("_applC" ("_position" Class) ("_position" C)))
###                   ("_maplets" ("_position" pns) ("_position" Ts))))
###               ("_position" body)
###               ("\<^const>HOL.conj" ("_position" T')
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T)))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_Finset" ("_position" this))
###                   ("_applC" ("_position" set) ("_position" pns)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_args" ("_position" pns)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" this)
###           ("_applC" ("_position" set) ("_position" pns)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>HOL.conj"
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body) ("_position" T'))
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_Finset" ("_position" this))
###                   ("_applC" ("_position" set) ("_position" pns)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JWellForm"
### 0.284s elapsed time, 0.580s cpu time, 0.031s GC time
### theory "Draft.J1"
### 0.907s elapsed time, 1.510s cpu time, 0.138s GC time
Loading theory "Draft.Compiler2" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2")
Loading theory "Draft.J1WellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1")
Loading theory "Draft.Compiler1" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1")
### Ambiguous input (line 57 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT\<^sub>1", "WTs\<^sub>1"
  Proving monotonicity ...
### Ambiguous input (line 20 of "$AFP/Jinja/Compiler/Compiler1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e)))
###       ("_position" F) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###             ("_position" D))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e))))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Jinja/Compiler/Compiler1.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                 ("_position" F) ("_position" D))
###               ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D))
###             ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D) ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compE\<^sub>1 :: "char list list => char list exp => nat exp"
  compEs\<^sub>1 :: "char list list => char list exp list => nat exp list"
### Ambiguous input (line 21 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "new"
### No equation for constructor "Cast"
### No equation for constructor "BinOp"
### No equation for constructor "Var"
### No equation for constructor "LAss"
### No equation for constructor "FAcc"
### No equation for constructor "FAss"
### No equation for constructor "Call"
### No equation for constructor "Block"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "TryCatch"
consts
  fin\<^sub>1 :: "char list exp => nat exp"
### theory "Draft.Compiler1"
### 0.326s elapsed time, 1.019s cpu time, 0.100s GC time
consts
  compE\<^sub>2 :: "nat exp => instr list"
  compEs\<^sub>2 :: "nat exp list => instr list"
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ambiguous input (line 62 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compxE\<^sub>2 ::
    "nat exp => nat => nat => (nat * nat * char list * nat * nat) list"
  compxEs\<^sub>2 ::
    "nat exp list => nat => nat => (nat * nat * char list * nat * nat) list"
### Ambiguous input (line 116 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_stack :: "nat exp => nat"
  max_stacks :: "nat exp list => nat"
### theory "Draft.Compiler2"
### 0.495s elapsed time, 1.482s cpu time, 0.158s GC time
Loading theory "Draft.Correctness2" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler")
### Ambiguous input (line 182 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<B> :: "nat exp => nat => bool"
  \<B>s :: "nat exp list => nat => bool"
### Ambiguous input (line 197 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T) ("_position" body))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Class) ("_position" C))
###               ("_position" Ts))
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T) ("_position" body))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_arg" ("_position" body))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###         ("_position" body)
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Option.option.Some"
###             ("\<^const>Set_Interval.ord_class.atMost"
###               ("_applC" ("_position" size) ("_position" Ts))))))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" size) ("_position" Ts))
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_arg" ("_position" body))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###           ("_position" body) ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Option.option.Some"
###             ("\<^const>Set_Interval.ord_class.atMost"
###               ("_applC" ("_position" size) ("_position" Ts))))))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" size) ("_position" Ts))
###             ("\<^const>Groups.one_class.one")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1WellForm"
### 0.735s elapsed time, 2.048s cpu time, 0.261s GC time
Loading theory "Draft.Correctness1" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler")
### Ambiguous input (line 206 of "$AFP/Jinja/Compiler/Correctness2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###       ("_position" xt) ("_position" I) ("_position" d))
###     ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###       ("_position" M) ("_position" xt) ("_position" I) ("_position" d))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("\<^const>Correctness2.before"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I))
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M) ("_position" xt))
###     ("_position" I) ("_position" d)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("_position" xt)
###     ("\<^const>Correctness2.before" ("_position" I)
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I)))
###     ("_position" d)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Jinja/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  unmod :: "nat exp => nat => bool"
  unmods :: "nat exp list => nat => bool"
### Ambiguous input (line 231 of "$AFP/Jinja/Compiler/Correctness2.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" xt\<^sub>1)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>2)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))))
###           ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.before"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2)))
###         ("_position" I) ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>HOL.conj"
###           ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###             ("_position" M) ("_position" xt\<^sub>2)
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("_position" d))
###           ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2))
###             ("_position" I) ("_position" d)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>1) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2)))
###           ("_position" I) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Jinja/Compiler/Correctness1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_applC" ("_position" ys)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" last_index)
###                     ("_cargs" ("_position" xs) ("_position" x)))
###                   ("_position" y))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_LUpdate" ("_position" ys)
###               ("_lupdbind"
###                 ("_applC" ("_position" last_index)
###                   ("_cargs" ("_position" xs) ("_position" x)))
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Jinja/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_applC" ("_position" l')
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_Update" ("_position" l')
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Correctness1"
### 0.301s elapsed time, 0.626s cpu time, 0.053s GC time
Found termination order: "{}"
### theory "Draft.Correctness2"
### 1.108s elapsed time, 1.976s cpu time, 0.356s GC time
Loading theory "Draft.Compiler" (required by "Draft.CompilerMoreTemplates")
### theory "Draft.Compiler"
### 0.189s elapsed time, 0.259s cpu time, 0.053s GC time
Loading theory "Draft.CompilerMoreTemplates"
val templateLemmas =
   [("Compiler2.max_stack1", "1 <= max_stack ?e",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Compiler1.comp_final",
     "final ?e ==> compE\<^sub>1 ?Vs ?e = fin\<^sub>1 ?e",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("PCompiler.compP_widen",
     "compP ?f ?P \<turnstile> ?T \<le> ?T' = ?P \<turnstile> ?T \<le> ?T'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Compiler2.compMb\<^sub>2",
     "compMb\<^sub>2 ?e =
      (max_stack ?e, max_vars ?e, compE\<^sub>2 ?e @ [Return],
       compxE\<^sub>2 ?e 0 0)",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_hole 0)))))),
    ("PCompiler.sees_method_compP",
     "?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = ?m in ?D ==>
      compP ?f
       ?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = ?f ?m in ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 7)),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app (template_var 0, template_var 2)),
             template_var 1)
           ))),
    ("PCompiler.class_compP",
     "class ?P ?C = \<lfloor>(?D, ?fs, ?ms)\<rfloor> ==>
      class (compP ?f ?P) ?C =
      \<lfloor>(?D, ?fs, map (compM ?f) ?ms)\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 5),
            template_var 4),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 5)),
           template_var 4),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1))))))),
    ("PCompiler.sees_method_compPD",
     "compP ?f
       ?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = ?fm in ?D ==>
      EX m. ?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = m in ?D &
            ?f m = ?fm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 7),
                            template_var 6)),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("PCompiler.sees_methods_compP",
     "?P \<turnstile> ?C sees_methods ?Mm ==>
      compP ?f
       ?P \<turnstile> ?C sees_methods map_option
  (%((Ts, T, m), D). ((Ts, T, ?f m), D)) o
 ?Mm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, t_empty)))),
               template_var 1))
           ))),
    ("PCompiler.set_compP",
     "((?C, ?D, ?fs, ?ms') : set (compP ?f ?P)) =
      (EX ms. (?C, ?D, ?fs, ms) : set ?P & ?ms' = map (compM ?f) ms)",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 5),
             template_app
              (template_app (template_hole 13, template_var 4),
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_var 2)))),
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0))),
       template_app (template_hole 9, t_empty))),
    ("PCompiler.class_compPD",
     "class (compP ?f ?P) ?C = \<lfloor>(?D, ?fs, ?cms)\<rfloor> ==>
      EX ms.
         class ?P ?C = \<lfloor>(?D, ?fs, ms)\<rfloor> &
         ?cms = map (compM ?f) ms",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4)),
            template_var 3),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("PCompiler.map_of_map4",
     "map_of (map (%(x, a, b, c). (x, a, b, ?f c)) ?ts) =
      map_option (%(a, b, c). (a, b, ?f c)) o map_of ?ts",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_app (template_hole 0, template_var 0)))),
    ("PCompiler.sees_methods_compPD",
     "[| ?cP \<turnstile> ?C sees_methods ?Mm'; ?cP = compP ?f ?P |]
      ==> EX Mm.
             ?P \<turnstile> ?C sees_methods Mm &
             ?Mm' = map_option (%((Ts, T, m), D). ((Ts, T, ?f m), D)) o Mm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 12, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("PCompiler.wf_prog_compPI",
     "[| !!C M Ts T m.
            [| ?P \<turnstile> C sees M: Ts\<rightarrow>T = m in C;
               wf_mdecl ?wf\<^sub>1 ?P C (M, Ts, T, m) |]
            ==> wf_mdecl ?wf\<^sub>2 (compP ?f ?P) C (M, Ts, T, ?f m);
         wf_prog ?wf\<^sub>1 ?P |]
      ==> wf_prog ?wf\<^sub>2 (compP ?f ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 3))
           ))),
    ("Compiler.comp_correct",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = (?pns,
                     ?body) in ?C;
         ?P \<turnstile> \<langle>?body,
                          (?h,
                           [this # ?pns [|->] ?vs])\<rangle> \<Rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle>;
         length ?vs = length ?pns + 1; length ?rest = max_vars ?body |]
      ==> J2JVM ?P |- (None, ?h, [([], ?vs @ ?rest, ?C, ?M, 0)]) -jvm->
          (exception ?e', ?h', [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 30, template_hole 29),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 28, template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_app
                 (template_app (template_hole 27, template_var 7),
                  template_var 6)),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 26, template_var 12),
                    template_var 6),
                  template_app
                   (template_app (template_hole 25, template_var 5),
                    template_app
                     (template_app
                       (template_app (template_hole 24, t_empty),
                        template_app
                         (template_app (template_hole 22, template_hole 21),
                          template_var 7)),
                      template_var 4))),
                template_var 3),
              template_app
               (template_app (template_hole 25, template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 19, template_var 4),
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 7)),
            template_hole 16)),
        template_equation
         (template_app (template_hole 19, template_var 0),
          template_app (template_hole 15, template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app (template_hole 13, template_var 12)),
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app (template_hole 10, template_var 5),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 4),
                               template_var 0)),
                           template_app
                            (template_app
                              (template_hole 4, template_var 11),
                             template_app
                              (template_app
                                (template_hole 3, template_var 10),
                               template_hole 2))))),
                     template_hole 1)))),
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 0, template_var 3)),
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_hole 1)))
           ))),
    ("PCompiler.wf_cdecl_compPI",
     "[| !!C M Ts T m.
            [| wf_mdecl ?wf\<^sub>1 ?P C (M, Ts, T, m);
               ?P \<turnstile> C sees M: Ts\<rightarrow>T = m in C |]
            ==> wf_mdecl ?wf\<^sub>2 (compP ?f ?P) C (M, Ts, T, ?f m);
         ALL x:set ?P. wf_cdecl ?wf\<^sub>1 ?P x; ?x : set (compP ?f ?P);
         wf_prog ?p ?P |]
      ==> wf_cdecl ?wf\<^sub>2 (compP ?f ?P) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 4)),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.CompilerMoreTemplates"
### 0.433s elapsed time, 0.653s cpu time, 0.076s GC time
val it = (): unit
