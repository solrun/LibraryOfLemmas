   [("Decl.finite_is_class", "finite {C. is_class ?P C}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Decl.is_type_simps",
     "is_type ?P Void &
      is_type ?P Boolean &
      is_type ?P Integer &
      is_type ?P NT & is_type ?P (Class ?C) = is_class ?P ?C",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_hole 6)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app (template_hole 1, template_var 0))),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))))))
         ))]
