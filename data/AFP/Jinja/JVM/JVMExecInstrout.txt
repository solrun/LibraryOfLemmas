Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Auxiliary" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Auxiliary"
### 0.106s elapsed time, 0.449s cpu time, 0.035s GC time
Loading theory "Draft.Type" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.526s cpu time, 0.035s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.879s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.287s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.274s elapsed time, 1.083s cpu time, 0.076s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Type"
### 0.397s elapsed time, 1.561s cpu time, 0.151s GC time
Loading theory "Draft.Decl" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.052s elapsed time, 0.209s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "Fields"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 4.146s cpu time, 0.922s GC time
Found termination order: "size <*mlex*> {}"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
### theory "HOL-Library.BigO"
### 1.040s elapsed time, 3.932s cpu time, 0.922s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.332s elapsed time, 4.282s cpu time, 0.960s GC time
Loading theory "Draft.Value" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
### theory "HOL-Library.Tree"
### 2.011s elapsed time, 6.324s cpu time, 1.166s GC time
Loading theory "Draft.Templates" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.ExtrEqs")
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.348s elapsed time, 0.725s cpu time, 0.055s GC time
Loading theory "Draft.Objects" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JVMExecInstrMoreTemplates")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Draft.Objects"
### 0.129s elapsed time, 0.284s cpu time, 0.062s GC time
Loading theory "Draft.Exceptions" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr")
Loading theory "Draft.JVMState" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
### theory "Draft.JVMState"
### 0.023s elapsed time, 0.070s cpu time, 0.000s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.JVMExecInstrMoreTemplates" via "Draft.JVMExecInstr")
### theory "Draft.Exceptions"
### 0.079s elapsed time, 0.237s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.565s elapsed time, 1.300s cpu time, 0.200s GC time
### theory "Draft.JVMInstructions"
### 1.019s elapsed time, 1.624s cpu time, 0.178s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.JVMExecInstrMoreTemplates")
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
### theory "Draft.JVMExecInstr"
### 0.310s elapsed time, 0.353s cpu time, 0.047s GC time
Loading theory "Draft.JVMExecInstrMoreTemplates"
val templateLemmas =
   [("JVMExecInstr.exec_instr_IPop",
     "exec_instr Pop ?P ?h (?v # ?stk) ?loc ?C\<^sub>0 ?M\<^sub>0 ?pc ?frs =
      (None, ?h, (?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0, ?pc + 1) # ?frs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_var 8),
                     template_var 7),
                   template_app
                    (template_app (template_hole 10, template_var 6),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app (template_hole 7, template_var 7),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0)))))),
             template_var 0))))),
    ("JVMExecInstr.exec_instr_Store",
     "exec_instr (Store ?n) ?P ?h (?v # ?stk) ?loc ?C\<^sub>0 ?M\<^sub>0 ?pc
       ?frs =
      (None, ?h,
       (?stk, ?loc[?n := ?v], ?C\<^sub>0, ?M\<^sub>0, ?pc + 1) # ?frs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 13,
                         template_app (template_hole 12, template_var 9)),
                       template_var 8),
                     template_var 7),
                   template_app
                    (template_app (template_hole 11, template_var 6),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 10, template_hole 9),
         template_app
          (template_app (template_hole 8, template_var 7),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 4),
                         template_var 9),
                       template_var 6)),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0)))))),
             template_var 0))))),
    ("JVMExecInstr.exec_instr_CmpEq",
     "exec_instr CmpEq ?P ?h (?v\<^sub>2 # ?v\<^sub>1 # ?stk) ?loc
       ?C\<^sub>0 ?M\<^sub>0 ?pc ?frs =
      (None, ?h,
       (Bool (?v\<^sub>1 = ?v\<^sub>2) # ?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0,
        ?pc + 1) #
       ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 14, template_hole 13),
                            template_var 9),
                          template_var 8),
                        template_app
                         (template_app (template_hole 12, template_var 7),
                          template_app
                           (template_app (template_hole 12, template_var 6),
                            template_var 5))),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_app
              (template_app (template_hole 9, template_var 8),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 6),
                               template_var 7))),
                         template_var 5)),
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_hole 0)))))),
                 template_var 0)))
           ))),
    ("JVMExecInstr.exec_instr_IAdd",
     "exec_instr IAdd ?P ?h (Intg ?i\<^sub>2 # Intg ?i\<^sub>1 # ?stk) ?loc
       ?C\<^sub>0 ?M\<^sub>0 ?pc ?frs =
      (None, ?h,
       (Intg (?i\<^sub>1 + ?i\<^sub>2) # ?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0,
        ?pc + 1) #
       ?frs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_var 9),
                     template_var 8),
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_var 7)),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app (template_hole 11, template_var 6)),
                       template_var 5))),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 10, template_hole 9),
         template_app
          (template_app (template_hole 8, template_var 8),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_app (template_hole 5, template_var 6),
                           template_var 7))),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0)))))),
             template_var 0))))),
    ("JVMExecInstr.exec_instr_Throw",
     "exec_instr Throw ?P ?h (?v # ?stk) ?loc ?C\<^sub>0 ?M\<^sub>0 ?pc
       ?frs =
      (let xp' =
             if ?v = Null
             then \<lfloor>addr_of_sys_xcpt NullPointer\<rfloor>
             else \<lfloor>the_Addr ?v\<rfloor>
       in (xp', ?h,
           (?v # ?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0, ?pc) # ?frs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 17, template_hole 16),
                            template_var 8),
                          template_var 7),
                        template_app
                         (template_app (template_hole 15, template_var 6),
                          template_var 5)),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 12, template_var 6),
                       template_hole 11)),
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_hole 8))),
                 template_app
                  (template_hole 10,
                   template_app (template_hole 7, template_var 6)))),
             t_empty)
           ))),
    ("JVMExecInstr.exec_instr_IfFalse",
     "exec_instr (IfFalse ?i) ?P ?h (?v # ?stk) ?loc ?C\<^sub>0 ?M\<^sub>0
       ?pc ?frs =
      (let pc' = if ?v = Bool False then nat (int ?pc + ?i) else ?pc + 1
       in (None, ?h, (?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0, pc') # ?frs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 20,
                              template_app
                               (template_hole 19, template_var 9)),
                            template_var 8),
                          template_var 7),
                        template_app
                         (template_app (template_hole 18, template_var 6),
                          template_var 5)),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_app
                    (template_hole 16,
                     template_app
                      (template_app (template_hole 15, template_var 6),
                       template_app (template_hole 14, template_hole 13))),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 1)),
                       template_var 9))),
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_hole 8))),
             t_empty)
           ))),
    ("JVMExecInstr.exec_instr_Checkcast",
     "exec_instr (Checkcast ?C) ?P ?h (?v # ?stk) ?loc ?C\<^sub>0 ?M\<^sub>0
       ?pc ?frs =
      (let xp' =
             if ~ cast_ok ?P ?C ?h ?v
             then \<lfloor>addr_of_sys_xcpt ClassCast\<rfloor> else None
       in (xp', ?h,
           (?v # ?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0, ?pc + 1) # ?frs))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 19,
                         template_app (template_hole 18, template_var 9)),
                       template_var 8),
                     template_var 7),
                   template_app
                    (template_app (template_hole 17, template_var 6),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 16,
           template_app
            (template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 13, template_var 8),
                         template_var 9),
                       template_var 7),
                     template_var 6))),
               template_app
                (template_hole 12,
                 template_app (template_hole 11, template_hole 10))),
             template_hole 9)),
         t_empty))),
    ("JVMExecInstr.exec_instr_Getfield",
     "exec_instr (Getfield ?F ?C) ?P ?h (?v # ?stk) ?loc ?C\<^sub>0
       ?M\<^sub>0 ?pc ?frs =
      (let xp' =
             if ?v = Null
             then \<lfloor>addr_of_sys_xcpt NullPointer\<rfloor> else None;
           (D, fs) = the (?h (the_Addr ?v))
       in (xp', ?h,
           (the (fs (?F, ?C)) # ?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0,
            ?pc + 1) #
           ?frs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 25,
                              template_app
                               (template_app
                                 (template_hole 24, template_var 10),
                                template_var 9)),
                            template_var 8),
                          template_var 7),
                        template_app
                         (template_app (template_hole 23, template_var 6),
                          template_var 5)),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 22,
               template_app
                (template_app
                  (template_app
                    (template_hole 21,
                     template_app
                      (template_app (template_hole 20, template_var 6),
                       template_hole 19)),
                   template_app
                    (template_hole 18,
                     template_app (template_hole 17, template_hole 16))),
                 template_hole 15)),
             t_empty)
           ))),
    ("JVMExecInstr.exec_instr_Return",
     "exec_instr Return ?P ?h (?v # ?stk\<^sub>0) ?loc\<^sub>0 ?C\<^sub>0
       ?M\<^sub>0 ?pc ?frs =
      (if ?frs = [] then (None, ?h, [])
       else let (stk, loc, C, m, pc) = hd ?frs;
                n = length (fst (snd (method ?P ?C\<^sub>0 ?M\<^sub>0)))
            in (None, ?h,
                (?v # drop (n + 1) stk, loc, C, m, pc + 1) # tl ?frs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 28, template_hole 27),
                            template_var 8),
                          template_var 7),
                        template_app
                         (template_app (template_hole 26, template_var 6),
                          template_var 5)),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 25,
                 template_app
                  (template_app (template_hole 24, template_var 0),
                   template_hole 23)),
               template_app
                (template_app (template_hole 22, template_hole 21),
                 template_app
                  (template_app (template_hole 20, template_var 7),
                   template_hole 23))),
             template_app
              (template_app
                (template_hole 19,
                 template_app (template_hole 18, template_var 0)),
               template_app (template_hole 17, t_empty)))
           ))),
    ("JVMExecInstr.exec_instr_Putfield",
     "exec_instr (Putfield ?F ?C) ?P ?h (?v # ?r # ?stk) ?loc ?C\<^sub>0
       ?M\<^sub>0 ?pc ?frs =
      (let xp' =
             if ?r = Null
             then \<lfloor>addr_of_sys_xcpt NullPointer\<rfloor> else None;
           a = the_Addr ?r; (D, fs) = the (?h a);
           h' = ?h(a |-> (D, fs((?F, ?C) |-> ?v)))
       in (xp', h', (?stk, ?loc, ?C\<^sub>0, ?M\<^sub>0, ?pc + 1) # ?frs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 31,
                              template_app
                               (template_app
                                 (template_hole 30, template_var 11),
                                template_var 10)),
                            template_var 9),
                          template_var 8),
                        template_app
                         (template_app (template_hole 29, template_var 7),
                          template_app
                           (template_app (template_hole 29, template_var 6),
                            template_var 5))),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 28,
               template_app
                (template_app
                  (template_app
                    (template_hole 27,
                     template_app
                      (template_app (template_hole 26, template_var 6),
                       template_hole 25)),
                   template_app
                    (template_hole 24,
                     template_app (template_hole 23, template_hole 22))),
                 template_hole 21)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.JVMExecInstrMoreTemplates"
### 0.333s elapsed time, 0.467s cpu time, 0.047s GC time
val it = (): unit
