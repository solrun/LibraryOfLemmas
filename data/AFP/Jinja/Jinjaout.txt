Loading theory "Draft.Auxiliary" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.execute_Bigstep" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.execute_Bigstep" via "HOL-Library.Code_Target_Numeral")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JinjaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### theory "HOL-Library.Code_Abstract_Nat"
### 0.062s elapsed time, 0.285s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.execute_Bigstep" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### theory "Draft.Auxiliary"
### 0.117s elapsed time, 0.488s cpu time, 0.027s GC time
Loading theory "Draft.Type" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.530s cpu time, 0.027s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JinjaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Code_Target_Int"
### 0.175s elapsed time, 0.722s cpu time, 0.027s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JinjaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Code_Target_Nat"
### 0.124s elapsed time, 0.479s cpu time, 0.027s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.execute_Bigstep")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Code_Target_Numeral"
### 0.137s elapsed time, 0.534s cpu time, 0.081s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness2")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.301s elapsed time, 1.188s cpu time, 0.081s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JinjaMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.261s elapsed time, 1.025s cpu time, 0.081s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "Draft.Type"
### 0.494s elapsed time, 1.954s cpu time, 0.198s GC time
Loading theory "Draft.Decl" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
consts
  prefixes :: "'a list => 'a list list"
### theory "Draft.Decl"
### 0.082s elapsed time, 0.312s cpu time, 0.092s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JinjaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.329s elapsed time, 1.290s cpu time, 0.209s GC time
Loading theory "Draft.TypeRel" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Proofs for inductive predicate(s) "widen"
consts
  stake :: "nat => 'a stream => 'a list"
  Proving monotonicity ...
consts
  sdrop :: "nat => 'a stream => 'a stream"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "Fields"
consts
  flat :: "'a list stream => 'a stream"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.179s elapsed time, 4.441s cpu time, 1.091s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg" via "Draft.Typing_Framework_1" via "Draft.Semilattices" via "Draft.Err" via "Draft.Semilat")
Found termination order: "size <*mlex*> {}"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Sublist"
### 1.721s elapsed time, 6.585s cpu time, 1.313s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JinjaMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.While_Combinator"
### 0.469s elapsed time, 1.844s cpu time, 0.223s GC time
Loading theory "Draft.Semilat" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg" via "Draft.Typing_Framework_1" via "Draft.Semilattices" via "Draft.Err")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.419s elapsed time, 5.406s cpu time, 1.104s GC time
Loading theory "Draft.Value" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Semilat"
### 0.294s elapsed time, 1.168s cpu time, 0.071s GC time
Loading theory "Draft.Err" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg" via "Draft.Typing_Framework_1" via "Draft.Semilattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.487s elapsed time, 1.914s cpu time, 0.235s GC time
Loading theory "Draft.Objects" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Objects"
### 0.173s elapsed time, 0.668s cpu time, 0.114s GC time
Loading theory "Draft.Exceptions" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr")
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
### theory "HOL-Library.BigO"
### 0.846s elapsed time, 3.331s cpu time, 0.349s GC time
Loading theory "Draft.JVMState" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
### theory "Draft.JVMState"
### 0.029s elapsed time, 0.116s cpu time, 0.000s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.Exceptions"
### 0.122s elapsed time, 0.472s cpu time, 0.064s GC time
Loading theory "Draft.Conform" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress")
### theory "HOL-Library.Tree"
### 2.314s elapsed time, 8.919s cpu time, 1.517s GC time
Loading theory "Draft.Expr" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep")
### Ambiguous input (line 26 of "$AFP/Jinja/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Err"
### 0.694s elapsed time, 2.715s cpu time, 0.342s GC time
Loading theory "Draft.State" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep")
### theory "Draft.State"
### 0.056s elapsed time, 0.211s cpu time, 0.067s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
### theory "Draft.Conform"
### 0.180s elapsed time, 0.704s cpu time, 0.067s GC time
Loading theory "Draft.Templates" (required by "Draft.JinjaMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.SystemClasses"
### 0.054s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence" via "Draft.WWellForm")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.274s cpu time, 0.000s GC time
Loading theory "Draft.Listn" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg" via "Draft.Typing_Framework_1" via "Draft.Semilattices")
consts
  coalesce :: "'a err list => 'a list err"
### theory "Draft.WellForm"
### 0.301s elapsed time, 1.170s cpu time, 0.208s GC time
Loading theory "Draft.PCompiler" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
### theory "Draft.Listn"
### 0.731s elapsed time, 2.722s cpu time, 1.397s GC time
Loading theory "Draft.Opt" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg" via "Draft.Typing_Framework_1" via "Draft.Semilattices")
### theory "Draft.PCompiler"
### 0.562s elapsed time, 2.067s cpu time, 1.250s GC time
Loading theory "Draft.Product" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg" via "Draft.Typing_Framework_1" via "Draft.Semilattices")
### theory "Draft.Opt"
### 0.138s elapsed time, 0.544s cpu time, 0.093s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JinjaMoreTemplates")
### theory "Draft.Product"
### 0.152s elapsed time, 0.588s cpu time, 0.199s GC time
Loading theory "Draft.Semilattices" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg" via "Draft.Typing_Framework_1")
### theory "Draft.Semilattices"
### 0.270s elapsed time, 1.078s cpu time, 0.067s GC time
Loading theory "Draft.SemiType" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.TF_JVM" via "Draft.EffectMono" via "Draft.Effect" via "Draft.JVM_SemiType")
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
### theory "Draft.JVMInstructions"
### 2.220s elapsed time, 8.400s cpu time, 3.228s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.JVMDefensive" via "Draft.JVMExec")
### theory "Draft.SemiType"
### 0.681s elapsed time, 2.509s cpu time, 1.373s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.JVMDefensive" via "Draft.JVMExec")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.047s elapsed time, 3.963s cpu time, 1.546s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.TF_JVM" via "Draft.EffectMono" via "Draft.Effect")
consts
  match_ex_table ::
    "(char list *
      char list *
      (char list * ty) list * (char list * ty list * ty * 'm) list) list
     => char list
        => nat
           => (nat * nat * char list * nat * nat) list
              => (nat * nat) option"
consts
  find_handler ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => nat
        => (nat
            => (char list * (char list * char list => val option)) option)
           => (val list * val list * char list * char list * nat) list
              => nat option *
                 (nat
                  => (char list *
                      (char list * char list => val option)) option) *
                 (val list * val list * char list * char list * nat) list"
### theory "Draft.JVMExceptions"
### 0.219s elapsed time, 0.867s cpu time, 0.072s GC time
Loading theory "Draft.Typing_Framework_1" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err" via "Draft.SemilatAlg")
### theory "Draft.Typing_Framework_1"
### 0.059s elapsed time, 0.231s cpu time, 0.043s GC time
Loading theory "Draft.SemilatAlg" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Typing_Framework_err")
### theory "Draft.JVM_SemiType"
### 0.297s elapsed time, 1.168s cpu time, 0.115s GC time
Loading theory "Draft.Effect" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.TF_JVM" via "Draft.EffectMono")
consts
  pluslussub :: "'a list => ('a => 'a => 'a) => 'a => 'a"
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
### theory "Draft.SemilatAlg"
### 0.149s elapsed time, 0.583s cpu time, 0.065s GC time
Loading theory "Draft.Kildall_1" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.Kildall_2")
consts
  merges :: "('s => 's => 's) => (nat * 's) list => 's list => 's list"
locale prog
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
locale jvm_method
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
### theory "Draft.Kildall_1"
### 0.081s elapsed time, 0.322s cpu time, 0.000s GC time
### theory "Draft.JVMExecInstr"
### 0.497s elapsed time, 1.962s cpu time, 0.179s GC time
Loading theory "Draft.Kildall_2" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV")
Loading theory "Draft.JVMExec" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.JVMDefensive")
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
consts
  propa ::
    "('s => 's => 's)
     => (nat * 's) list => 's list => nat set => 's list * nat set"
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (10 more)
### theory "Draft.Kildall_2"
### 0.196s elapsed time, 0.775s cpu time, 0.079s GC time
Loading theory "Draft.LBVSpec" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV" via "Draft.LBVCorrect")
consts
  merge ::
    "'s list
     => ('s => 's => 's)
        => ('s => 's => bool) => 's => nat => (nat * 's) list => 's => 's"
consts
  wtl_inst_list ::
    "'a list
     => 's list
        => ('s => 's => 's)
           => ('s => 's => bool)
              => 's => 's => (nat => 's => (nat * 's) list)
                             => nat => 's => 's"
locale lbv
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
  assumes "lbv A r f \<top> \<bottom>"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.LBVSpec"
### 0.437s elapsed time, 1.716s cpu time, 0.265s GC time
Loading theory "Draft.LBVComplete" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV")
locale lbvc
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and \<tau>s :: "'a list"
    and c :: "'a list"
  assumes "lbvc A r f \<top> \<bottom> step \<tau>s"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and "c == make_cert step \<tau>s \<bottom>"
### theory "Draft.JVMExec"
### 0.800s elapsed time, 3.154s cpu time, 0.423s GC time
Loading theory "Draft.JVMDefensive" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### theory "Draft.LBVComplete"
### 0.292s elapsed time, 1.151s cpu time, 0.151s GC time
Loading theory "Draft.JVMListExample" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMListExample"
### 0.399s elapsed time, 1.582s cpu time, 0.170s GC time
Loading theory "Draft.LBVCorrect" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV")
locale lbvs
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and s\<^sub>0 :: "'a"
    and c :: "'a list"
    and ins :: "'b list"
    and \<tau>s :: "'a list"
  assumes "lbvs A r f \<top> \<bottom> step c ins"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and
    "\<tau>s ==
     map (%pc. if c ! pc = \<bottom> then wtl (take pc ins) c 0 s\<^sub>0
               else c ! pc)
      [0..<length ins]"
Found termination order: "{}"
### theory "Draft.LBVCorrect"
### 0.195s elapsed time, 0.762s cpu time, 0.083s GC time
Loading theory "Draft.Typing_Framework_err" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.Abstract_BV")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Typing_Framework_err"
### 0.116s elapsed time, 0.466s cpu time, 0.000s GC time
Loading theory "Draft.Abstract_BV" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec")
consts
  check_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => bool"
Proofs for inductive predicate(s) "exec_1_dp"
  Proving monotonicity ...
### theory "Draft.Abstract_BV"
### 0.369s elapsed time, 1.455s cpu time, 0.176s GC time
Loading theory "Draft.Typing_Framework_2" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec")
### theory "Draft.JVMDefensive"
### 1.228s elapsed time, 4.858s cpu time, 0.502s GC time
Loading theory "List-Index.List_Index" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1" via "Draft.Hidden")
### theory "Draft.Typing_Framework_2"
### 0.038s elapsed time, 0.157s cpu time, 0.000s GC time
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "{}"
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
semilat (?A, ?r, ?f) =
(order ?r ?A &
 closed ?A ?f &
 (ALL x:?A. ALL y:?A. x <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. y <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. ALL z:?A. x <=_?r z & y <=_?r z --> x +_?f y <=_?r z))
semilat (?A, ?r, ?f) ==> Semilat ?A ?r ?f
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.393s elapsed time, 1.569s cpu time, 0.119s GC time
Loading theory "Draft.Hidden" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
### theory "Draft.Hidden"
### 0.073s elapsed time, 0.285s cpu time, 0.091s GC time
Found termination order: "{}"
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 5.328s elapsed time, 20.630s cpu time, 4.478s GC time
Loading theory "Draft.Examples" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.execute_Bigstep")
Loading theory "Draft.BigStep" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence")
### Ambiguous input (line 30 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" classL)
###   ("_tuple" ("_String" ("_position" ''L''))
###     ("_tuple_args" ("_position" Object)
###       ("_tuple_args"
###         ("_list"
###           ("_args"
###             ("_tuple" ("_String" ("_position" ''F''))
###               ("_tuple_arg" ("_position" Integer)))
###             ("_tuple" ("_String" ("_position" ''N''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" Class)
###                   ("_String" ("_position" ''L'')))))))
###         ("_tuple_arg"
###           ("_list"
###             ("_tuple" ("_String" ("_position" ''app''))
###               ("_tuple_args"
###                 ("_list"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L''))))
###                 ("_tuple_args" ("_position" Void)
###                   ("_tuple_args" ("_list" ("_String" ("_position" ''l'')))
###                     ("_tuple_arg"
###                       ("\<^const>Expr.exp.Cond"
###                         ("\<^const>Expr.exp.BinOp"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_position" Eq) ("_position" null))
###                         ("\<^const>Expr.exp.LAss"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l''))))
###                         ("\<^const>Expr.exp.Call"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_String" ("_position" ''app''))
###                           ("_list"
###                             ("_applC" ("_position" Var)
###                               ("_String" ("_position" ''l'')))))))))))))))))
### ("\<^const>Pure.eq" ("_position" classL)
###   ("_tuple" ("_String" ("_position" ''L''))
###     ("_tuple_args" ("_position" Object)
###       ("_tuple_args"
###         ("_list"
###           ("_args"
###             ("_tuple" ("_String" ("_position" ''F''))
###               ("_tuple_arg" ("_position" Integer)))
###             ("_tuple" ("_String" ("_position" ''N''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" Class)
###                   ("_String" ("_position" ''L'')))))))
###         ("_tuple_arg"
###           ("_list"
###             ("_tuple" ("_String" ("_position" ''app''))
###               ("_tuple_args"
###                 ("_list"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L''))))
###                 ("_tuple_args" ("_position" Void)
###                   ("_tuple_args" ("_list" ("_String" ("_position" ''l'')))
###                     ("_tuple_arg"
###                       ("\<^const>Expr.exp.Cond"
###                         ("\<^const>Expr.exp.BinOp"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_position" Eq) ("_position" null))
###                         ("\<^const>Expr.exp.FAss"
###                           ("_applC" ("_position" Var) ("_position" this))
###                           ("_String" ("_position" ''N''))
###                           ("_String" ("_position" ''L''))
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l''))))
###                         ("\<^const>Expr.exp.Call"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_String" ("_position" ''app''))
###                           ("_list"
###                             ("_applC" ("_position" Var)
###                               ("_String" ("_position" ''l'')))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/Jinja/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Null, Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 1))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 2))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 3))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 1), Addr (Nat 3)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 4))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 5))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 6))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 7))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 8))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 2), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 9))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 10))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 11))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 12))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 13))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 3), Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 14))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 15))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 16))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3), Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool true, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 7)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 8)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 9)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 10)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 11)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 12)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 18))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 19))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 20))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Addr (Nat 4), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool false, Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 13)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool true, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 7)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 8)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 9)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 10)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 11)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 12)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 15)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 22))))])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val it = SOME (NONE, (fn, [])):
   (Isabelle5702364.Generated_Code.nat option *
    ((Isabelle5702364.Generated_Code.nat ->
        (Isabelle5702364.Generated_Code.char list *
         (Isabelle5702364.Generated_Code.char list *
          Isabelle5702364.Generated_Code.char list
            -> Isabelle5702364.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5702364.Generated_Code.vala list *
      (Isabelle5702364.Generated_Code.vala list *
       (Isabelle5702364.Generated_Code.char list *
        (Isabelle5702364.Generated_Code.char list *
         Isabelle5702364.Generated_Code.nat)))
     )
     list)
   )
   option
val h = fn:
   Isabelle5702364.Generated_Code.nat ->
     (Isabelle5702364.Generated_Code.char list *
      (Isabelle5702364.Generated_Code.char list *
       Isabelle5702364.Generated_Code.char list
         -> Isabelle5702364.Generated_Code.vala option)
     )
     option
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
Loading theory "Draft.SmallStep" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence")
### Ambiguous input (line 14 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 42 of "$AFP/Jinja/J/Examples.thy") produces 256 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###               ("_String" ("_position" ''F''))
###               ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###               ("_String" ("_position" ''F''))
###               ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Jinja/J/Examples.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''C''))))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''C'')))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''C''))))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''C''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''C'')))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''C''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" testExpr6)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''I'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''I''))))
###     ("\<^const>Expr.exp.Call"
###       ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###       ("_String" ("_position" ''mult''))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 40)))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr6)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''I'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''I'')))
###     ("\<^const>Expr.exp.Call"
###       ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###       ("_String" ("_position" ''mult''))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 40)))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 80 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" mb_add)
###   ("\<^const>Expr.exp.Seq"
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###       ("\<^const>Expr.exp.BinOp"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###         ("_position" Add)
###         ("_applC" ("_position" Var) ("_String" ("_position" ''i'')))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))))
### ("\<^const>Pure.eq" ("_position" mb_add)
###   ("\<^const>Expr.exp.Seq"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" Var) ("_position" this))
###         ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.BinOp"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###         ("_position" Add)
###         ("_applC" ("_position" Var) ("_String" ("_position" ''i'')))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/Examples.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''temp''))
###     ("\<^const>Expr.exp.LAss" ("_position" Integer)
###       ("_applC" ("_position" Val)
###         ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc"
###             ("_applC" ("_position" Var) ("_position" this))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A'')))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''temp''))
###     ("_position" Integer)
###     ("_applC" ("_position" Val)
###       ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc"
###             ("_applC" ("_position" Var) ("_position" this))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A'')))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''temp''))
###     ("\<^const>Expr.exp.LAss" ("_position" Integer)
###       ("_applC" ("_position" Val)
###         ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.FAss"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''temp''))
###     ("_position" Integer)
###     ("_applC" ("_position" Val)
###       ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.FAss"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 101 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 105 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_arg" ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_arg" ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Jinja/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/Jinja/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Jinja/J/Examples.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A''))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A''))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" a))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" a))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Examples"
### 1.373s elapsed time, 5.422s cpu time, 0.410s GC time
Loading theory "Draft.WellType" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT")
### Ambiguous input (line 63 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ambiguous input (line 119 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
Proofs for inductive predicate(s) "redp", "redsp"
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 150 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 153 of "$AFP/Jinja/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 168 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.788s elapsed time, 3.105s cpu time, 0.312s GC time
Loading theory "Draft.Annotate" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### Ambiguous input (line 33 of "$AFP/Jinja/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" T) ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V))
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" T) ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("_applC" ("_position" Var) ("_position" V))
###         ("_applC" ("_position" Var) ("_position" this)))
###       ("_position" V) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Jinja/J/Annotate.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" T) ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###         ("_position" D) ("_position" e')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" T) ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###           ("_position" D))
###         ("_position" e')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" T) ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###           ("_applC" ("_position" Var) ("_position" this)))
###         ("_position" V) ("_position" D))
###       ("_position" e'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" T) ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###         ("_applC" ("_position" Var) ("_position" this)))
###       ("_position" V) ("_position" D) ("_position" e'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Jinja/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###         ("_position" e')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e') ("_applC" ("_position" Class) ("_position" C))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("\<^const>List.list.Nil"))
###       ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###         ("_position" e')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e') ("_applC" ("_position" Class) ("_position" C))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e'))
###       ("_position" F) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/Jinja/J/Annotate.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###               ("\<^const>List.list.Nil"))
###             ("_position" e2))
###           ("_position" e1'))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###             ("\<^const>List.list.Nil"))
###           ("_position" e2))
###         ("_position" e1'))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.FAss" ("_position" e1') ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.FAss" ("_position" e1') ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1') ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1') ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###             ("\<^const>List.list.Nil") ("_position" e2))
###           ("_position" e1'))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" T) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil") ("_position" e2))
###         ("_position" e1'))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Anno", "Annos"
  Proving monotonicity ...
### theory "Draft.Annotate"
### 0.303s elapsed time, 1.204s cpu time, 0.064s GC time
Loading theory "Draft.WellTypeRT" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress")
### Ambiguous input (line 69 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt", "WTrts"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h \<turnstile> [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h \<turnstile> [] [:] []
### Ambiguous input (line 136 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" T))
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e) ("_position" U))
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 143 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es\<^sub>1)
###               ("_position" Ts\<^sub>1))
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es\<^sub>2)
###               ("_position" Ts\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" es\<^sub>2)
###                 ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_applC" ("_position" Val) ("_position" v))
###       ("_position" T))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h \<turnstile> Val ?v : ?T
### Ignoring duplicate safe introduction (intro!)
### typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h \<turnstile> Val ?v : ?T
### Ambiguous input (line 167 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_applC" ("_position" Var) ("_position" v))
###       ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_applC" ("_position" Var) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/Jinja/J/WellTypeRT.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e\<^sub>2)
###               ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" T'))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" h) ("_position" e) ("_position" T'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###       ("_position" e))
###     ("\<^const>HOL.eq" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" h) ("_position" e) ("_position" T')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P,?E(?V |-> ?T),?h \<turnstile> ?e : ?T' ==>
### ?P,?E,?h \<turnstile> {?V:?T; ?e} : ?T'
### Ignoring duplicate safe introduction (intro!)
### ?P,?E(?V |-> ?T),?h \<turnstile> ?e : ?T' ==>
### ?P,?E,?h \<turnstile> {?V:?T; ?e} : ?T'
### theory "Draft.BigStep"
### 3.106s elapsed time, 12.267s cpu time, 0.903s GC time
Loading theory "Draft.DefAss" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress")
### Ambiguous input (line 72 of "$AFP/Jinja/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/Jinja/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<A> :: "'a exp => 'a set option"
  \<A>s :: "'a exp list => 'a set option"
### Ambiguous input (line 95 of "$AFP/Jinja/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "'a exp => 'a set option => bool"
  \<D>s :: "'a exp list => 'a set option => bool"
### theory "Draft.DefAss"
### 0.248s elapsed time, 0.971s cpu time, 0.079s GC time
Loading theory "Draft.J1" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm")
### Ambiguous input (line 25 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_vars)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_vars)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_vars :: "'a exp => nat"
  max_varss :: "'a exp list => nat"
### theory "Draft.WellTypeRT"
### 0.959s elapsed time, 3.775s cpu time, 0.195s GC time
Loading theory "Draft.execute_Bigstep" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### Ambiguous input (line 86 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_applC" ("_position" ls)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss" ("_position" i)
###                   ("_position" v)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_LUpdate" ("_position" ls)
###               ("_lupdbind" ("_position" i) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" ls'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/Jinja/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" ls\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_LUpdate" ("_position" ls\<^sub>1)
###                       ("_lupdbind" ("_position" i)
###                         ("_applC" ("_position" Addr) ("_position" a))))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_arg" ("_position" ls\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg" ("_position" ls\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" ls\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" ls\<^sub>1)
###                       ("_list"
###                         ("\<^const>Expr.exp.LAss" ("_position" i)
###                           ("_applC" ("_position" Addr) ("_position" a)))))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_arg" ("_position" ls\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg" ("_position" ls\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval\<^sub>1", "evals\<^sub>1"
Proofs for inductive predicate(s) "map_val"
  Proving monotonicity ...
  Proving monotonicity ...
Proofs for inductive predicate(s) "map_val2"
  Proving monotonicity ...
### theory "Draft.J1"
### 1.293s elapsed time, 5.118s cpu time, 0.359s GC time
Loading theory "Draft.execute_WellType" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### theory "Draft.SmallStep"
### 3.901s elapsed time, 15.404s cpu time, 1.043s GC time
Loading theory "Draft.Compiler2" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness2")
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
### Ambiguous input (line 21 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
consts
  compE\<^sub>2 :: "nat exp => instr list"
  compEs\<^sub>2 :: "nat exp list => instr list"
### Ambiguous input (line 62 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compxE\<^sub>2 ::
    "nat exp => nat => nat => (nat * nat * char list * nat * nat) list"
  compxEs\<^sub>2 ::
    "nat exp list => nat => nat => (nat * nat * char list * nat * nat) list"
### Ambiguous input (line 90 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_stack :: "nat exp => nat"
  max_stacks :: "nat exp list => nat"
### theory "Draft.Compiler2"
### 0.625s elapsed time, 2.470s cpu time, 0.168s GC time
Loading theory "Draft.Correctness2" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler")
Found termination order: "{}"
### Ambiguous input (line 206 of "$AFP/Jinja/Compiler/Correctness2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###       ("_position" xt) ("_position" I) ("_position" d))
###     ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###       ("_position" M) ("_position" xt) ("_position" I) ("_position" d))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("\<^const>Correctness2.before"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I))
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M) ("_position" xt))
###     ("_position" I) ("_position" d)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("_position" xt)
###     ("\<^const>Correctness2.before" ("_position" I)
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I)))
###     ("_position" d)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/Jinja/Compiler/Correctness2.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" xt\<^sub>1)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>2)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))))
###           ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.before"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2)))
###         ("_position" I) ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>HOL.conj"
###           ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###             ("_position" M) ("_position" xt\<^sub>2)
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("_position" d))
###           ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2))
###             ("_position" I) ("_position" d)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>1) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2)))
###           ("_position" I) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
locale eff
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 9.248s elapsed time, 36.419s cpu time, 3.233s GC time
Loading theory "Draft.WWellForm" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.Equivalence")
### theory "Draft.WWellForm"
### 0.213s elapsed time, 0.827s cpu time, 0.120s GC time
Loading theory "Draft.Equivalence" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe" via "Draft.Progress")
### theory "Draft.execute_WellType"
### 2.171s elapsed time, 8.535s cpu time, 0.746s GC time
Loading theory "Draft.JWellForm" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe")
Found termination order: "{}"
### theory "Draft.Correctness2"
### 1.601s elapsed time, 6.281s cpu time, 0.619s GC time
Loading theory "Draft.BVSpec" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.TF_JVM")
### theory "Draft.BVSpec"
### 0.116s elapsed time, 0.455s cpu time, 0.040s GC time
Loading theory "Draft.BVConform" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe")
### Ambiguous input (line 152 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 177 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" unit)
###     ("_tuple"
###       ("_MapUpd" ("_position" h\<^sub>2)
###         ("_maplet" ("_position" a)
###           ("_tuple" ("_position" C)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))))
###       ("_tuple_arg" ("_position" l\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" unit)
###     ("_tuple"
###       ("_MapUpd" ("_position" h\<^sub>2)
###         ("_maplet" ("_position" a)
###           ("_tuple" ("_position" C)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))))
###       ("_tuple_arg" ("_position" l\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 15 of "$AFP/Jinja/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T)
###           ("_pattern" ("_position" pns) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>HOL.conj"
###                 ("\<^const>WellType.WT" ("_position" P)
###                   ("_Map"
###                     ("_Maplets"
###                       ("_maplet" ("_position" this)
###                         ("_applC" ("_position" Class) ("_position" C)))
###                       ("_maplets" ("_position" pns) ("_position" Ts))))
###                   ("_position" body) ("_position" T'))
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T)
###           ("_pattern" ("_position" pns) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body)
###                 ("\<^const>HOL.conj" ("_position" T')
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T)))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Jinja/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_args" ("_position" pns)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" this)
###           ("_applC" ("_position" set) ("_position" pns)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>WellType.WT" ("_position" P)
###               ("_Map"
###                 ("_Maplets"
###                   ("_maplet" ("_position" this)
###                     ("_applC" ("_position" Class) ("_position" C)))
###                   ("_maplets" ("_position" pns) ("_position" Ts))))
###               ("_position" body)
###               ("\<^const>HOL.conj" ("_position" T')
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T)))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_Finset" ("_position" this))
###                   ("_applC" ("_position" set) ("_position" pns)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_args" ("_position" pns)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" this)
###           ("_applC" ("_position" set) ("_position" pns)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>HOL.conj"
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body) ("_position" T'))
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_Finset" ("_position" this))
###                   ("_applC" ("_position" set) ("_position" pns)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JWellForm"
### 0.406s elapsed time, 1.598s cpu time, 0.139s GC time
Loading theory "Draft.J1WellForm" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1")
### Ambiguous input (line 389 of "$AFP/Jinja/J/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 426 of "$AFP/Jinja/J/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 431 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 443 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 521 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###       ("_position" V) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_arg"
###         ("_applC"
###           ("_constrain" ("_position" l\<^sub>2) ("_type_name" locals))
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" l\<^sub>1) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###       ("_position" V) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_arg"
###         ("_Update"
###           ("_constrain" ("_position" l\<^sub>2) ("_type_name" locals))
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" l\<^sub>1) ("_position" V))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  conf_fs ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => (nat => (char list * (char list * char list => val option)) option)
        => (char list => char list => (ty list * ty err list) option list)
           => char list
              => nat
                 => ty => (val list *
                           val list * char list * char list * nat) list
                          => bool"
### Ambiguous input (line 628 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("\<^const>Expr.exp.LAss" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("_updbind" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT\<^sub>1", "WTs\<^sub>1"
### theory "Draft.BVConform"
### 0.515s elapsed time, 2.028s cpu time, 0.164s GC time
Loading theory "Draft.BVSpecTypeSafe" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVNoTypeError")
  Proving monotonicity ...
### Ambiguous input (line 54 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ambiguous input (line 353 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Equivalence"
### 1.168s elapsed time, 4.589s cpu time, 0.401s GC time
Loading theory "Draft.Progress" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeSafe")
### Ambiguous input (line 477 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 479 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 568 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 580 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 632 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 658 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 661 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 724 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 727 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 801 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 817 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 819 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 116 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 865 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 881 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 896 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 182 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 927 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/Jinja/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/Jinja/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<B> :: "nat exp => nat => bool"
  \<B>s :: "nat exp list => nat => bool"
### Ambiguous input (line 65 of "$AFP/Jinja/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T\<^sub>1))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>1)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplet" ("_position" V) ("_position" T)))
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T\<^sub>1))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>1)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplet" ("_position" V) ("_position" T)))
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 943 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 197 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T) ("_position" body))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Class) ("_position" C))
###               ("_position" Ts))
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" Ts)
###         ("_patterns" ("_position" T) ("_position" body))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/Jinja/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_arg" ("_position" body))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###         ("_position" body)
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Option.option.Some"
###             ("\<^const>Set_Interval.ord_class.atMost"
###               ("_applC" ("_position" size) ("_position" Ts))))))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" size) ("_position" Ts))
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" T)
###               ("_tuple_arg" ("_position" body))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###           ("_position" body) ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Option.option.Some"
###             ("\<^const>Set_Interval.ord_class.atMost"
###               ("_applC" ("_position" size) ("_position" Ts))))))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" body)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" size) ("_position" Ts))
###             ("\<^const>Groups.one_class.one")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 961 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1WellForm"
### 1.124s elapsed time, 4.427s cpu time, 0.354s GC time
Loading theory "Draft.EffectMono" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec" via "Draft.TF_JVM")
### Ambiguous input (line 999 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt'", "WTrts'"
### Ambiguous input (line 1031 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 1066 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.EffectMono"
### 0.096s elapsed time, 0.373s cpu time, 0.033s GC time
Loading theory "Draft.TF_JVM" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.BVExec")
### Ambiguous input (line 1086 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVSpecTypeSafe"
### 0.897s elapsed time, 3.526s cpu time, 0.279s GC time
Loading theory "Draft.BVNoTypeError" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### Ambiguous input (line 71 of "$AFP/Jinja/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Jinja/J/Progress.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e\<^sub>2)
###               ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 226 of "$AFP/Jinja/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Jinja/J/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_applC" ("_position" Val) ("_position" v))
###       ("_position" T))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 251 of "$AFP/Jinja/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/Jinja/J/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_applC" ("_position" Var) ("_position" v))
###       ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_applC" ("_position" Var) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BVNoTypeError.cnf
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and
    \<Phi> ::
      "char list => char list => (ty list * ty err list) option list"
    and
    \<sigma> ::
      "nat option *
       (nat => (char list * (char list * char list => val option)) option) *
       (val list * val list * char list * char list * nat) list"
  assumes "cnf P \<Phi> \<sigma>"
locale start
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and C :: "char list"
    and M :: "char list"
    and
    \<sigma> ::
      "(nat option *
        (nat
         => (char list * (char list * char list => val option)) option) *
        (val list *
         val list * char list * char list * nat) list) type_error"
    and T :: "ty"
    and
    b :: "nat * nat * instr list * (nat * nat * char list * nat * nat) list"
  assumes "start P C M T b"
  defines "\<sigma> == Normal (start_state P C M)"
### theory "Draft.BVNoTypeError"
### 0.358s elapsed time, 1.417s cpu time, 0.110s GC time
Loading theory "Draft.Compiler1" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1")
### theory "Draft.Progress"
### 1.097s elapsed time, 4.319s cpu time, 0.266s GC time
Loading theory "Draft.TypeSafe" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
locale JVM_sl
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
locale start_context
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and
    p :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list
          => char list
             => char list *
                ty list *
                ty *
                nat *
                nat * instr list * (nat * nat * char list * nat * nat) list
                => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P Ts p C"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               OK (Class C) #
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
### Rewrite rule not in simpset:
### is_relevant_entry ?P1 ?i1 ?pc1 ?e1 ==
### let (f, t, C, h, d) = ?e1 in is_relevant_class ?i1 ?P1 C & ?pc1 : {f..<t}
### theory "Draft.TF_JVM"
### 0.594s elapsed time, 2.347s cpu time, 0.202s GC time
Loading theory "Draft.LBVJVM" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### Ambiguous input (line 219 of "$AFP/Jinja/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>sconf" ("_position" P) ("_position" E) ("_position" s))
###   ("_Let"
###     ("_bind" ("_pattern" ("_position" h) ("_position" l)) ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.hconf" ("_position" P) ("_position" h))
###       ("\<^const>Conform.lconf" ("_position" P) ("_position" h)
###         ("_position" l) ("_position" E)))))
### ("\<^const>Pure.eq"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E) ("_position" s))
###   ("_Let"
###     ("_bind" ("_pattern" ("_position" h) ("_position" l)) ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.hconf" ("_position" P) ("_position" h))
###       ("\<^const>Conform.lconf" ("_position" P) ("_position" h)
###         ("_position" l) ("_position" E)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Jinja/Compiler/Compiler1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e)))
###       ("_position" F) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###             ("_position" D))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e))))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Jinja/Compiler/Compiler1.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                 ("_position" F) ("_position" D))
###               ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D))
###             ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D) ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 229 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" es') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" es') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" es') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" es') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 239 of "$AFP/Jinja/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" E)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Vs))
###           ("_applC" ("_position" length) ("_position" Ts))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" vs))
###             ("_applC" ("_position" length) ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h)
###           ("_applC" ("_position" blocks)
###             ("_tuple" ("_position" Vs)
###               ("_tuple_args" ("_position" Ts)
###                 ("_tuple_args" ("_position" vs)
###                   ("_tuple_arg" ("_position" e))))))
###           ("_position" T))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###           ("_MapUpd" ("_position" E)
###             ("_maplets" ("_position" Vs) ("_position" Ts)))
###           ("_position" h) ("_position" e)
###           ("\<^const>HOL.conj" ("_position" T)
###             ("\<^const>HOL.Ex_binder" ("_position" Ts')
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("\<^const>Objects.typeof_h" ("_position" h))
###                       ("_position" vs)))
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" Some) ("_position" Ts'))))
###                 ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                   ("_position" Ts))))))))))
### ("\<^const>Pure.all_binder" ("_position" E)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Vs))
###           ("_applC" ("_position" length) ("_position" Ts))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" vs))
###             ("_applC" ("_position" length) ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h)
###           ("_applC" ("_position" blocks)
###             ("_tuple" ("_position" Vs)
###               ("_tuple_args" ("_position" Ts)
###                 ("_tuple_args" ("_position" vs)
###                   ("_tuple_arg" ("_position" e))))))
###           ("_position" T))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplets" ("_position" Vs) ("_position" Ts)))
###             ("_position" h) ("_position" e) ("_position" T))
###           ("\<^const>HOL.Ex_binder" ("_position" Ts')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("\<^const>Objects.typeof_h" ("_position" h))
###                     ("_position" vs)))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" Some) ("_position" Ts'))))
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compE\<^sub>1 :: "char list list => char list exp => nat exp"
  compEs\<^sub>1 :: "char list list => char list exp list => nat exp list"
### Ambiguous input (line 251 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e) ("_position" T)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" e') ("_position" T'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e) ("_position" T)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" e') ("_position" T'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e) ("_position" T)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" e')
###             ("\<^const>HOL.conj" ("_position" T')
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e) ("_position" T)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" e')
###             ("\<^const>HOL.conj" ("_position" T')
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" es')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es) ("_position" Ts)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" es') ("_position" Ts'))
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" es')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es) ("_position" Ts)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" es') ("_position" Ts'))
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" es')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es) ("_position" Ts)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" es')
###             ("\<^const>HOL.conj" ("_position" Ts')
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" es')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es) ("_position" Ts)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" es')
###             ("\<^const>HOL.conj" ("_position" Ts')
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "new"
### No equation for constructor "Cast"
### No equation for constructor "BinOp"
### No equation for constructor "Var"
### No equation for constructor "LAss"
### No equation for constructor "FAcc"
### No equation for constructor "FAss"
### No equation for constructor "Call"
### No equation for constructor "Block"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "TryCatch"
consts
  fin\<^sub>1 :: "char list exp => nat exp"
### theory "Draft.Compiler1"
### 0.445s elapsed time, 1.746s cpu time, 0.190s GC time
Loading theory "Draft.BVExec" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### Ambiguous input (line 580 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###           ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###           ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 585 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" es') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###               ("_position" Ts)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s')) ("_position" es')
###         ("\<^const>HOL.conj" ("_position" Ts')
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###             ("_position" Ts)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" es') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###               ("_position" Ts)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s')) ("_position" es')
###         ("\<^const>HOL.conj" ("_position" Ts')
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###             ("_position" Ts)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" es') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###               ("_position" Ts)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s')) ("_position" es')
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###           ("_position" Ts))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" es') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s)) ("_position" es)
###               ("_position" Ts)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s')) ("_position" es')
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###           ("_position" Ts))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 623 of "$AFP/Jinja/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###             ("_position" T)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###             ("_position" T')))))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###             ("_position" T)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###             ("_position" T')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 642 of "$AFP/Jinja/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" T)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###               ("_position" s)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" T)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###               ("_position" s)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" T)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###               ("_position" s)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" T)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###               ("_position" s)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/Jinja/J/TypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###           ("_position" T'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s')) ("_position" e')
###           ("_position" T'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 663 of "$AFP/Jinja/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>wf_config" ("_position" P) ("_position" E) ("_position" s)
###     ("_position" e) ("_position" T))
###   ("\<^const>HOL.conj"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###       ("_position" T))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>wf_config" ("_position" P) ("_position" E) ("_position" s)
###     ("_position" e) ("_position" T))
###   ("\<^const>HOL.conj"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_applC" ("_position" hp) ("_position" s)) ("_position" e)
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 698 of "$AFP/Jinja/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.LBVJVM"
### 0.389s elapsed time, 1.533s cpu time, 0.168s GC time
Loading theory "Draft.Correctness1" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp" via "Draft.Compiler")
### theory "Draft.TypeSafe"
### 0.553s elapsed time, 2.183s cpu time, 0.168s GC time
### Ambiguous input (line 23 of "$AFP/Jinja/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  unmod :: "nat exp => nat => bool"
  unmods :: "nat exp list => nat => bool"
locale start_context
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and
    p :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list
          => char list
             => char list *
                ty list *
                ty *
                nat *
                nat * instr list * (nat * nat * char list * nat * nat) list
                => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P Ts p C"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               OK (Class C) #
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
### Ambiguous input (line 57 of "$AFP/Jinja/Compiler/Correctness1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_applC" ("_position" ys)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" last_index)
###                     ("_cargs" ("_position" xs) ("_position" x)))
###                   ("_position" y))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_LUpdate" ("_position" ys)
###               ("_lupdbind"
###                 ("_applC" ("_position" last_index)
###                   ("_cargs" ("_position" xs) ("_position" x)))
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Jinja/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_applC" ("_position" l')
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_Update" ("_position" l')
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVExec"
### 0.521s elapsed time, 2.056s cpu time, 0.149s GC time
Loading theory "Draft.BVExample" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### theory "Draft.Correctness1"
### 0.417s elapsed time, 1.627s cpu time, 0.187s GC time
Loading theory "Draft.Compiler" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja" via "Draft.TypeComp")
### theory "Draft.Compiler"
### 1.246s elapsed time, 4.654s cpu time, 3.635s GC time
Loading theory "Draft.TypeComp" (required by "Draft.JinjaMoreTemplates" via "Draft.Jinja")
### Ignoring duplicate rewrite rule:
### eff ?i1 ?P1 ?pc1 ?et1 ?t1 ==
### case ?t1 of None => []
### | \<lfloor>\<tau>\<rfloor> =>
###     norm_eff ?i1 ?P1 ?pc1 \<tau> @ xcpt_eff ?i1 ?P1 ?pc1 \<tau> ?et1
### Ignoring duplicate rewrite rule:
### norm_eff ?i1 ?P1 ?pc1 ?\<tau>1 ==
### map (%pc'. (pc', \<lfloor>eff\<^sub>i (?i1, ?P1, ?\<tau>1)\<rfloor>))
###  (succs ?i1 ?\<tau>1 ?pc1)
locale TC0
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * nat exp) list) list"
    and mxl :: "nat"
### Ambiguous input (line 458 of "$AFP/Jinja/BV/BVExample.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" E)
###     ("\<^const>BVExample.Phi")
###     ("_applC" ("_position" start_state)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" test_name) ("_position" makelist_name))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" E) ("\<^const>BVExample.Phi")
###     ("_applC" ("_position" start_state)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" test_name) ("_position" makelist_name))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale TC1
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * nat exp) list) list"
    and mxl :: "nat"
### Ambiguous input (line 99 of "$AFP/Jinja/Compiler/TypeComp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compT)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" ST)
###             ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D) ("_position" e\<^sub>2))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" ST\<^sub>1)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" ty)
###               ("_cargs" ("_position" E) ("_position" e\<^sub>1)))
###             ("_position" ST)))
###         ("_binds"
###           ("_bind" ("_position" A\<^sub>1)
###             ("\<^const>DefAss.hyperUn" ("_position" A)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))
###           ("_bind" ("_position" A\<^sub>2)
###             ("\<^const>DefAss.hyperUn" ("_position" A\<^sub>1)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compT)
###           ("_cargs" ("_position" E)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" ST) ("_position" e\<^sub>1)))))
###         ("\<^const>List.append"
###           ("_list"
###             ("_applC" ("_position" after)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A)
###                   ("_cargs" ("_position" ST) ("_position" e\<^sub>1))))))
###           ("\<^const>List.append"
###             ("_applC" ("_position" compT)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A\<^sub>1)
###                   ("_cargs" ("_position" ST\<^sub>1)
###                     ("_position" e\<^sub>2)))))
###             ("\<^const>List.append"
###               ("_list"
###                 ("_applC" ("_position" after)
###                   ("_cargs" ("_position" E)
###                     ("_cargs" ("_position" A\<^sub>1)
###                       ("_cargs" ("_position" ST\<^sub>1)
###                         ("_position" e\<^sub>2))))))
###               ("_list"
###                 ("_applC" ("_position" ty\<^sub>i')
###                   ("_cargs" ("_position" ST)
###                     ("_cargs" ("_position" E)
###                       ("_position" A\<^sub>2))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compT)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" ST)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                 ("_position" F) ("_position" D))
###               ("_position" e\<^sub>2))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" ST\<^sub>1)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" ty)
###               ("_cargs" ("_position" E) ("_position" e\<^sub>1)))
###             ("_position" ST)))
###         ("_binds"
###           ("_bind" ("_position" A\<^sub>1)
###             ("\<^const>DefAss.hyperUn" ("_position" A)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))
###           ("_bind" ("_position" A\<^sub>2)
###             ("\<^const>DefAss.hyperUn" ("_position" A\<^sub>1)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compT)
###           ("_cargs" ("_position" E)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" ST) ("_position" e\<^sub>1)))))
###         ("\<^const>List.append"
###           ("_list"
###             ("_applC" ("_position" after)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A)
###                   ("_cargs" ("_position" ST) ("_position" e\<^sub>1))))))
###           ("\<^const>List.append"
###             ("_applC" ("_position" compT)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A\<^sub>1)
###                   ("_cargs" ("_position" ST\<^sub>1)
###                     ("_position" e\<^sub>2)))))
###             ("\<^const>List.append"
###               ("_list"
###                 ("_applC" ("_position" after)
###                   ("_cargs" ("_position" E)
###                     ("_cargs" ("_position" A\<^sub>1)
###                       ("_cargs" ("_position" ST\<^sub>1)
###                         ("_position" e\<^sub>2))))))
###               ("_list"
###                 ("_applC" ("_position" ty\<^sub>i')
###                   ("_cargs" ("_position" ST)
###                     ("_cargs" ("_position" E)
###                       ("_position" A\<^sub>2))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Code generator: dropping subsumed code equation
### app\<^sub>i (Getfield ?F ?C, ?P, ?pc, ?mxs, ?T\<^sub>r, ?T # ?ST, ?LT) ==
### EX T\<^sub>f.
###    ?P \<turnstile> ?C sees ?F:T\<^sub>f in ?C & subtype ?P ?T (Class ?C)
### Code generator: dropping subsumed code equation
### app\<^sub>i
###  (Putfield ?F ?C, ?P, ?pc, ?mxs, ?T\<^sub>r, ?T\<^sub>1 # ?T\<^sub>2 # ?ST,
###   ?LT) ==
### EX T\<^sub>f.
###    ?P \<turnstile> ?C sees ?F:T\<^sub>f in ?C &
###    subtype ?P ?T\<^sub>2 (Class ?C) & subtype ?P ?T\<^sub>1 T\<^sub>f
### Code generator: dropping subsumed code equation
### app\<^sub>i (Invoke ?M ?n, ?P, ?pc, ?mxs, ?T\<^sub>r, ?ST, ?LT) ==
### ?n < length ?ST &
### (?ST ! ?n ~= NT -->
###  (EX C D Ts T m.
###      ?ST ! ?n = Class C &
###      ?P \<turnstile> C sees ?M: Ts\<rightarrow>T = m in D &
###      ?P \<turnstile> rev (take ?n ?ST) [\<le>] Ts))
### Code generator: dropping subsumed code equation
### SemiType.sup ?P ?T\<^sub>1 ?T\<^sub>2 ==
### if is_refT ?T\<^sub>1 & is_refT ?T\<^sub>2
### then OK (if ?T\<^sub>1 = NT then ?T\<^sub>2
###          else if ?T\<^sub>2 = NT then ?T\<^sub>1
###               else Class
###                     (while (%z. (the_Class ?T\<^sub>1, z) ~: (subcls1 ?P)^*)
###                       (super ?P) (the_Class ?T\<^sub>2)))
### else if ?T\<^sub>1 = ?T\<^sub>2 then OK ?T\<^sub>1 else Err
### theory "Draft.BVExample"
### 1.791s elapsed time, 6.806s cpu time, 3.841s GC time
consts
  compT ::
    "ty list
     => nat set option
        => ty list => nat exp => (ty list * ty err list) option list"
  compTs ::
    "ty list
     => nat set option
        => ty list => nat exp list => (ty list * ty err list) option list"
locale TC2
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * nat exp) list) list"
    and mxl :: "nat"
    and T\<^sub>r :: "ty"
    and mxs :: "nat"
### Rewrite rule not in simpset:
### %u. ?f1 (?g1 (fst u)) (snd u) == %a. case a of (x, xa) => ?f1 (?g1 x) xa
locale TC2
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * nat exp) list) list"
    and mxl :: "nat"
    and T\<^sub>r :: "ty"
    and mxs :: "nat"
### theory "Draft.TypeComp"
### 1.616s elapsed time, 6.378s cpu time, 0.370s GC time
"find_handler"
  :: "(char list *
       char list *
       (char list * ty) list *
       (char list *
        ty list *
        ty *
        nat *
        nat *
        instr list * (nat * nat * char list * nat * nat) list) list) list
      => nat
         => (nat
             => (char list * (char list * char list => val option)) option)
            => (val list * val list * char list * char list * nat) list
               => nat option *
                  (nat
                   => (char list *
                       (char list * char list => val option)) option) *
                  (val list * val list * char list * char list * nat) list"
*** Undefined fact: "wti" (line 476 of "$AFP/Jinja/Compiler/TypeComp.thy")
*** At command "thm" (line 476 of "$AFP/Jinja/Compiler/TypeComp.thy")
val it = (): unit
val it = (): unit
### theory "Draft.execute_Bigstep"
### 18.418s elapsed time, 48.936s cpu time, 6.712s GC time
Loading theory "Draft.Jinja" (required by "Draft.JinjaMoreTemplates")
### theory "Draft.Jinja"
### 1.996s elapsed time, 7.659s cpu time, 3.985s GC time
Loading theory "Draft.JinjaMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.JinjaMoreTemplates"
### 14.756s elapsed time, 47.576s cpu time, 44.143s GC time
val h = fn:
   Isabelle6986268.Generated_Code.nat ->
     (Isabelle6986268.Generated_Code.char list *
      (Isabelle6986268.Generated_Code.char list *
       Isabelle6986268.Generated_Code.char list
         -> Isabelle6986268.Generated_Code.vala option)
     )
     option
val fs1 = fn:
   Isabelle6986268.Generated_Code.char list *
   Isabelle6986268.Generated_Code.char list
     -> Isabelle6986268.Generated_Code.vala option
val fs2 = fn:
   Isabelle6986268.Generated_Code.char list *
   Isabelle6986268.Generated_Code.char list
     -> Isabelle6986268.Generated_Code.vala option
val fs3 = fn:
   Isabelle6986268.Generated_Code.char list *
   Isabelle6986268.Generated_Code.char list
     -> Isabelle6986268.Generated_Code.vala option
val fs4 = fn:
   Isabelle6986268.Generated_Code.char list *
   Isabelle6986268.Generated_Code.char list
     -> Isabelle6986268.Generated_Code.vala option
val F = [Chara (false, true, true, false, false, false, true, false)]:
   Isabelle6986268.Generated_Code.char list
val L = [Chara (false, false, true, true, false, false, true, false)]:
   Isabelle6986268.Generated_Code.char list
val N = [Chara (false, true, true, true, false, false, true, false)]:
   Isabelle6986268.Generated_Code.char list
val it = (): unit
val h = fn:
   Isabelle6986694.Generated_Code.nat ->
     (Isabelle6986694.Generated_Code.char list *
      (Isabelle6986694.Generated_Code.char list *
       Isabelle6986694.Generated_Code.char list
         -> Isabelle6986694.Generated_Code.vala option)
     )
     option
val l = fn:
   Isabelle6986694.Generated_Code.char list ->
     Isabelle6986694.Generated_Code.vala option
val fs1 = fn:
   Isabelle6986694.Generated_Code.char list *
   Isabelle6986694.Generated_Code.char list
     -> Isabelle6986694.Generated_Code.vala option
val fs2 = fn:
   Isabelle6986694.Generated_Code.char list *
   Isabelle6986694.Generated_Code.char list
     -> Isabelle6986694.Generated_Code.vala option
val i =
   [Chara (true, false, false, true, false, true, true, false),
    Chara (false, true, true, true, false, true, true, false),
    Chara (false, false, true, false, true, true, true, false)]:
   Isabelle6986694.Generated_Code.char list
val t =
   [Chara (false, false, true, false, true, true, true, false),
    Chara (true, false, true, false, false, true, true, false),
    Chara (true, true, false, false, true, true, true, false),
    Chara (false, false, true, false, true, true, true, false)]:
   Isabelle6986694.Generated_Code.char list
val A = [Chara (true, false, false, false, false, false, true, false)]:
   Isabelle6986694.Generated_Code.char list
val it = (): unit
val l = fn:
   Isabelle6985932.Generated_Code.char list ->
     Isabelle6985932.Generated_Code.vala option
val h = fn:
   Isabelle6985932.Generated_Code.nat ->
     (Isabelle6985932.Generated_Code.char list *
      (Isabelle6985932.Generated_Code.char list *
       Isabelle6985932.Generated_Code.char list
         -> Isabelle6985932.Generated_Code.vala option)
     )
     option
val c = [Chara (true, true, false, false, false, false, true, false)]:
   Isabelle6985932.Generated_Code.char list
val fs = fn:
   Isabelle6985932.Generated_Code.char list *
   Isabelle6985932.Generated_Code.char list
     -> Isabelle6985932.Generated_Code.vala option
val obj =
   [Chara (true, true, true, true, false, false, true, false),
    Chara (false, true, false, false, false, true, true, false),
    Chara (false, true, false, true, false, true, true, false),
    Chara (true, false, true, false, false, true, true, false),
    Chara (true, true, false, false, false, true, true, false),
    Chara (false, false, true, false, true, true, true, false)]:
   Isabelle6985932.Generated_Code.char list
val i = Int_of_integer 42: Isabelle6985932.Generated_Code.inta
val it = (): unit
*** Undefined fact: "wti" (line 476 of "$AFP/Jinja/Compiler/TypeComp.thy")
*** At command "thm" (line 476 of "$AFP/Jinja/Compiler/TypeComp.thy")
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
Exception- TOPLEVEL_ERROR raised
