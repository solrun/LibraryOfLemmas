Loading theory "Draft.Auxiliary" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Auxiliary"
### 0.126s elapsed time, 0.517s cpu time, 0.052s GC time
Loading theory "Draft.Type" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.609s cpu time, 0.052s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.322s elapsed time, 1.292s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.346s elapsed time, 1.353s cpu time, 0.112s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EquivalenceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.516s elapsed time, 2.040s cpu time, 0.164s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EquivalenceMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Type"
### 0.472s elapsed time, 1.842s cpu time, 0.194s GC time
Loading theory "Draft.Decl" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.067s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.128s elapsed time, 4.294s cpu time, 0.974s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.421s elapsed time, 5.176s cpu time, 1.061s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.474s elapsed time, 5.053s cpu time, 1.050s GC time
Loading theory "Draft.Value" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.414s elapsed time, 0.871s cpu time, 0.080s GC time
Loading theory "Draft.Objects" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Objects"
### 0.152s elapsed time, 0.336s cpu time, 0.069s GC time
Loading theory "Draft.Exceptions" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Expr")
### theory "Draft.Exceptions"
### 0.089s elapsed time, 0.179s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep")
Loading theory "Draft.State" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.BigStep")
Loading theory "Draft.SystemClasses" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
### theory "HOL-Library.Tree"
### 2.494s elapsed time, 7.852s cpu time, 1.393s GC time
Loading theory "Draft.Templates" (required by "Draft.EquivalenceMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.State"
### 0.047s elapsed time, 0.186s cpu time, 0.000s GC time
### theory "Draft.SystemClasses"
### 0.094s elapsed time, 0.338s cpu time, 0.070s GC time
Loading theory "Draft.WellForm" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence" via "Draft.WWellForm")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.119s elapsed time, 0.392s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EquivalenceMoreTemplates")
### theory "Draft.WellForm"
### 0.317s elapsed time, 0.955s cpu time, 0.071s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.675s elapsed time, 1.674s cpu time, 0.178s GC time
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 4.331s elapsed time, 7.472s cpu time, 2.759s GC time
Loading theory "Draft.BigStep" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence")
Loading theory "Draft.SmallStep" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence")
Loading theory "Draft.WWellForm" (required by "Draft.EquivalenceMoreTemplates" via "Draft.Equivalence")
### Ambiguous input (line 14 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 83 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WWellForm"
### 0.198s elapsed time, 0.641s cpu time, 0.061s GC time
### Ambiguous input (line 88 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/Jinja/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
Proofs for inductive predicate(s) "eval", "evals"
### Ambiguous input (line 113 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 101 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 105 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_arg" ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_arg" ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Jinja/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" a))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" a))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/Jinja/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### Ambiguous input (line 204 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 2.399s elapsed time, 5.613s cpu time, 0.414s GC time
### theory "Draft.SmallStep"
### 3.239s elapsed time, 6.560s cpu time, 0.551s GC time
Loading theory "Draft.Equivalence" (required by "Draft.EquivalenceMoreTemplates")
### Ambiguous input (line 152 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 177 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" unit)
###     ("_tuple"
###       ("_MapUpd" ("_position" h\<^sub>2)
###         ("_maplet" ("_position" a)
###           ("_tuple" ("_position" C)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))))
###       ("_tuple_arg" ("_position" l\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" unit)
###     ("_tuple"
###       ("_MapUpd" ("_position" h\<^sub>2)
###         ("_maplet" ("_position" a)
###           ("_tuple" ("_position" C)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))))
###       ("_tuple_arg" ("_position" l\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/Jinja/J/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l') ("_position" v)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_arg"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 426 of "$AFP/Jinja/J/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))))
###       ("_position" e')
###       ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 431 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 443 of "$AFP/Jinja/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 521 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###       ("_position" V) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_arg"
###         ("_applC"
###           ("_constrain" ("_position" l\<^sub>2) ("_type_name" locals))
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" l\<^sub>1) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###       ("_position" V) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_arg"
###         ("_Update"
###           ("_constrain" ("_position" l\<^sub>2) ("_type_name" locals))
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" l\<^sub>1) ("_position" V))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 628 of "$AFP/Jinja/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("\<^const>Expr.exp.LAss" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("_updbind" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Equivalence"
### 0.875s elapsed time, 0.936s cpu time, 0.083s GC time
Loading theory "Draft.EquivalenceMoreTemplates"
val templateLemmas =
   [("Equivalence.override_on_upd_lemma",
     "(override_on ?f (?g(?a |-> ?b)) ?A)(?a := ?g ?a) =
      override_on ?f ?g (insert ?a ?A)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2),
                   template_app (template_hole 1, template_var 1))),
               template_var 0)),
           template_var 2),
         template_app (template_var 3, template_var 2)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Equivalence.eval_closed_lcl_unchanged",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<Rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle>;
         fv ?e = {} |]
      ==> ?l' = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 5),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 2, template_var 5), template_hole 1)],
       template_equation (template_var 0, template_var 3))),
    ("Equivalence.unfold_while",
     "?P \<turnstile> \<langle>while (?b) ?c,?s\<rangle> \<Rightarrow>
                      \<langle>?e',?s'\<rangle> =
      ?P \<turnstile> \<langle>if (?b) (?c;; while (?b) ?c) else unit,
                       ?s\<rangle> \<Rightarrow>
                      \<langle>?e',?s'\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3))),
                 template_app (template_hole 1, template_hole 0))),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Equivalence.Red_dom_lcl",
     "?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l')\<rangle> ==>
      dom ?l' <= dom ?l Un fv ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_app
                       (template_app (template_hole 5, template_var 5),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 4)),
           template_app (template_hole 0, template_var 6))))),
    ("Equivalence.big_by_small",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                         \<langle>?e',?s'\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                          \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)))
           ))),
    ("Equivalence.bigs_by_smalls",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,?s\<rangle> [\<Rightarrow>]
                         \<langle>?es',?s'\<rangle> |]
      ==> ?P \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                          \<langle>?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)))
           ))),
    ("Equivalence.eval_notfree_unchanged",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<Rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle>;
         ?V ~: fv ?e |]
      ==> ?l' ?V = ?l ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 6))
                )
            )],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 4, template_var 0)))),
    ("Equivalence.big_iff_small",
     "wwf_J_prog ?P ==>
      ?P \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                      \<langle>?e',?s'\<rangle> =
      (?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                       \<langle>?e',?s'\<rangle> &
       final ?e')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 4)))),
           template_app (template_hole 0, template_var 1))))),
    ("Equivalence.ThrowReds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>throw ?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 0, template_var 4)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 0, template_var 2)),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Equivalence.Red_fv",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle> |]
      ==> fv ?e' <= fv ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_var 0)))),
              template_app (template_hole 2, template_var 6))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 5)))),
    ("Equivalence.ThrowRedsThrow",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>throw ?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 2)),
                    template_var 1))),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 4)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_var 1))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Equivalence.list_eval_Throw",
     "?P \<turnstile> \<langle>throw ?x,?s\<rangle> \<Rightarrow>
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>map Val ?vs @ throw ?x # ?es',
                       ?s\<rangle> [\<Rightarrow>]
                      \<langle>map Val ?vs @ ?e' # ?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app (template_hole 5, template_var 5)),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 6),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 5, template_var 5)),
                       template_var 0))),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Equivalence.CastReds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                      \<langle>Cast ?C ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.LAssReds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?V:=?e,?s\<rangle> \<rightarrow>*
                      \<langle>?V:=?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.SeqReds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e;; ?e\<^sub>2,?s\<rangle> \<rightarrow>*
                      \<langle>?e';; ?e\<^sub>2,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.ListReds1",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e # ?es,?s\<rangle> [\<rightarrow>]*
                      \<langle>?e' # ?es,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 5),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0)),
                   template_var 2))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Equivalence.WhileRedsThrow",
     "?P \<turnstile> \<langle>?b,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>while (?b) ?c,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.CastRedsNull",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>null,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                      \<langle>null,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3)),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 4)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.CastRedsThrow",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.LAssRedsThrow",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?V:=?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.SeqRedsThrow",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e;; ?e\<^sub>2,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Equivalence.small_by_big",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle>;
         final ?e' |]
      ==> ?P \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                          \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 4)))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.CondRedsThrow",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 4)),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.FAccRedsThrow",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e\<bullet>?F{?D},?s\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 4)),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.BinOpRedsThrow1",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 4)),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.CallRedsThrowObj",
     "?P \<turnstile> \<langle>?e,?s0.0\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s\<^sub>1\<rangle> ==>
      ?P \<turnstile> \<langle>?e\<bullet>?M(?es),
                       ?s0.0\<rangle> \<rightarrow>*
                      \<langle>throw ?a,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 4)),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.WhileFReds",
     "?P \<turnstile> \<langle>?b,?s\<rangle> \<rightarrow>*
                      \<langle>false,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>while (?b) ?c,?s\<rangle> \<rightarrow>*
                      \<langle>unit,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 2))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 0)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 0)),
                   template_var 2))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))
           ))),
    ("Equivalence.BinOp1Reds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>?e' \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                       ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1),
                       template_var 0)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.CallRedsObj",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e\<bullet>?M(?es),?s\<rangle> \<rightarrow>*
                      \<langle>?e'\<bullet>?M(?es),?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1),
                       template_var 0)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.CondReds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>if (?e') ?e\<^sub>1 else ?e\<^sub>2,
                       ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1),
                       template_var 0)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.FAccReds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e\<bullet>?F{?D},?s\<rangle> \<rightarrow>*
                      \<langle>?e'\<bullet>?F{?D},?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1),
                       template_var 0)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Equivalence.ListReds2",
     "?P \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                      \<langle>?es',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>Val ?v # ?es,?s\<rangle> [\<rightarrow>]*
                      \<langle>Val ?v # ?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 0)),
                         template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 0)),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))
           ))),
    ("Equivalence.ThrowRedsNull",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>null,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>throw ?e,?s\<rangle> \<rightarrow>*
                      \<langle>THROW NullPointer,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6)),
                    template_var 1))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 3, template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0))))),
                   template_var 1))),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)))
           ))),
    ("Equivalence.TryRedsVal",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>Val ?v,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>try ?e catch(?C ?V) ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>Val ?v,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 5)),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 7),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 5)),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Equivalence.FAssRedsThrow1",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e\<bullet>?F{?D} := ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>throw ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 5)),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 7),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 5)),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Equivalence.Reds_dom_lcl",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l')\<rangle> |]
      ==> dom ?l' <= dom ?l Un fv ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 5),
                      template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 6)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 3)),
           template_app (template_hole 0, template_var 5))))),
    ("Equivalence.extend_1_eval",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>
                         \<langle>?e'',?s''\<rangle>;
         ?P \<turnstile> \<langle>?e'',?s''\<rangle> \<Rightarrow>
                         \<langle>?e',?s'\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                          \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_app (template_hole 1, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.extend_1_evals",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,?t\<rangle> [\<rightarrow>]
                         \<langle>?es'',?t''\<rangle>;
         ?P \<turnstile> \<langle>?es'',?t''\<rangle> [\<Rightarrow>]
                         \<langle>?es',?t'\<rangle> |]
      ==> ?P \<turnstile> \<langle>?es,?t\<rangle> [\<Rightarrow>]
                          \<langle>?es',?t'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_app (template_hole 1, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.BinOp2Reds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>Val ?v \<guillemotleft>?bop\<guillemotright> ?e,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>Val ?v \<guillemotleft>?bop\<guillemotright> ?e',
                       ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0, template_var 1)),
                           template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 1)),
                         template_var 0),
                       template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)))
           ))),
    ("Equivalence.FAssReds1",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e\<bullet>?F{?D} := ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>?e'\<bullet>?F{?D} := ?e\<^sub>2,
                       ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 7),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Equivalence.TryReds",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>try ?e catch(?C ?V) ?e\<^sub>2,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>try ?e' catch(?C ?V) ?e\<^sub>2,
                       ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 7),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Equivalence.CallRedsParams",
     "?P \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                      \<langle>?es',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>Val ?v\<bullet>?M(?es),
                       ?s\<rangle> \<rightarrow>*
                      \<langle>Val ?v\<bullet>?M(?es'),?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 1)),
                           template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 1)),
                         template_var 0),
                       template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Equivalence.FAccRedsNull",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>null,?s'\<rangle> ==>
      ?P \<turnstile> \<langle>?e\<bullet>?F{?D},?s\<rangle> \<rightarrow>*
                      \<langle>THROW NullPointer,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7)),
                    template_var 3))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 5),
                           template_var 1),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0))))),
                   template_var 3))),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 2)))
           ))),
    ("Equivalence.extend_eval",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e'',?s''\<rangle>;
         ?P \<turnstile> \<langle>?e'',?s''\<rangle> \<Rightarrow>
                         \<langle>?e',?s'\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                          \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.extend_evals",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                         \<langle>?es'',?s''\<rangle>;
         ?P \<turnstile> \<langle>?es'',?s''\<rangle> [\<Rightarrow>]
                         \<langle>?es',?s'\<rangle> |]
      ==> ?P \<turnstile> \<langle>?es,?s\<rangle> [\<Rightarrow>]
                          \<langle>?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.FAssReds2",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ?P \<turnstile> \<langle>Val ?v\<bullet>?F{?D} := ?e,
                       ?s\<rangle> \<rightarrow>*
                      \<langle>Val ?v\<bullet>?F{?D} := ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 1,
                               template_app
                                (template_hole 0, template_var 2)),
                             template_var 1),
                           template_var 0),
                         template_var 7)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0, template_var 2)),
                           template_var 1),
                         template_var 0),
                       template_var 5)),
                   template_var 4))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)))
           ))),
    ("Equivalence.LAssRedsVal",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>Val ?v,(?h', ?l')\<rangle> ==>
      ?P \<turnstile> \<langle>?V:=?e,?s\<rangle> \<rightarrow>*
                      \<langle>unit,(?h', ?l'(?V |-> ?v))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_var 4)),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 2)),
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 0),
                       template_app (template_hole 0, template_var 4)))))),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)))
           ))),
    ("Equivalence.eval_restrict_lcl",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<Rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle>;
         fv ?e <= ?W |]
      ==> ?P \<turnstile> \<langle>?e,(?h, ?l |` ?W)\<rangle> \<Rightarrow>
                          \<langle>?e',(?h', ?l' |` ?W)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 6),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 7),
                   template_var 6),
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0))),
               template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Equivalence.SeqReds2",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>?e\<^sub>2',?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e\<^sub>1;; ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>?e\<^sub>2',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 5)),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 2)),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Equivalence.blocksFinal",
     "[| length ?Vs = length ?Ts; length ?vs = length ?Ts; final ?e |]
      ==> ?P \<turnstile> \<langle>blocks (?Vs, ?Ts, ?vs, ?e),
                           (?h, ?l)\<rangle> \<rightarrow>*
                          \<langle>?e,(?h, ?l)\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 6),
          template_app (template_hole 12, template_var 5)),
        template_equation
         (template_app (template_hole 11, template_var 4),
          template_app (template_hole 12, template_var 5)),
        template_predicate
         (template_app (template_hole 10, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 6),
                           template_app
                            (template_app (template_hole 4, template_var 5),
                             template_app
                              (template_app
                                (template_hole 3, template_var 4),
                               template_var 3))))),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Equivalence.CondReds2F",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>false,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>?e',?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_var 5))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 0),
                         template_var 3)),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 4)))
           ))),
    ("Equivalence.CondReds2T",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>true,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>?e',?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_var 5))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 3),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 4)))
           ))),
    ("Equivalence.ListRedsVal",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?es,?s\<^sub>1\<rangle> [\<rightarrow>]*
                         \<langle>?es',?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e # ?es,
                           ?s\<^sub>0\<rangle> [\<rightarrow>]*
                          \<langle>Val ?v # ?es',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 5)),
                    template_var 4))),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 2)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 8, template_var 5)),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Equivalence.BinOpRedsThrow2",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>throw ?e,?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>throw ?e,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 6)),
                    template_var 5))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 1, template_var 2)),
                    template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 8),
                           template_var 0),
                         template_var 3)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 1, template_var 2)),
                   template_var 1))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 4)))
           ))),
    ("Equivalence.WhileTRedsThrow",
     "[| ?P \<turnstile> \<langle>?b,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>true,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?c,?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>throw ?e,?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>while (?b) ?c,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>throw ?e,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 4))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 1, template_var 1)),
                    template_var 0))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 2)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 1, template_var 1)),
                   template_var 0))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)))
           ))),
    ("Equivalence.FAssRedsThrow2",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>throw ?e,?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?D} := ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>throw ?e,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 7)),
                    template_var 6))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 1, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 9),
                             template_var 1),
                           template_var 0),
                         template_var 4)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 1, template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 5)))
           ))),
    ("Equivalence.CallRedsNull",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>null,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?es,?s\<^sub>1\<rangle> [\<rightarrow>]*
                         \<langle>map Val ?vs,?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e\<bullet>?M(?es),
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>THROW NullPointer,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app (template_hole 14, template_hole 13)),
                    template_var 5))),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_hole 14),
                        template_var 2)),
                    template_var 1))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 7),
                           template_var 0),
                         template_var 3)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 14,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0))))),
                   template_var 1))),
             template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 4)))
           ))),
    ("Equivalence.FAssRedsNull",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>null,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>Val ?v,?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?D} := ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>THROW NullPointer,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7)),
                    template_var 6))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 4, template_var 8),
                             template_var 1),
                           template_var 0),
                         template_var 4)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0))))),
                   template_var 2))),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 5)))
           ))),
    ("Equivalence.blocksEval",
     "[| length ?ps = length ?Ts; length ?ps = length ?vs;
         ?P \<turnstile> \<langle>blocks (?ps, ?Ts, ?vs, ?e),
                          (?h, ?l)\<rangle> \<Rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle> |]
      ==> EX l''.
             ?P \<turnstile> \<langle>?e,
                              (?h, ?l(?ps [|->] ?vs))\<rangle> \<Rightarrow>
                             \<langle>?e',(?h', l'')\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 9),
          template_app (template_hole 9, template_var 8)),
        template_equation
         (template_app (template_hole 10, template_var 9),
          template_app (template_hole 8, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 6),
                    template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_app
                         (template_app (template_hole 4, template_var 8),
                          template_app
                           (template_app (template_hole 3, template_var 7),
                            template_var 5))))),
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Equivalence.CallRedsThrowParams",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?es,?s\<^sub>1\<rangle> [\<rightarrow>]*
                         \<langle>map Val ?vs\<^sub>1 @
                                  throw ?a # ?es\<^sub>2,
                          ?s\<^sub>2\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e\<bullet>?M(?es),
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>throw ?a,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 10),
                      template_var 9)),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_var 8)),
                    template_var 7))),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 5),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app
                             (template_hole 5, template_hole 12),
                            template_var 4)),
                        template_app
                         (template_app
                           (template_hole 4,
                            template_app (template_hole 3, template_var 3)),
                          template_var 2))),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 6)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 10),
                           template_var 0),
                         template_var 5)),
                     template_var 9)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 3, template_var 3)),
                   template_var 1))),
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 6)))
           ))),
    ("Equivalence.FAccRedsVal",
     "[| ?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>addr ?a,?s'\<rangle>;
         hp ?s' ?a = \<lfloor>(?C, ?fs)\<rfloor>;
         ?fs (?F, ?D) = \<lfloor>?v\<rfloor> |]
      ==> ?P \<turnstile> \<langle>?e\<bullet>?F{?D},
                           ?s\<rangle> \<rightarrow>*
                          \<langle>Val ?v,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_hole 11,
                        template_app (template_hole 10, template_var 7))),
                    template_var 6))),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 6), template_var 7),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3))),
        template_equation
         (template_app
           (template_var 3,
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 9),
                           template_var 2),
                         template_var 1)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_var 0)),
                   template_var 6))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 5)))
           ))),
    ("Equivalence.CastRedsAddr",
     "[| ?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>addr ?a,?s'\<rangle>;
         hp ?s' ?a = \<lfloor>(?D, ?fs)\<rfloor>;
         ?P \<turnstile> ?D \<preceq>\<^sup>* ?C |]
      ==> ?P \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                          \<langle>addr ?a,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_hole 12,
                        template_app (template_hole 11, template_var 5))),
                    template_var 4))),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 3)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 5),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 7)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_var 5))),
                   template_var 4))),
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 3)))
           ))),
    ("Equivalence.BlockRedsFinal",
     "[| ?P \<turnstile> \<langle>?e\<^sub>0,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>?e\<^sub>2,
                          (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         final ?e\<^sub>2;
         ?s\<^sub>0 = (?h\<^sub>0, ?l\<^sub>0(?V := None)) |]
      ==> ?P \<turnstile> \<langle>{?V:?T; ?e\<^sub>0},
                           (?h\<^sub>0, ?l\<^sub>0)\<rangle> \<rightarrow>*
                          \<langle>?e\<^sub>2,
                           (?h\<^sub>2, ?l\<^sub>2
                            (?V := ?l\<^sub>0 ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app (template_hole 8, template_var 7),
                    template_app
                     (template_app (template_hole 7, template_var 6),
                      template_var 5)))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)))
            ),
        template_predicate (template_app (template_hole 4, template_var 7)),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_hole 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 0),
                         template_var 9)),
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 8, template_var 7),
                   template_app
                    (template_app (template_hole 7, template_var 6),
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 5),
                         template_var 1),
                       template_app (template_var 2, template_var 1)))))),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 4)))
           ))),
    ("Equivalence.InitBlockRedsFinal",
     "[| ?P \<turnstile> \<langle>?e,
                          (?h, ?l(?V |-> ?v))\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l')\<rangle>;
         final ?e' |]
      ==> ?P \<turnstile> \<langle>{?V:?T; ?V:=Val ?v;; ?e},
                           (?h, ?l)\<rangle> \<rightarrow>*
                          \<langle>?e',(?h', ?l'(?V := ?l ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 9),
                      template_app
                       (template_app (template_hole 9, template_var 8),
                        template_app
                         (template_app
                           (template_app (template_hole 8, template_var 7),
                            template_var 6),
                          template_app
                           (template_hole 7, template_var 5))))),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 6),
                           template_var 0),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 6),
                               template_app
                                (template_hole 0, template_var 5))),
                           template_var 9))),
                     template_app
                      (template_app (template_hole 9, template_var 8),
                       template_var 7))),
                 template_app
                  (template_app (template_hole 10, template_var 4),
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 8, template_var 2),
                         template_var 6),
                       template_app (template_var 7, template_var 6)))))),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)))
           ))),
    ("Equivalence.CastRedsFail",
     "[| ?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>addr ?a,?s'\<rangle>;
         hp ?s' ?a = \<lfloor>(?D, ?fs)\<rfloor>;
         (?D, ?C) ~: (subcls1 ?P)^* |]
      ==> ?P \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                          \<langle>THROW ClassCast,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_hole 16,
                        template_app (template_hole 15, template_var 5))),
                    template_var 4))),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 3)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_var 5),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 0)),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_app
                      (template_hole 17,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 7)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 16,
                         template_app
                          (template_hole 15,
                           template_app
                            (template_hole 1, template_hole 0))))),
                   template_var 4))),
             template_app
              (template_hole 14,
               template_app (template_hole 13, template_var 3)))
           ))),
    ("Equivalence.BinOpRedsVal",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>Val ?v\<^sub>2,?s\<^sub>2\<rangle>;
         binop (?bop, ?v\<^sub>1, ?v\<^sub>2) = \<lfloor>?v\<rfloor> |]
      ==> ?P \<turnstile> \<langle>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>Val ?v,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 7)),
                    template_var 6))),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 5)))
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 7),
                template_var 3))),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 9),
                           template_var 1),
                         template_var 4)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0)),
                   template_var 2))),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 5)))
           ))),
    ("Equivalence.WhileTReds",
     "[| ?P \<turnstile> \<langle>?b,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>true,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?c,?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>Val ?v\<^sub>1,?s\<^sub>2\<rangle>;
         ?P \<turnstile> \<langle>while (?b) ?c,
                          ?s\<^sub>2\<rangle> \<rightarrow>*
                         \<langle>?e,?s\<^sub>3\<rangle> |]
      ==> ?P \<turnstile> \<langle>while (?b) ?c,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>?e,?s\<^sub>3\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_var 6))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 0, template_var 8),
                          template_var 4)),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 8),
                         template_var 4)),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 5)))
           ))),
    ("Equivalence.TryRedsFail",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?a,(?h, ?l)\<rangle>;
         ?h ?a = \<lfloor>(?D, ?fs)\<rfloor>; (?D, ?C) ~: (subcls1 ?P)^* |]
      ==> ?P \<turnstile> \<langle>try ?e\<^sub>1 catch(?C ?V) ?e\<^sub>2,
                           ?s\<rangle> \<rightarrow>*
                          \<langle>Throw ?a,(?h, ?l)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_var 10),
                      template_var 9)),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_hole 14,
                        template_app
                         (template_hole 13,
                          template_app
                           (template_hole 12, template_var 8)))),
                    template_app
                     (template_app (template_hole 11, template_var 7),
                      template_var 6)))),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)))
            ),
        template_equation
         (template_app (template_var 7, template_var 8),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 2)),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 5)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 0, template_var 10),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 9)),
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_hole 14,
                       template_app
                        (template_hole 13,
                         template_app (template_hole 12, template_var 8)))),
                   template_app
                    (template_app (template_hole 11, template_var 7),
                     template_var 6)))),
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 5)))
           ))),
    ("Equivalence.InitBlockReds",
     "?P \<turnstile> \<langle>?e,
                       (?h, ?l(?V |-> ?v))\<rangle> \<rightarrow>*
                      \<langle>?e',(?h', ?l')\<rangle> ==>
      ?P \<turnstile> \<langle>{?V:?T; ?V:=Val ?v;; ?e},
                       (?h, ?l)\<rangle> \<rightarrow>*
                      \<langle>{?V:?T; ?V:=Val (the (?l' ?V));; ?e'},
                       (?h', ?l'(?V := ?l ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 9),
                      template_app
                       (template_app (template_hole 9, template_var 8),
                        template_app
                         (template_app
                           (template_app (template_hole 8, template_var 7),
                            template_var 6),
                          template_app
                           (template_hole 7, template_var 5))))),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 6),
                           template_var 0),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_var 6),
                               template_app
                                (template_hole 1, template_var 5))),
                           template_var 9))),
                     template_app
                      (template_app (template_hole 9, template_var 8),
                       template_var 7))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 6),
                         template_var 0),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 6),
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 0,
                                 template_app
                                  (template_var 2, template_var 6))))),
                         template_var 4))),
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 8, template_var 2),
                         template_var 6),
                       template_app (template_var 7, template_var 6)))))),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)))
           ))),
    ("Equivalence.FAssRedsVal",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>addr ?a,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          ?s\<^sub>1\<rangle> \<rightarrow>*
                         \<langle>Val ?v,(?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         \<lfloor>(?C, ?fs)\<rfloor> = ?h\<^sub>2 ?a |]
      ==> ?P \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?D} := ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>unit,
                           (?h\<^sub>2(?a |-> (?C, ?fs((?F, ?D) |-> ?v))),
                            ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 12),
                      template_var 11)),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 10))),
                    template_var 9))),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 7),
                      template_var 9)),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_var 6)),
                    template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4)))),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 8)))
            ),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)),
          template_app (template_var 5, template_var 10))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 5, template_var 12),
                             template_var 1),
                           template_var 0),
                         template_var 7)),
                     template_var 11)),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app (template_hole 13, template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 5),
                           template_var 10),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 3),
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 2, template_var 2),
                                 template_app
                                  (template_app
                                    (template_hole 1, template_var 1),
                                   template_var 0)),
                               template_app
                                (template_hole 0, template_var 6)))))),
                     template_var 4)))),
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 8)))
           ))),
    ("Equivalence.blocksRedsFinal",
     "[| length ?Vs = length ?Ts; length ?vs = length ?Ts; distinct ?Vs;
         ?P \<turnstile> \<langle>?e,
                          (?h, ?l(?Vs [|->] ?vs))\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l')\<rangle>;
         final ?e'; ?l'' = override_on ?l' ?l (set ?Vs) |]
      ==> ?P \<turnstile> \<langle>blocks (?Vs, ?Ts, ?vs, ?e),
                           (?h, ?l)\<rangle> \<rightarrow>*
                          \<langle>?e',(?h', ?l'')\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 10),
          template_app (template_hole 17, template_var 9)),
        template_equation
         (template_app (template_hole 16, template_var 8),
          template_app (template_hole 17, template_var 9)),
        template_predicate
         (template_app (template_hole 15, template_var 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 7),
                      template_app
                       (template_app (template_hole 11, template_var 6),
                        template_app
                         (template_app
                           (template_app (template_hole 10, template_var 5),
                            template_var 10),
                          template_var 8)))),
                  template_app
                   (template_app (template_hole 12, template_var 4),
                    template_app
                     (template_app (template_hole 11, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 5),
            template_app (template_hole 4, template_var 10)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 10),
                           template_app
                            (template_app (template_hole 1, template_var 9),
                             template_app
                              (template_app
                                (template_hole 0, template_var 8),
                               template_var 7))))),
                     template_app
                      (template_app (template_hole 11, template_var 6),
                       template_var 5))),
                 template_app
                  (template_app (template_hole 12, template_var 4),
                   template_app
                    (template_app (template_hole 11, template_var 3),
                     template_var 0)))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 1)))
           ))),
    ("Equivalence.blocksReds",
     "[| length ?Vs = length ?Ts; length ?vs = length ?Ts; distinct ?Vs;
         ?P \<turnstile> \<langle>?e,
                          (?h, ?l(?Vs [|->] ?vs))\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l')\<rangle> |]
      ==> ?P \<turnstile> \<langle>blocks (?Vs, ?Ts, ?vs, ?e),
                           (?h, ?l)\<rangle> \<rightarrow>*
                          \<langle>blocks
                                    (?Vs, ?Ts, map (the o ?l') ?Vs, ?e'),
                           (?h', override_on ?l' ?l (set ?Vs))\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 9),
          template_app (template_hole 18, template_var 8)),
        template_equation
         (template_app (template_hole 17, template_var 7),
          template_app (template_hole 18, template_var 8)),
        template_predicate
         (template_app (template_hole 16, template_var 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 6),
                      template_app
                       (template_app (template_hole 12, template_var 5),
                        template_app
                         (template_app
                           (template_app (template_hole 11, template_var 4),
                            template_var 9),
                          template_var 7)))),
                  template_app
                   (template_app (template_hole 13, template_var 3),
                    template_app
                     (template_app (template_hole 12, template_var 2),
                      template_var 1)))),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_var 9),
                           template_app
                            (template_app (template_hole 6, template_var 8),
                             template_app
                              (template_app
                                (template_hole 5, template_var 7),
                               template_var 6))))),
                     template_app
                      (template_app (template_hole 12, template_var 5),
                       template_var 4))),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 9),
                         template_app
                          (template_app (template_hole 6, template_var 8),
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_hole 4,
                                   template_app
                                    (template_app
(template_hole 3, template_hole 2),
                                     template_var 1)),
                                 template_var 9)),
                             template_var 3))))),
                   template_app
                    (template_app (template_hole 12, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 4),
                       template_app (template_hole 0, template_var 9)))))),
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 0)))
           ))),
    ("Equivalence.InitBlockReds_aux",
     "?P \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                      \<langle>?e',?s'\<rangle> ==>
      ALL h l h' l' v.
         ?s = (h, l(?V |-> v)) -->
         ?s' = (h', l') -->
         ?P \<turnstile> \<langle>{?V:?T; ?V:=Val v;; ?e},
                          (h, l)\<rangle> \<rightarrow>*
                         \<langle>{?V:?T; ?V:=Val (the (l' ?V));; ?e'},
                          (h', l'(?V := l ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 15, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 2)))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Equivalence.TryCatchRedsFinal",
     "[| ?P \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Throw ?a,
                          (?h\<^sub>1, ?l\<^sub>1)\<rangle>;
         ?h\<^sub>1 ?a = \<lfloor>(?D, ?fs)\<rfloor>;
         ?P \<turnstile> ?D \<preceq>\<^sup>* ?C;
         ?P \<turnstile> \<langle>?e\<^sub>2,
                          (?h\<^sub>1, ?l\<^sub>1(?V |->
                           Addr ?a))\<rangle> \<rightarrow>*
                         \<langle>?e\<^sub>2',
                          (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         final ?e\<^sub>2' |]
      ==> ?P \<turnstile> \<langle>try ?e\<^sub>1 catch(?C ?V) ?e\<^sub>2,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>?e\<^sub>2',
                           (?h\<^sub>2, ?l\<^sub>2
                            (?V := ?l\<^sub>1 ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_var 13),
                      template_var 12)),
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_hole 16,
                        template_app
                         (template_hole 15,
                          template_app
                           (template_hole 14, template_var 11)))),
                    template_app
                     (template_app (template_hole 13, template_var 10),
                      template_var 9)))),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 8)))
            ),
        template_equation
         (template_app (template_var 10, template_var 11),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 7),
              template_var 6))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 5)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_var 4),
                      template_app
                       (template_app (template_hole 13, template_var 10),
                        template_app
                         (template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 3),
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 14, template_var 11)))))),
                  template_app
                   (template_app (template_hole 17, template_var 2),
                    template_app
                     (template_app (template_hole 13, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 8)))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_app
                      (template_hole 17,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 0, template_var 13),
                             template_var 5),
                           template_var 3),
                         template_var 4)),
                     template_var 12)),
                 template_app
                  (template_app (template_hole 17, template_var 2),
                   template_app
                    (template_app (template_hole 13, template_var 1),
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 3),
                       template_app (template_var 9, template_var 3)))))),
             template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 8)))
           ))),
    ("Equivalence.CallRedsFinal",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>addr ?a,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?es,?s\<^sub>1\<rangle> [\<rightarrow>]*
                         \<langle>map Val ?vs,
                          (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         ?h\<^sub>2 ?a = \<lfloor>(?C, ?fs)\<rfloor>;
         ?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = (?pns,
                     ?body) in ?D;
         length ?vs = length ?pns;
         ?l\<^sub>2' = [this |-> Addr ?a, ?pns [|->] ?vs];
         ?P \<turnstile> \<langle>?body,
                          (?h\<^sub>2, ?l\<^sub>2')\<rangle> \<rightarrow>*
                         \<langle>?ef,(?h\<^sub>3, ?l\<^sub>3)\<rangle>;
         final ?ef |]
      ==> ?P \<turnstile> \<langle>?e\<bullet>?M(?es),
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>?ef,(?h\<^sub>3, ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 31, template_hole 30),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_hole 28,
                    template_app
                     (template_app (template_hole 27, template_var 19),
                      template_var 18)),
                  template_app
                   (template_app
                     (template_hole 27,
                      template_app
                       (template_hole 26,
                        template_app (template_hole 25, template_var 17))),
                    template_var 16))),
              template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 20)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app
                   (template_hole 21,
                    template_app
                     (template_app (template_hole 20, template_var 15),
                      template_var 16)),
                  template_app
                   (template_app
                     (template_hole 20,
                      template_app
                       (template_app (template_hole 19, template_hole 26),
                        template_var 14)),
                    template_app
                     (template_app (template_hole 18, template_var 13),
                      template_var 12)))),
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 20)))
            ),
        template_equation
         (template_app (template_var 13, template_var 17),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, template_var 11),
              template_var 10))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 12, template_var 20),
                        template_var 11),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 5)),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 9, template_var 14),
          template_app (template_hole 8, template_var 6)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, t_empty),
                    template_hole 3),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 25, template_var 17)))),
              template_var 6),
            template_var 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_hole 28,
                    template_app
                     (template_app (template_hole 27, template_var 5),
                      template_app
                       (template_app (template_hole 18, template_var 13),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 27, template_var 2),
                    template_app
                     (template_app (template_hole 18, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 20)))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 29,
               template_app
                (template_app
                  (template_hole 28,
                   template_app
                    (template_app
                      (template_hole 27,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 19),
                           template_var 9),
                         template_var 15)),
                     template_var 18)),
                 template_app
                  (template_app (template_hole 27, template_var 2),
                   template_app
                    (template_app (template_hole 18, template_var 1),
                     template_var 12)))),
             template_app
              (template_hole 24,
               template_app (template_hole 23, template_var 20)))
           )))]:
   (string * thm * template) list
### theory "Draft.EquivalenceMoreTemplates"
### 0.520s elapsed time, 0.750s cpu time, 0.129s GC time
val it = (): unit
